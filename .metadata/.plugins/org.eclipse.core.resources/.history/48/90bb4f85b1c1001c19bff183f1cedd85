#include "main.h"

int extract_command(command_t *cmd);
void process_command(command_t *cmd);

void menu_task(void* parameters)
{
	while(1)
	{

	}
}

void led_task(void* parameters)
{
	while(1)
	{

	}
}

void rtc_task(void* parameters)
{
	while(1)
	{

	}
}

void print_task(void* parameters)
{
	while(1)
	{

	}
}

void command_task(void* parameters)
{
	BaseType_t status;
	command_t cmd;

	while(1)
	{
		/* Wait indefinitely for a notification */
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
		if (status == pdTRUE)
		{
			process_command(&cmd);
		}

		/* Process the user data (command) stored in input data queue */

		/* Notify the command to relevant task */
	}
}

void process_command(command_t *cmd)
{
	extract_command(cmd);

	switch(current_state)
	{
		case sMainMenu:
			xTaskNotify(handle_menu_task, (uint32_t)cmd, eSetValueWithOverwrite);
			break;
		case sLedEffect:
			xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
			break;
		case sRtcMenu:
		case sRtcDateConfig:
		case sRtcTimeConfig:
		case sRtcReport:
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
			break;
	}
}

int extract_command(command_t *cmd)
{
	uint8_t item;
	BaseType_t status;

	/* Returns if there are no messages in the queue */
	status = uxQueueMessagesWaiting(q_data);
	if (!status) return -1;

	uint8_t i = 0;
	do
	{
		status = xQueueReceive(q_data, &item, 0);
		if (status == pdTRUE)	cmd->payload[i++] = item;
	}while(item != '\n');
	cmd->payload[i-1] = '\0';
	cmd->length = i - 1;

	return 0;
}
