
008Queue_n_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08008570  08008570  00018570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089f0  080089f0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080089f0  080089f0  000189f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089f8  080089f8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089f8  080089f8  000189f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089fc  080089fc  000189fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f20  2000008c  08008a8c  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012fac  08008a8c  00022fac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f37f  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003be1  00000000  00000000  0003f43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00043020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  00044400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002556d  00000000  00000000  00045678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a36  00000000  00000000  0006abe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfc41  00000000  00000000  0008461b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016425c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005748  00000000  00000000  001642b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008558 	.word	0x08008558

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	08008558 	.word	0x08008558

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <led_effect_stop>:
#include "main.h"

void led_effect_stop(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af02      	add	r7, sp, #8
	/* Stop the 4 timers that control the led toggling */
	for (int i = 0 ; i < 4 ; i++)
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	e00e      	b.n	8000602 <led_effect_stop+0x2a>
	{
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 80005e4:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <led_effect_stop+0x3c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	2200      	movs	r2, #0
 80005f6:	2103      	movs	r1, #3
 80005f8:	f006 fbfc 	bl	8006df4 <xTimerGenericCommand>
	for (int i = 0 ; i < 4 ; i++)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b03      	cmp	r3, #3
 8000606:	dded      	ble.n	80005e4 <led_effect_stop+0xc>
	}

}
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20012e7c 	.word	0x20012e7c

08000618 <led_effect>:

void led_effect(int selector)
{
 8000618:	b590      	push	{r4, r7, lr}
 800061a:	b085      	sub	sp, #20
 800061c:	af02      	add	r7, sp, #8
 800061e:	6078      	str	r0, [r7, #4]
	/* Stop the current LED effect */
	led_effect_stop();
 8000620:	f7ff ffda 	bl	80005d8 <led_effect_stop>

	/* Start the timer */
	xTimerStart(handle_led_timer[selector - 1], portMAX_DELAY);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3b01      	subs	r3, #1
 8000628:	4a08      	ldr	r2, [pc, #32]	; (800064c <led_effect+0x34>)
 800062a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800062e:	f005 fce3 	bl	8005ff8 <xTaskGetTickCount>
 8000632:	4602      	mov	r2, r0
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	2101      	movs	r1, #1
 800063e:	4620      	mov	r0, r4
 8000640:	f006 fbd8 	bl	8006df4 <xTimerGenericCommand>
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	bd90      	pop	{r4, r7, pc}
 800064c:	20012e7c 	.word	0x20012e7c

08000650 <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	2101      	movs	r1, #1
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <turn_off_all_leds+0x30>)
 800065a:	f001 fd77 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2102      	movs	r1, #2
 8000662:	4807      	ldr	r0, [pc, #28]	; (8000680 <turn_off_all_leds+0x30>)
 8000664:	f001 fd72 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2110      	movs	r1, #16
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <turn_off_all_leds+0x30>)
 800066e:	f001 fd6d 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2101      	movs	r1, #1
 8000676:	4803      	ldr	r0, [pc, #12]	; (8000684 <turn_off_all_leds+0x34>)
 8000678:	f001 fd68 	bl	800214c <HAL_GPIO_WritePin>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40020000 	.word	0x40020000
 8000684:	40020400 	.word	0x40020400

08000688 <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2101      	movs	r1, #1
 8000690:	4809      	ldr	r0, [pc, #36]	; (80006b8 <turn_on_all_leds+0x30>)
 8000692:	f001 fd5b 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2102      	movs	r1, #2
 800069a:	4807      	ldr	r0, [pc, #28]	; (80006b8 <turn_on_all_leds+0x30>)
 800069c:	f001 fd56 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2110      	movs	r1, #16
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <turn_on_all_leds+0x30>)
 80006a6:	f001 fd51 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2101      	movs	r1, #1
 80006ae:	4803      	ldr	r0, [pc, #12]	; (80006bc <turn_on_all_leds+0x34>)
 80006b0:	f001 fd4c 	bl	800214c <HAL_GPIO_WritePin>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40020000 	.word	0x40020000
 80006bc:	40020400 	.word	0x40020400

080006c0 <turn_on_odd_leds>:

void turn_on_odd_leds(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2101      	movs	r1, #1
 80006c8:	4809      	ldr	r0, [pc, #36]	; (80006f0 <turn_on_odd_leds+0x30>)
 80006ca:	f001 fd3f 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2102      	movs	r1, #2
 80006d2:	4807      	ldr	r0, [pc, #28]	; (80006f0 <turn_on_odd_leds+0x30>)
 80006d4:	f001 fd3a 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2110      	movs	r1, #16
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <turn_on_odd_leds+0x30>)
 80006de:	f001 fd35 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2101      	movs	r1, #1
 80006e6:	4803      	ldr	r0, [pc, #12]	; (80006f4 <turn_on_odd_leds+0x34>)
 80006e8:	f001 fd30 	bl	800214c <HAL_GPIO_WritePin>
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40020000 	.word	0x40020000
 80006f4:	40020400 	.word	0x40020400

080006f8 <turn_on_even_leds>:

void turn_on_even_leds(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2101      	movs	r1, #1
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <turn_on_even_leds+0x30>)
 8000702:	f001 fd23 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000706:	2201      	movs	r2, #1
 8000708:	2102      	movs	r1, #2
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <turn_on_even_leds+0x30>)
 800070c:	f001 fd1e 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2110      	movs	r1, #16
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <turn_on_even_leds+0x30>)
 8000716:	f001 fd19 	bl	800214c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	2101      	movs	r1, #1
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <turn_on_even_leds+0x34>)
 8000720:	f001 fd14 	bl	800214c <HAL_GPIO_WritePin>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40020000 	.word	0x40020000
 800072c:	40020400 	.word	0x40020400

08000730 <LED_control>:

void LED_control(uint8_t led_on)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	turn_off_all_leds();
 800073a:	f7ff ff89 	bl	8000650 <turn_off_all_leds>

	switch(led_on)
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	3b01      	subs	r3, #1
 8000742:	2b07      	cmp	r3, #7
 8000744:	d82a      	bhi.n	800079c <LED_control+0x6c>
 8000746:	a201      	add	r2, pc, #4	; (adr r2, 800074c <LED_control+0x1c>)
 8000748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074c:	0800076d 	.word	0x0800076d
 8000750:	08000779 	.word	0x08000779
 8000754:	0800079d 	.word	0x0800079d
 8000758:	08000785 	.word	0x08000785
 800075c:	0800079d 	.word	0x0800079d
 8000760:	0800079d 	.word	0x0800079d
 8000764:	0800079d 	.word	0x0800079d
 8000768:	08000791 	.word	0x08000791
	{
		case 0x1:
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	2101      	movs	r1, #1
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <LED_control+0x74>)
 8000772:	f001 fceb 	bl	800214c <HAL_GPIO_WritePin>
			break;
 8000776:	e011      	b.n	800079c <LED_control+0x6c>
		case 0x2:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2110      	movs	r1, #16
 800077c:	480a      	ldr	r0, [pc, #40]	; (80007a8 <LED_control+0x78>)
 800077e:	f001 fce5 	bl	800214c <HAL_GPIO_WritePin>
			break;
 8000782:	e00b      	b.n	800079c <LED_control+0x6c>
		case 0x4:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2102      	movs	r1, #2
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <LED_control+0x78>)
 800078a:	f001 fcdf 	bl	800214c <HAL_GPIO_WritePin>
			break;
 800078e:	e005      	b.n	800079c <LED_control+0x6c>
		case 0x8:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2101      	movs	r1, #1
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <LED_control+0x78>)
 8000796:	f001 fcd9 	bl	800214c <HAL_GPIO_WritePin>
			break;
 800079a:	bf00      	nop
	}
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40020000 	.word	0x40020000

080007ac <LED_effect1>:

void LED_effect1(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	static int flag = 1;

	/* Toggle all LEDs at the same time */
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <LED_effect1+0x28>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f083 0301 	eor.w	r3, r3, #1
 80007b8:	4a06      	ldr	r2, [pc, #24]	; (80007d4 <LED_effect1+0x28>)
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <LED_effect1+0x28>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d002      	beq.n	80007ca <LED_effect1+0x1e>
 80007c4:	f7ff ff44 	bl	8000650 <turn_off_all_leds>
}
 80007c8:	e001      	b.n	80007ce <LED_effect1+0x22>
	(flag ^= 1) ? turn_off_all_leds() : turn_on_all_leds();
 80007ca:	f7ff ff5d 	bl	8000688 <turn_on_all_leds>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000000 	.word	0x20000000

080007d8 <LED_effect2>:

void LED_effect2(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	static int flag = 1;

	/* Toggle even LEDs first and then odd LEDs */
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <LED_effect2+0x28>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f083 0301 	eor.w	r3, r3, #1
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <LED_effect2+0x28>)
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <LED_effect2+0x28>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <LED_effect2+0x1e>
 80007f0:	f7ff ff82 	bl	80006f8 <turn_on_even_leds>
}
 80007f4:	e001      	b.n	80007fa <LED_effect2+0x22>
	(flag ^= 1) ? turn_on_even_leds() : turn_on_odd_leds();
 80007f6:	f7ff ff63 	bl	80006c0 <turn_on_odd_leds>
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000004 	.word	0x20000004

08000804 <LED_effect3>:

void LED_effect3(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	static int i = 0;

	/* Turn on the LEDs following a left shift sequence */
	LED_control( 0x1 << (i++ % 4) );
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <LED_effect3+0x30>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	4909      	ldr	r1, [pc, #36]	; (8000834 <LED_effect3+0x30>)
 8000810:	600a      	str	r2, [r1, #0]
 8000812:	425a      	negs	r2, r3
 8000814:	f003 0303 	and.w	r3, r3, #3
 8000818:	f002 0203 	and.w	r2, r2, #3
 800081c:	bf58      	it	pl
 800081e:	4253      	negpl	r3, r2
 8000820:	2201      	movs	r2, #1
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff81 	bl	8000730 <LED_control>
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	200000a8 	.word	0x200000a8

08000838 <LED_effect4>:

void LED_effect4(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	static int i = 0;

	/* Turn on the LEDs following a right shift sequence */
	LED_control( 0x8 >> (i++ % 4) );
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <LED_effect4+0x30>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	1c5a      	adds	r2, r3, #1
 8000842:	4909      	ldr	r1, [pc, #36]	; (8000868 <LED_effect4+0x30>)
 8000844:	600a      	str	r2, [r1, #0]
 8000846:	425a      	negs	r2, r3
 8000848:	f003 0303 	and.w	r3, r3, #3
 800084c:	f002 0203 	and.w	r2, r2, #3
 8000850:	bf58      	it	pl
 8000852:	4253      	negpl	r3, r2
 8000854:	2208      	movs	r2, #8
 8000856:	fa42 f303 	asr.w	r3, r2, r3
 800085a:	b2db      	uxtb	r3, r3
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff67 	bl	8000730 <LED_control>
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000ac 	.word	0x200000ac

0800086c <main>:
volatile uint8_t user_data;

state_t current_state = sMainMenu;

int main(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af02      	add	r7, sp, #8
	BaseType_t status;

	HAL_Init();
 8000872:	f001 f921 	bl	8001ab8 <HAL_Init>

	SystemClock_Config();
 8000876:	f000 f8ff 	bl	8000a78 <SystemClock_Config>

	MX_GPIO_Init();
 800087a:	f000 f9bf 	bl	8000bfc <MX_GPIO_Init>
	MX_RTC_Init();
 800087e:	f000 f96d 	bl	8000b5c <MX_RTC_Init>
	MX_USART2_UART_Init();
 8000882:	f000 f991 	bl	8000ba8 <MX_USART2_UART_Init>

	/* Task 1 creation (Menu) */
	status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 8000886:	4b66      	ldr	r3, [pc, #408]	; (8000a20 <main+0x1b4>)
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	2302      	movs	r3, #2
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2300      	movs	r3, #0
 8000890:	22fa      	movs	r2, #250	; 0xfa
 8000892:	4964      	ldr	r1, [pc, #400]	; (8000a24 <main+0x1b8>)
 8000894:	4864      	ldr	r0, [pc, #400]	; (8000a28 <main+0x1bc>)
 8000896:	f005 f96d 	bl	8005b74 <xTaskCreate>
 800089a:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d00a      	beq.n	80008b8 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a6:	f383 8811 	msr	BASEPRI, r3
 80008aa:	f3bf 8f6f 	isb	sy
 80008ae:	f3bf 8f4f 	dsb	sy
 80008b2:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008b4:	bf00      	nop
 80008b6:	e7fe      	b.n	80008b6 <main+0x4a>

	/* Task 2 creation  (LED) */
	status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 80008b8:	4b5c      	ldr	r3, [pc, #368]	; (8000a2c <main+0x1c0>)
 80008ba:	9301      	str	r3, [sp, #4]
 80008bc:	2302      	movs	r3, #2
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	2300      	movs	r3, #0
 80008c2:	22fa      	movs	r2, #250	; 0xfa
 80008c4:	495a      	ldr	r1, [pc, #360]	; (8000a30 <main+0x1c4>)
 80008c6:	485b      	ldr	r0, [pc, #364]	; (8000a34 <main+0x1c8>)
 80008c8:	f005 f954 	bl	8005b74 <xTaskCreate>
 80008cc:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d00a      	beq.n	80008ea <main+0x7e>
        __asm volatile
 80008d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008d8:	f383 8811 	msr	BASEPRI, r3
 80008dc:	f3bf 8f6f 	isb	sy
 80008e0:	f3bf 8f4f 	dsb	sy
 80008e4:	61bb      	str	r3, [r7, #24]
    }
 80008e6:	bf00      	nop
 80008e8:	e7fe      	b.n	80008e8 <main+0x7c>

	/* Task 3 creation (RTC) */
	status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80008ea:	4b53      	ldr	r3, [pc, #332]	; (8000a38 <main+0x1cc>)
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	2302      	movs	r3, #2
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2300      	movs	r3, #0
 80008f4:	22fa      	movs	r2, #250	; 0xfa
 80008f6:	4951      	ldr	r1, [pc, #324]	; (8000a3c <main+0x1d0>)
 80008f8:	4851      	ldr	r0, [pc, #324]	; (8000a40 <main+0x1d4>)
 80008fa:	f005 f93b 	bl	8005b74 <xTaskCreate>
 80008fe:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d00a      	beq.n	800091c <main+0xb0>
        __asm volatile
 8000906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090a:	f383 8811 	msr	BASEPRI, r3
 800090e:	f3bf 8f6f 	isb	sy
 8000912:	f3bf 8f4f 	dsb	sy
 8000916:	617b      	str	r3, [r7, #20]
    }
 8000918:	bf00      	nop
 800091a:	e7fe      	b.n	800091a <main+0xae>

	/* Task 4 creation (Print) */
	status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 800091c:	4b49      	ldr	r3, [pc, #292]	; (8000a44 <main+0x1d8>)
 800091e:	9301      	str	r3, [sp, #4]
 8000920:	2302      	movs	r3, #2
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2300      	movs	r3, #0
 8000926:	22fa      	movs	r2, #250	; 0xfa
 8000928:	4947      	ldr	r1, [pc, #284]	; (8000a48 <main+0x1dc>)
 800092a:	4848      	ldr	r0, [pc, #288]	; (8000a4c <main+0x1e0>)
 800092c:	f005 f922 	bl	8005b74 <xTaskCreate>
 8000930:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000932:	6a3b      	ldr	r3, [r7, #32]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d00a      	beq.n	800094e <main+0xe2>
        __asm volatile
 8000938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093c:	f383 8811 	msr	BASEPRI, r3
 8000940:	f3bf 8f6f 	isb	sy
 8000944:	f3bf 8f4f 	dsb	sy
 8000948:	613b      	str	r3, [r7, #16]
    }
 800094a:	bf00      	nop
 800094c:	e7fe      	b.n	800094c <main+0xe0>

	/* Task 5 creation (Command handling) */
	status = xTaskCreate(command_task, "command_task", 250, NULL, 2, &handle_command_task);
 800094e:	4b40      	ldr	r3, [pc, #256]	; (8000a50 <main+0x1e4>)
 8000950:	9301      	str	r3, [sp, #4]
 8000952:	2302      	movs	r3, #2
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2300      	movs	r3, #0
 8000958:	22fa      	movs	r2, #250	; 0xfa
 800095a:	493e      	ldr	r1, [pc, #248]	; (8000a54 <main+0x1e8>)
 800095c:	483e      	ldr	r0, [pc, #248]	; (8000a58 <main+0x1ec>)
 800095e:	f005 f909 	bl	8005b74 <xTaskCreate>
 8000962:	6238      	str	r0, [r7, #32]
	configASSERT(status == pdPASS);
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d00a      	beq.n	8000980 <main+0x114>
        __asm volatile
 800096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800096e:	f383 8811 	msr	BASEPRI, r3
 8000972:	f3bf 8f6f 	isb	sy
 8000976:	f3bf 8f4f 	dsb	sy
 800097a:	60fb      	str	r3, [r7, #12]
    }
 800097c:	bf00      	nop
 800097e:	e7fe      	b.n	800097e <main+0x112>

	/* Queue 1 creation (receive command) */
	q_data =  xQueueCreate(10, sizeof(char));
 8000980:	2200      	movs	r2, #0
 8000982:	2101      	movs	r1, #1
 8000984:	200a      	movs	r0, #10
 8000986:	f004 fba9 	bl	80050dc <xQueueGenericCreate>
 800098a:	4603      	mov	r3, r0
 800098c:	4a33      	ldr	r2, [pc, #204]	; (8000a5c <main+0x1f0>)
 800098e:	6013      	str	r3, [r2, #0]
	configASSERT(q_data != NULL);
 8000990:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <main+0x1f0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d10a      	bne.n	80009ae <main+0x142>
        __asm volatile
 8000998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800099c:	f383 8811 	msr	BASEPRI, r3
 80009a0:	f3bf 8f6f 	isb	sy
 80009a4:	f3bf 8f4f 	dsb	sy
 80009a8:	60bb      	str	r3, [r7, #8]
    }
 80009aa:	bf00      	nop
 80009ac:	e7fe      	b.n	80009ac <main+0x140>

	/* Queue 2 creation (print message) */
	q_print = xQueueCreate(10, sizeof(size_t));
 80009ae:	2200      	movs	r2, #0
 80009b0:	2104      	movs	r1, #4
 80009b2:	200a      	movs	r0, #10
 80009b4:	f004 fb92 	bl	80050dc <xQueueGenericCreate>
 80009b8:	4603      	mov	r3, r0
 80009ba:	4a29      	ldr	r2, [pc, #164]	; (8000a60 <main+0x1f4>)
 80009bc:	6013      	str	r3, [r2, #0]
	configASSERT(q_print != NULL);
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <main+0x1f4>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d10a      	bne.n	80009dc <main+0x170>
        __asm volatile
 80009c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ca:	f383 8811 	msr	BASEPRI, r3
 80009ce:	f3bf 8f6f 	isb	sy
 80009d2:	f3bf 8f4f 	dsb	sy
 80009d6:	607b      	str	r3, [r7, #4]
    }
 80009d8:	bf00      	nop
 80009da:	e7fe      	b.n	80009da <main+0x16e>

	/* Create software timers for LED effects */
	for (int i = 0 ; i < 4 ; i++)
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
 80009e0:	e013      	b.n	8000a0a <main+0x19e>
	{
		handle_led_timer[i] = xTimerCreate("led_timer",
											pdMS_TO_TICKS(500),
											pdTRUE,
											(void*)(i+1),
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	3301      	adds	r3, #1
		handle_led_timer[i] = xTimerCreate("led_timer",
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <main+0x1f8>)
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	4613      	mov	r3, r2
 80009ee:	2201      	movs	r2, #1
 80009f0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009f4:	481c      	ldr	r0, [pc, #112]	; (8000a68 <main+0x1fc>)
 80009f6:	f006 f9a1 	bl	8006d3c <xTimerCreate>
 80009fa:	4602      	mov	r2, r0
 80009fc:	491b      	ldr	r1, [pc, #108]	; (8000a6c <main+0x200>)
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0 ; i < 4 ; i++)
 8000a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a06:	3301      	adds	r3, #1
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	dde8      	ble.n	80009e2 <main+0x176>
											led_effect_callback);
	}

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000a10:	2201      	movs	r2, #1
 8000a12:	4917      	ldr	r1, [pc, #92]	; (8000a70 <main+0x204>)
 8000a14:	4817      	ldr	r0, [pc, #92]	; (8000a74 <main+0x208>)
 8000a16:	f003 fb5c 	bl	80040d2 <HAL_UART_Receive_IT>

	/* Start the scheduler */
	vTaskStartScheduler();
 8000a1a:	f005 f9f1 	bl	8005e00 <vTaskStartScheduler>


	while (1)
 8000a1e:	e7fe      	b.n	8000a1e <main+0x1b2>
 8000a20:	20012e98 	.word	0x20012e98
 8000a24:	08008570 	.word	0x08008570
 8000a28:	080012c5 	.word	0x080012c5
 8000a2c:	20012ec4 	.word	0x20012ec4
 8000a30:	0800857c 	.word	0x0800857c
 8000a34:	080013ad 	.word	0x080013ad
 8000a38:	20012e8c 	.word	0x20012e8c
 8000a3c:	08008588 	.word	0x08008588
 8000a40:	08001521 	.word	0x08001521
 8000a44:	20012ec0 	.word	0x20012ec0
 8000a48:	08008594 	.word	0x08008594
 8000a4c:	08001909 	.word	0x08001909
 8000a50:	20012e94 	.word	0x20012e94
 8000a54:	080085a0 	.word	0x080085a0
 8000a58:	08001949 	.word	0x08001949
 8000a5c:	20012e90 	.word	0x20012e90
 8000a60:	20012e9c 	.word	0x20012e9c
 8000a64:	08000d39 	.word	0x08000d39
 8000a68:	080085b0 	.word	0x080085b0
 8000a6c:	20012e7c 	.word	0x20012e7c
 8000a70:	20012ec8 	.word	0x20012ec8
 8000a74:	20012ecc 	.word	0x20012ecc

08000a78 <SystemClock_Config>:
	}

}

void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	; 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	2234      	movs	r2, #52	; 0x34
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f007 f93e 	bl	8007d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <SystemClock_Config+0xdc>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a2b      	ldr	r2, [pc, #172]	; (8000b54 <SystemClock_Config+0xdc>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <SystemClock_Config+0xdc>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <SystemClock_Config+0xe0>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac4:	4a24      	ldr	r2, [pc, #144]	; (8000b58 <SystemClock_Config+0xe0>)
 8000ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <SystemClock_Config+0xe0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ad8:	230a      	movs	r3, #10
 8000ada:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aec:	2302      	movs	r3, #2
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000af4:	2310      	movs	r3, #16
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000af8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000afc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000afe:	2304      	movs	r3, #4
 8000b00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b02:	2302      	movs	r3, #2
 8000b04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 f982 	bl	8002e18 <HAL_RCC_OscConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b1a:	f000 f991 	bl	8000e40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1e:	230f      	movs	r3, #15
 8000b20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b22:	2302      	movs	r3, #2
 8000b24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b34:	f107 0308 	add.w	r3, r7, #8
 8000b38:	2102      	movs	r1, #2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 fb44 	bl	80021c8 <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b46:	f000 f97b 	bl	8000e40 <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3750      	adds	r7, #80	; 0x50
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40007000 	.word	0x40007000

08000b5c <MX_RTC_Init>:

static void MX_RTC_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <MX_RTC_Init+0x48>)
 8000b64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b68:	2240      	movs	r2, #64	; 0x40
 8000b6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b6e:	227f      	movs	r2, #127	; 0x7f
 8000b70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b74:	22ff      	movs	r2, #255	; 0xff
 8000b76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_RTC_Init+0x44>)
 8000b8c:	f002 fbe2 	bl	8003354 <HAL_RTC_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b96:	f000 f953 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20012ea0 	.word	0x20012ea0
 8000ba4:	40002800 	.word	0x40002800

08000ba8 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_USART2_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000be0:	f003 f998 	bl	8003f14 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f000 f929 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20012ecc 	.word	0x20012ecc
 8000bf8:	40004400 	.word	0x40004400

08000bfc <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b44      	ldr	r3, [pc, #272]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a43      	ldr	r2, [pc, #268]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b41      	ldr	r3, [pc, #260]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b3d      	ldr	r3, [pc, #244]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a3c      	ldr	r2, [pc, #240]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b3a      	ldr	r3, [pc, #232]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a35      	ldr	r2, [pc, #212]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b33      	ldr	r3, [pc, #204]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b2f      	ldr	r3, [pc, #188]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a2e      	ldr	r2, [pc, #184]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b2c      	ldr	r3, [pc, #176]	; (8000d28 <MX_GPIO_Init+0x12c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2120      	movs	r1, #32
 8000c86:	4829      	ldr	r0, [pc, #164]	; (8000d2c <MX_GPIO_Init+0x130>)
 8000c88:	f001 fa60 	bl	800214c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c92:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4823      	ldr	r0, [pc, #140]	; (8000d30 <MX_GPIO_Init+0x134>)
 8000ca4:	f001 f8be 	bl	8001e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ca8:	2320      	movs	r3, #32
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481b      	ldr	r0, [pc, #108]	; (8000d2c <MX_GPIO_Init+0x130>)
 8000cc0:	f001 f8b0 	bl	8001e24 <HAL_GPIO_Init>

  /* Configure external LED pins */
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4814      	ldr	r0, [pc, #80]	; (8000d2c <MX_GPIO_Init+0x130>)
 8000cdc:	f001 f8a2 	bl	8001e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4810      	ldr	r0, [pc, #64]	; (8000d2c <MX_GPIO_Init+0x130>)
 8000cec:	f001 f89a 	bl	8001e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MX_GPIO_Init+0x130>)
 8000cfc:	f001 f892 	bl	8001e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d00:	2301      	movs	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480a      	ldr	r0, [pc, #40]	; (8000d34 <MX_GPIO_Init+0x138>)
 8000d0c:	f001 f88a 	bl	8001e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	2028      	movs	r0, #40	; 0x28
 8000d16:	f000 ffc9 	bl	8001cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d1a:	2028      	movs	r0, #40	; 0x28
 8000d1c:	f000 ffe2 	bl	8001ce4 <HAL_NVIC_EnableIRQ>

}
 8000d20:	bf00      	nop
 8000d22:	3728      	adds	r7, #40	; 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020400 	.word	0x40020400

08000d38 <led_effect_callback>:

void led_effect_callback(TimerHandle_t xTimer)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	int id;

	id = (uint32_t)pvTimerGetTimerID(xTimer);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f006 fb37 	bl	80073b4 <pvTimerGetTimerID>
 8000d46:	4603      	mov	r3, r0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d816      	bhi.n	8000d80 <led_effect_callback+0x48>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <led_effect_callback+0x20>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d69 	.word	0x08000d69
 8000d5c:	08000d6f 	.word	0x08000d6f
 8000d60:	08000d75 	.word	0x08000d75
 8000d64:	08000d7b 	.word	0x08000d7b

	switch(id)
	{
	case 1:
		LED_effect1();
 8000d68:	f7ff fd20 	bl	80007ac <LED_effect1>
		break;
 8000d6c:	e008      	b.n	8000d80 <led_effect_callback+0x48>
	case 2:
		LED_effect2();
 8000d6e:	f7ff fd33 	bl	80007d8 <LED_effect2>
		break;
 8000d72:	e005      	b.n	8000d80 <led_effect_callback+0x48>
	case 3:
		LED_effect3();
 8000d74:	f7ff fd46 	bl	8000804 <LED_effect3>
		break;
 8000d78:	e002      	b.n	8000d80 <led_effect_callback+0x48>
	case 4:
		LED_effect4();
 8000d7a:	f7ff fd5d 	bl	8000838 <LED_effect4>
		break;
 8000d7e:	bf00      	nop
	}
}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af02      	add	r7, sp, #8
 8000d8e:	6078      	str	r0, [r7, #4]
	uint8_t dummy_reception;

	if(xQueueIsQueueFullFromISR(q_data) == pdFALSE)
 8000d90:	4b1e      	ldr	r3, [pc, #120]	; (8000e0c <HAL_UART_RxCpltCallback+0x84>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f004 fe68 	bl	8005a6a <xQueueIsQueueFullFromISR>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d107      	bne.n	8000db0 <HAL_UART_RxCpltCallback+0x28>
	{
		/*Queue is not full */
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <HAL_UART_RxCpltCallback+0x84>)
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	2300      	movs	r3, #0
 8000da6:	2200      	movs	r2, #0
 8000da8:	4919      	ldr	r1, [pc, #100]	; (8000e10 <HAL_UART_RxCpltCallback+0x88>)
 8000daa:	f004 fb17 	bl	80053dc <xQueueGenericSendFromISR>
 8000dae:	e013      	b.n	8000dd8 <HAL_UART_RxCpltCallback+0x50>
	}else{
		/*Queue is full */
		if(user_data == '\n')
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <HAL_UART_RxCpltCallback+0x88>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b0a      	cmp	r3, #10
 8000db8:	d10e      	bne.n	8000dd8 <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */
			xQueueReceiveFromISR(q_data, (void*)&dummy_reception, NULL);
 8000dba:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <HAL_UART_RxCpltCallback+0x84>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f107 010f 	add.w	r1, r7, #15
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f004 fc93 	bl	80056f0 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_UART_RxCpltCallback+0x84>)
 8000dcc:	6818      	ldr	r0, [r3, #0]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	490f      	ldr	r1, [pc, #60]	; (8000e10 <HAL_UART_RxCpltCallback+0x88>)
 8000dd4:	f004 fb02 	bl	80053dc <xQueueGenericSendFromISR>
		}
	}

	/* Send notification to command handling task if user_data = '\n' */
	if (user_data == '\n')
 8000dd8:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_UART_RxCpltCallback+0x88>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b0a      	cmp	r3, #10
 8000de0:	d10a      	bne.n	8000df8 <HAL_UART_RxCpltCallback+0x70>
	{
		xTaskNotifyFromISR(handle_command_task, 0, eNoAction, NULL);
 8000de2:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <HAL_UART_RxCpltCallback+0x8c>)
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	2300      	movs	r3, #0
 8000de8:	9301      	str	r3, [sp, #4]
 8000dea:	2300      	movs	r3, #0
 8000dec:	9300      	str	r3, [sp, #0]
 8000dee:	2300      	movs	r3, #0
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	f005 fe08 	bl	8006a08 <xTaskGenericNotifyFromISR>
	}

	/* Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4905      	ldr	r1, [pc, #20]	; (8000e10 <HAL_UART_RxCpltCallback+0x88>)
 8000dfc:	4806      	ldr	r0, [pc, #24]	; (8000e18 <HAL_UART_RxCpltCallback+0x90>)
 8000dfe:	f003 f968 	bl	80040d2 <HAL_UART_Receive_IT>


}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20012e90 	.word	0x20012e90
 8000e10:	20012ec8 	.word	0x20012ec8
 8000e14:	20012e94 	.word	0x20012e94
 8000e18:	20012ecc 	.word	0x20012ecc

08000e1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e2e:	f000 fe65 	bl	8001afc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40001000 	.word	0x40001000

08000e40 <Error_Handler>:

void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <Error_Handler+0x8>
	...

08000e4c <show_time_date>:
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);

 }

void show_time_date(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000e52:	f107 0318 	add.w	r3, r7, #24
 8000e56:	2204      	movs	r2, #4
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f006 ff54 	bl	8007d08 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2214      	movs	r2, #20
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f006 ff4e 	bl	8007d08 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4619      	mov	r1, r3
 8000e72:	4821      	ldr	r0, [pc, #132]	; (8000ef8 <show_time_date+0xac>)
 8000e74:	f002 fbbc 	bl	80035f0 <HAL_RTC_GetTime>

	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4619      	mov	r1, r3
 8000e80:	481d      	ldr	r0, [pc, #116]	; (8000ef8 <show_time_date+0xac>)
 8000e82:	f002 fcba 	bl	80037fa <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d101      	bne.n	8000e90 <show_time_date+0x44>
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <show_time_date+0xb0>)
 8000e8e:	e000      	b.n	8000e92 <show_time_date+0x46>
 8000e90:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <show_time_date+0xb4>)
 8000e92:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000e94:	793b      	ldrb	r3, [r7, #4]
 8000e96:	4618      	mov	r0, r3
 8000e98:	797b      	ldrb	r3, [r7, #5]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	9302      	str	r3, [sp, #8]
 8000ea4:	9101      	str	r1, [sp, #4]
 8000ea6:	9200      	str	r2, [sp, #0]
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <show_time_date+0xb8>)
 8000eac:	4916      	ldr	r1, [pc, #88]	; (8000f08 <show_time_date+0xbc>)
 8000eae:	4817      	ldr	r0, [pc, #92]	; (8000f0c <show_time_date+0xc0>)
 8000eb0:	f006 ff32 	bl	8007d18 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 8000eb4:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <show_time_date+0xc4>)
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebe:	4915      	ldr	r1, [pc, #84]	; (8000f14 <show_time_date+0xc8>)
 8000ec0:	f004 f98e 	bl	80051e0 <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000ec4:	7e7b      	ldrb	r3, [r7, #25]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	7ebb      	ldrb	r3, [r7, #26]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	7efb      	ldrb	r3, [r7, #27]
 8000ece:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4910      	ldr	r1, [pc, #64]	; (8000f18 <show_time_date+0xcc>)
 8000ed8:	4810      	ldr	r0, [pc, #64]	; (8000f1c <show_time_date+0xd0>)
 8000eda:	f006 ff1d 	bl	8007d18 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 8000ede:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <show_time_date+0xc4>)
 8000ee0:	6818      	ldr	r0, [r3, #0]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	490d      	ldr	r1, [pc, #52]	; (8000f20 <show_time_date+0xd4>)
 8000eea:	f004 f979 	bl	80051e0 <xQueueGenericSend>
}
 8000eee:	bf00      	nop
 8000ef0:	3720      	adds	r7, #32
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20012ea0 	.word	0x20012ea0
 8000efc:	080085bc 	.word	0x080085bc
 8000f00:	080085c0 	.word	0x080085c0
 8000f04:	080085e8 	.word	0x080085e8
 8000f08:	080085fc 	.word	0x080085fc
 8000f0c:	200000b4 	.word	0x200000b4
 8000f10:	20012e9c 	.word	0x20012e9c
 8000f14:	20000008 	.word	0x20000008
 8000f18:	080085d8 	.word	0x080085d8
 8000f1c:	200000dc 	.word	0x200000dc
 8000f20:	2000000c 	.word	0x2000000c

08000f24 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <rtc_configure_time+0x2c>)
 8000f44:	f002 fa97 	bl	8003476 <HAL_RTC_SetTime>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20012ea0 	.word	0x20012ea0

08000f54 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <rtc_configure_date+0x1c>)
 8000f62:	f002 fba3 	bl	80036ac <HAL_RTC_SetDate>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20012ea0 	.word	0x20012ea0

08000f74 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
	if(time){
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d00d      	beq.n	8000fa0 <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b0c      	cmp	r3, #12
 8000f8a:	d807      	bhi.n	8000f9c <validate_rtc_information+0x28>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	785b      	ldrb	r3, [r3, #1]
 8000f90:	2b3b      	cmp	r3, #59	; 0x3b
 8000f92:	d803      	bhi.n	8000f9c <validate_rtc_information+0x28>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	789b      	ldrb	r3, [r3, #2]
 8000f98:	2b3b      	cmp	r3, #59	; 0x3b
 8000f9a:	d901      	bls.n	8000fa0 <validate_rtc_information+0x2c>
			return 1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e015      	b.n	8000fcc <validate_rtc_information+0x58>
	}

	if(date){
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d011      	beq.n	8000fca <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	789b      	ldrb	r3, [r3, #2]
 8000faa:	2b1f      	cmp	r3, #31
 8000fac:	d80b      	bhi.n	8000fc6 <validate_rtc_information+0x52>
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	d807      	bhi.n	8000fc6 <validate_rtc_information+0x52>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	78db      	ldrb	r3, [r3, #3]
 8000fba:	2b63      	cmp	r3, #99	; 0x63
 8000fbc:	d803      	bhi.n	8000fc6 <validate_rtc_information+0x52>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	785b      	ldrb	r3, [r3, #1]
 8000fc2:	2b0c      	cmp	r3, #12
 8000fc4:	d901      	bls.n	8000fca <validate_rtc_information+0x56>
			return 1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <validate_rtc_information+0x58>
	}

	return 0;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <HAL_MspInit+0x4c>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	; (8001024 <HAL_MspInit+0x4c>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_MspInit+0x4c>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	603b      	str	r3, [r7, #0]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_MspInit+0x4c>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_MspInit+0x4c>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_MspInit+0x4c>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800

08001028 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b09a      	sub	sp, #104	; 0x68
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	225c      	movs	r2, #92	; 0x5c
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f006 fe65 	bl	8007d08 <memset>
  if(hrtc->Instance==RTC)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <HAL_RTC_MspInit+0x4c>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d111      	bne.n	800106c <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001048:	2320      	movs	r3, #32
 800104a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800104c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001050:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fa02 	bl	8002460 <HAL_RCCEx_PeriphCLKConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001062:	f7ff feed 	bl	8000e40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <HAL_RTC_MspInit+0x50>)
 8001068:	2201      	movs	r2, #1
 800106a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3768      	adds	r7, #104	; 0x68
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40002800 	.word	0x40002800
 8001078:	42470e3c 	.word	0x42470e3c

0800107c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <HAL_UART_MspInit+0x94>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d133      	bne.n	8001106 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_UART_MspInit+0x98>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <HAL_UART_MspInit+0x98>)
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <HAL_UART_MspInit+0x98>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_UART_MspInit+0x98>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <HAL_UART_MspInit+0x98>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_UART_MspInit+0x98>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010d6:	230c      	movs	r3, #12
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e6:	2307      	movs	r3, #7
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <HAL_UART_MspInit+0x9c>)
 80010f2:	f000 fe97 	bl	8001e24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2106      	movs	r1, #6
 80010fa:	2026      	movs	r0, #38	; 0x26
 80010fc:	f000 fdd6 	bl	8001cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001100:	2026      	movs	r0, #38	; 0x26
 8001102:	f000 fdef 	bl	8001ce4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	; 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40004400 	.word	0x40004400
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000

0800111c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	2036      	movs	r0, #54	; 0x36
 8001132:	f000 fdbb 	bl	8001cac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001136:	2036      	movs	r0, #54	; 0x36
 8001138:	f000 fdd4 	bl	8001ce4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <HAL_InitTick+0xa4>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <HAL_InitTick+0xa4>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6413      	str	r3, [r2, #64]	; 0x40
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <HAL_InitTick+0xa4>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001158:	f107 0210 	add.w	r2, r7, #16
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f001 f94a 	bl	80023fc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001168:	f001 f920 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 800116c:	4603      	mov	r3, r0
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001174:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <HAL_InitTick+0xa8>)
 8001176:	fba2 2303 	umull	r2, r3, r2, r3
 800117a:	0c9b      	lsrs	r3, r3, #18
 800117c:	3b01      	subs	r3, #1
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001180:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_InitTick+0xac>)
 8001182:	4a12      	ldr	r2, [pc, #72]	; (80011cc <HAL_InitTick+0xb0>)
 8001184:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_InitTick+0xac>)
 8001188:	f240 32e7 	movw	r2, #999	; 0x3e7
 800118c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800118e:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <HAL_InitTick+0xac>)
 8001190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001192:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_InitTick+0xac>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_InitTick+0xac>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011a0:	4809      	ldr	r0, [pc, #36]	; (80011c8 <HAL_InitTick+0xac>)
 80011a2:	f002 fc09 	bl	80039b8 <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d104      	bne.n	80011b6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011ac:	4806      	ldr	r0, [pc, #24]	; (80011c8 <HAL_InitTick+0xac>)
 80011ae:	f002 fc5d 	bl	8003a6c <HAL_TIM_Base_Start_IT>
 80011b2:	4603      	mov	r3, r0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3730      	adds	r7, #48	; 0x30
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	431bde83 	.word	0x431bde83
 80011c8:	20012f10 	.word	0x20012f10
 80011cc:	40001000 	.word	0x40001000

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <NMI_Handler+0x4>

080011d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <MemManage_Handler+0x4>

080011e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <UsageFault_Handler+0x4>

080011ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <USART2_IRQHandler+0x10>)
 8001202:	f002 ff97 	bl	8004134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20012ecc 	.word	0x20012ecc

08001210 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001214:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001218:	f000 ffb2 	bl	8002180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <TIM6_DAC_IRQHandler+0x10>)
 8001226:	f002 fc91 	bl	8003b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20012f10 	.word	0x20012f10

08001234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800123c:	4a14      	ldr	r2, [pc, #80]	; (8001290 <_sbrk+0x5c>)
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <_sbrk+0x60>)
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <_sbrk+0x64>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <_sbrk+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	429a      	cmp	r2, r3
 8001262:	d207      	bcs.n	8001274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001264:	f006 fd18 	bl	8007c98 <__errno>
 8001268:	4603      	mov	r3, r0
 800126a:	220c      	movs	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	e009      	b.n	8001288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <_sbrk+0x64>)
 8001284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20020000 	.word	0x20020000
 8001294:	00000400 	.word	0x00000400
 8001298:	20000104 	.word	0x20000104
 800129c:	20012fb0 	.word	0x20012fb0

080012a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <SystemInit+0x20>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <SystemInit+0x20>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <menu_task>:
const char *msg_invalid = "////Invalid option////\n";



void menu_task(void* parameters)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;

	const char* msg_menu = 	"\n========================\n"
 80012cc:	4b31      	ldr	r3, [pc, #196]	; (8001394 <menu_task+0xd0>)
 80012ce:	60bb      	str	r3, [r7, #8]
							"Exit          ----> 2\n"
							"Enter your choice here : ";
	while(1)
	{
		/* Send the menu to the queue to print it */
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 80012d0:	4b31      	ldr	r3, [pc, #196]	; (8001398 <menu_task+0xd4>)
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	f107 0108 	add.w	r1, r7, #8
 80012d8:	2300      	movs	r3, #0
 80012da:	f04f 32ff 	mov.w	r2, #4294967295
 80012de:	f003 ff7f 	bl	80051e0 <xQueueGenericSend>

		/* Wait until a command is received */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	f04f 32ff 	mov.w	r2, #4294967295
 80012ea:	9200      	str	r2, [sp, #0]
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	2000      	movs	r0, #0
 80012f2:	f005 fa29 	bl	8006748 <xTaskGenericNotifyWait>

		cmd = (command_t*)cmd_addr;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	617b      	str	r3, [r7, #20]

		/* Decode the received command */
		if (cmd->length == 1)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	7a9b      	ldrb	r3, [r3, #10]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d133      	bne.n	800136a <menu_task+0xa6>
		{
			option = cmd->payload[0] - 48;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	3b30      	subs	r3, #48	; 0x30
 8001308:	613b      	str	r3, [r7, #16]
			switch(option)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d035      	beq.n	800137c <menu_task+0xb8>
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b02      	cmp	r3, #2
 8001314:	dc20      	bgt.n	8001358 <menu_task+0x94>
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <menu_task+0x60>
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d00d      	beq.n	800133e <menu_task+0x7a>
 8001322:	e019      	b.n	8001358 <menu_task+0x94>
			{
				case 0:
					current_state = sLedEffect;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <menu_task+0xd8>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <menu_task+0xdc>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	2300      	movs	r3, #0
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2300      	movs	r3, #0
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	f005 fa86 	bl	8006848 <xTaskGenericNotify>
					break;
 800133c:	e01f      	b.n	800137e <menu_task+0xba>
				case 1:
					current_state = sRtcMenu;
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <menu_task+0xd8>)
 8001340:	2202      	movs	r2, #2
 8001342:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <menu_task+0xe0>)
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	2300      	movs	r3, #0
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2300      	movs	r3, #0
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	f005 fa79 	bl	8006848 <xTaskGenericNotify>
					break;
 8001356:	e012      	b.n	800137e <menu_task+0xba>
				case 2:
					break;
				default:
					xQueueSend(q_print, &msg_invalid, portMAX_DELAY);
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <menu_task+0xd4>)
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	2300      	movs	r3, #0
 800135e:	f04f 32ff 	mov.w	r2, #4294967295
 8001362:	4911      	ldr	r1, [pc, #68]	; (80013a8 <menu_task+0xe4>)
 8001364:	f003 ff3c 	bl	80051e0 <xQueueGenericSend>
					continue;
 8001368:	e012      	b.n	8001390 <menu_task+0xcc>
			}
		}else
		{
			xQueueSend(q_print, &msg_invalid, portMAX_DELAY);
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <menu_task+0xd4>)
 800136c:	6818      	ldr	r0, [r3, #0]
 800136e:	2300      	movs	r3, #0
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	490c      	ldr	r1, [pc, #48]	; (80013a8 <menu_task+0xe4>)
 8001376:	f003 ff33 	bl	80051e0 <xQueueGenericSend>
			continue;
 800137a:	e009      	b.n	8001390 <menu_task+0xcc>
					break;
 800137c:	bf00      	nop
		}

		/* Task is blocked until a notification is received */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2300      	movs	r3, #0
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2000      	movs	r0, #0
 800138c:	f005 f9dc 	bl	8006748 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8001390:	e79e      	b.n	80012d0 <menu_task+0xc>
 8001392:	bf00      	nop
 8001394:	0800862c 	.word	0x0800862c
 8001398:	20012e9c 	.word	0x20012e9c
 800139c:	200000b0 	.word	0x200000b0
 80013a0:	20012ec4 	.word	0x20012ec4
 80013a4:	20012e8c 	.word	0x20012e8c
 80013a8:	20000014 	.word	0x20000014

080013ac <led_task>:
	}
}

void led_task(void* parameters)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 80013b4:	4b3e      	ldr	r3, [pc, #248]	; (80014b0 <led_task+0x104>)
 80013b6:	60fb      	str	r3, [r7, #12]
			  	  	  	  "Enter your choice here : ";

	while(1)
	{
		/* Task is blocked until command task unblocks it */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80013b8:	f04f 33ff 	mov.w	r3, #4294967295
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2300      	movs	r3, #0
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	2000      	movs	r0, #0
 80013c6:	f005 f9bf 	bl	8006748 <xTaskGenericNotifyWait>

		/* Print the menu for LED effect */
		xQueueSend(q_print, &msg_led, portMAX_DELAY);
 80013ca:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <led_task+0x108>)
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	f107 010c 	add.w	r1, r7, #12
 80013d2:	2300      	movs	r3, #0
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	f003 ff02 	bl	80051e0 <xQueueGenericSend>

		/* Wait until a command is received */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	f04f 32ff 	mov.w	r2, #4294967295
 80013e4:	9200      	str	r2, [sp, #0]
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2000      	movs	r0, #0
 80013ec:	f005 f9ac 	bl	8006748 <xTaskGenericNotifyWait>

		cmd = (command_t*)cmd_addr;
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	617b      	str	r3, [r7, #20]

		/* Decode the command */
		if (cmd->length <= 4)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	7a9b      	ldrb	r3, [r3, #10]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d843      	bhi.n	8001484 <led_task+0xd8>
		{
			if ( !strcmp( (char*)cmd->payload, "none" ) )
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	492e      	ldr	r1, [pc, #184]	; (80014b8 <led_task+0x10c>)
 8001400:	4618      	mov	r0, r3
 8001402:	f7fe ff05 	bl	8000210 <strcmp>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <led_task+0x66>
			{
				led_effect_stop();
 800140c:	f7ff f8e4 	bl	80005d8 <led_effect_stop>
 8001410:	e040      	b.n	8001494 <led_task+0xe8>
			}
			else if ( !strcmp( (char*)cmd->payload, "e1" ) )
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4929      	ldr	r1, [pc, #164]	; (80014bc <led_task+0x110>)
 8001416:	4618      	mov	r0, r3
 8001418:	f7fe fefa 	bl	8000210 <strcmp>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d103      	bne.n	800142a <led_task+0x7e>
			{
				led_effect(1);
 8001422:	2001      	movs	r0, #1
 8001424:	f7ff f8f8 	bl	8000618 <led_effect>
 8001428:	e034      	b.n	8001494 <led_task+0xe8>
			}
			else if ( !strcmp( (char*)cmd->payload, "e2" ) )
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	4924      	ldr	r1, [pc, #144]	; (80014c0 <led_task+0x114>)
 800142e:	4618      	mov	r0, r3
 8001430:	f7fe feee 	bl	8000210 <strcmp>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <led_task+0x96>
			{
				led_effect(2);
 800143a:	2002      	movs	r0, #2
 800143c:	f7ff f8ec 	bl	8000618 <led_effect>
 8001440:	e028      	b.n	8001494 <led_task+0xe8>
			}
			else if ( !strcmp( (char*)cmd->payload, "e3" ) )
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	491f      	ldr	r1, [pc, #124]	; (80014c4 <led_task+0x118>)
 8001446:	4618      	mov	r0, r3
 8001448:	f7fe fee2 	bl	8000210 <strcmp>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d103      	bne.n	800145a <led_task+0xae>
			{
				led_effect(3);
 8001452:	2003      	movs	r0, #3
 8001454:	f7ff f8e0 	bl	8000618 <led_effect>
 8001458:	e01c      	b.n	8001494 <led_task+0xe8>
			}
			else if ( !strcmp( (char*)cmd->payload, "e4" ) )
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	491a      	ldr	r1, [pc, #104]	; (80014c8 <led_task+0x11c>)
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe fed6 	bl	8000210 <strcmp>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d103      	bne.n	8001472 <led_task+0xc6>
			{
				led_effect(4);
 800146a:	2004      	movs	r0, #4
 800146c:	f7ff f8d4 	bl	8000618 <led_effect>
 8001470:	e010      	b.n	8001494 <led_task+0xe8>
			}
			else
			{
				xQueueSend(q_print, &msg_invalid, portMAX_DELAY);
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <led_task+0x108>)
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	2300      	movs	r3, #0
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	4913      	ldr	r1, [pc, #76]	; (80014cc <led_task+0x120>)
 800147e:	f003 feaf 	bl	80051e0 <xQueueGenericSend>
 8001482:	e007      	b.n	8001494 <led_task+0xe8>
			}
		}else
		{
			xQueueSend(q_print, &msg_invalid, portMAX_DELAY);
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <led_task+0x108>)
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	2300      	movs	r3, #0
 800148a:	f04f 32ff 	mov.w	r2, #4294967295
 800148e:	490f      	ldr	r1, [pc, #60]	; (80014cc <led_task+0x120>)
 8001490:	f003 fea6 	bl	80051e0 <xQueueGenericSend>
		}

		/* Update state variable */
		current_state = sMainMenu;
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <led_task+0x124>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]

		/* Notify the menu task */
		xTaskNotify(handle_menu_task, 0, eNoAction);
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <led_task+0x128>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	2300      	movs	r3, #0
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	f005 f9ce 	bl	8006848 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80014ac:	e784      	b.n	80013b8 <led_task+0xc>
 80014ae:	bf00      	nop
 80014b0:	080086d4 	.word	0x080086d4
 80014b4:	20012e9c 	.word	0x20012e9c
 80014b8:	0800874c 	.word	0x0800874c
 80014bc:	08008754 	.word	0x08008754
 80014c0:	08008758 	.word	0x08008758
 80014c4:	0800875c 	.word	0x0800875c
 80014c8:	08008760 	.word	0x08008760
 80014cc:	20000014 	.word	0x20000014
 80014d0:	200000b0 	.word	0x200000b0
 80014d4:	20012e98 	.word	0x20012e98

080014d8 <get_number>:
	}
}

uint8_t get_number(uint8_t *p, int length)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
	int number;

	if (length > 1)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	dd0f      	ble.n	8001508 <get_number+0x30>
	{
		/* Convert only the first two char received to integers */
		number = ( ( (p[0] - 48) * 10 ) + (p[1] - 48) );
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	461a      	mov	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3301      	adds	r3, #1
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	3b30      	subs	r3, #48	; 0x30
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	e003      	b.n	8001510 <get_number+0x38>
	}else
	{
		/* Convert char to integer */
		number = p[0] - 48;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	3b30      	subs	r3, #48	; 0x30
 800150e:	60fb      	str	r3, [r7, #12]
	}

	return number;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	b2db      	uxtb	r3, r3
}
 8001514:	4618      	mov	r0, r3
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <rtc_task>:

void rtc_task(void* parameters)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b09a      	sub	sp, #104	; 0x68
 8001524:	af02      	add	r7, sp, #8
 8001526:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 8001528:	4bb2      	ldr	r3, [pc, #712]	; (80017f4 <rtc_task+0x2d4>)
 800152a:	64fb      	str	r3, [r7, #76]	; 0x4c
							"|         RTC          |\n"
							"========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 800152c:	4bb2      	ldr	r3, [pc, #712]	; (80017f8 <rtc_task+0x2d8>)
 800152e:	64bb      	str	r3, [r7, #72]	; 0x48
							"Enable reporting          ----> 2\n"
							"Exit                      ----> 3\n"
							"Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 8001530:	4bb2      	ldr	r3, [pc, #712]	; (80017fc <rtc_task+0x2dc>)
 8001532:	647b      	str	r3, [r7, #68]	; 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 8001534:	4bb2      	ldr	r3, [pc, #712]	; (8001800 <rtc_task+0x2e0>)
 8001536:	643b      	str	r3, [r7, #64]	; 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 8001538:	4bb2      	ldr	r3, [pc, #712]	; (8001804 <rtc_task+0x2e4>)
 800153a:	63fb      	str	r3, [r7, #60]	; 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 800153c:	4bb2      	ldr	r3, [pc, #712]	; (8001808 <rtc_task+0x2e8>)
 800153e:	63bb      	str	r3, [r7, #56]	; 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8001540:	4bb2      	ldr	r3, [pc, #712]	; (800180c <rtc_task+0x2ec>)
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8001544:	4bb2      	ldr	r3, [pc, #712]	; (8001810 <rtc_task+0x2f0>)
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001548:	4bb2      	ldr	r3, [pc, #712]	; (8001814 <rtc_task+0x2f4>)
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c

	const char *msg_conf = "Configuration successful\n";
 800154c:	4bb2      	ldr	r3, [pc, #712]	; (8001818 <rtc_task+0x2f8>)
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001550:	4bb2      	ldr	r3, [pc, #712]	; (800181c <rtc_task+0x2fc>)
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
	#define DAY_CONFIG 		2
	#define YEAR_CONFIG 	3

	while(1){
		/* Wait till some task notifies */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2300      	movs	r3, #0
 800155c:	2200      	movs	r2, #0
 800155e:	2100      	movs	r1, #0
 8001560:	2000      	movs	r0, #0
 8001562:	f005 f8f1 	bl	8006748 <xTaskGenericNotifyWait>

		/* Print the menu and show current date and time information */
		xQueueSend(q_print, &msg_rtc1, portMAX_DELAY);
 8001566:	4bae      	ldr	r3, [pc, #696]	; (8001820 <rtc_task+0x300>)
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800156e:	2300      	movs	r3, #0
 8001570:	f04f 32ff 	mov.w	r2, #4294967295
 8001574:	f003 fe34 	bl	80051e0 <xQueueGenericSend>
		show_time_date();
 8001578:	f7ff fc68 	bl	8000e4c <show_time_date>
		xQueueSend(q_print, &msg_rtc2, portMAX_DELAY);
 800157c:	4ba8      	ldr	r3, [pc, #672]	; (8001820 <rtc_task+0x300>)
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001584:	2300      	movs	r3, #0
 8001586:	f04f 32ff 	mov.w	r2, #4294967295
 800158a:	f003 fe29 	bl	80051e0 <xQueueGenericSend>


		while(current_state != sMainMenu){
 800158e:	bf00      	nop
 8001590:	e1a0      	b.n	80018d4 <rtc_task+0x3b4>

			/* Wait for command notification */
			xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001592:	f107 0320 	add.w	r3, r7, #32
 8001596:	f04f 32ff 	mov.w	r2, #4294967295
 800159a:	9200      	str	r2, [sp, #0]
 800159c:	2200      	movs	r2, #0
 800159e:	2100      	movs	r1, #0
 80015a0:	2000      	movs	r0, #0
 80015a2:	f005 f8d1 	bl	8006748 <xTaskGenericNotifyWait>

			cmd = (command_t*)cmd_addr;
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	65fb      	str	r3, [r7, #92]	; 0x5c

			switch(current_state)
 80015aa:	4b9e      	ldr	r3, [pc, #632]	; (8001824 <rtc_task+0x304>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	3b02      	subs	r3, #2
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	f200 818f 	bhi.w	80018d4 <rtc_task+0x3b4>
 80015b6:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <rtc_task+0x9c>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	080015cd 	.word	0x080015cd
 80015c0:	0800167f 	.word	0x0800167f
 80015c4:	0800176d 	.word	0x0800176d
 80015c8:	080018d3 	.word	0x080018d3
			{
				case sRtcMenu:{

					/* Process RTC menu commands */
					if (cmd->length == 1)
 80015cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015ce:	7a9b      	ldrb	r3, [r3, #10]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d148      	bne.n	8001666 <rtc_task+0x146>
					{
						menu_code = cmd->payload[0] - 48;
 80015d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	3b30      	subs	r3, #48	; 0x30
 80015da:	653b      	str	r3, [r7, #80]	; 0x50
 80015dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d835      	bhi.n	800164e <rtc_task+0x12e>
 80015e2:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <rtc_task+0xc8>)
 80015e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e8:	080015f9 	.word	0x080015f9
 80015ec:	08001613 	.word	0x08001613
 80015f0:	0800162d 	.word	0x0800162d
 80015f4:	08001647 	.word	0x08001647
						switch (menu_code)
						{
							case 0:
								current_state = sRtcTimeConfig;
 80015f8:	4b8a      	ldr	r3, [pc, #552]	; (8001824 <rtc_task+0x304>)
 80015fa:	2203      	movs	r2, #3
 80015fc:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 80015fe:	4b88      	ldr	r3, [pc, #544]	; (8001820 <rtc_task+0x300>)
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001606:	2300      	movs	r3, #0
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	f003 fde8 	bl	80051e0 <xQueueGenericSend>
								break;
 8001610:	e034      	b.n	800167c <rtc_task+0x15c>
							case 1:
								current_state = sRtcDateConfig;
 8001612:	4b84      	ldr	r3, [pc, #528]	; (8001824 <rtc_task+0x304>)
 8001614:	2204      	movs	r2, #4
 8001616:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 8001618:	4b81      	ldr	r3, [pc, #516]	; (8001820 <rtc_task+0x300>)
 800161a:	6818      	ldr	r0, [r3, #0]
 800161c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001620:	2300      	movs	r3, #0
 8001622:	f04f 32ff 	mov.w	r2, #4294967295
 8001626:	f003 fddb 	bl	80051e0 <xQueueGenericSend>
								break;
 800162a:	e027      	b.n	800167c <rtc_task+0x15c>
							case 2:
								current_state = sRtcReport;
 800162c:	4b7d      	ldr	r3, [pc, #500]	; (8001824 <rtc_task+0x304>)
 800162e:	2205      	movs	r2, #5
 8001630:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print, &msg_rtc_report, portMAX_DELAY);
 8001632:	4b7b      	ldr	r3, [pc, #492]	; (8001820 <rtc_task+0x300>)
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800163a:	2300      	movs	r3, #0
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	f003 fdce 	bl	80051e0 <xQueueGenericSend>
								break;
 8001644:	e01a      	b.n	800167c <rtc_task+0x15c>
							case 3:
								current_state = sMainMenu;
 8001646:	4b77      	ldr	r3, [pc, #476]	; (8001824 <rtc_task+0x304>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
								break;
 800164c:	e016      	b.n	800167c <rtc_task+0x15c>
							default:
								current_state = sMainMenu;
 800164e:	4b75      	ldr	r3, [pc, #468]	; (8001824 <rtc_task+0x304>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print, &msg_invalid, portMAX_DELAY);
 8001654:	4b72      	ldr	r3, [pc, #456]	; (8001820 <rtc_task+0x300>)
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	2300      	movs	r3, #0
 800165a:	f04f 32ff 	mov.w	r2, #4294967295
 800165e:	4972      	ldr	r1, [pc, #456]	; (8001828 <rtc_task+0x308>)
 8001660:	f003 fdbe 	bl	80051e0 <xQueueGenericSend>
 8001664:	e136      	b.n	80018d4 <rtc_task+0x3b4>
						}
					}else
					{
						current_state = sMainMenu;
 8001666:	4b6f      	ldr	r3, [pc, #444]	; (8001824 <rtc_task+0x304>)
 8001668:	2200      	movs	r2, #0
 800166a:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_invalid, portMAX_DELAY);
 800166c:	4b6c      	ldr	r3, [pc, #432]	; (8001820 <rtc_task+0x300>)
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	2300      	movs	r3, #0
 8001672:	f04f 32ff 	mov.w	r2, #4294967295
 8001676:	496c      	ldr	r1, [pc, #432]	; (8001828 <rtc_task+0x308>)
 8001678:	f003 fdb2 	bl	80051e0 <xQueueGenericSend>
					}
					break;
 800167c:	e12a      	b.n	80018d4 <rtc_task+0x3b4>
				}

				case sRtcTimeConfig:{
					switch (rtc_state)
 800167e:	4b6b      	ldr	r3, [pc, #428]	; (800182c <rtc_task+0x30c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d03b      	beq.n	80016fe <rtc_task+0x1de>
 8001686:	2b02      	cmp	r3, #2
 8001688:	f300 8124 	bgt.w	80018d4 <rtc_task+0x3b4>
 800168c:	2b00      	cmp	r3, #0
 800168e:	d002      	beq.n	8001696 <rtc_task+0x176>
 8001690:	2b01      	cmp	r3, #1
 8001692:	d01a      	beq.n	80016ca <rtc_task+0x1aa>
 8001694:	e11e      	b.n	80018d4 <rtc_task+0x3b4>
					{
						case HH_CONFIG:{
							/* Get the hour sent by the user */
							uint8_t hour = get_number(cmd->payload, cmd->length);
 8001696:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800169a:	7a9b      	ldrb	r3, [r3, #10]
 800169c:	4619      	mov	r1, r3
 800169e:	4610      	mov	r0, r2
 80016a0:	f7ff ff1a 	bl	80014d8 <get_number>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
							time.Hours = hour;
 80016aa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80016ae:	733b      	strb	r3, [r7, #12]
							rtc_state = MM_CONFIG;
 80016b0:	4b5e      	ldr	r3, [pc, #376]	; (800182c <rtc_task+0x30c>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 80016b6:	4b5a      	ldr	r3, [pc, #360]	; (8001820 <rtc_task+0x300>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80016be:	2300      	movs	r3, #0
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	f003 fd8c 	bl	80051e0 <xQueueGenericSend>
							break;}
 80016c8:	e04f      	b.n	800176a <rtc_task+0x24a>
						case MM_CONFIG:{
							/* Get the minutes sent by the user */
							uint8_t minute = get_number(cmd->payload, cmd->length);
 80016ca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ce:	7a9b      	ldrb	r3, [r3, #10]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f7ff ff00 	bl	80014d8 <get_number>
 80016d8:	4603      	mov	r3, r0
 80016da:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
							time.Minutes = minute;
 80016de:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80016e2:	737b      	strb	r3, [r7, #13]
							rtc_state = SS_CONFIG;
 80016e4:	4b51      	ldr	r3, [pc, #324]	; (800182c <rtc_task+0x30c>)
 80016e6:	2202      	movs	r2, #2
 80016e8:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 80016ea:	4b4d      	ldr	r3, [pc, #308]	; (8001820 <rtc_task+0x300>)
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80016f2:	2300      	movs	r3, #0
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	f003 fd72 	bl	80051e0 <xQueueGenericSend>
							break;}
 80016fc:	e035      	b.n	800176a <rtc_task+0x24a>
						case SS_CONFIG:{
							/* Get the seconds sent by the user */
							uint8_t second = get_number(cmd->payload, cmd->length);
 80016fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001702:	7a9b      	ldrb	r3, [r3, #10]
 8001704:	4619      	mov	r1, r3
 8001706:	4610      	mov	r0, r2
 8001708:	f7ff fee6 	bl	80014d8 <get_number>
 800170c:	4603      	mov	r3, r0
 800170e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							time.Seconds = second;
 8001712:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001716:	73bb      	strb	r3, [r7, #14]

							/* Validate that all the time information is valid */
							if ( !validate_rtc_information(&time, NULL) )
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fc28 	bl	8000f74 <validate_rtc_information>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d110      	bne.n	800174c <rtc_task+0x22c>
							{
								rtc_configure_time(&time);
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fbf8 	bl	8000f24 <rtc_configure_time>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001734:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <rtc_task+0x300>)
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800173c:	2300      	movs	r3, #0
 800173e:	f04f 32ff 	mov.w	r2, #4294967295
 8001742:	f003 fd4d 	bl	80051e0 <xQueueGenericSend>
								show_time_date();
 8001746:	f7ff fb81 	bl	8000e4c <show_time_date>
 800174a:	e007      	b.n	800175c <rtc_task+0x23c>
							}else
							{
								xQueueSend(q_print, &msg_invalid, portMAX_DELAY);
 800174c:	4b34      	ldr	r3, [pc, #208]	; (8001820 <rtc_task+0x300>)
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	2300      	movs	r3, #0
 8001752:	f04f 32ff 	mov.w	r2, #4294967295
 8001756:	4934      	ldr	r1, [pc, #208]	; (8001828 <rtc_task+0x308>)
 8001758:	f003 fd42 	bl	80051e0 <xQueueGenericSend>
							}

							/* Return to main menu */
							current_state = sMainMenu;
 800175c:	4b31      	ldr	r3, [pc, #196]	; (8001824 <rtc_task+0x304>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
							rtc_state = 0;
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <rtc_task+0x30c>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
							break;}
 8001768:	bf00      	nop
					}

					break;
 800176a:	e0b3      	b.n	80018d4 <rtc_task+0x3b4>
				}

				case sRtcDateConfig:{
					switch (rtc_state)
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <rtc_task+0x30c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b03      	cmp	r3, #3
 8001772:	f200 80af 	bhi.w	80018d4 <rtc_task+0x3b4>
 8001776:	a201      	add	r2, pc, #4	; (adr r2, 800177c <rtc_task+0x25c>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	0800178d 	.word	0x0800178d
 8001780:	080017c1 	.word	0x080017c1
 8001784:	08001831 	.word	0x08001831
 8001788:	08001865 	.word	0x08001865
					{
						case DATE_CONFIG:{
							/* Get the day sent by the user */
							uint8_t d = get_number(cmd->payload, cmd->length);
 800178c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800178e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001790:	7a9b      	ldrb	r3, [r3, #10]
 8001792:	4619      	mov	r1, r3
 8001794:	4610      	mov	r0, r2
 8001796:	f7ff fe9f 	bl	80014d8 <get_number>
 800179a:	4603      	mov	r3, r0
 800179c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
							date.Date = d;
 80017a0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80017a4:	72bb      	strb	r3, [r7, #10]
							rtc_state = MONTH_CONFIG;
 80017a6:	4b21      	ldr	r3, [pc, #132]	; (800182c <rtc_task+0x30c>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <rtc_task+0x300>)
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80017b4:	2300      	movs	r3, #0
 80017b6:	f04f 32ff 	mov.w	r2, #4294967295
 80017ba:	f003 fd11 	bl	80051e0 <xQueueGenericSend>
							break;}
 80017be:	e087      	b.n	80018d0 <rtc_task+0x3b0>
						case MONTH_CONFIG:{
							/* Get the month sent by the user */
							uint8_t month = get_number(cmd->payload, cmd->length);
 80017c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80017c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c4:	7a9b      	ldrb	r3, [r3, #10]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4610      	mov	r0, r2
 80017ca:	f7ff fe85 	bl	80014d8 <get_number>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
							date.Month = month;
 80017d4:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80017d8:	727b      	strb	r3, [r7, #9]
							rtc_state = DAY_CONFIG;
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <rtc_task+0x30c>)
 80017dc:	2202      	movs	r2, #2
 80017de:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <rtc_task+0x300>)
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80017e8:	2300      	movs	r3, #0
 80017ea:	f04f 32ff 	mov.w	r2, #4294967295
 80017ee:	f003 fcf7 	bl	80051e0 <xQueueGenericSend>
							break;}
 80017f2:	e06d      	b.n	80018d0 <rtc_task+0x3b0>
 80017f4:	08008764 	.word	0x08008764
 80017f8:	080087b0 	.word	0x080087b0
 80017fc:	08008854 	.word	0x08008854
 8001800:	08008868 	.word	0x08008868
 8001804:	08008880 	.word	0x08008880
 8001808:	08008898 	.word	0x08008898
 800180c:	080088ac 	.word	0x080088ac
 8001810:	080088c0 	.word	0x080088c0
 8001814:	080088d8 	.word	0x080088d8
 8001818:	080088ec 	.word	0x080088ec
 800181c:	08008908 	.word	0x08008908
 8001820:	20012e9c 	.word	0x20012e9c
 8001824:	200000b0 	.word	0x200000b0
 8001828:	20000014 	.word	0x20000014
 800182c:	20000108 	.word	0x20000108
						case DAY_CONFIG:{
							/* Get the day of week sent by the user */
							uint8_t day = get_number(cmd->payload, cmd->length);
 8001830:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001834:	7a9b      	ldrb	r3, [r3, #10]
 8001836:	4619      	mov	r1, r3
 8001838:	4610      	mov	r0, r2
 800183a:	f7ff fe4d 	bl	80014d8 <get_number>
 800183e:	4603      	mov	r3, r0
 8001840:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
							date.WeekDay = day;
 8001844:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001848:	723b      	strb	r3, [r7, #8]
							rtc_state = YEAR_CONFIG;
 800184a:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <rtc_task+0x3d4>)
 800184c:	2203      	movs	r2, #3
 800184e:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <rtc_task+0x3d8>)
 8001852:	6818      	ldr	r0, [r3, #0]
 8001854:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001858:	2300      	movs	r3, #0
 800185a:	f04f 32ff 	mov.w	r2, #4294967295
 800185e:	f003 fcbf 	bl	80051e0 <xQueueGenericSend>
							break;}
 8001862:	e035      	b.n	80018d0 <rtc_task+0x3b0>
						case YEAR_CONFIG:{
							/* Get the year sent by the user */
							uint8_t year = get_number(cmd->payload, cmd->length);
 8001864:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001868:	7a9b      	ldrb	r3, [r3, #10]
 800186a:	4619      	mov	r1, r3
 800186c:	4610      	mov	r0, r2
 800186e:	f7ff fe33 	bl	80014d8 <get_number>
 8001872:	4603      	mov	r3, r0
 8001874:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
							date.Year = year;
 8001878:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800187c:	72fb      	strb	r3, [r7, #11]

							/* Validate that all the date information is valid */
							if ( !validate_rtc_information(NULL, &date) )
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	4619      	mov	r1, r3
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff fb75 	bl	8000f74 <validate_rtc_information>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d110      	bne.n	80018b2 <rtc_task+0x392>
							{
								rtc_configure_date(&date);
 8001890:	f107 0308 	add.w	r3, r7, #8
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fb5d 	bl	8000f54 <rtc_configure_date>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <rtc_task+0x3d8>)
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80018a2:	2300      	movs	r3, #0
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	f003 fc9a 	bl	80051e0 <xQueueGenericSend>
								show_time_date();
 80018ac:	f7ff face 	bl	8000e4c <show_time_date>
 80018b0:	e007      	b.n	80018c2 <rtc_task+0x3a2>
							}else
							{
								xQueueSend(q_print, &msg_invalid, portMAX_DELAY);
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <rtc_task+0x3d8>)
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	2300      	movs	r3, #0
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	490f      	ldr	r1, [pc, #60]	; (80018fc <rtc_task+0x3dc>)
 80018be:	f003 fc8f 	bl	80051e0 <xQueueGenericSend>
							}

							/* Return to main menu */
							current_state = sMainMenu;
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <rtc_task+0x3e0>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
							rtc_state = 0;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <rtc_task+0x3d4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
							break;}
 80018ce:	bf00      	nop
					}

					break;}
 80018d0:	e000      	b.n	80018d4 <rtc_task+0x3b4>

				case sRtcReport:{
					/*TODO: enable or disable RTC current time reporting over ITM printf */
					break;}
 80018d2:	bf00      	nop
		while(current_state != sMainMenu){
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <rtc_task+0x3e0>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f47f ae5a 	bne.w	8001592 <rtc_task+0x72>
			}

		}

		/* Notify menu task */
		xTaskNotify(handle_menu_task, 0, eNoAction);
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <rtc_task+0x3e4>)
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	2300      	movs	r3, #0
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2300      	movs	r3, #0
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	f004 ffac 	bl	8006848 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80018f0:	e630      	b.n	8001554 <rtc_task+0x34>
 80018f2:	bf00      	nop
 80018f4:	20000108 	.word	0x20000108
 80018f8:	20012e9c 	.word	0x20012e9c
 80018fc:	20000014 	.word	0x20000014
 8001900:	200000b0 	.word	0x200000b0
 8001904:	20012e98 	.word	0x20012e98

08001908 <print_task>:

		}
}

void print_task(void* parameters)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	while(1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <print_task+0x38>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f107 010c 	add.w	r1, r7, #12
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	4618      	mov	r0, r3
 800191e:	f003 fe07 	bl	8005530 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8001922:	68fc      	ldr	r4, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fc7c 	bl	8000224 <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	b29a      	uxth	r2, r3
 8001930:	f04f 33ff 	mov.w	r3, #4294967295
 8001934:	4621      	mov	r1, r4
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <print_task+0x3c>)
 8001938:	f002 fb39 	bl	8003fae <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 800193c:	e7e8      	b.n	8001910 <print_task+0x8>
 800193e:	bf00      	nop
 8001940:	20012e9c 	.word	0x20012e9c
 8001944:	20012ecc 	.word	0x20012ecc

08001948 <command_task>:
	}
}

void command_task(void* parameters)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af02      	add	r7, sp, #8
 800194e:	6078      	str	r0, [r7, #4]
	command_t cmd;

	while(1)
	{
		/* Wait indefinitely for a notification */
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2300      	movs	r3, #0
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	2000      	movs	r0, #0
 800195e:	f004 fef3 	bl	8006748 <xTaskGenericNotifyWait>
 8001962:	6178      	str	r0, [r7, #20]
		if (status == pdTRUE)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d1f2      	bne.n	8001950 <command_task+0x8>
		{
			process_command(&cmd);
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	4618      	mov	r0, r3
 8001970:	f000 f802 	bl	8001978 <process_command>
		status = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001974:	e7ec      	b.n	8001950 <command_task+0x8>
	...

08001978 <process_command>:
		}
	}
}

void process_command(command_t *cmd)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af02      	add	r7, sp, #8
 800197e:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f000 f835 	bl	80019f0 <extract_command>

	switch(current_state)
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <process_command+0x68>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b05      	cmp	r3, #5
 800198c:	dc24      	bgt.n	80019d8 <process_command+0x60>
 800198e:	2b02      	cmp	r3, #2
 8001990:	da18      	bge.n	80019c4 <process_command+0x4c>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <process_command+0x24>
 8001996:	2b01      	cmp	r3, #1
 8001998:	d00a      	beq.n	80019b0 <process_command+0x38>
		case sRtcTimeConfig:
		case sRtcReport:
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
			break;
	}
}
 800199a:	e01d      	b.n	80019d8 <process_command+0x60>
			xTaskNotify(handle_menu_task, (uint32_t)cmd, eSetValueWithOverwrite);
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <process_command+0x6c>)
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	2300      	movs	r3, #0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2303      	movs	r3, #3
 80019a8:	2100      	movs	r1, #0
 80019aa:	f004 ff4d 	bl	8006848 <xTaskGenericNotify>
			break;
 80019ae:	e013      	b.n	80019d8 <process_command+0x60>
			xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <process_command+0x70>)
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	2300      	movs	r3, #0
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2303      	movs	r3, #3
 80019bc:	2100      	movs	r1, #0
 80019be:	f004 ff43 	bl	8006848 <xTaskGenericNotify>
			break;
 80019c2:	e009      	b.n	80019d8 <process_command+0x60>
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <process_command+0x74>)
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	2300      	movs	r3, #0
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2303      	movs	r3, #3
 80019d0:	2100      	movs	r1, #0
 80019d2:	f004 ff39 	bl	8006848 <xTaskGenericNotify>
			break;
 80019d6:	bf00      	nop
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200000b0 	.word	0x200000b0
 80019e4:	20012e98 	.word	0x20012e98
 80019e8:	20012ec4 	.word	0x20012ec4
 80019ec:	20012e8c 	.word	0x20012e8c

080019f0 <extract_command>:

int extract_command(command_t *cmd)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	/* Returns if there are no messages in the queue */
	status = uxQueueMessagesWaiting(q_data);
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <extract_command+0x70>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 ff06 	bl	800580e <uxQueueMessagesWaiting>
 8001a02:	4603      	mov	r3, r0
 8001a04:	613b      	str	r3, [r7, #16]
	if (!status) return -1;
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <extract_command+0x22>
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	e022      	b.n	8001a58 <extract_command+0x68>

	uint8_t i = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
	do
	{
		status = xQueueReceive(q_data, &item, 0);
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <extract_command+0x70>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f107 010f 	add.w	r1, r7, #15
 8001a1e:	2200      	movs	r2, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f003 fd85 	bl	8005530 <xQueueReceive>
 8001a26:	6138      	str	r0, [r7, #16]
		if (status == pdTRUE)	cmd->payload[i++] = item;
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d106      	bne.n	8001a3c <extract_command+0x4c>
 8001a2e:	7dfb      	ldrb	r3, [r7, #23]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	75fa      	strb	r2, [r7, #23]
 8001a34:	461a      	mov	r2, r3
 8001a36:	7bf9      	ldrb	r1, [r7, #15]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	2b0a      	cmp	r3, #10
 8001a40:	d1e9      	bne.n	8001a16 <extract_command+0x26>
	cmd->payload[i-1] = '\0';
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
 8001a44:	3b01      	subs	r3, #1
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	2100      	movs	r1, #0
 8001a4a:	54d1      	strb	r1, [r2, r3]
	cmd->length = i - 1;
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	729a      	strb	r2, [r3, #10]

	return 0;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20012e90 	.word	0x20012e90

08001a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a68:	480d      	ldr	r0, [pc, #52]	; (8001aa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a6a:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a70:	e002      	b.n	8001a78 <LoopCopyDataInit>

08001a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a76:	3304      	adds	r3, #4

08001a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a7c:	d3f9      	bcc.n	8001a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7e:	4a0b      	ldr	r2, [pc, #44]	; (8001aac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a80:	4c0b      	ldr	r4, [pc, #44]	; (8001ab0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a84:	e001      	b.n	8001a8a <LoopFillZerobss>

08001a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a88:	3204      	adds	r2, #4

08001a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a8c:	d3fb      	bcc.n	8001a86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a8e:	f7ff fc07 	bl	80012a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a92:	f006 f907 	bl	8007ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a96:	f7fe fee9 	bl	800086c <main>
  bx  lr    
 8001a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aa4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001aa8:	08008a00 	.word	0x08008a00
  ldr r2, =_sbss
 8001aac:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001ab0:	20012fac 	.word	0x20012fac

08001ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab4:	e7fe      	b.n	8001ab4 <ADC_IRQHandler>
	...

08001ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001abc:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <HAL_Init+0x40>)
 8001ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_Init+0x40>)
 8001ace:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_Init+0x40>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <HAL_Init+0x40>)
 8001ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f000 f8d8 	bl	8001c96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae6:	200f      	movs	r0, #15
 8001ae8:	f7ff fb18 	bl	800111c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aec:	f7ff fa74 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40023c00 	.word	0x40023c00

08001afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_IncTick+0x20>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x24>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_IncTick+0x24>)
 8001b0e:	6013      	str	r3, [r2, #0]
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	2000001c 	.word	0x2000001c
 8001b20:	20012f58 	.word	0x20012f58

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20012f58 	.word	0x20012f58

08001b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <__NVIC_SetPriorityGrouping+0x44>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <__NVIC_GetPriorityGrouping+0x18>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	f003 0307 	and.w	r3, r3, #7
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db0b      	blt.n	8001bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	4907      	ldr	r1, [pc, #28]	; (8001bd8 <__NVIC_EnableIRQ+0x38>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	095b      	lsrs	r3, r3, #5
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000e100 	.word	0xe000e100

08001bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	db0a      	blt.n	8001c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	490c      	ldr	r1, [pc, #48]	; (8001c28 <__NVIC_SetPriority+0x4c>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	0112      	lsls	r2, r2, #4
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c04:	e00a      	b.n	8001c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4908      	ldr	r1, [pc, #32]	; (8001c2c <__NVIC_SetPriority+0x50>)
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	3b04      	subs	r3, #4
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	440b      	add	r3, r1
 8001c1a:	761a      	strb	r2, [r3, #24]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000e100 	.word	0xe000e100
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f1c3 0307 	rsb	r3, r3, #7
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	bf28      	it	cs
 8001c4e:	2304      	movcs	r3, #4
 8001c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3304      	adds	r3, #4
 8001c56:	2b06      	cmp	r3, #6
 8001c58:	d902      	bls.n	8001c60 <NVIC_EncodePriority+0x30>
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3b03      	subs	r3, #3
 8001c5e:	e000      	b.n	8001c62 <NVIC_EncodePriority+0x32>
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	f04f 32ff 	mov.w	r2, #4294967295
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	401a      	ands	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43d9      	mvns	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c88:	4313      	orrs	r3, r2
         );
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ff4c 	bl	8001b3c <__NVIC_SetPriorityGrouping>
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbe:	f7ff ff61 	bl	8001b84 <__NVIC_GetPriorityGrouping>
 8001cc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	6978      	ldr	r0, [r7, #20]
 8001cca:	f7ff ffb1 	bl	8001c30 <NVIC_EncodePriority>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff80 	bl	8001bdc <__NVIC_SetPriority>
}
 8001cdc:	bf00      	nop
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff54 	bl	8001ba0 <__NVIC_EnableIRQ>
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d0e:	f7ff ff09 	bl	8001b24 <HAL_GetTick>
 8001d12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d008      	beq.n	8001d32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2280      	movs	r2, #128	; 0x80
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e052      	b.n	8001dd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0216 	bic.w	r2, r2, #22
 8001d40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	695a      	ldr	r2, [r3, #20]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d103      	bne.n	8001d62 <HAL_DMA_Abort+0x62>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d007      	beq.n	8001d72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0208 	bic.w	r2, r2, #8
 8001d70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d82:	e013      	b.n	8001dac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d84:	f7ff fece 	bl	8001b24 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	d90c      	bls.n	8001dac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2220      	movs	r2, #32
 8001d96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e015      	b.n	8001dd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1e4      	bne.n	8001d84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbe:	223f      	movs	r2, #63	; 0x3f
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d004      	beq.n	8001dfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2280      	movs	r2, #128	; 0x80
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00c      	b.n	8001e18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2205      	movs	r2, #5
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	e165      	b.n	800210c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e40:	2201      	movs	r2, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	f040 8154 	bne.w	8002106 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d005      	beq.n	8001e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d130      	bne.n	8001ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2203      	movs	r2, #3
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eac:	2201      	movs	r2, #1
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 0201 	and.w	r2, r3, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d017      	beq.n	8001f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	2203      	movs	r2, #3
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d123      	bne.n	8001f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	08da      	lsrs	r2, r3, #3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3208      	adds	r2, #8
 8001f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	220f      	movs	r2, #15
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	08da      	lsrs	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3208      	adds	r2, #8
 8001f62:	69b9      	ldr	r1, [r7, #24]
 8001f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0203 	and.w	r2, r3, #3
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80ae 	beq.w	8002106 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4b5d      	ldr	r3, [pc, #372]	; (8002124 <HAL_GPIO_Init+0x300>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a5c      	ldr	r2, [pc, #368]	; (8002124 <HAL_GPIO_Init+0x300>)
 8001fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b5a      	ldr	r3, [pc, #360]	; (8002124 <HAL_GPIO_Init+0x300>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fc6:	4a58      	ldr	r2, [pc, #352]	; (8002128 <HAL_GPIO_Init+0x304>)
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	220f      	movs	r2, #15
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4f      	ldr	r2, [pc, #316]	; (800212c <HAL_GPIO_Init+0x308>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d025      	beq.n	800203e <HAL_GPIO_Init+0x21a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4e      	ldr	r2, [pc, #312]	; (8002130 <HAL_GPIO_Init+0x30c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01f      	beq.n	800203a <HAL_GPIO_Init+0x216>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4d      	ldr	r2, [pc, #308]	; (8002134 <HAL_GPIO_Init+0x310>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d019      	beq.n	8002036 <HAL_GPIO_Init+0x212>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4c      	ldr	r2, [pc, #304]	; (8002138 <HAL_GPIO_Init+0x314>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <HAL_GPIO_Init+0x20e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4b      	ldr	r2, [pc, #300]	; (800213c <HAL_GPIO_Init+0x318>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00d      	beq.n	800202e <HAL_GPIO_Init+0x20a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4a      	ldr	r2, [pc, #296]	; (8002140 <HAL_GPIO_Init+0x31c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0x206>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a49      	ldr	r2, [pc, #292]	; (8002144 <HAL_GPIO_Init+0x320>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_GPIO_Init+0x202>
 8002022:	2306      	movs	r3, #6
 8002024:	e00c      	b.n	8002040 <HAL_GPIO_Init+0x21c>
 8002026:	2307      	movs	r3, #7
 8002028:	e00a      	b.n	8002040 <HAL_GPIO_Init+0x21c>
 800202a:	2305      	movs	r3, #5
 800202c:	e008      	b.n	8002040 <HAL_GPIO_Init+0x21c>
 800202e:	2304      	movs	r3, #4
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x21c>
 8002032:	2303      	movs	r3, #3
 8002034:	e004      	b.n	8002040 <HAL_GPIO_Init+0x21c>
 8002036:	2302      	movs	r3, #2
 8002038:	e002      	b.n	8002040 <HAL_GPIO_Init+0x21c>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_GPIO_Init+0x21c>
 800203e:	2300      	movs	r3, #0
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	f002 0203 	and.w	r2, r2, #3
 8002046:	0092      	lsls	r2, r2, #2
 8002048:	4093      	lsls	r3, r2
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002050:	4935      	ldr	r1, [pc, #212]	; (8002128 <HAL_GPIO_Init+0x304>)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	3302      	adds	r3, #2
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800205e:	4b3a      	ldr	r3, [pc, #232]	; (8002148 <HAL_GPIO_Init+0x324>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002082:	4a31      	ldr	r2, [pc, #196]	; (8002148 <HAL_GPIO_Init+0x324>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002088:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_GPIO_Init+0x324>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ac:	4a26      	ldr	r2, [pc, #152]	; (8002148 <HAL_GPIO_Init+0x324>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b2:	4b25      	ldr	r3, [pc, #148]	; (8002148 <HAL_GPIO_Init+0x324>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020d6:	4a1c      	ldr	r2, [pc, #112]	; (8002148 <HAL_GPIO_Init+0x324>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <HAL_GPIO_Init+0x324>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002100:	4a11      	ldr	r2, [pc, #68]	; (8002148 <HAL_GPIO_Init+0x324>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3301      	adds	r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	2b0f      	cmp	r3, #15
 8002110:	f67f ae96 	bls.w	8001e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	40013800 	.word	0x40013800
 800212c:	40020000 	.word	0x40020000
 8002130:	40020400 	.word	0x40020400
 8002134:	40020800 	.word	0x40020800
 8002138:	40020c00 	.word	0x40020c00
 800213c:	40021000 	.word	0x40021000
 8002140:	40021400 	.word	0x40021400
 8002144:	40021800 	.word	0x40021800
 8002148:	40013c00 	.word	0x40013c00

0800214c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	807b      	strh	r3, [r7, #2]
 8002158:	4613      	mov	r3, r2
 800215a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800215c:	787b      	ldrb	r3, [r7, #1]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002168:	e003      	b.n	8002172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216a:	887b      	ldrh	r3, [r7, #2]
 800216c:	041a      	lsls	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	619a      	str	r2, [r3, #24]
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800218a:	4b08      	ldr	r3, [pc, #32]	; (80021ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d006      	beq.n	80021a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002196:	4a05      	ldr	r2, [pc, #20]	; (80021ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800219c:	88fb      	ldrh	r3, [r7, #6]
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f806 	bl	80021b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40013c00 	.word	0x40013c00

080021b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0cc      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b68      	ldr	r3, [pc, #416]	; (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d90c      	bls.n	8002204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b65      	ldr	r3, [pc, #404]	; (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b63      	ldr	r3, [pc, #396]	; (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0b8      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800221c:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a58      	ldr	r2, [pc, #352]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002226:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002234:	4b53      	ldr	r3, [pc, #332]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a52      	ldr	r2, [pc, #328]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800223e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002240:	4b50      	ldr	r3, [pc, #320]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	494d      	ldr	r1, [pc, #308]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d044      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b47      	ldr	r3, [pc, #284]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d119      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e07f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d003      	beq.n	8002286 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002282:	2b03      	cmp	r3, #3
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002286:	4b3f      	ldr	r3, [pc, #252]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e06f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e067      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	4b37      	ldr	r3, [pc, #220]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f023 0203 	bic.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4934      	ldr	r1, [pc, #208]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b8:	f7ff fc34 	bl	8001b24 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c0:	f7ff fc30 	bl	8001b24 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e04f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 020c 	and.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1eb      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 030f 	and.w	r3, r3, #15
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d20c      	bcs.n	8002310 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b22      	ldr	r3, [pc, #136]	; (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e032      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4916      	ldr	r1, [pc, #88]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	490e      	ldr	r1, [pc, #56]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800234e:	f000 fbb1 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002352:	4602      	mov	r2, r0
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	490a      	ldr	r1, [pc, #40]	; (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	5ccb      	ldrb	r3, [r1, r3]
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	4a09      	ldr	r2, [pc, #36]	; (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_RCC_ClockConfig+0x1c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe fed4 	bl	800111c <HAL_InitTick>

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023c00 	.word	0x40023c00
 8002384:	40023800 	.word	0x40023800
 8002388:	08008944 	.word	0x08008944
 800238c:	20000010 	.word	0x20000010
 8002390:	20000018 	.word	0x20000018

08002394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	20000010 	.word	0x20000010

080023ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023b0:	f7ff fff0 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	0a9b      	lsrs	r3, r3, #10
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	4903      	ldr	r1, [pc, #12]	; (80023d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40023800 	.word	0x40023800
 80023d0:	08008954 	.word	0x08008954

080023d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023d8:	f7ff ffdc 	bl	8002394 <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0b5b      	lsrs	r3, r3, #13
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4903      	ldr	r1, [pc, #12]	; (80023f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	08008954 	.word	0x08008954

080023fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	220f      	movs	r2, #15
 800240a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_RCC_GetClockConfig+0x5c>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0203 	and.w	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_RCC_GetClockConfig+0x5c>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_RCC_GetClockConfig+0x5c>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_RCC_GetClockConfig+0x5c>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	08db      	lsrs	r3, r3, #3
 8002436:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <HAL_RCC_GetClockConfig+0x60>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 020f 	and.w	r2, r3, #15
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	40023c00 	.word	0x40023c00

08002460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08c      	sub	sp, #48	; 0x30
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d010      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002498:	4b6f      	ldr	r3, [pc, #444]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800249a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800249e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	496c      	ldr	r1, [pc, #432]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80024b6:	2301      	movs	r3, #1
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d010      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80024c6:	4b64      	ldr	r3, [pc, #400]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024cc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d4:	4960      	ldr	r1, [pc, #384]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80024e4:	2301      	movs	r3, #1
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d017      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024f4:	4b58      	ldr	r3, [pc, #352]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	4955      	ldr	r1, [pc, #340]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002512:	d101      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002514:	2301      	movs	r3, #1
 8002516:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002520:	2301      	movs	r3, #1
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d017      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002530:	4b49      	ldr	r3, [pc, #292]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002536:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	4946      	ldr	r1, [pc, #280]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800254e:	d101      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002550:	2301      	movs	r3, #1
 8002552:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800255c:	2301      	movs	r3, #1
 800255e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 808a 	beq.w	8002682 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b39      	ldr	r3, [pc, #228]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a38      	ldr	r2, [pc, #224]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b36      	ldr	r3, [pc, #216]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800258a:	4b34      	ldr	r3, [pc, #208]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a33      	ldr	r2, [pc, #204]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002596:	f7ff fac5 	bl	8001b24 <HAL_GetTick>
 800259a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7ff fac1 	bl	8001b24 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e278      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025b0:	4b2a      	ldr	r3, [pc, #168]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025bc:	4b26      	ldr	r3, [pc, #152]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d02f      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d4:	6a3a      	ldr	r2, [r7, #32]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d028      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025da:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025e4:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025ea:	4b1d      	ldr	r3, [pc, #116]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025f0:	4a19      	ldr	r2, [pc, #100]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025f6:	4b18      	ldr	r3, [pc, #96]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d114      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002602:	f7ff fa8f 	bl	8001b24 <HAL_GetTick>
 8002606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7ff fa8b 	bl	8001b24 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e240      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ee      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002638:	d114      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800263a:	4b07      	ldr	r3, [pc, #28]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800264a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264e:	4902      	ldr	r1, [pc, #8]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002650:	4313      	orrs	r3, r2
 8002652:	608b      	str	r3, [r1, #8]
 8002654:	e00c      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	40007000 	.word	0x40007000
 8002660:	42470e40 	.word	0x42470e40
 8002664:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a49      	ldr	r2, [pc, #292]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800266a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800266e:	6093      	str	r3, [r2, #8]
 8002670:	4b47      	ldr	r3, [pc, #284]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002672:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	4944      	ldr	r1, [pc, #272]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800267e:	4313      	orrs	r3, r2
 8002680:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	2b00      	cmp	r3, #0
 800268c:	d004      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002694:	4b3f      	ldr	r3, [pc, #252]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002696:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80026a4:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	4937      	ldr	r1, [pc, #220]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026c6:	4b32      	ldr	r3, [pc, #200]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026cc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d4:	492e      	ldr	r1, [pc, #184]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d011      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026e8:	4b29      	ldr	r3, [pc, #164]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ee:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	4926      	ldr	r1, [pc, #152]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002706:	d101      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002708:	2301      	movs	r3, #1
 800270a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002718:	4b1d      	ldr	r3, [pc, #116]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800271a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800271e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	491a      	ldr	r1, [pc, #104]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002736:	2b00      	cmp	r3, #0
 8002738:	d011      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800273c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002740:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002748:	4911      	ldr	r1, [pc, #68]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002758:	d101      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800275a:	2301      	movs	r3, #1
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002760:	2b01      	cmp	r3, #1
 8002762:	d005      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800276c:	f040 80ff 	bne.w	800296e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002776:	f7ff f9d5 	bl	8001b24 <HAL_GetTick>
 800277a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800277c:	e00e      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800277e:	f7ff f9d1 	bl	8001b24 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d907      	bls.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e188      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002790:	40023800 	.word	0x40023800
 8002794:	424711e0 	.word	0x424711e0
 8002798:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800279c:	4b7e      	ldr	r3, [pc, #504]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ea      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d009      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d028      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d124      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80027d0:	4b71      	ldr	r3, [pc, #452]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d6:	0c1b      	lsrs	r3, r3, #16
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	3301      	adds	r3, #1
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027e2:	4b6d      	ldr	r3, [pc, #436]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e8:	0e1b      	lsrs	r3, r3, #24
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	019b      	lsls	r3, r3, #6
 80027fa:	431a      	orrs	r2, r3
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	085b      	lsrs	r3, r3, #1
 8002800:	3b01      	subs	r3, #1
 8002802:	041b      	lsls	r3, r3, #16
 8002804:	431a      	orrs	r2, r3
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	071b      	lsls	r3, r3, #28
 8002812:	4961      	ldr	r1, [pc, #388]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002838:	2b00      	cmp	r3, #0
 800283a:	d035      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002844:	d130      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002846:	4b54      	ldr	r3, [pc, #336]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	3301      	adds	r3, #1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002858:	4b4f      	ldr	r3, [pc, #316]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800285a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285e:	0f1b      	lsrs	r3, r3, #28
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	019b      	lsls	r3, r3, #6
 8002870:	431a      	orrs	r2, r3
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	3b01      	subs	r3, #1
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	431a      	orrs	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	071b      	lsls	r3, r3, #28
 8002888:	4943      	ldr	r1, [pc, #268]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002890:	4b41      	ldr	r3, [pc, #260]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002896:	f023 021f 	bic.w	r2, r3, #31
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	3b01      	subs	r3, #1
 80028a0:	493d      	ldr	r1, [pc, #244]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d029      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028bc:	d124      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80028be:	4b36      	ldr	r3, [pc, #216]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	3301      	adds	r3, #1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028d0:	4b31      	ldr	r3, [pc, #196]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d6:	0f1b      	lsrs	r3, r3, #28
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	019b      	lsls	r3, r3, #6
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	085b      	lsrs	r3, r3, #1
 80028f0:	3b01      	subs	r3, #1
 80028f2:	041b      	lsls	r3, r3, #16
 80028f4:	431a      	orrs	r2, r3
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	431a      	orrs	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	071b      	lsls	r3, r3, #28
 8002900:	4925      	ldr	r1, [pc, #148]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002910:	2b00      	cmp	r3, #0
 8002912:	d016      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	019b      	lsls	r3, r3, #6
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	085b      	lsrs	r3, r3, #1
 8002926:	3b01      	subs	r3, #1
 8002928:	041b      	lsls	r3, r3, #16
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	061b      	lsls	r3, r3, #24
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	071b      	lsls	r3, r3, #28
 800293a:	4917      	ldr	r1, [pc, #92]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002944:	2201      	movs	r2, #1
 8002946:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002948:	f7ff f8ec 	bl	8001b24 <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002950:	f7ff f8e8 	bl	8001b24 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e09f      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	2b01      	cmp	r3, #1
 8002972:	f040 8095 	bne.w	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800297c:	f7ff f8d2 	bl	8001b24 <HAL_GetTick>
 8002980:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002982:	e00f      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002984:	f7ff f8ce 	bl	8001b24 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d908      	bls.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e085      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	42470068 	.word	0x42470068
 80029a0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80029a4:	4b41      	ldr	r3, [pc, #260]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b0:	d0e8      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d02b      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d127      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80029da:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	3301      	adds	r3, #1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	019b      	lsls	r3, r3, #6
 80029f6:	431a      	orrs	r2, r3
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	085b      	lsrs	r3, r3, #1
 80029fc:	3b01      	subs	r3, #1
 80029fe:	041b      	lsls	r3, r3, #16
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	061b      	lsls	r3, r3, #24
 8002a08:	4928      	ldr	r1, [pc, #160]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a10:	4b26      	ldr	r3, [pc, #152]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a16:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	4922      	ldr	r1, [pc, #136]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01d      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a3e:	d118      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	0e1b      	lsrs	r3, r3, #24
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	019b      	lsls	r3, r3, #6
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	3b01      	subs	r3, #1
 8002a62:	041b      	lsls	r3, r3, #16
 8002a64:	431a      	orrs	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	4910      	ldr	r1, [pc, #64]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a72:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a78:	f7ff f854 	bl	8001b24 <HAL_GetTick>
 8002a7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a80:	f7ff f850 	bl	8001b24 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e007      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a9e:	d1ef      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3730      	adds	r7, #48	; 0x30
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	42470070 	.word	0x42470070

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab8:	b088      	sub	sp, #32
 8002aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad0:	4bce      	ldr	r3, [pc, #824]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	f200 818d 	bhi.w	8002df8 <HAL_RCC_GetSysClockFreq+0x344>
 8002ade:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <HAL_RCC_GetSysClockFreq+0x30>)
 8002ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae4:	08002b19 	.word	0x08002b19
 8002ae8:	08002df9 	.word	0x08002df9
 8002aec:	08002df9 	.word	0x08002df9
 8002af0:	08002df9 	.word	0x08002df9
 8002af4:	08002b1f 	.word	0x08002b1f
 8002af8:	08002df9 	.word	0x08002df9
 8002afc:	08002df9 	.word	0x08002df9
 8002b00:	08002df9 	.word	0x08002df9
 8002b04:	08002b25 	.word	0x08002b25
 8002b08:	08002df9 	.word	0x08002df9
 8002b0c:	08002df9 	.word	0x08002df9
 8002b10:	08002df9 	.word	0x08002df9
 8002b14:	08002c99 	.word	0x08002c99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b18:	4bbd      	ldr	r3, [pc, #756]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002b1a:	61bb      	str	r3, [r7, #24]
       break;
 8002b1c:	e16f      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b1e:	4bbd      	ldr	r3, [pc, #756]	; (8002e14 <HAL_RCC_GetSysClockFreq+0x360>)
 8002b20:	61bb      	str	r3, [r7, #24]
      break;
 8002b22:	e16c      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b24:	4bb9      	ldr	r3, [pc, #740]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b2c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b2e:	4bb7      	ldr	r3, [pc, #732]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d053      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3a:	4bb4      	ldr	r3, [pc, #720]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	099b      	lsrs	r3, r3, #6
 8002b40:	461a      	mov	r2, r3
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b4a:	f04f 0100 	mov.w	r1, #0
 8002b4e:	ea02 0400 	and.w	r4, r2, r0
 8002b52:	603c      	str	r4, [r7, #0]
 8002b54:	400b      	ands	r3, r1
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	4629      	mov	r1, r5
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	014b      	lsls	r3, r1, #5
 8002b6a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b6e:	0142      	lsls	r2, r0, #5
 8002b70:	4610      	mov	r0, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	4623      	mov	r3, r4
 8002b76:	1ac0      	subs	r0, r0, r3
 8002b78:	462b      	mov	r3, r5
 8002b7a:	eb61 0103 	sbc.w	r1, r1, r3
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	018b      	lsls	r3, r1, #6
 8002b88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b8c:	0182      	lsls	r2, r0, #6
 8002b8e:	1a12      	subs	r2, r2, r0
 8002b90:	eb63 0301 	sbc.w	r3, r3, r1
 8002b94:	f04f 0000 	mov.w	r0, #0
 8002b98:	f04f 0100 	mov.w	r1, #0
 8002b9c:	00d9      	lsls	r1, r3, #3
 8002b9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ba2:	00d0      	lsls	r0, r2, #3
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4621      	mov	r1, r4
 8002baa:	1852      	adds	r2, r2, r1
 8002bac:	4629      	mov	r1, r5
 8002bae:	eb43 0101 	adc.w	r1, r3, r1
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	f04f 0000 	mov.w	r0, #0
 8002bb8:	f04f 0100 	mov.w	r1, #0
 8002bbc:	0259      	lsls	r1, r3, #9
 8002bbe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002bc2:	0250      	lsls	r0, r2, #9
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	f7fd fb84 	bl	80002e0 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4613      	mov	r3, r2
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	e04c      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be2:	4b8a      	ldr	r3, [pc, #552]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	099b      	lsrs	r3, r3, #6
 8002be8:	461a      	mov	r2, r3
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bf2:	f04f 0100 	mov.w	r1, #0
 8002bf6:	ea02 0a00 	and.w	sl, r2, r0
 8002bfa:	ea03 0b01 	and.w	fp, r3, r1
 8002bfe:	4650      	mov	r0, sl
 8002c00:	4659      	mov	r1, fp
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	014b      	lsls	r3, r1, #5
 8002c0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c10:	0142      	lsls	r2, r0, #5
 8002c12:	4610      	mov	r0, r2
 8002c14:	4619      	mov	r1, r3
 8002c16:	ebb0 000a 	subs.w	r0, r0, sl
 8002c1a:	eb61 010b 	sbc.w	r1, r1, fp
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	018b      	lsls	r3, r1, #6
 8002c28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c2c:	0182      	lsls	r2, r0, #6
 8002c2e:	1a12      	subs	r2, r2, r0
 8002c30:	eb63 0301 	sbc.w	r3, r3, r1
 8002c34:	f04f 0000 	mov.w	r0, #0
 8002c38:	f04f 0100 	mov.w	r1, #0
 8002c3c:	00d9      	lsls	r1, r3, #3
 8002c3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c42:	00d0      	lsls	r0, r2, #3
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	eb12 020a 	adds.w	r2, r2, sl
 8002c4c:	eb43 030b 	adc.w	r3, r3, fp
 8002c50:	f04f 0000 	mov.w	r0, #0
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	0299      	lsls	r1, r3, #10
 8002c5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c5e:	0290      	lsls	r0, r2, #10
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	f7fd fb36 	bl	80002e0 <__aeabi_uldivmod>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4613      	mov	r3, r2
 8002c7a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c7c:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	0c1b      	lsrs	r3, r3, #16
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	3301      	adds	r3, #1
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c94:	61bb      	str	r3, [r7, #24]
      break;
 8002c96:	e0b2      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c98:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ca2:	4b5a      	ldr	r3, [pc, #360]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d04d      	beq.n	8002d4a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cae:	4b57      	ldr	r3, [pc, #348]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	099b      	lsrs	r3, r3, #6
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cbe:	f04f 0100 	mov.w	r1, #0
 8002cc2:	ea02 0800 	and.w	r8, r2, r0
 8002cc6:	ea03 0901 	and.w	r9, r3, r1
 8002cca:	4640      	mov	r0, r8
 8002ccc:	4649      	mov	r1, r9
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	014b      	lsls	r3, r1, #5
 8002cd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cdc:	0142      	lsls	r2, r0, #5
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	ebb0 0008 	subs.w	r0, r0, r8
 8002ce6:	eb61 0109 	sbc.w	r1, r1, r9
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	018b      	lsls	r3, r1, #6
 8002cf4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cf8:	0182      	lsls	r2, r0, #6
 8002cfa:	1a12      	subs	r2, r2, r0
 8002cfc:	eb63 0301 	sbc.w	r3, r3, r1
 8002d00:	f04f 0000 	mov.w	r0, #0
 8002d04:	f04f 0100 	mov.w	r1, #0
 8002d08:	00d9      	lsls	r1, r3, #3
 8002d0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d0e:	00d0      	lsls	r0, r2, #3
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	eb12 0208 	adds.w	r2, r2, r8
 8002d18:	eb43 0309 	adc.w	r3, r3, r9
 8002d1c:	f04f 0000 	mov.w	r0, #0
 8002d20:	f04f 0100 	mov.w	r1, #0
 8002d24:	0259      	lsls	r1, r3, #9
 8002d26:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d2a:	0250      	lsls	r0, r2, #9
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	461a      	mov	r2, r3
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	f7fd fad0 	bl	80002e0 <__aeabi_uldivmod>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4613      	mov	r3, r2
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	e04a      	b.n	8002de0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4a:	4b30      	ldr	r3, [pc, #192]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	099b      	lsrs	r3, r3, #6
 8002d50:	461a      	mov	r2, r3
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d5a:	f04f 0100 	mov.w	r1, #0
 8002d5e:	ea02 0400 	and.w	r4, r2, r0
 8002d62:	ea03 0501 	and.w	r5, r3, r1
 8002d66:	4620      	mov	r0, r4
 8002d68:	4629      	mov	r1, r5
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	014b      	lsls	r3, r1, #5
 8002d74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d78:	0142      	lsls	r2, r0, #5
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	1b00      	subs	r0, r0, r4
 8002d80:	eb61 0105 	sbc.w	r1, r1, r5
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	018b      	lsls	r3, r1, #6
 8002d8e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d92:	0182      	lsls	r2, r0, #6
 8002d94:	1a12      	subs	r2, r2, r0
 8002d96:	eb63 0301 	sbc.w	r3, r3, r1
 8002d9a:	f04f 0000 	mov.w	r0, #0
 8002d9e:	f04f 0100 	mov.w	r1, #0
 8002da2:	00d9      	lsls	r1, r3, #3
 8002da4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002da8:	00d0      	lsls	r0, r2, #3
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	1912      	adds	r2, r2, r4
 8002db0:	eb45 0303 	adc.w	r3, r5, r3
 8002db4:	f04f 0000 	mov.w	r0, #0
 8002db8:	f04f 0100 	mov.w	r1, #0
 8002dbc:	0299      	lsls	r1, r3, #10
 8002dbe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002dc2:	0290      	lsls	r0, r2, #10
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	f7fd fa84 	bl	80002e0 <__aeabi_uldivmod>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4613      	mov	r3, r2
 8002dde:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002de0:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x358>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	0f1b      	lsrs	r3, r3, #28
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	61bb      	str	r3, [r7, #24]
      break;
 8002df6:	e002      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002dfa:	61bb      	str	r3, [r7, #24]
      break;
 8002dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3720      	adds	r7, #32
 8002e04:	46bd      	mov	sp, r7
 8002e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	00f42400 	.word	0x00f42400
 8002e14:	007a1200 	.word	0x007a1200

08002e18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e28d      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8083 	beq.w	8002f3e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e38:	4b94      	ldr	r3, [pc, #592]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d019      	beq.n	8002e78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e44:	4b91      	ldr	r3, [pc, #580]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e50:	4b8e      	ldr	r3, [pc, #568]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5c:	d00c      	beq.n	8002e78 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5e:	4b8b      	ldr	r3, [pc, #556]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e66:	2b0c      	cmp	r3, #12
 8002e68:	d112      	bne.n	8002e90 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6a:	4b88      	ldr	r3, [pc, #544]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e76:	d10b      	bne.n	8002e90 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	4b84      	ldr	r3, [pc, #528]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d05b      	beq.n	8002f3c <HAL_RCC_OscConfig+0x124>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d157      	bne.n	8002f3c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e25a      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e98:	d106      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x90>
 8002e9a:	4b7c      	ldr	r3, [pc, #496]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a7b      	ldr	r2, [pc, #492]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	e01d      	b.n	8002ee4 <HAL_RCC_OscConfig+0xcc>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_RCC_OscConfig+0xb4>
 8002eb2:	4b76      	ldr	r3, [pc, #472]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a75      	ldr	r2, [pc, #468]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b73      	ldr	r3, [pc, #460]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a72      	ldr	r2, [pc, #456]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e00b      	b.n	8002ee4 <HAL_RCC_OscConfig+0xcc>
 8002ecc:	4b6f      	ldr	r3, [pc, #444]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a6e      	ldr	r2, [pc, #440]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b6c      	ldr	r3, [pc, #432]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a6b      	ldr	r2, [pc, #428]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe fe1a 	bl	8001b24 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef4:	f7fe fe16 	bl	8001b24 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b64      	cmp	r3, #100	; 0x64
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e21f      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f06:	4b61      	ldr	r3, [pc, #388]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0xdc>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fe06 	bl	8001b24 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fe02 	bl	8001b24 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e20b      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2e:	4b57      	ldr	r3, [pc, #348]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x104>
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d06f      	beq.n	800302a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f4a:	4b50      	ldr	r3, [pc, #320]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d017      	beq.n	8002f86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f56:	4b4d      	ldr	r3, [pc, #308]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d105      	bne.n	8002f6e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f62:	4b4a      	ldr	r3, [pc, #296]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f6e:	4b47      	ldr	r3, [pc, #284]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f76:	2b0c      	cmp	r3, #12
 8002f78:	d11c      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7a:	4b44      	ldr	r3, [pc, #272]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d116      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	4b41      	ldr	r3, [pc, #260]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_RCC_OscConfig+0x186>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d001      	beq.n	8002f9e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e1d3      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	4937      	ldr	r1, [pc, #220]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb2:	e03a      	b.n	800302a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d020      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fbc:	4b34      	ldr	r3, [pc, #208]	; (8003090 <HAL_RCC_OscConfig+0x278>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fdaf 	bl	8001b24 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fca:	f7fe fdab 	bl	8001b24 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e1b4      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fdc:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4925      	ldr	r1, [pc, #148]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	600b      	str	r3, [r1, #0]
 8002ffc:	e015      	b.n	800302a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffe:	4b24      	ldr	r3, [pc, #144]	; (8003090 <HAL_RCC_OscConfig+0x278>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe fd8e 	bl	8001b24 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800300c:	f7fe fd8a 	bl	8001b24 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e193      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	4b1b      	ldr	r3, [pc, #108]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d036      	beq.n	80030a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d016      	beq.n	800306c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <HAL_RCC_OscConfig+0x27c>)
 8003040:	2201      	movs	r2, #1
 8003042:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fe fd6e 	bl	8001b24 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304c:	f7fe fd6a 	bl	8001b24 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e173      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	4b0b      	ldr	r3, [pc, #44]	; (800308c <HAL_RCC_OscConfig+0x274>)
 8003060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x234>
 800306a:	e01b      	b.n	80030a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_RCC_OscConfig+0x27c>)
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003072:	f7fe fd57 	bl	8001b24 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003078:	e00e      	b.n	8003098 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307a:	f7fe fd53 	bl	8001b24 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d907      	bls.n	8003098 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e15c      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
 800308c:	40023800 	.word	0x40023800
 8003090:	42470000 	.word	0x42470000
 8003094:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003098:	4b8a      	ldr	r3, [pc, #552]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800309a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1ea      	bne.n	800307a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8097 	beq.w	80031e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b2:	2300      	movs	r3, #0
 80030b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b6:	4b83      	ldr	r3, [pc, #524]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10f      	bne.n	80030e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	4b7f      	ldr	r3, [pc, #508]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a7e      	ldr	r2, [pc, #504]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80030cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
 80030d2:	4b7c      	ldr	r3, [pc, #496]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030de:	2301      	movs	r3, #1
 80030e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e2:	4b79      	ldr	r3, [pc, #484]	; (80032c8 <HAL_RCC_OscConfig+0x4b0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d118      	bne.n	8003120 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ee:	4b76      	ldr	r3, [pc, #472]	; (80032c8 <HAL_RCC_OscConfig+0x4b0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a75      	ldr	r2, [pc, #468]	; (80032c8 <HAL_RCC_OscConfig+0x4b0>)
 80030f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fa:	f7fe fd13 	bl	8001b24 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003102:	f7fe fd0f 	bl	8001b24 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e118      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003114:	4b6c      	ldr	r3, [pc, #432]	; (80032c8 <HAL_RCC_OscConfig+0x4b0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x31e>
 8003128:	4b66      	ldr	r3, [pc, #408]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	4a65      	ldr	r2, [pc, #404]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	6713      	str	r3, [r2, #112]	; 0x70
 8003134:	e01c      	b.n	8003170 <HAL_RCC_OscConfig+0x358>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b05      	cmp	r3, #5
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x340>
 800313e:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	4a60      	ldr	r2, [pc, #384]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	6713      	str	r3, [r2, #112]	; 0x70
 800314a:	4b5e      	ldr	r3, [pc, #376]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	4a5d      	ldr	r2, [pc, #372]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	6713      	str	r3, [r2, #112]	; 0x70
 8003156:	e00b      	b.n	8003170 <HAL_RCC_OscConfig+0x358>
 8003158:	4b5a      	ldr	r3, [pc, #360]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a59      	ldr	r2, [pc, #356]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
 8003164:	4b57      	ldr	r3, [pc, #348]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a56      	ldr	r2, [pc, #344]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800316a:	f023 0304 	bic.w	r3, r3, #4
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d015      	beq.n	80031a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7fe fcd4 	bl	8001b24 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317e:	e00a      	b.n	8003196 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f7fe fcd0 	bl	8001b24 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e0d7      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003196:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0ee      	beq.n	8003180 <HAL_RCC_OscConfig+0x368>
 80031a2:	e014      	b.n	80031ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe fcbe 	bl	8001b24 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ac:	f7fe fcba 	bl	8001b24 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e0c1      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c2:	4b40      	ldr	r3, [pc, #256]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1ee      	bne.n	80031ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d105      	bne.n	80031e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d4:	4b3b      	ldr	r3, [pc, #236]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	4a3a      	ldr	r2, [pc, #232]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80031da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80ad 	beq.w	8003344 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ea:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d060      	beq.n	80032b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d145      	bne.n	800328a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	4b33      	ldr	r3, [pc, #204]	; (80032cc <HAL_RCC_OscConfig+0x4b4>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe fc8e 	bl	8001b24 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe fc8a 	bl	8001b24 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e093      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f0      	bne.n	800320c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	019b      	lsls	r3, r3, #6
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	085b      	lsrs	r3, r3, #1
 8003242:	3b01      	subs	r3, #1
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	061b      	lsls	r3, r3, #24
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	071b      	lsls	r3, r3, #28
 8003256:	491b      	ldr	r1, [pc, #108]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x4b4>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7fe fc5f 	bl	8001b24 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe fc5b 	bl	8001b24 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e064      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x452>
 8003288:	e05c      	b.n	8003344 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <HAL_RCC_OscConfig+0x4b4>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe fc48 	bl	8001b24 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe fc44 	bl	8001b24 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e04d      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_OscConfig+0x4ac>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x480>
 80032b6:	e045      	b.n	8003344 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e040      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40007000 	.word	0x40007000
 80032cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d0:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <HAL_RCC_OscConfig+0x538>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d030      	beq.n	8003340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d129      	bne.n	8003340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d122      	bne.n	8003340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003300:	4013      	ands	r3, r2
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003308:	4293      	cmp	r3, r2
 800330a:	d119      	bne.n	8003340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	3b01      	subs	r3, #1
 800331a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d10f      	bne.n	8003340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d107      	bne.n	8003340 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e000      	b.n	8003346 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800

08003354 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e083      	b.n	800346e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7f5b      	ldrb	r3, [r3, #29]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd fe56 	bl	8001028 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2202      	movs	r2, #2
 8003380:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	22ca      	movs	r2, #202	; 0xca
 8003388:	625a      	str	r2, [r3, #36]	; 0x24
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2253      	movs	r2, #83	; 0x53
 8003390:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 faa8 	bl	80038e8 <RTC_EnterInitMode>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d008      	beq.n	80033b0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	22ff      	movs	r2, #255	; 0xff
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2204      	movs	r2, #4
 80033aa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e05e      	b.n	800346e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6812      	ldr	r2, [r2, #0]
 80033ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80033be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6899      	ldr	r1, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68d2      	ldr	r2, [r2, #12]
 80033ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6919      	ldr	r1, [r3, #16]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	041a      	lsls	r2, r3, #16
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800340e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10e      	bne.n	800343c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa3a 	bl	8003898 <HAL_RTC_WaitForSynchro>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	22ff      	movs	r2, #255	; 0xff
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2204      	movs	r2, #4
 8003436:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e018      	b.n	800346e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	22ff      	movs	r2, #255	; 0xff
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003476:	b590      	push	{r4, r7, lr}
 8003478:	b087      	sub	sp, #28
 800347a:	af00      	add	r7, sp, #0
 800347c:	60f8      	str	r0, [r7, #12]
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	7f1b      	ldrb	r3, [r3, #28]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_RTC_SetTime+0x1c>
 800348e:	2302      	movs	r3, #2
 8003490:	e0aa      	b.n	80035e8 <HAL_RTC_SetTime+0x172>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2202      	movs	r2, #2
 800349c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d126      	bne.n	80034f2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2200      	movs	r2, #0
 80034b6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fa3f 	bl	8003940 <RTC_ByteToBcd2>
 80034c2:	4603      	mov	r3, r0
 80034c4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	785b      	ldrb	r3, [r3, #1]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fa38 	bl	8003940 <RTC_ByteToBcd2>
 80034d0:	4603      	mov	r3, r0
 80034d2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80034d4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	789b      	ldrb	r3, [r3, #2]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fa30 	bl	8003940 <RTC_ByteToBcd2>
 80034e0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80034e2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	78db      	ldrb	r3, [r3, #3]
 80034ea:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	e018      	b.n	8003524 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d102      	bne.n	8003506 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2200      	movs	r2, #0
 8003504:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	785b      	ldrb	r3, [r3, #1]
 8003510:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003512:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003518:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	78db      	ldrb	r3, [r3, #3]
 800351e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	22ca      	movs	r2, #202	; 0xca
 800352a:	625a      	str	r2, [r3, #36]	; 0x24
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2253      	movs	r2, #83	; 0x53
 8003532:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f9d7 	bl	80038e8 <RTC_EnterInitMode>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	22ff      	movs	r2, #255	; 0xff
 8003546:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2204      	movs	r2, #4
 800354c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e047      	b.n	80035e8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003562:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003566:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003576:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6899      	ldr	r1, [r3, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	431a      	orrs	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800359e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d111      	bne.n	80035d2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f972 	bl	8003898 <HAL_RTC_WaitForSynchro>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	22ff      	movs	r2, #255	; 0xff
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2204      	movs	r2, #4
 80035c6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00a      	b.n	80035e8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	22ff      	movs	r2, #255	; 0xff
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80035e6:	2300      	movs	r3, #0
  }
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd90      	pop	{r4, r7, pc}

080035f0 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003622:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003626:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	0c1b      	lsrs	r3, r3, #16
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003632:	b2da      	uxtb	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003642:	b2da      	uxtb	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003650:	b2da      	uxtb	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	0c1b      	lsrs	r3, r3, #16
 800365a:	b2db      	uxtb	r3, r3
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	b2da      	uxtb	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d11a      	bne.n	80036a2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f983 	bl	800397c <RTC_Bcd2ToByte>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	785b      	ldrb	r3, [r3, #1]
 8003682:	4618      	mov	r0, r3
 8003684:	f000 f97a 	bl	800397c <RTC_Bcd2ToByte>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	789b      	ldrb	r3, [r3, #2]
 8003694:	4618      	mov	r0, r3
 8003696:	f000 f971 	bl	800397c <RTC_Bcd2ToByte>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	7f1b      	ldrb	r3, [r3, #28]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_RTC_SetDate+0x1c>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e094      	b.n	80037f2 <HAL_RTC_SetDate+0x146>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2202      	movs	r2, #2
 80036d2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10e      	bne.n	80036f8 <HAL_RTC_SetDate+0x4c>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	785b      	ldrb	r3, [r3, #1]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d008      	beq.n	80036f8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	785b      	ldrb	r3, [r3, #1]
 80036ea:	f023 0310 	bic.w	r3, r3, #16
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	330a      	adds	r3, #10
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d11c      	bne.n	8003738 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	78db      	ldrb	r3, [r3, #3]
 8003702:	4618      	mov	r0, r3
 8003704:	f000 f91c 	bl	8003940 <RTC_ByteToBcd2>
 8003708:	4603      	mov	r3, r0
 800370a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	785b      	ldrb	r3, [r3, #1]
 8003710:	4618      	mov	r0, r3
 8003712:	f000 f915 	bl	8003940 <RTC_ByteToBcd2>
 8003716:	4603      	mov	r3, r0
 8003718:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800371a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	789b      	ldrb	r3, [r3, #2]
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f90d 	bl	8003940 <RTC_ByteToBcd2>
 8003726:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003728:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003732:	4313      	orrs	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e00e      	b.n	8003756 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	78db      	ldrb	r3, [r3, #3]
 800373c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003744:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800374a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	22ca      	movs	r2, #202	; 0xca
 800375c:	625a      	str	r2, [r3, #36]	; 0x24
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2253      	movs	r2, #83	; 0x53
 8003764:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f8be 	bl	80038e8 <RTC_EnterInitMode>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00b      	beq.n	800378a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	22ff      	movs	r2, #255	; 0xff
 8003778:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2204      	movs	r2, #4
 800377e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e033      	b.n	80037f2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003794:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003798:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d111      	bne.n	80037dc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f86d 	bl	8003898 <HAL_RTC_WaitForSynchro>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	22ff      	movs	r2, #255	; 0xff
 80037ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2204      	movs	r2, #4
 80037d0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e00a      	b.n	80037f2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	22ff      	movs	r2, #255	; 0xff
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80037f0:	2300      	movs	r3, #0
  }
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd90      	pop	{r4, r7, pc}

080037fa <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003814:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003818:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	0c1b      	lsrs	r3, r3, #16
 800381e:	b2da      	uxtb	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	b2db      	uxtb	r3, r3
 800382a:	f003 031f 	and.w	r3, r3, #31
 800382e:	b2da      	uxtb	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800383c:	b2da      	uxtb	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	0b5b      	lsrs	r3, r3, #13
 8003846:	b2db      	uxtb	r3, r3
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d11a      	bne.n	800388e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	78db      	ldrb	r3, [r3, #3]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 f88d 	bl	800397c <RTC_Bcd2ToByte>
 8003862:	4603      	mov	r3, r0
 8003864:	461a      	mov	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 f884 	bl	800397c <RTC_Bcd2ToByte>
 8003874:	4603      	mov	r3, r0
 8003876:	461a      	mov	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	789b      	ldrb	r3, [r3, #2]
 8003880:	4618      	mov	r0, r3
 8003882:	f000 f87b 	bl	800397c <RTC_Bcd2ToByte>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038b4:	f7fe f936 	bl	8001b24 <HAL_GetTick>
 80038b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80038ba:	e009      	b.n	80038d0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80038bc:	f7fe f932 	bl	8001b24 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ca:	d901      	bls.n	80038d0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e007      	b.n	80038e0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0ee      	beq.n	80038bc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d119      	bne.n	8003936 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f04f 32ff 	mov.w	r2, #4294967295
 800390a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800390c:	f7fe f90a 	bl	8001b24 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003912:	e009      	b.n	8003928 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003914:	f7fe f906 	bl	8001b24 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003922:	d901      	bls.n	8003928 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e007      	b.n	8003938 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0ee      	beq.n	8003914 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800394e:	e005      	b.n	800395c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3301      	adds	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	3b0a      	subs	r3, #10
 800395a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	2b09      	cmp	r3, #9
 8003960:	d8f6      	bhi.n	8003950 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	b2da      	uxtb	r2, r3
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	4313      	orrs	r3, r2
 800396e:	b2db      	uxtb	r3, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	b2db      	uxtb	r3, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e041      	b.n	8003a4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f839 	bl	8003a56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f000 f9d8 	bl	8003dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d001      	beq.n	8003a84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e04e      	b.n	8003b22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a23      	ldr	r2, [pc, #140]	; (8003b30 <HAL_TIM_Base_Start_IT+0xc4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d022      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x80>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aae:	d01d      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x80>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d018      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x80>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1e      	ldr	r2, [pc, #120]	; (8003b38 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d013      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x80>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <HAL_TIM_Base_Start_IT+0xd0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00e      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x80>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1b      	ldr	r2, [pc, #108]	; (8003b40 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x80>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d004      	beq.n	8003aec <HAL_TIM_Base_Start_IT+0x80>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d111      	bne.n	8003b10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 0307 	and.w	r3, r3, #7
 8003af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b06      	cmp	r3, #6
 8003afc:	d010      	beq.n	8003b20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0201 	orr.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b0e:	e007      	b.n	8003b20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40010000 	.word	0x40010000
 8003b34:	40000400 	.word	0x40000400
 8003b38:	40000800 	.word	0x40000800
 8003b3c:	40000c00 	.word	0x40000c00
 8003b40:	40010400 	.word	0x40010400
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40001800 	.word	0x40001800

08003b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d122      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d11b      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0202 	mvn.w	r2, #2
 8003b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8ee 	bl	8003d70 <HAL_TIM_IC_CaptureCallback>
 8003b94:	e005      	b.n	8003ba2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f8e0 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f8f1 	bl	8003d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d122      	bne.n	8003bfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d11b      	bne.n	8003bfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0204 	mvn.w	r2, #4
 8003bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f8c4 	bl	8003d70 <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f8b6 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f8c7 	bl	8003d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d122      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d11b      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0208 	mvn.w	r2, #8
 8003c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2204      	movs	r2, #4
 8003c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f89a 	bl	8003d70 <HAL_TIM_IC_CaptureCallback>
 8003c3c:	e005      	b.n	8003c4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f88c 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f89d 	bl	8003d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b10      	cmp	r3, #16
 8003c5c:	d122      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d11b      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0210 	mvn.w	r2, #16
 8003c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2208      	movs	r2, #8
 8003c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f870 	bl	8003d70 <HAL_TIM_IC_CaptureCallback>
 8003c90:	e005      	b.n	8003c9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f862 	bl	8003d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f873 	bl	8003d84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d10e      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d107      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0201 	mvn.w	r2, #1
 8003cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fd f8a6 	bl	8000e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b80      	cmp	r3, #128	; 0x80
 8003cdc:	d10e      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce8:	2b80      	cmp	r3, #128	; 0x80
 8003cea:	d107      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f902 	bl	8003f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d06:	2b40      	cmp	r3, #64	; 0x40
 8003d08:	d10e      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	d107      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f838 	bl	8003d98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d10e      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d107      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0220 	mvn.w	r2, #32
 8003d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8cc 	bl	8003eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a40      	ldr	r2, [pc, #256]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d013      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dca:	d00f      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a3d      	ldr	r2, [pc, #244]	; (8003ec4 <TIM_Base_SetConfig+0x118>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00b      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a3c      	ldr	r2, [pc, #240]	; (8003ec8 <TIM_Base_SetConfig+0x11c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a3b      	ldr	r2, [pc, #236]	; (8003ecc <TIM_Base_SetConfig+0x120>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a3a      	ldr	r2, [pc, #232]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d108      	bne.n	8003dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a2f      	ldr	r2, [pc, #188]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d02b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d027      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a2c      	ldr	r2, [pc, #176]	; (8003ec4 <TIM_Base_SetConfig+0x118>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d023      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a2b      	ldr	r2, [pc, #172]	; (8003ec8 <TIM_Base_SetConfig+0x11c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01f      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a2a      	ldr	r2, [pc, #168]	; (8003ecc <TIM_Base_SetConfig+0x120>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a29      	ldr	r2, [pc, #164]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d017      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a28      	ldr	r2, [pc, #160]	; (8003ed4 <TIM_Base_SetConfig+0x128>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <TIM_Base_SetConfig+0x12c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00f      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a26      	ldr	r2, [pc, #152]	; (8003edc <TIM_Base_SetConfig+0x130>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d00b      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a25      	ldr	r2, [pc, #148]	; (8003ee0 <TIM_Base_SetConfig+0x134>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a24      	ldr	r2, [pc, #144]	; (8003ee4 <TIM_Base_SetConfig+0x138>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <TIM_Base_SetConfig+0x13c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d108      	bne.n	8003e70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <TIM_Base_SetConfig+0x114>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_Base_SetConfig+0xf8>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <TIM_Base_SetConfig+0x124>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d103      	bne.n	8003eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	615a      	str	r2, [r3, #20]
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40000800 	.word	0x40000800
 8003ecc:	40000c00 	.word	0x40000c00
 8003ed0:	40010400 	.word	0x40010400
 8003ed4:	40014000 	.word	0x40014000
 8003ed8:	40014400 	.word	0x40014400
 8003edc:	40014800 	.word	0x40014800
 8003ee0:	40001800 	.word	0x40001800
 8003ee4:	40001c00 	.word	0x40001c00
 8003ee8:	40002000 	.word	0x40002000

08003eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e03f      	b.n	8003fa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd f89e 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	; 0x24
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fddb 	bl	8004b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b08a      	sub	sp, #40	; 0x28
 8003fb2:	af02      	add	r7, sp, #8
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d17c      	bne.n	80040c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_UART_Transmit+0x2c>
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e075      	b.n	80040ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_UART_Transmit+0x3e>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e06e      	b.n	80040ca <HAL_UART_Transmit+0x11c>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2221      	movs	r2, #33	; 0x21
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004002:	f7fd fd8f 	bl	8001b24 <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	88fa      	ldrh	r2, [r7, #6]
 8004012:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401c:	d108      	bne.n	8004030 <HAL_UART_Transmit+0x82>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	e003      	b.n	8004038 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004040:	e02a      	b.n	8004098 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 fb1f 	bl	8004690 <UART_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e036      	b.n	80040ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	3302      	adds	r3, #2
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	e007      	b.n	800408a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	781a      	ldrb	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	3301      	adds	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1cf      	bne.n	8004042 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2200      	movs	r2, #0
 80040aa:	2140      	movs	r1, #64	; 0x40
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 faef 	bl	8004690 <UART_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e006      	b.n	80040ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e000      	b.n	80040ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
  }
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	4613      	mov	r3, r2
 80040de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d11d      	bne.n	8004128 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_UART_Receive_IT+0x26>
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e016      	b.n	800412a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_UART_Receive_IT+0x38>
 8004106:	2302      	movs	r3, #2
 8004108:	e00f      	b.n	800412a <HAL_UART_Receive_IT+0x58>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	461a      	mov	r2, r3
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fb24 	bl	800476c <UART_Start_Receive_IT>
 8004124:	4603      	mov	r3, r0
 8004126:	e000      	b.n	800412a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b0ba      	sub	sp, #232	; 0xe8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004160:	2300      	movs	r3, #0
 8004162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800417a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_UART_IRQHandler+0x66>
 8004186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fc03 	bl	800499e <UART_Receive_IT>
      return;
 8004198:	e256      	b.n	8004648 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800419a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80de 	beq.w	8004360 <HAL_UART_IRQHandler+0x22c>
 80041a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d106      	bne.n	80041be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80d1 	beq.w	8004360 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00b      	beq.n	80041e2 <HAL_UART_IRQHandler+0xae>
 80041ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f043 0201 	orr.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <HAL_UART_IRQHandler+0xd2>
 80041ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f043 0202 	orr.w	r2, r3, #2
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_UART_IRQHandler+0xf6>
 8004212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f043 0204 	orr.w	r2, r3, #4
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d011      	beq.n	800425a <HAL_UART_IRQHandler+0x126>
 8004236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b00      	cmp	r3, #0
 8004240:	d105      	bne.n	800424e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f043 0208 	orr.w	r2, r3, #8
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 81ed 	beq.w	800463e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <HAL_UART_IRQHandler+0x14e>
 8004270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fb8e 	bl	800499e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b40      	cmp	r3, #64	; 0x40
 800428e:	bf0c      	ite	eq
 8004290:	2301      	moveq	r3, #1
 8004292:	2300      	movne	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <HAL_UART_IRQHandler+0x17a>
 80042a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d04f      	beq.n	800434e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fa96 	bl	80047e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b40      	cmp	r3, #64	; 0x40
 80042c0:	d141      	bne.n	8004346 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3314      	adds	r3, #20
 80042c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3314      	adds	r3, #20
 80042ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1d9      	bne.n	80042c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	2b00      	cmp	r3, #0
 8004314:	d013      	beq.n	800433e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	4a7d      	ldr	r2, [pc, #500]	; (8004510 <HAL_UART_IRQHandler+0x3dc>)
 800431c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	4618      	mov	r0, r3
 8004324:	f7fd fd5c 	bl	8001de0 <HAL_DMA_Abort_IT>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d016      	beq.n	800435c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004338:	4610      	mov	r0, r2
 800433a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433c:	e00e      	b.n	800435c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f990 	bl	8004664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004344:	e00a      	b.n	800435c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f98c 	bl	8004664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	e006      	b.n	800435c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f988 	bl	8004664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800435a:	e170      	b.n	800463e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435c:	bf00      	nop
    return;
 800435e:	e16e      	b.n	800463e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	2b01      	cmp	r3, #1
 8004366:	f040 814a 	bne.w	80045fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8143 	beq.w	80045fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 813c 	beq.w	80045fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b40      	cmp	r3, #64	; 0x40
 80043a8:	f040 80b4 	bne.w	8004514 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8140 	beq.w	8004642 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043ca:	429a      	cmp	r2, r3
 80043cc:	f080 8139 	bcs.w	8004642 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e2:	f000 8088 	beq.w	80044f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	330c      	adds	r3, #12
 800440e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800441e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800442a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1d9      	bne.n	80043e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3314      	adds	r3, #20
 8004438:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3314      	adds	r3, #20
 8004452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004456:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800445a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800445e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e1      	bne.n	8004432 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3314      	adds	r3, #20
 8004474:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800447e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3314      	adds	r3, #20
 800448e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004492:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004494:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004498:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e3      	bne.n	800446e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c6:	f023 0310 	bic.w	r3, r3, #16
 80044ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	330c      	adds	r3, #12
 80044d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80044d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80044da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e3      	bne.n	80044b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fd fc05 	bl	8001d00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044fe:	b29b      	uxth	r3, r3
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	b29b      	uxth	r3, r3
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f8b6 	bl	8004678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800450c:	e099      	b.n	8004642 <HAL_UART_IRQHandler+0x50e>
 800450e:	bf00      	nop
 8004510:	080048a7 	.word	0x080048a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800451c:	b29b      	uxth	r3, r3
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 808b 	beq.w	8004646 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8086 	beq.w	8004646 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	330c      	adds	r3, #12
 8004540:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800454a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	330c      	adds	r3, #12
 800455a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800455e:	647a      	str	r2, [r7, #68]	; 0x44
 8004560:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800456c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e3      	bne.n	800453a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3314      	adds	r3, #20
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	623b      	str	r3, [r7, #32]
   return(result);
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3314      	adds	r3, #20
 8004592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004596:	633a      	str	r2, [r7, #48]	; 0x30
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800459c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1e3      	bne.n	8004572 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0310 	bic.w	r3, r3, #16
 80045ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	330c      	adds	r3, #12
 80045d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80045dc:	61fa      	str	r2, [r7, #28]
 80045de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	69b9      	ldr	r1, [r7, #24]
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	617b      	str	r3, [r7, #20]
   return(result);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e3      	bne.n	80045b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f83e 	bl	8004678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045fc:	e023      	b.n	8004646 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_UART_IRQHandler+0x4ea>
 800460a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800460e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f959 	bl	80048ce <UART_Transmit_IT>
    return;
 800461c:	e014      	b.n	8004648 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00e      	beq.n	8004648 <HAL_UART_IRQHandler+0x514>
 800462a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800462e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f999 	bl	800496e <UART_EndTransmit_IT>
    return;
 800463c:	e004      	b.n	8004648 <HAL_UART_IRQHandler+0x514>
    return;
 800463e:	bf00      	nop
 8004640:	e002      	b.n	8004648 <HAL_UART_IRQHandler+0x514>
      return;
 8004642:	bf00      	nop
 8004644:	e000      	b.n	8004648 <HAL_UART_IRQHandler+0x514>
      return;
 8004646:	bf00      	nop
  }
}
 8004648:	37e8      	adds	r7, #232	; 0xe8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop

08004650 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b090      	sub	sp, #64	; 0x40
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a0:	e050      	b.n	8004744 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d04c      	beq.n	8004744 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80046b0:	f7fd fa38 	bl	8001b24 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046bc:	429a      	cmp	r2, r3
 80046be:	d241      	bcs.n	8004744 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	330c      	adds	r3, #12
 80046de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046e0:	637a      	str	r2, [r7, #52]	; 0x34
 80046e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e5      	bne.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3314      	adds	r3, #20
 80046fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	613b      	str	r3, [r7, #16]
   return(result);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	63bb      	str	r3, [r7, #56]	; 0x38
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3314      	adds	r3, #20
 8004712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004714:	623a      	str	r2, [r7, #32]
 8004716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	69f9      	ldr	r1, [r7, #28]
 800471a:	6a3a      	ldr	r2, [r7, #32]
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	61bb      	str	r3, [r7, #24]
   return(result);
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e5      	bne.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e00f      	b.n	8004764 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4013      	ands	r3, r2
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	429a      	cmp	r2, r3
 8004752:	bf0c      	ite	eq
 8004754:	2301      	moveq	r3, #1
 8004756:	2300      	movne	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	461a      	mov	r2, r3
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	429a      	cmp	r2, r3
 8004760:	d09f      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3740      	adds	r7, #64	; 0x40
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	4613      	mov	r3, r2
 8004778:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	88fa      	ldrh	r2, [r7, #6]
 8004784:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	88fa      	ldrh	r2, [r7, #6]
 800478a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2222      	movs	r2, #34	; 0x22
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695a      	ldr	r2, [r3, #20]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0201 	orr.w	r2, r2, #1
 80047c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f042 0220 	orr.w	r2, r2, #32
 80047d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b095      	sub	sp, #84	; 0x54
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	330c      	adds	r3, #12
 80047ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	e853 3f00 	ldrex	r3, [r3]
 80047f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004808:	643a      	str	r2, [r7, #64]	; 0x40
 800480a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800480e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004810:	e841 2300 	strex	r3, r2, [r1]
 8004814:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e5      	bne.n	80047e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3314      	adds	r3, #20
 8004822:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	61fb      	str	r3, [r7, #28]
   return(result);
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	64bb      	str	r3, [r7, #72]	; 0x48
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3314      	adds	r3, #20
 800483a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800483c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e5      	bne.n	800481c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	2b01      	cmp	r3, #1
 8004856:	d119      	bne.n	800488c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	330c      	adds	r3, #12
 800485e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	e853 3f00 	ldrex	r3, [r3]
 8004866:	60bb      	str	r3, [r7, #8]
   return(result);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f023 0310 	bic.w	r3, r3, #16
 800486e:	647b      	str	r3, [r7, #68]	; 0x44
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004878:	61ba      	str	r2, [r7, #24]
 800487a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	6979      	ldr	r1, [r7, #20]
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	e841 2300 	strex	r3, r2, [r1]
 8004884:	613b      	str	r3, [r7, #16]
   return(result);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e5      	bne.n	8004858 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	631a      	str	r2, [r3, #48]	; 0x30
}
 800489a:	bf00      	nop
 800489c:	3754      	adds	r7, #84	; 0x54
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff fecf 	bl	8004664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b085      	sub	sp, #20
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b21      	cmp	r3, #33	; 0x21
 80048e0:	d13e      	bne.n	8004960 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ea:	d114      	bne.n	8004916 <UART_Transmit_IT+0x48>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d110      	bne.n	8004916 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004908:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	1c9a      	adds	r2, r3, #2
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	621a      	str	r2, [r3, #32]
 8004914:	e008      	b.n	8004928 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	1c59      	adds	r1, r3, #1
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6211      	str	r1, [r2, #32]
 8004920:	781a      	ldrb	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29b      	uxth	r3, r3
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	4619      	mov	r1, r3
 8004936:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10f      	bne.n	800495c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800494a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800495a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	e000      	b.n	8004962 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004960:	2302      	movs	r3, #2
  }
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004984:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff fe5e 	bl	8004650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b08c      	sub	sp, #48	; 0x30
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b22      	cmp	r3, #34	; 0x22
 80049b0:	f040 80ab 	bne.w	8004b0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049bc:	d117      	bne.n	80049ee <UART_Receive_IT+0x50>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d113      	bne.n	80049ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049dc:	b29a      	uxth	r2, r3
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	1c9a      	adds	r2, r3, #2
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	629a      	str	r2, [r3, #40]	; 0x28
 80049ec:	e026      	b.n	8004a3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a00:	d007      	beq.n	8004a12 <UART_Receive_IT+0x74>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <UART_Receive_IT+0x82>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e008      	b.n	8004a32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	1c5a      	adds	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d15a      	bne.n	8004b06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68da      	ldr	r2, [r3, #12]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0220 	bic.w	r2, r2, #32
 8004a5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0201 	bic.w	r2, r2, #1
 8004a7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d135      	bne.n	8004afc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f023 0310 	bic.w	r3, r3, #16
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	330c      	adds	r3, #12
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab6:	623a      	str	r2, [r7, #32]
 8004ab8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	69f9      	ldr	r1, [r7, #28]
 8004abc:	6a3a      	ldr	r2, [r7, #32]
 8004abe:	e841 2300 	strex	r3, r2, [r1]
 8004ac2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1e5      	bne.n	8004a96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b10      	cmp	r3, #16
 8004ad6:	d10a      	bne.n	8004aee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004af2:	4619      	mov	r1, r3
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff fdbf 	bl	8004678 <HAL_UARTEx_RxEventCallback>
 8004afa:	e002      	b.n	8004b02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7fc f943 	bl	8000d88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e002      	b.n	8004b0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e000      	b.n	8004b0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3730      	adds	r7, #48	; 0x30
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b18:	b09f      	sub	sp, #124	; 0x7c
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2a:	68d9      	ldr	r1, [r3, #12]
 8004b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	ea40 0301 	orr.w	r3, r0, r1
 8004b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	431a      	orrs	r2, r3
 8004b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b58:	f021 010c 	bic.w	r1, r1, #12
 8004b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b62:	430b      	orrs	r3, r1
 8004b64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b72:	6999      	ldr	r1, [r3, #24]
 8004b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	ea40 0301 	orr.w	r3, r0, r1
 8004b7c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4bc5      	ldr	r3, [pc, #788]	; (8004e98 <UART_SetConfig+0x384>)
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d004      	beq.n	8004b92 <UART_SetConfig+0x7e>
 8004b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4bc3      	ldr	r3, [pc, #780]	; (8004e9c <UART_SetConfig+0x388>)
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d103      	bne.n	8004b9a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b92:	f7fd fc1f 	bl	80023d4 <HAL_RCC_GetPCLK2Freq>
 8004b96:	6778      	str	r0, [r7, #116]	; 0x74
 8004b98:	e002      	b.n	8004ba0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b9a:	f7fd fc07 	bl	80023ac <HAL_RCC_GetPCLK1Freq>
 8004b9e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba8:	f040 80b6 	bne.w	8004d18 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bae:	461c      	mov	r4, r3
 8004bb0:	f04f 0500 	mov.w	r5, #0
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	462b      	mov	r3, r5
 8004bb8:	1891      	adds	r1, r2, r2
 8004bba:	6439      	str	r1, [r7, #64]	; 0x40
 8004bbc:	415b      	adcs	r3, r3
 8004bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8004bc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004bc4:	1912      	adds	r2, r2, r4
 8004bc6:	eb45 0303 	adc.w	r3, r5, r3
 8004bca:	f04f 0000 	mov.w	r0, #0
 8004bce:	f04f 0100 	mov.w	r1, #0
 8004bd2:	00d9      	lsls	r1, r3, #3
 8004bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bd8:	00d0      	lsls	r0, r2, #3
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	1911      	adds	r1, r2, r4
 8004be0:	6639      	str	r1, [r7, #96]	; 0x60
 8004be2:	416b      	adcs	r3, r5
 8004be4:	667b      	str	r3, [r7, #100]	; 0x64
 8004be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	461a      	mov	r2, r3
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	1891      	adds	r1, r2, r2
 8004bf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004bf4:	415b      	adcs	r3, r3
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bfc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004c00:	f7fb fb6e 	bl	80002e0 <__aeabi_uldivmod>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4ba5      	ldr	r3, [pc, #660]	; (8004ea0 <UART_SetConfig+0x38c>)
 8004c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	011e      	lsls	r6, r3, #4
 8004c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c14:	461c      	mov	r4, r3
 8004c16:	f04f 0500 	mov.w	r5, #0
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	462b      	mov	r3, r5
 8004c1e:	1891      	adds	r1, r2, r2
 8004c20:	6339      	str	r1, [r7, #48]	; 0x30
 8004c22:	415b      	adcs	r3, r3
 8004c24:	637b      	str	r3, [r7, #52]	; 0x34
 8004c26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c2a:	1912      	adds	r2, r2, r4
 8004c2c:	eb45 0303 	adc.w	r3, r5, r3
 8004c30:	f04f 0000 	mov.w	r0, #0
 8004c34:	f04f 0100 	mov.w	r1, #0
 8004c38:	00d9      	lsls	r1, r3, #3
 8004c3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c3e:	00d0      	lsls	r0, r2, #3
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	1911      	adds	r1, r2, r4
 8004c46:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c48:	416b      	adcs	r3, r5
 8004c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	461a      	mov	r2, r3
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	1891      	adds	r1, r2, r2
 8004c58:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c5a:	415b      	adcs	r3, r3
 8004c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004c66:	f7fb fb3b 	bl	80002e0 <__aeabi_uldivmod>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	4b8c      	ldr	r3, [pc, #560]	; (8004ea0 <UART_SetConfig+0x38c>)
 8004c70:	fba3 1302 	umull	r1, r3, r3, r2
 8004c74:	095b      	lsrs	r3, r3, #5
 8004c76:	2164      	movs	r1, #100	; 0x64
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	3332      	adds	r3, #50	; 0x32
 8004c82:	4a87      	ldr	r2, [pc, #540]	; (8004ea0 <UART_SetConfig+0x38c>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c90:	441e      	add	r6, r3
 8004c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c94:	4618      	mov	r0, r3
 8004c96:	f04f 0100 	mov.w	r1, #0
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	1894      	adds	r4, r2, r2
 8004ca0:	623c      	str	r4, [r7, #32]
 8004ca2:	415b      	adcs	r3, r3
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004caa:	1812      	adds	r2, r2, r0
 8004cac:	eb41 0303 	adc.w	r3, r1, r3
 8004cb0:	f04f 0400 	mov.w	r4, #0
 8004cb4:	f04f 0500 	mov.w	r5, #0
 8004cb8:	00dd      	lsls	r5, r3, #3
 8004cba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cbe:	00d4      	lsls	r4, r2, #3
 8004cc0:	4622      	mov	r2, r4
 8004cc2:	462b      	mov	r3, r5
 8004cc4:	1814      	adds	r4, r2, r0
 8004cc6:	653c      	str	r4, [r7, #80]	; 0x50
 8004cc8:	414b      	adcs	r3, r1
 8004cca:	657b      	str	r3, [r7, #84]	; 0x54
 8004ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	f04f 0300 	mov.w	r3, #0
 8004cd6:	1891      	adds	r1, r2, r2
 8004cd8:	61b9      	str	r1, [r7, #24]
 8004cda:	415b      	adcs	r3, r3
 8004cdc:	61fb      	str	r3, [r7, #28]
 8004cde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ce2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004ce6:	f7fb fafb 	bl	80002e0 <__aeabi_uldivmod>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4b6c      	ldr	r3, [pc, #432]	; (8004ea0 <UART_SetConfig+0x38c>)
 8004cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	2164      	movs	r1, #100	; 0x64
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	3332      	adds	r3, #50	; 0x32
 8004d02:	4a67      	ldr	r2, [pc, #412]	; (8004ea0 <UART_SetConfig+0x38c>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	095b      	lsrs	r3, r3, #5
 8004d0a:	f003 0207 	and.w	r2, r3, #7
 8004d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4432      	add	r2, r6
 8004d14:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d16:	e0b9      	b.n	8004e8c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d1a:	461c      	mov	r4, r3
 8004d1c:	f04f 0500 	mov.w	r5, #0
 8004d20:	4622      	mov	r2, r4
 8004d22:	462b      	mov	r3, r5
 8004d24:	1891      	adds	r1, r2, r2
 8004d26:	6139      	str	r1, [r7, #16]
 8004d28:	415b      	adcs	r3, r3
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d30:	1912      	adds	r2, r2, r4
 8004d32:	eb45 0303 	adc.w	r3, r5, r3
 8004d36:	f04f 0000 	mov.w	r0, #0
 8004d3a:	f04f 0100 	mov.w	r1, #0
 8004d3e:	00d9      	lsls	r1, r3, #3
 8004d40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d44:	00d0      	lsls	r0, r2, #3
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	eb12 0804 	adds.w	r8, r2, r4
 8004d4e:	eb43 0905 	adc.w	r9, r3, r5
 8004d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f04f 0100 	mov.w	r1, #0
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	f04f 0300 	mov.w	r3, #0
 8004d64:	008b      	lsls	r3, r1, #2
 8004d66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d6a:	0082      	lsls	r2, r0, #2
 8004d6c:	4640      	mov	r0, r8
 8004d6e:	4649      	mov	r1, r9
 8004d70:	f7fb fab6 	bl	80002e0 <__aeabi_uldivmod>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4b49      	ldr	r3, [pc, #292]	; (8004ea0 <UART_SetConfig+0x38c>)
 8004d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	011e      	lsls	r6, r3, #4
 8004d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d84:	4618      	mov	r0, r3
 8004d86:	f04f 0100 	mov.w	r1, #0
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	1894      	adds	r4, r2, r2
 8004d90:	60bc      	str	r4, [r7, #8]
 8004d92:	415b      	adcs	r3, r3
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d9a:	1812      	adds	r2, r2, r0
 8004d9c:	eb41 0303 	adc.w	r3, r1, r3
 8004da0:	f04f 0400 	mov.w	r4, #0
 8004da4:	f04f 0500 	mov.w	r5, #0
 8004da8:	00dd      	lsls	r5, r3, #3
 8004daa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004dae:	00d4      	lsls	r4, r2, #3
 8004db0:	4622      	mov	r2, r4
 8004db2:	462b      	mov	r3, r5
 8004db4:	1814      	adds	r4, r2, r0
 8004db6:	64bc      	str	r4, [r7, #72]	; 0x48
 8004db8:	414b      	adcs	r3, r1
 8004dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f04f 0100 	mov.w	r1, #0
 8004dc6:	f04f 0200 	mov.w	r2, #0
 8004dca:	f04f 0300 	mov.w	r3, #0
 8004dce:	008b      	lsls	r3, r1, #2
 8004dd0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dd4:	0082      	lsls	r2, r0, #2
 8004dd6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004dda:	f7fb fa81 	bl	80002e0 <__aeabi_uldivmod>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4b2f      	ldr	r3, [pc, #188]	; (8004ea0 <UART_SetConfig+0x38c>)
 8004de4:	fba3 1302 	umull	r1, r3, r3, r2
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	2164      	movs	r1, #100	; 0x64
 8004dec:	fb01 f303 	mul.w	r3, r1, r3
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	3332      	adds	r3, #50	; 0x32
 8004df6:	4a2a      	ldr	r2, [pc, #168]	; (8004ea0 <UART_SetConfig+0x38c>)
 8004df8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e02:	441e      	add	r6, r3
 8004e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e06:	4618      	mov	r0, r3
 8004e08:	f04f 0100 	mov.w	r1, #0
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	1894      	adds	r4, r2, r2
 8004e12:	603c      	str	r4, [r7, #0]
 8004e14:	415b      	adcs	r3, r3
 8004e16:	607b      	str	r3, [r7, #4]
 8004e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e1c:	1812      	adds	r2, r2, r0
 8004e1e:	eb41 0303 	adc.w	r3, r1, r3
 8004e22:	f04f 0400 	mov.w	r4, #0
 8004e26:	f04f 0500 	mov.w	r5, #0
 8004e2a:	00dd      	lsls	r5, r3, #3
 8004e2c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e30:	00d4      	lsls	r4, r2, #3
 8004e32:	4622      	mov	r2, r4
 8004e34:	462b      	mov	r3, r5
 8004e36:	eb12 0a00 	adds.w	sl, r2, r0
 8004e3a:	eb43 0b01 	adc.w	fp, r3, r1
 8004e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f04f 0100 	mov.w	r1, #0
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	008b      	lsls	r3, r1, #2
 8004e52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e56:	0082      	lsls	r2, r0, #2
 8004e58:	4650      	mov	r0, sl
 8004e5a:	4659      	mov	r1, fp
 8004e5c:	f7fb fa40 	bl	80002e0 <__aeabi_uldivmod>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <UART_SetConfig+0x38c>)
 8004e66:	fba3 1302 	umull	r1, r3, r3, r2
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	2164      	movs	r1, #100	; 0x64
 8004e6e:	fb01 f303 	mul.w	r3, r1, r3
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	3332      	adds	r3, #50	; 0x32
 8004e78:	4a09      	ldr	r2, [pc, #36]	; (8004ea0 <UART_SetConfig+0x38c>)
 8004e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	f003 020f 	and.w	r2, r3, #15
 8004e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4432      	add	r2, r6
 8004e8a:	609a      	str	r2, [r3, #8]
}
 8004e8c:	bf00      	nop
 8004e8e:	377c      	adds	r7, #124	; 0x7c
 8004e90:	46bd      	mov	sp, r7
 8004e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e96:	bf00      	nop
 8004e98:	40011000 	.word	0x40011000
 8004e9c:	40011400 	.word	0x40011400
 8004ea0:	51eb851f 	.word	0x51eb851f

08004ea4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f103 0208 	add.w	r2, r3, #8
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f103 0208 	add.w	r2, r3, #8
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f103 0208 	add.w	r2, r3, #8
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8004efe:	b480      	push	{r7}
 8004f00:	b085      	sub	sp, #20
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	601a      	str	r2, [r3, #0]
}
 8004f3a:	bf00      	nop
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004f46:	b480      	push	{r7}
 8004f48:	b085      	sub	sp, #20
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d103      	bne.n	8004f66 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	e00c      	b.n	8004f80 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3308      	adds	r3, #8
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e002      	b.n	8004f74 <vListInsert+0x2e>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d2f6      	bcs.n	8004f6e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	601a      	str	r2, [r3, #0]
}
 8004fac:	bf00      	nop
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6892      	ldr	r2, [r2, #8]
 8004fce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6852      	ldr	r2, [r2, #4]
 8004fd8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d103      	bne.n	8004fec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	1e5a      	subs	r2, r3, #1
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <xQueueGenericReset+0x2a>
        __asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	60bb      	str	r3, [r7, #8]
    }
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005036:	f002 fb0f 	bl	8007658 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	68f9      	ldr	r1, [r7, #12]
 8005044:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005046:	fb01 f303 	mul.w	r3, r1, r3
 800504a:	441a      	add	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005066:	3b01      	subs	r3, #1
 8005068:	68f9      	ldr	r1, [r7, #12]
 800506a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800506c:	fb01 f303 	mul.w	r3, r1, r3
 8005070:	441a      	add	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	22ff      	movs	r2, #255	; 0xff
 800507a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	22ff      	movs	r2, #255	; 0xff
 8005082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d114      	bne.n	80050b6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01a      	beq.n	80050ca <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3310      	adds	r3, #16
 8005098:	4618      	mov	r0, r3
 800509a:	f001 f921 	bl	80062e0 <xTaskRemoveFromEventList>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d012      	beq.n	80050ca <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80050a4:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <xQueueGenericReset+0xcc>)
 80050a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	e009      	b.n	80050ca <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3310      	adds	r3, #16
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff fef2 	bl	8004ea4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3324      	adds	r3, #36	; 0x24
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff feed 	bl	8004ea4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80050ca:	f002 faf5 	bl	80076b8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80050ce:	2301      	movs	r3, #1
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	e000ed04 	.word	0xe000ed04

080050dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08c      	sub	sp, #48	; 0x30
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	4613      	mov	r3, r2
 80050e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <xQueueGenericCreate+0x2a>
        __asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	61bb      	str	r3, [r7, #24]
    }
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	fb02 f303 	mul.w	r3, r2, r3
 800510e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d006      	beq.n	8005124 <xQueueGenericCreate+0x48>
 8005116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	fbb2 f3f3 	udiv	r3, r2, r3
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	429a      	cmp	r2, r3
 8005122:	d101      	bne.n	8005128 <xQueueGenericCreate+0x4c>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <xQueueGenericCreate+0x4e>
 8005128:	2300      	movs	r3, #0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <xQueueGenericCreate+0x68>
        __asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	617b      	str	r3, [r7, #20]
    }
 8005140:	bf00      	nop
 8005142:	e7fe      	b.n	8005142 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800514a:	d90a      	bls.n	8005162 <xQueueGenericCreate+0x86>
        __asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	613b      	str	r3, [r7, #16]
    }
 800515e:	bf00      	nop
 8005160:	e7fe      	b.n	8005160 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	3350      	adds	r3, #80	; 0x50
 8005166:	4618      	mov	r0, r3
 8005168:	f002 fb98 	bl	800789c <pvPortMalloc>
 800516c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00d      	beq.n	8005190 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	3350      	adds	r3, #80	; 0x50
 800517c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800517e:	79fa      	ldrb	r2, [r7, #7]
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f805 	bl	800519a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8005190:	6a3b      	ldr	r3, [r7, #32]
    }
 8005192:	4618      	mov	r0, r3
 8005194:	3728      	adds	r7, #40	; 0x28
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	607a      	str	r2, [r7, #4]
 80051a6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d103      	bne.n	80051b6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	e002      	b.n	80051bc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80051c8:	2101      	movs	r1, #1
 80051ca:	69b8      	ldr	r0, [r7, #24]
 80051cc:	f7ff ff1e 	bl	800500c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08e      	sub	sp, #56	; 0x38
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051ee:	2300      	movs	r3, #0
 80051f0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80051f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <xQueueGenericSend+0x32>
        __asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d103      	bne.n	8005220 <xQueueGenericSend+0x40>
 8005218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <xQueueGenericSend+0x44>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <xQueueGenericSend+0x46>
 8005224:	2300      	movs	r3, #0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <xQueueGenericSend+0x60>
        __asm volatile
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800523c:	bf00      	nop
 800523e:	e7fe      	b.n	800523e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b02      	cmp	r3, #2
 8005244:	d103      	bne.n	800524e <xQueueGenericSend+0x6e>
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <xQueueGenericSend+0x72>
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <xQueueGenericSend+0x74>
 8005252:	2300      	movs	r3, #0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <xQueueGenericSend+0x8e>
        __asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	623b      	str	r3, [r7, #32]
    }
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800526e:	f001 f9d3 	bl	8006618 <xTaskGetSchedulerState>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d102      	bne.n	800527e <xQueueGenericSend+0x9e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <xQueueGenericSend+0xa2>
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <xQueueGenericSend+0xa4>
 8005282:	2300      	movs	r3, #0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <xQueueGenericSend+0xbe>
        __asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	61fb      	str	r3, [r7, #28]
    }
 800529a:	bf00      	nop
 800529c:	e7fe      	b.n	800529c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800529e:	f002 f9db 	bl	8007658 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d302      	bcc.n	80052b4 <xQueueGenericSend+0xd4>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d129      	bne.n	8005308 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052ba:	f000 fac6 	bl	800584a <prvCopyDataToQueue>
 80052be:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d010      	beq.n	80052ea <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	3324      	adds	r3, #36	; 0x24
 80052cc:	4618      	mov	r0, r3
 80052ce:	f001 f807 	bl	80062e0 <xTaskRemoveFromEventList>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d013      	beq.n	8005300 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80052d8:	4b3f      	ldr	r3, [pc, #252]	; (80053d8 <xQueueGenericSend+0x1f8>)
 80052da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	e00a      	b.n	8005300 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80052f0:	4b39      	ldr	r3, [pc, #228]	; (80053d8 <xQueueGenericSend+0x1f8>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005300:	f002 f9da 	bl	80076b8 <vPortExitCritical>
                return pdPASS;
 8005304:	2301      	movs	r3, #1
 8005306:	e063      	b.n	80053d0 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800530e:	f002 f9d3 	bl	80076b8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005312:	2300      	movs	r3, #0
 8005314:	e05c      	b.n	80053d0 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005318:	2b00      	cmp	r3, #0
 800531a:	d106      	bne.n	800532a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800531c:	f107 0314 	add.w	r3, r7, #20
 8005320:	4618      	mov	r0, r3
 8005322:	f001 f83f 	bl	80063a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005326:	2301      	movs	r3, #1
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800532a:	f002 f9c5 	bl	80076b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800532e:	f000 fdb9 	bl	8005ea4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005332:	f002 f991 	bl	8007658 <vPortEnterCritical>
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800533c:	b25b      	sxtb	r3, r3
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005342:	d103      	bne.n	800534c <xQueueGenericSend+0x16c>
 8005344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005352:	b25b      	sxtb	r3, r3
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005358:	d103      	bne.n	8005362 <xQueueGenericSend+0x182>
 800535a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005362:	f002 f9a9 	bl	80076b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005366:	1d3a      	adds	r2, r7, #4
 8005368:	f107 0314 	add.w	r3, r7, #20
 800536c:	4611      	mov	r1, r2
 800536e:	4618      	mov	r0, r3
 8005370:	f001 f82e 	bl	80063d0 <xTaskCheckForTimeOut>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d124      	bne.n	80053c4 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800537a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800537c:	f000 fb5d 	bl	8005a3a <prvIsQueueFull>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d018      	beq.n	80053b8 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	3310      	adds	r3, #16
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	4611      	mov	r1, r2
 800538e:	4618      	mov	r0, r3
 8005390:	f000 ff56 	bl	8006240 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005396:	f000 fae8 	bl	800596a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800539a:	f000 fd91 	bl	8005ec0 <xTaskResumeAll>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f47f af7c 	bne.w	800529e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80053a6:	4b0c      	ldr	r3, [pc, #48]	; (80053d8 <xQueueGenericSend+0x1f8>)
 80053a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	e772      	b.n	800529e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80053b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053ba:	f000 fad6 	bl	800596a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80053be:	f000 fd7f 	bl	8005ec0 <xTaskResumeAll>
 80053c2:	e76c      	b.n	800529e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80053c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053c6:	f000 fad0 	bl	800596a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80053ca:	f000 fd79 	bl	8005ec0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80053ce:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3738      	adds	r7, #56	; 0x38
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	e000ed04 	.word	0xe000ed04

080053dc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b090      	sub	sp, #64	; 0x40
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80053ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005406:	bf00      	nop
 8005408:	e7fe      	b.n	8005408 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d103      	bne.n	8005418 <xQueueGenericSendFromISR+0x3c>
 8005410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <xQueueGenericSendFromISR+0x40>
 8005418:	2301      	movs	r3, #1
 800541a:	e000      	b.n	800541e <xQueueGenericSendFromISR+0x42>
 800541c:	2300      	movs	r3, #0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d103      	bne.n	8005446 <xQueueGenericSendFromISR+0x6a>
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <xQueueGenericSendFromISR+0x6e>
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <xQueueGenericSendFromISR+0x70>
 800544a:	2300      	movs	r3, #0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	623b      	str	r3, [r7, #32]
    }
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005466:	f002 f9d9 	bl	800781c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800546a:	f3ef 8211 	mrs	r2, BASEPRI
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	61fa      	str	r2, [r7, #28]
 8005480:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005482:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <xQueueGenericSendFromISR+0xbc>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d13e      	bne.n	8005516 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800549e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054ae:	f000 f9cc 	bl	800584a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80054b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d112      	bne.n	80054e2 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d025      	beq.n	8005510 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	3324      	adds	r3, #36	; 0x24
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 ff09 	bl	80062e0 <xTaskRemoveFromEventList>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01d      	beq.n	8005510 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d01a      	beq.n	8005510 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	e016      	b.n	8005510 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80054e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80054e6:	2b7f      	cmp	r3, #127	; 0x7f
 80054e8:	d10a      	bne.n	8005500 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	617b      	str	r3, [r7, #20]
    }
 80054fc:	bf00      	nop
 80054fe:	e7fe      	b.n	80054fe <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005500:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005504:	3301      	adds	r3, #1
 8005506:	b2db      	uxtb	r3, r3
 8005508:	b25a      	sxtb	r2, r3
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005510:	2301      	movs	r3, #1
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005514:	e001      	b.n	800551a <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005516:	2300      	movs	r3, #0
 8005518:	63fb      	str	r3, [r7, #60]	; 0x3c
 800551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005524:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005528:	4618      	mov	r0, r3
 800552a:	3740      	adds	r7, #64	; 0x40
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08c      	sub	sp, #48	; 0x30
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800553c:	2300      	movs	r3, #0
 800553e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10a      	bne.n	8005560 <xQueueReceive+0x30>
        __asm volatile
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	f383 8811 	msr	BASEPRI, r3
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	623b      	str	r3, [r7, #32]
    }
 800555c:	bf00      	nop
 800555e:	e7fe      	b.n	800555e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d103      	bne.n	800556e <xQueueReceive+0x3e>
 8005566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <xQueueReceive+0x42>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <xQueueReceive+0x44>
 8005572:	2300      	movs	r3, #0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xQueueReceive+0x5e>
        __asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	61fb      	str	r3, [r7, #28]
    }
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800558e:	f001 f843 	bl	8006618 <xTaskGetSchedulerState>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d102      	bne.n	800559e <xQueueReceive+0x6e>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <xQueueReceive+0x72>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <xQueueReceive+0x74>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10a      	bne.n	80055be <xQueueReceive+0x8e>
        __asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	f383 8811 	msr	BASEPRI, r3
 80055b0:	f3bf 8f6f 	isb	sy
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	61bb      	str	r3, [r7, #24]
    }
 80055ba:	bf00      	nop
 80055bc:	e7fe      	b.n	80055bc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80055be:	f002 f84b 	bl	8007658 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01f      	beq.n	800560e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055d2:	f000 f9a4 	bl	800591e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	1e5a      	subs	r2, r3, #1
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00f      	beq.n	8005606 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	3310      	adds	r3, #16
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fe78 	bl	80062e0 <xTaskRemoveFromEventList>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80055f6:	4b3d      	ldr	r3, [pc, #244]	; (80056ec <xQueueReceive+0x1bc>)
 80055f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005606:	f002 f857 	bl	80076b8 <vPortExitCritical>
                return pdPASS;
 800560a:	2301      	movs	r3, #1
 800560c:	e069      	b.n	80056e2 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005614:	f002 f850 	bl	80076b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005618:	2300      	movs	r3, #0
 800561a:	e062      	b.n	80056e2 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005622:	f107 0310 	add.w	r3, r7, #16
 8005626:	4618      	mov	r0, r3
 8005628:	f000 febc 	bl	80063a4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800562c:	2301      	movs	r3, #1
 800562e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005630:	f002 f842 	bl	80076b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005634:	f000 fc36 	bl	8005ea4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005638:	f002 f80e 	bl	8007658 <vPortEnterCritical>
 800563c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005642:	b25b      	sxtb	r3, r3
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d103      	bne.n	8005652 <xQueueReceive+0x122>
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005658:	b25b      	sxtb	r3, r3
 800565a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565e:	d103      	bne.n	8005668 <xQueueReceive+0x138>
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005668:	f002 f826 	bl	80076b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800566c:	1d3a      	adds	r2, r7, #4
 800566e:	f107 0310 	add.w	r3, r7, #16
 8005672:	4611      	mov	r1, r2
 8005674:	4618      	mov	r0, r3
 8005676:	f000 feab 	bl	80063d0 <xTaskCheckForTimeOut>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d123      	bne.n	80056c8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005680:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005682:	f000 f9c4 	bl	8005a0e <prvIsQueueEmpty>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d017      	beq.n	80056bc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	3324      	adds	r3, #36	; 0x24
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	4611      	mov	r1, r2
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fdd3 	bl	8006240 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800569a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800569c:	f000 f965 	bl	800596a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80056a0:	f000 fc0e 	bl	8005ec0 <xTaskResumeAll>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d189      	bne.n	80055be <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80056aa:	4b10      	ldr	r3, [pc, #64]	; (80056ec <xQueueReceive+0x1bc>)
 80056ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	e780      	b.n	80055be <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80056bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056be:	f000 f954 	bl	800596a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80056c2:	f000 fbfd 	bl	8005ec0 <xTaskResumeAll>
 80056c6:	e77a      	b.n	80055be <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80056c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ca:	f000 f94e 	bl	800596a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80056ce:	f000 fbf7 	bl	8005ec0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056d4:	f000 f99b 	bl	8005a0e <prvIsQueueEmpty>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f43f af6f 	beq.w	80055be <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80056e0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3730      	adds	r7, #48	; 0x30
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	e000ed04 	.word	0xe000ed04

080056f0 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b090      	sub	sp, #64	; 0x40
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <xQueueReceiveFromISR+0x2c>
        __asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005718:	bf00      	nop
 800571a:	e7fe      	b.n	800571a <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d103      	bne.n	800572a <xQueueReceiveFromISR+0x3a>
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <xQueueReceiveFromISR+0x3e>
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <xQueueReceiveFromISR+0x40>
 800572e:	2300      	movs	r3, #0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10a      	bne.n	800574a <xQueueReceiveFromISR+0x5a>
        __asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005746:	bf00      	nop
 8005748:	e7fe      	b.n	8005748 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800574a:	f002 f867 	bl	800781c <vPortValidateInterruptPriority>
        __asm volatile
 800574e:	f3ef 8211 	mrs	r2, BASEPRI
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	623a      	str	r2, [r7, #32]
 8005764:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005766:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800576a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	2b00      	cmp	r3, #0
 8005774:	d03e      	beq.n	80057f4 <xQueueReceiveFromISR+0x104>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800577c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005784:	f000 f8cb 	bl	800591e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	1e5a      	subs	r2, r3, #1
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005790:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005798:	d112      	bne.n	80057c0 <xQueueReceiveFromISR+0xd0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800579a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d025      	beq.n	80057ee <xQueueReceiveFromISR+0xfe>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	3310      	adds	r3, #16
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fd9a 	bl	80062e0 <xTaskRemoveFromEventList>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01d      	beq.n	80057ee <xQueueReceiveFromISR+0xfe>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01a      	beq.n	80057ee <xQueueReceiveFromISR+0xfe>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	e016      	b.n	80057ee <xQueueReceiveFromISR+0xfe>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80057c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80057c4:	2b7f      	cmp	r3, #127	; 0x7f
 80057c6:	d10a      	bne.n	80057de <xQueueReceiveFromISR+0xee>
        __asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	61bb      	str	r3, [r7, #24]
    }
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <xQueueReceiveFromISR+0xec>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80057de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057e2:	3301      	adds	r3, #1
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	b25a      	sxtb	r2, r3
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80057ee:	2301      	movs	r3, #1
 80057f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f2:	e001      	b.n	80057f8 <xQueueReceiveFromISR+0x108>
        }
        else
        {
            xReturn = pdFAIL;
 80057f4:	2300      	movs	r3, #0
 80057f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057fa:	617b      	str	r3, [r7, #20]
        __asm volatile
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f383 8811 	msr	BASEPRI, r3
    }
 8005802:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005806:	4618      	mov	r0, r3
 8005808:	3740      	adds	r7, #64	; 0x40
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}

0800580e <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	60bb      	str	r3, [r7, #8]
    }
 800582e:	bf00      	nop
 8005830:	e7fe      	b.n	8005830 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005832:	f001 ff11 	bl	8007658 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800583c:	f001 ff3c 	bl	80076b8 <vPortExitCritical>

    return uxReturn;
 8005840:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b086      	sub	sp, #24
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10d      	bne.n	8005884 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d14d      	bne.n	800590c <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	4618      	mov	r0, r3
 8005876:	f000 feed 	bl	8006654 <xTaskPriorityDisinherit>
 800587a:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	609a      	str	r2, [r3, #8]
 8005882:	e043      	b.n	800590c <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d119      	bne.n	80058be <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6858      	ldr	r0, [r3, #4]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	461a      	mov	r2, r3
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	f002 fa29 	bl	8007cec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	441a      	add	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d32b      	bcc.n	800590c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	605a      	str	r2, [r3, #4]
 80058bc:	e026      	b.n	800590c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	68d8      	ldr	r0, [r3, #12]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	461a      	mov	r2, r3
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	f002 fa0f 	bl	8007cec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	425b      	negs	r3, r3
 80058d8:	441a      	add	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d207      	bcs.n	80058fa <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	425b      	negs	r3, r3
 80058f4:	441a      	add	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d105      	bne.n	800590c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3b01      	subs	r3, #1
 800590a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8005914:	697b      	ldr	r3, [r7, #20]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	d018      	beq.n	8005962 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	441a      	add	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	429a      	cmp	r2, r3
 8005948:	d303      	bcc.n	8005952 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68d9      	ldr	r1, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	461a      	mov	r2, r3
 800595c:	6838      	ldr	r0, [r7, #0]
 800595e:	f002 f9c5 	bl	8007cec <memcpy>
    }
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005972:	f001 fe71 	bl	8007658 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800597c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800597e:	e011      	b.n	80059a4 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	2b00      	cmp	r3, #0
 8005986:	d012      	beq.n	80059ae <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3324      	adds	r3, #36	; 0x24
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fca7 	bl	80062e0 <xTaskRemoveFromEventList>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005998:	f000 fd80 	bl	800649c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	3b01      	subs	r3, #1
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80059a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	dce9      	bgt.n	8005980 <prvUnlockQueue+0x16>
 80059ac:	e000      	b.n	80059b0 <prvUnlockQueue+0x46>
                        break;
 80059ae:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	22ff      	movs	r2, #255	; 0xff
 80059b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80059b8:	f001 fe7e 	bl	80076b8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80059bc:	f001 fe4c 	bl	8007658 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059c6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80059c8:	e011      	b.n	80059ee <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d012      	beq.n	80059f8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	3310      	adds	r3, #16
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fc82 	bl	80062e0 <xTaskRemoveFromEventList>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80059e2:	f000 fd5b 	bl	800649c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80059e6:	7bbb      	ldrb	r3, [r7, #14]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80059ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	dce9      	bgt.n	80059ca <prvUnlockQueue+0x60>
 80059f6:	e000      	b.n	80059fa <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80059f8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	22ff      	movs	r2, #255	; 0xff
 80059fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8005a02:	f001 fe59 	bl	80076b8 <vPortExitCritical>
}
 8005a06:	bf00      	nop
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005a16:	f001 fe1f 	bl	8007658 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d102      	bne.n	8005a28 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005a22:	2301      	movs	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	e001      	b.n	8005a2c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005a2c:	f001 fe44 	bl	80076b8 <vPortExitCritical>

    return xReturn;
 8005a30:	68fb      	ldr	r3, [r7, #12]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005a42:	f001 fe09 	bl	8007658 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d102      	bne.n	8005a58 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005a52:	2301      	movs	r3, #1
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	e001      	b.n	8005a5c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005a5c:	f001 fe2c 	bl	80076b8 <vPortExitCritical>

    return xReturn;
 8005a60:	68fb      	ldr	r3, [r7, #12]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b087      	sub	sp, #28
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	60fb      	str	r3, [r7, #12]
    }
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d102      	bne.n	8005aa4 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
 8005aa2:	e001      	b.n	8005aa8 <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005aa8:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005aaa:	4618      	mov	r0, r3
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	e014      	b.n	8005af2 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ac8:	4a0f      	ldr	r2, [pc, #60]	; (8005b08 <vQueueAddToRegistry+0x50>)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10b      	bne.n	8005aec <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ad4:	490c      	ldr	r1, [pc, #48]	; (8005b08 <vQueueAddToRegistry+0x50>)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005ade:	4a0a      	ldr	r2, [pc, #40]	; (8005b08 <vQueueAddToRegistry+0x50>)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005aea:	e006      	b.n	8005afa <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	3301      	adds	r3, #1
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b07      	cmp	r3, #7
 8005af6:	d9e7      	bls.n	8005ac8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	20012f5c 	.word	0x20012f5c

08005b0c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005b1c:	f001 fd9c 	bl	8007658 <vPortEnterCritical>
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b26:	b25b      	sxtb	r3, r3
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d103      	bne.n	8005b36 <vQueueWaitForMessageRestricted+0x2a>
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b3c:	b25b      	sxtb	r3, r3
 8005b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b42:	d103      	bne.n	8005b4c <vQueueWaitForMessageRestricted+0x40>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b4c:	f001 fdb4 	bl	80076b8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d106      	bne.n	8005b66 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	3324      	adds	r3, #36	; 0x24
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	68b9      	ldr	r1, [r7, #8]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fb91 	bl	8006288 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005b66:	6978      	ldr	r0, [r7, #20]
 8005b68:	f7ff feff 	bl	800596a <prvUnlockQueue>
    }
 8005b6c:	bf00      	nop
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08c      	sub	sp, #48	; 0x30
 8005b78:	af04      	add	r7, sp, #16
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	4613      	mov	r3, r2
 8005b82:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b84:	88fb      	ldrh	r3, [r7, #6]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fe87 	bl	800789c <pvPortMalloc>
 8005b8e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00e      	beq.n	8005bb4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b96:	2058      	movs	r0, #88	; 0x58
 8005b98:	f001 fe80 	bl	800789c <pvPortMalloc>
 8005b9c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8005baa:	e005      	b.n	8005bb8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005bac:	6978      	ldr	r0, [r7, #20]
 8005bae:	f001 ff55 	bl	8007a5c <vPortFree>
 8005bb2:	e001      	b.n	8005bb8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d013      	beq.n	8005be6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	9303      	str	r3, [sp, #12]
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	9302      	str	r3, [sp, #8]
 8005bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bca:	9301      	str	r3, [sp, #4]
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f80e 	bl	8005bf6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005bda:	69f8      	ldr	r0, [r7, #28]
 8005bdc:	f000 f8a2 	bl	8005d24 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005be0:	2301      	movs	r3, #1
 8005be2:	61bb      	str	r3, [r7, #24]
 8005be4:	e002      	b.n	8005bec <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005be6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bea:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005bec:	69bb      	ldr	r3, [r7, #24]
    }
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3720      	adds	r7, #32
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b088      	sub	sp, #32
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
 8005bfe:	60b9      	str	r1, [r7, #8]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	21a5      	movs	r1, #165	; 0xa5
 8005c10:	f002 f87a 	bl	8007d08 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f023 0307 	bic.w	r3, r3, #7
 8005c2c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <prvInitialiseNewTask+0x58>
        __asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	617b      	str	r3, [r7, #20]
    }
 8005c4a:	bf00      	nop
 8005c4c:	e7fe      	b.n	8005c4c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01f      	beq.n	8005c94 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c54:	2300      	movs	r3, #0
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	e012      	b.n	8005c80 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	7819      	ldrb	r1, [r3, #0]
 8005c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	4413      	add	r3, r2
 8005c68:	3334      	adds	r3, #52	; 0x34
 8005c6a:	460a      	mov	r2, r1
 8005c6c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	4413      	add	r3, r2
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d006      	beq.n	8005c88 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	61fb      	str	r3, [r7, #28]
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	2b09      	cmp	r3, #9
 8005c84:	d9e9      	bls.n	8005c5a <prvInitialiseNewTask+0x64>
 8005c86:	e000      	b.n	8005c8a <prvInitialiseNewTask+0x94>
            {
                break;
 8005c88:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c92:	e003      	b.n	8005c9c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d901      	bls.n	8005ca6 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ca2:	2304      	movs	r3, #4
 8005ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005caa:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cb0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff f911 	bl	8004ee4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff f90c 	bl	8004ee4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	f1c3 0205 	rsb	r2, r3, #5
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	3350      	adds	r3, #80	; 0x50
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f002 f80c 	bl	8007d08 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	3354      	adds	r3, #84	; 0x54
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f002 f805 	bl	8007d08 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	68f9      	ldr	r1, [r7, #12]
 8005d02:	69b8      	ldr	r0, [r7, #24]
 8005d04:	f001 fb76 	bl	80073f4 <pxPortInitialiseStack>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d18:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005d1a:	bf00      	nop
 8005d1c:	3720      	adds	r7, #32
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005d2c:	f001 fc94 	bl	8007658 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005d30:	4b2c      	ldr	r3, [pc, #176]	; (8005de4 <prvAddNewTaskToReadyList+0xc0>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3301      	adds	r3, #1
 8005d36:	4a2b      	ldr	r2, [pc, #172]	; (8005de4 <prvAddNewTaskToReadyList+0xc0>)
 8005d38:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005d3a:	4b2b      	ldr	r3, [pc, #172]	; (8005de8 <prvAddNewTaskToReadyList+0xc4>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005d42:	4a29      	ldr	r2, [pc, #164]	; (8005de8 <prvAddNewTaskToReadyList+0xc4>)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d48:	4b26      	ldr	r3, [pc, #152]	; (8005de4 <prvAddNewTaskToReadyList+0xc0>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d110      	bne.n	8005d72 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005d50:	f000 fbc8 	bl	80064e4 <prvInitialiseTaskLists>
 8005d54:	e00d      	b.n	8005d72 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005d56:	4b25      	ldr	r3, [pc, #148]	; (8005dec <prvAddNewTaskToReadyList+0xc8>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d109      	bne.n	8005d72 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d5e:	4b22      	ldr	r3, [pc, #136]	; (8005de8 <prvAddNewTaskToReadyList+0xc4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d802      	bhi.n	8005d72 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005d6c:	4a1e      	ldr	r2, [pc, #120]	; (8005de8 <prvAddNewTaskToReadyList+0xc4>)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005d72:	4b1f      	ldr	r3, [pc, #124]	; (8005df0 <prvAddNewTaskToReadyList+0xcc>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3301      	adds	r3, #1
 8005d78:	4a1d      	ldr	r2, [pc, #116]	; (8005df0 <prvAddNewTaskToReadyList+0xcc>)
 8005d7a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d7c:	4b1c      	ldr	r3, [pc, #112]	; (8005df0 <prvAddNewTaskToReadyList+0xcc>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	2201      	movs	r2, #1
 8005d8a:	409a      	lsls	r2, r3
 8005d8c:	4b19      	ldr	r3, [pc, #100]	; (8005df4 <prvAddNewTaskToReadyList+0xd0>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	4a18      	ldr	r2, [pc, #96]	; (8005df4 <prvAddNewTaskToReadyList+0xd0>)
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4a15      	ldr	r2, [pc, #84]	; (8005df8 <prvAddNewTaskToReadyList+0xd4>)
 8005da4:	441a      	add	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3304      	adds	r3, #4
 8005daa:	4619      	mov	r1, r3
 8005dac:	4610      	mov	r0, r2
 8005dae:	f7ff f8a6 	bl	8004efe <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005db2:	f001 fc81 	bl	80076b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005db6:	4b0d      	ldr	r3, [pc, #52]	; (8005dec <prvAddNewTaskToReadyList+0xc8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00e      	beq.n	8005ddc <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	; (8005de8 <prvAddNewTaskToReadyList+0xc4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d207      	bcs.n	8005ddc <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <prvAddNewTaskToReadyList+0xd8>)
 8005dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005ddc:	bf00      	nop
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	200001e4 	.word	0x200001e4
 8005de8:	2000010c 	.word	0x2000010c
 8005dec:	200001f0 	.word	0x200001f0
 8005df0:	20000200 	.word	0x20000200
 8005df4:	200001ec 	.word	0x200001ec
 8005df8:	20000110 	.word	0x20000110
 8005dfc:	e000ed04 	.word	0xe000ed04

08005e00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005e06:	4b20      	ldr	r3, [pc, #128]	; (8005e88 <vTaskStartScheduler+0x88>)
 8005e08:	9301      	str	r3, [sp, #4]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	2300      	movs	r3, #0
 8005e10:	2282      	movs	r2, #130	; 0x82
 8005e12:	491e      	ldr	r1, [pc, #120]	; (8005e8c <vTaskStartScheduler+0x8c>)
 8005e14:	481e      	ldr	r0, [pc, #120]	; (8005e90 <vTaskStartScheduler+0x90>)
 8005e16:	f7ff fead 	bl	8005b74 <xTaskCreate>
 8005e1a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d102      	bne.n	8005e28 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005e22:	f000 ff59 	bl	8006cd8 <xTimerCreateTimerTask>
 8005e26:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d116      	bne.n	8005e5c <vTaskStartScheduler+0x5c>
        __asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	60bb      	str	r3, [r7, #8]
    }
 8005e40:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005e42:	4b14      	ldr	r3, [pc, #80]	; (8005e94 <vTaskStartScheduler+0x94>)
 8005e44:	f04f 32ff 	mov.w	r2, #4294967295
 8005e48:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005e4a:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <vTaskStartScheduler+0x98>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e50:	4b12      	ldr	r3, [pc, #72]	; (8005e9c <vTaskStartScheduler+0x9c>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005e56:	f001 fb5d 	bl	8007514 <xPortStartScheduler>
 8005e5a:	e00e      	b.n	8005e7a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d10a      	bne.n	8005e7a <vTaskStartScheduler+0x7a>
        __asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	607b      	str	r3, [r7, #4]
    }
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005e7a:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <vTaskStartScheduler+0xa0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000208 	.word	0x20000208
 8005e8c:	0800892c 	.word	0x0800892c
 8005e90:	080064b5 	.word	0x080064b5
 8005e94:	20000204 	.word	0x20000204
 8005e98:	200001f0 	.word	0x200001f0
 8005e9c:	200001e8 	.word	0x200001e8
 8005ea0:	20000020 	.word	0x20000020

08005ea4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005ea8:	4b04      	ldr	r3, [pc, #16]	; (8005ebc <vTaskSuspendAll+0x18>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3301      	adds	r3, #1
 8005eae:	4a03      	ldr	r2, [pc, #12]	; (8005ebc <vTaskSuspendAll+0x18>)
 8005eb0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005eb2:	bf00      	nop
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr
 8005ebc:	2000020c 	.word	0x2000020c

08005ec0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005ece:	4b41      	ldr	r3, [pc, #260]	; (8005fd4 <xTaskResumeAll+0x114>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10a      	bne.n	8005eec <xTaskResumeAll+0x2c>
        __asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	603b      	str	r3, [r7, #0]
    }
 8005ee8:	bf00      	nop
 8005eea:	e7fe      	b.n	8005eea <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005eec:	f001 fbb4 	bl	8007658 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8005ef0:	4b38      	ldr	r3, [pc, #224]	; (8005fd4 <xTaskResumeAll+0x114>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	4a37      	ldr	r2, [pc, #220]	; (8005fd4 <xTaskResumeAll+0x114>)
 8005ef8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005efa:	4b36      	ldr	r3, [pc, #216]	; (8005fd4 <xTaskResumeAll+0x114>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d161      	bne.n	8005fc6 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f02:	4b35      	ldr	r3, [pc, #212]	; (8005fd8 <xTaskResumeAll+0x118>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d05d      	beq.n	8005fc6 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f0a:	e02e      	b.n	8005f6a <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f0c:	4b33      	ldr	r3, [pc, #204]	; (8005fdc <xTaskResumeAll+0x11c>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3318      	adds	r3, #24
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff f84d 	bl	8004fb8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3304      	adds	r3, #4
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff f848 	bl	8004fb8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	409a      	lsls	r2, r3
 8005f30:	4b2b      	ldr	r3, [pc, #172]	; (8005fe0 <xTaskResumeAll+0x120>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	4a2a      	ldr	r2, [pc, #168]	; (8005fe0 <xTaskResumeAll+0x120>)
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3e:	4613      	mov	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4a27      	ldr	r2, [pc, #156]	; (8005fe4 <xTaskResumeAll+0x124>)
 8005f48:	441a      	add	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3304      	adds	r3, #4
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4610      	mov	r0, r2
 8005f52:	f7fe ffd4 	bl	8004efe <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5a:	4b23      	ldr	r3, [pc, #140]	; (8005fe8 <xTaskResumeAll+0x128>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d302      	bcc.n	8005f6a <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8005f64:	4b21      	ldr	r3, [pc, #132]	; (8005fec <xTaskResumeAll+0x12c>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f6a:	4b1c      	ldr	r3, [pc, #112]	; (8005fdc <xTaskResumeAll+0x11c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1cc      	bne.n	8005f0c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005f78:	f000 fb32 	bl	80065e0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f7c:	4b1c      	ldr	r3, [pc, #112]	; (8005ff0 <xTaskResumeAll+0x130>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d010      	beq.n	8005faa <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005f88:	f000 f846 	bl	8006018 <xTaskIncrementTick>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8005f92:	4b16      	ldr	r3, [pc, #88]	; (8005fec <xTaskResumeAll+0x12c>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1f1      	bne.n	8005f88 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8005fa4:	4b12      	ldr	r3, [pc, #72]	; (8005ff0 <xTaskResumeAll+0x130>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005faa:	4b10      	ldr	r3, [pc, #64]	; (8005fec <xTaskResumeAll+0x12c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d009      	beq.n	8005fc6 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005fb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <xTaskResumeAll+0x134>)
 8005fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005fc6:	f001 fb77 	bl	80076b8 <vPortExitCritical>

    return xAlreadyYielded;
 8005fca:	68bb      	ldr	r3, [r7, #8]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	2000020c 	.word	0x2000020c
 8005fd8:	200001e4 	.word	0x200001e4
 8005fdc:	200001a4 	.word	0x200001a4
 8005fe0:	200001ec 	.word	0x200001ec
 8005fe4:	20000110 	.word	0x20000110
 8005fe8:	2000010c 	.word	0x2000010c
 8005fec:	200001f8 	.word	0x200001f8
 8005ff0:	200001f4 	.word	0x200001f4
 8005ff4:	e000ed04 	.word	0xe000ed04

08005ff8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005ffe:	4b05      	ldr	r3, [pc, #20]	; (8006014 <xTaskGetTickCount+0x1c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006004:	687b      	ldr	r3, [r7, #4]
}
 8006006:	4618      	mov	r0, r3
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	200001e8 	.word	0x200001e8

08006018 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006022:	4b4e      	ldr	r3, [pc, #312]	; (800615c <xTaskIncrementTick+0x144>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f040 808e 	bne.w	8006148 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800602c:	4b4c      	ldr	r3, [pc, #304]	; (8006160 <xTaskIncrementTick+0x148>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3301      	adds	r3, #1
 8006032:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006034:	4a4a      	ldr	r2, [pc, #296]	; (8006160 <xTaskIncrementTick+0x148>)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d120      	bne.n	8006082 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006040:	4b48      	ldr	r3, [pc, #288]	; (8006164 <xTaskIncrementTick+0x14c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <xTaskIncrementTick+0x48>
        __asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	603b      	str	r3, [r7, #0]
    }
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <xTaskIncrementTick+0x46>
 8006060:	4b40      	ldr	r3, [pc, #256]	; (8006164 <xTaskIncrementTick+0x14c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	4b40      	ldr	r3, [pc, #256]	; (8006168 <xTaskIncrementTick+0x150>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a3e      	ldr	r2, [pc, #248]	; (8006164 <xTaskIncrementTick+0x14c>)
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	4a3e      	ldr	r2, [pc, #248]	; (8006168 <xTaskIncrementTick+0x150>)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	4b3d      	ldr	r3, [pc, #244]	; (800616c <xTaskIncrementTick+0x154>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	4a3c      	ldr	r2, [pc, #240]	; (800616c <xTaskIncrementTick+0x154>)
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	f000 faaf 	bl	80065e0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006082:	4b3b      	ldr	r3, [pc, #236]	; (8006170 <xTaskIncrementTick+0x158>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	429a      	cmp	r2, r3
 800608a:	d348      	bcc.n	800611e <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800608c:	4b35      	ldr	r3, [pc, #212]	; (8006164 <xTaskIncrementTick+0x14c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d104      	bne.n	80060a0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006096:	4b36      	ldr	r3, [pc, #216]	; (8006170 <xTaskIncrementTick+0x158>)
 8006098:	f04f 32ff 	mov.w	r2, #4294967295
 800609c:	601a      	str	r2, [r3, #0]
                    break;
 800609e:	e03e      	b.n	800611e <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060a0:	4b30      	ldr	r3, [pc, #192]	; (8006164 <xTaskIncrementTick+0x14c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d203      	bcs.n	80060c0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80060b8:	4a2d      	ldr	r2, [pc, #180]	; (8006170 <xTaskIncrementTick+0x158>)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060be:	e02e      	b.n	800611e <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fe ff77 	bl	8004fb8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d004      	beq.n	80060dc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	3318      	adds	r3, #24
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fe ff6e 	bl	8004fb8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e0:	2201      	movs	r2, #1
 80060e2:	409a      	lsls	r2, r3
 80060e4:	4b23      	ldr	r3, [pc, #140]	; (8006174 <xTaskIncrementTick+0x15c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	4a22      	ldr	r2, [pc, #136]	; (8006174 <xTaskIncrementTick+0x15c>)
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f2:	4613      	mov	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4a1f      	ldr	r2, [pc, #124]	; (8006178 <xTaskIncrementTick+0x160>)
 80060fc:	441a      	add	r2, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	3304      	adds	r3, #4
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f7fe fefa 	bl	8004efe <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610e:	4b1b      	ldr	r3, [pc, #108]	; (800617c <xTaskIncrementTick+0x164>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	429a      	cmp	r2, r3
 8006116:	d3b9      	bcc.n	800608c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8006118:	2301      	movs	r3, #1
 800611a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800611c:	e7b6      	b.n	800608c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800611e:	4b17      	ldr	r3, [pc, #92]	; (800617c <xTaskIncrementTick+0x164>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006124:	4914      	ldr	r1, [pc, #80]	; (8006178 <xTaskIncrementTick+0x160>)
 8006126:	4613      	mov	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	440b      	add	r3, r1
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d901      	bls.n	800613a <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8006136:	2301      	movs	r3, #1
 8006138:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800613a:	4b11      	ldr	r3, [pc, #68]	; (8006180 <xTaskIncrementTick+0x168>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d007      	beq.n	8006152 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8006142:	2301      	movs	r3, #1
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	e004      	b.n	8006152 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006148:	4b0e      	ldr	r3, [pc, #56]	; (8006184 <xTaskIncrementTick+0x16c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3301      	adds	r3, #1
 800614e:	4a0d      	ldr	r2, [pc, #52]	; (8006184 <xTaskIncrementTick+0x16c>)
 8006150:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006152:	697b      	ldr	r3, [r7, #20]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	2000020c 	.word	0x2000020c
 8006160:	200001e8 	.word	0x200001e8
 8006164:	2000019c 	.word	0x2000019c
 8006168:	200001a0 	.word	0x200001a0
 800616c:	200001fc 	.word	0x200001fc
 8006170:	20000204 	.word	0x20000204
 8006174:	200001ec 	.word	0x200001ec
 8006178:	20000110 	.word	0x20000110
 800617c:	2000010c 	.word	0x2000010c
 8006180:	200001f8 	.word	0x200001f8
 8006184:	200001f4 	.word	0x200001f4

08006188 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800618e:	4b27      	ldr	r3, [pc, #156]	; (800622c <vTaskSwitchContext+0xa4>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006196:	4b26      	ldr	r3, [pc, #152]	; (8006230 <vTaskSwitchContext+0xa8>)
 8006198:	2201      	movs	r2, #1
 800619a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800619c:	e03f      	b.n	800621e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800619e:	4b24      	ldr	r3, [pc, #144]	; (8006230 <vTaskSwitchContext+0xa8>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061a4:	4b23      	ldr	r3, [pc, #140]	; (8006234 <vTaskSwitchContext+0xac>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	fab3 f383 	clz	r3, r3
 80061b0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80061b2:	7afb      	ldrb	r3, [r7, #11]
 80061b4:	f1c3 031f 	rsb	r3, r3, #31
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	491f      	ldr	r1, [pc, #124]	; (8006238 <vTaskSwitchContext+0xb0>)
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	440b      	add	r3, r1
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10a      	bne.n	80061e4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	607b      	str	r3, [r7, #4]
    }
 80061e0:	bf00      	nop
 80061e2:	e7fe      	b.n	80061e2 <vTaskSwitchContext+0x5a>
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4a12      	ldr	r2, [pc, #72]	; (8006238 <vTaskSwitchContext+0xb0>)
 80061f0:	4413      	add	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	3308      	adds	r3, #8
 8006206:	429a      	cmp	r2, r3
 8006208:	d104      	bne.n	8006214 <vTaskSwitchContext+0x8c>
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	605a      	str	r2, [r3, #4]
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	4a08      	ldr	r2, [pc, #32]	; (800623c <vTaskSwitchContext+0xb4>)
 800621c:	6013      	str	r3, [r2, #0]
}
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	2000020c 	.word	0x2000020c
 8006230:	200001f8 	.word	0x200001f8
 8006234:	200001ec 	.word	0x200001ec
 8006238:	20000110 	.word	0x20000110
 800623c:	2000010c 	.word	0x2000010c

08006240 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	60fb      	str	r3, [r7, #12]
    }
 8006262:	bf00      	nop
 8006264:	e7fe      	b.n	8006264 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006266:	4b07      	ldr	r3, [pc, #28]	; (8006284 <vTaskPlaceOnEventList+0x44>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3318      	adds	r3, #24
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7fe fe69 	bl	8004f46 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006274:	2101      	movs	r1, #1
 8006276:	6838      	ldr	r0, [r7, #0]
 8006278:	f000 fcc8 	bl	8006c0c <prvAddCurrentTaskToDelayedList>
}
 800627c:	bf00      	nop
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	2000010c 	.word	0x2000010c

08006288 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	617b      	str	r3, [r7, #20]
    }
 80062ac:	bf00      	nop
 80062ae:	e7fe      	b.n	80062ae <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062b0:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <vTaskPlaceOnEventListRestricted+0x54>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3318      	adds	r3, #24
 80062b6:	4619      	mov	r1, r3
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f7fe fe20 	bl	8004efe <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80062c4:	f04f 33ff 	mov.w	r3, #4294967295
 80062c8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	68b8      	ldr	r0, [r7, #8]
 80062ce:	f000 fc9d 	bl	8006c0c <prvAddCurrentTaskToDelayedList>
    }
 80062d2:	bf00      	nop
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	2000010c 	.word	0x2000010c

080062e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	60fb      	str	r3, [r7, #12]
    }
 8006308:	bf00      	nop
 800630a:	e7fe      	b.n	800630a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	3318      	adds	r3, #24
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe fe51 	bl	8004fb8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006316:	4b1d      	ldr	r3, [pc, #116]	; (800638c <xTaskRemoveFromEventList+0xac>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d11c      	bne.n	8006358 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	3304      	adds	r3, #4
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fe48 	bl	8004fb8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632c:	2201      	movs	r2, #1
 800632e:	409a      	lsls	r2, r3
 8006330:	4b17      	ldr	r3, [pc, #92]	; (8006390 <xTaskRemoveFromEventList+0xb0>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4313      	orrs	r3, r2
 8006336:	4a16      	ldr	r2, [pc, #88]	; (8006390 <xTaskRemoveFromEventList+0xb0>)
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4a13      	ldr	r2, [pc, #76]	; (8006394 <xTaskRemoveFromEventList+0xb4>)
 8006348:	441a      	add	r2, r3
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	3304      	adds	r3, #4
 800634e:	4619      	mov	r1, r3
 8006350:	4610      	mov	r0, r2
 8006352:	f7fe fdd4 	bl	8004efe <vListInsertEnd>
 8006356:	e005      	b.n	8006364 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	3318      	adds	r3, #24
 800635c:	4619      	mov	r1, r3
 800635e:	480e      	ldr	r0, [pc, #56]	; (8006398 <xTaskRemoveFromEventList+0xb8>)
 8006360:	f7fe fdcd 	bl	8004efe <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006368:	4b0c      	ldr	r3, [pc, #48]	; (800639c <xTaskRemoveFromEventList+0xbc>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636e:	429a      	cmp	r2, r3
 8006370:	d905      	bls.n	800637e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006372:	2301      	movs	r3, #1
 8006374:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006376:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <xTaskRemoveFromEventList+0xc0>)
 8006378:	2201      	movs	r2, #1
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	e001      	b.n	8006382 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800637e:	2300      	movs	r3, #0
 8006380:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006382:	697b      	ldr	r3, [r7, #20]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	2000020c 	.word	0x2000020c
 8006390:	200001ec 	.word	0x200001ec
 8006394:	20000110 	.word	0x20000110
 8006398:	200001a4 	.word	0x200001a4
 800639c:	2000010c 	.word	0x2000010c
 80063a0:	200001f8 	.word	0x200001f8

080063a4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063ac:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <vTaskInternalSetTimeOutState+0x24>)
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80063b4:	4b05      	ldr	r3, [pc, #20]	; (80063cc <vTaskInternalSetTimeOutState+0x28>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	605a      	str	r2, [r3, #4]
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	200001fc 	.word	0x200001fc
 80063cc:	200001e8 	.word	0x200001e8

080063d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10a      	bne.n	80063f6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	613b      	str	r3, [r7, #16]
    }
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10a      	bne.n	8006412 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80063fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006400:	f383 8811 	msr	BASEPRI, r3
 8006404:	f3bf 8f6f 	isb	sy
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	60fb      	str	r3, [r7, #12]
    }
 800640e:	bf00      	nop
 8006410:	e7fe      	b.n	8006410 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006412:	f001 f921 	bl	8007658 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006416:	4b1f      	ldr	r3, [pc, #124]	; (8006494 <xTaskCheckForTimeOut+0xc4>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642e:	d102      	bne.n	8006436 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006430:	2300      	movs	r3, #0
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	e026      	b.n	8006484 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	4b17      	ldr	r3, [pc, #92]	; (8006498 <xTaskCheckForTimeOut+0xc8>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d00a      	beq.n	8006458 <xTaskCheckForTimeOut+0x88>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	429a      	cmp	r2, r3
 800644a:	d305      	bcc.n	8006458 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800644c:	2301      	movs	r3, #1
 800644e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	e015      	b.n	8006484 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	429a      	cmp	r2, r3
 8006460:	d20b      	bcs.n	800647a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	1ad2      	subs	r2, r2, r3
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7ff ff98 	bl	80063a4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006474:	2300      	movs	r3, #0
 8006476:	61fb      	str	r3, [r7, #28]
 8006478:	e004      	b.n	8006484 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2200      	movs	r2, #0
 800647e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006480:	2301      	movs	r3, #1
 8006482:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006484:	f001 f918 	bl	80076b8 <vPortExitCritical>

    return xReturn;
 8006488:	69fb      	ldr	r3, [r7, #28]
}
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	200001e8 	.word	0x200001e8
 8006498:	200001fc 	.word	0x200001fc

0800649c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80064a0:	4b03      	ldr	r3, [pc, #12]	; (80064b0 <vTaskMissedYield+0x14>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	601a      	str	r2, [r3, #0]
}
 80064a6:	bf00      	nop
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	200001f8 	.word	0x200001f8

080064b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80064bc:	f000 f852 	bl	8006564 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064c0:	4b06      	ldr	r3, [pc, #24]	; (80064dc <prvIdleTask+0x28>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d9f9      	bls.n	80064bc <prvIdleTask+0x8>
                {
                    taskYIELD();
 80064c8:	4b05      	ldr	r3, [pc, #20]	; (80064e0 <prvIdleTask+0x2c>)
 80064ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80064d8:	e7f0      	b.n	80064bc <prvIdleTask+0x8>
 80064da:	bf00      	nop
 80064dc:	20000110 	.word	0x20000110
 80064e0:	e000ed04 	.word	0xe000ed04

080064e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064ea:	2300      	movs	r3, #0
 80064ec:	607b      	str	r3, [r7, #4]
 80064ee:	e00c      	b.n	800650a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4a12      	ldr	r2, [pc, #72]	; (8006544 <prvInitialiseTaskLists+0x60>)
 80064fc:	4413      	add	r3, r2
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe fcd0 	bl	8004ea4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3301      	adds	r3, #1
 8006508:	607b      	str	r3, [r7, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b04      	cmp	r3, #4
 800650e:	d9ef      	bls.n	80064f0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006510:	480d      	ldr	r0, [pc, #52]	; (8006548 <prvInitialiseTaskLists+0x64>)
 8006512:	f7fe fcc7 	bl	8004ea4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006516:	480d      	ldr	r0, [pc, #52]	; (800654c <prvInitialiseTaskLists+0x68>)
 8006518:	f7fe fcc4 	bl	8004ea4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800651c:	480c      	ldr	r0, [pc, #48]	; (8006550 <prvInitialiseTaskLists+0x6c>)
 800651e:	f7fe fcc1 	bl	8004ea4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006522:	480c      	ldr	r0, [pc, #48]	; (8006554 <prvInitialiseTaskLists+0x70>)
 8006524:	f7fe fcbe 	bl	8004ea4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006528:	480b      	ldr	r0, [pc, #44]	; (8006558 <prvInitialiseTaskLists+0x74>)
 800652a:	f7fe fcbb 	bl	8004ea4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800652e:	4b0b      	ldr	r3, [pc, #44]	; (800655c <prvInitialiseTaskLists+0x78>)
 8006530:	4a05      	ldr	r2, [pc, #20]	; (8006548 <prvInitialiseTaskLists+0x64>)
 8006532:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006534:	4b0a      	ldr	r3, [pc, #40]	; (8006560 <prvInitialiseTaskLists+0x7c>)
 8006536:	4a05      	ldr	r2, [pc, #20]	; (800654c <prvInitialiseTaskLists+0x68>)
 8006538:	601a      	str	r2, [r3, #0]
}
 800653a:	bf00      	nop
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20000110 	.word	0x20000110
 8006548:	20000174 	.word	0x20000174
 800654c:	20000188 	.word	0x20000188
 8006550:	200001a4 	.word	0x200001a4
 8006554:	200001b8 	.word	0x200001b8
 8006558:	200001d0 	.word	0x200001d0
 800655c:	2000019c 	.word	0x2000019c
 8006560:	200001a0 	.word	0x200001a0

08006564 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800656a:	e019      	b.n	80065a0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800656c:	f001 f874 	bl	8007658 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006570:	4b10      	ldr	r3, [pc, #64]	; (80065b4 <prvCheckTasksWaitingTermination+0x50>)
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3304      	adds	r3, #4
 800657c:	4618      	mov	r0, r3
 800657e:	f7fe fd1b 	bl	8004fb8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006582:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <prvCheckTasksWaitingTermination+0x54>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3b01      	subs	r3, #1
 8006588:	4a0b      	ldr	r2, [pc, #44]	; (80065b8 <prvCheckTasksWaitingTermination+0x54>)
 800658a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800658c:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <prvCheckTasksWaitingTermination+0x58>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3b01      	subs	r3, #1
 8006592:	4a0a      	ldr	r2, [pc, #40]	; (80065bc <prvCheckTasksWaitingTermination+0x58>)
 8006594:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006596:	f001 f88f 	bl	80076b8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f810 	bl	80065c0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065a0:	4b06      	ldr	r3, [pc, #24]	; (80065bc <prvCheckTasksWaitingTermination+0x58>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e1      	bne.n	800656c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80065a8:	bf00      	nop
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	200001b8 	.word	0x200001b8
 80065b8:	200001e4 	.word	0x200001e4
 80065bc:	200001cc 	.word	0x200001cc

080065c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065cc:	4618      	mov	r0, r3
 80065ce:	f001 fa45 	bl	8007a5c <vPortFree>
                vPortFree( pxTCB );
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fa42 	bl	8007a5c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80065d8:	bf00      	nop
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065e0:	b480      	push	{r7}
 80065e2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065e4:	4b0a      	ldr	r3, [pc, #40]	; (8006610 <prvResetNextTaskUnblockTime+0x30>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80065ee:	4b09      	ldr	r3, [pc, #36]	; (8006614 <prvResetNextTaskUnblockTime+0x34>)
 80065f0:	f04f 32ff 	mov.w	r2, #4294967295
 80065f4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80065f6:	e005      	b.n	8006604 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80065f8:	4b05      	ldr	r3, [pc, #20]	; (8006610 <prvResetNextTaskUnblockTime+0x30>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a04      	ldr	r2, [pc, #16]	; (8006614 <prvResetNextTaskUnblockTime+0x34>)
 8006602:	6013      	str	r3, [r2, #0]
}
 8006604:	bf00      	nop
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	2000019c 	.word	0x2000019c
 8006614:	20000204 	.word	0x20000204

08006618 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800661e:	4b0b      	ldr	r3, [pc, #44]	; (800664c <xTaskGetSchedulerState+0x34>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d102      	bne.n	800662c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006626:	2301      	movs	r3, #1
 8006628:	607b      	str	r3, [r7, #4]
 800662a:	e008      	b.n	800663e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800662c:	4b08      	ldr	r3, [pc, #32]	; (8006650 <xTaskGetSchedulerState+0x38>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d102      	bne.n	800663a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006634:	2302      	movs	r3, #2
 8006636:	607b      	str	r3, [r7, #4]
 8006638:	e001      	b.n	800663e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800663a:	2300      	movs	r3, #0
 800663c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800663e:	687b      	ldr	r3, [r7, #4]
    }
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	200001f0 	.word	0x200001f0
 8006650:	2000020c 	.word	0x2000020c

08006654 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006660:	2300      	movs	r3, #0
 8006662:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d063      	beq.n	8006732 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800666a:	4b34      	ldr	r3, [pc, #208]	; (800673c <xTaskPriorityDisinherit+0xe8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	429a      	cmp	r2, r3
 8006672:	d00a      	beq.n	800668a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	60fb      	str	r3, [r7, #12]
    }
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	60bb      	str	r3, [r7, #8]
    }
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ac:	1e5a      	subs	r2, r3, #1
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d039      	beq.n	8006732 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d135      	bne.n	8006732 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	3304      	adds	r3, #4
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe fc74 	bl	8004fb8 <uxListRemove>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066da:	2201      	movs	r2, #1
 80066dc:	fa02 f303 	lsl.w	r3, r2, r3
 80066e0:	43da      	mvns	r2, r3
 80066e2:	4b17      	ldr	r3, [pc, #92]	; (8006740 <xTaskPriorityDisinherit+0xec>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4013      	ands	r3, r2
 80066e8:	4a15      	ldr	r2, [pc, #84]	; (8006740 <xTaskPriorityDisinherit+0xec>)
 80066ea:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	f1c3 0205 	rsb	r2, r3, #5
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	2201      	movs	r2, #1
 8006706:	409a      	lsls	r2, r3
 8006708:	4b0d      	ldr	r3, [pc, #52]	; (8006740 <xTaskPriorityDisinherit+0xec>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4313      	orrs	r3, r2
 800670e:	4a0c      	ldr	r2, [pc, #48]	; (8006740 <xTaskPriorityDisinherit+0xec>)
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4a09      	ldr	r2, [pc, #36]	; (8006744 <xTaskPriorityDisinherit+0xf0>)
 8006720:	441a      	add	r2, r3
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	3304      	adds	r3, #4
 8006726:	4619      	mov	r1, r3
 8006728:	4610      	mov	r0, r2
 800672a:	f7fe fbe8 	bl	8004efe <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800672e:	2301      	movs	r3, #1
 8006730:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006732:	697b      	ldr	r3, [r7, #20]
    }
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	2000010c 	.word	0x2000010c
 8006740:	200001ec 	.word	0x200001ec
 8006744:	20000110 	.word	0x20000110

08006748 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00a      	beq.n	8006772 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	613b      	str	r3, [r7, #16]
    }
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006772:	f000 ff71 	bl	8007658 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006776:	4b32      	ldr	r3, [pc, #200]	; (8006840 <xTaskGenericNotifyWait+0xf8>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4413      	add	r3, r2
 800677e:	3354      	adds	r3, #84	; 0x54
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d022      	beq.n	80067ce <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006788:	4b2d      	ldr	r3, [pc, #180]	; (8006840 <xTaskGenericNotifyWait+0xf8>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	3214      	adds	r2, #20
 8006790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	43d2      	mvns	r2, r2
 8006798:	4011      	ands	r1, r2
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	3214      	adds	r2, #20
 800679e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80067a2:	4b27      	ldr	r3, [pc, #156]	; (8006840 <xTaskGenericNotifyWait+0xf8>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4413      	add	r3, r2
 80067aa:	3354      	adds	r3, #84	; 0x54
 80067ac:	2201      	movs	r2, #1
 80067ae:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00b      	beq.n	80067ce <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067b6:	2101      	movs	r1, #1
 80067b8:	6a38      	ldr	r0, [r7, #32]
 80067ba:	f000 fa27 	bl	8006c0c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80067be:	4b21      	ldr	r3, [pc, #132]	; (8006844 <xTaskGenericNotifyWait+0xfc>)
 80067c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80067ce:	f000 ff73 	bl	80076b8 <vPortExitCritical>

        taskENTER_CRITICAL();
 80067d2:	f000 ff41 	bl	8007658 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d007      	beq.n	80067ec <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80067dc:	4b18      	ldr	r3, [pc, #96]	; (8006840 <xTaskGenericNotifyWait+0xf8>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	3214      	adds	r2, #20
 80067e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80067ec:	4b14      	ldr	r3, [pc, #80]	; (8006840 <xTaskGenericNotifyWait+0xf8>)
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	3354      	adds	r3, #84	; 0x54
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d002      	beq.n	8006804 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	e00e      	b.n	8006822 <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006804:	4b0e      	ldr	r3, [pc, #56]	; (8006840 <xTaskGenericNotifyWait+0xf8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	3214      	adds	r2, #20
 800680c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	43d2      	mvns	r2, r2
 8006814:	4011      	ands	r1, r2
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	3214      	adds	r2, #20
 800681a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800681e:	2301      	movs	r3, #1
 8006820:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006822:	4b07      	ldr	r3, [pc, #28]	; (8006840 <xTaskGenericNotifyWait+0xf8>)
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4413      	add	r3, r2
 800682a:	3354      	adds	r3, #84	; 0x54
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006830:	f000 ff42 	bl	80076b8 <vPortExitCritical>

        return xReturn;
 8006834:	697b      	ldr	r3, [r7, #20]
    }
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	2000010c 	.word	0x2000010c
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006848:	b580      	push	{r7, lr}
 800684a:	b08c      	sub	sp, #48	; 0x30
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
 8006854:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006856:	2301      	movs	r3, #1
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00a      	beq.n	8006876 <xTaskGenericNotify+0x2e>
        __asm volatile
 8006860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	623b      	str	r3, [r7, #32]
    }
 8006872:	bf00      	nop
 8006874:	e7fe      	b.n	8006874 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <xTaskGenericNotify+0x4a>
        __asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	61fb      	str	r3, [r7, #28]
    }
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8006896:	f000 fedf 	bl	8007658 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	2b00      	cmp	r3, #0
 800689e:	d006      	beq.n	80068ae <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	3214      	adds	r2, #20
 80068a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80068ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	4413      	add	r3, r2
 80068b4:	3354      	adds	r3, #84	; 0x54
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80068bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	4413      	add	r3, r2
 80068c2:	3354      	adds	r3, #84	; 0x54
 80068c4:	2202      	movs	r2, #2
 80068c6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80068c8:	78fb      	ldrb	r3, [r7, #3]
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d83b      	bhi.n	8006946 <xTaskGenericNotify+0xfe>
 80068ce:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <xTaskGenericNotify+0x8c>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	08006965 	.word	0x08006965
 80068d8:	080068e9 	.word	0x080068e9
 80068dc:	08006905 	.word	0x08006905
 80068e0:	0800691d 	.word	0x0800691d
 80068e4:	0800692b 	.word	0x0800692b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	3214      	adds	r2, #20
 80068ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	ea42 0103 	orr.w	r1, r2, r3
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	3214      	adds	r2, #20
 80068fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006902:	e032      	b.n	800696a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	3214      	adds	r2, #20
 800690a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690e:	1c59      	adds	r1, r3, #1
 8006910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	3214      	adds	r2, #20
 8006916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800691a:	e026      	b.n	800696a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	3214      	adds	r2, #20
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006928:	e01f      	b.n	800696a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800692a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800692e:	2b02      	cmp	r3, #2
 8006930:	d006      	beq.n	8006940 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	3214      	adds	r2, #20
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800693e:	e014      	b.n	800696a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8006940:	2300      	movs	r3, #0
 8006942:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8006944:	e011      	b.n	800696a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006946:	4b2b      	ldr	r3, [pc, #172]	; (80069f4 <xTaskGenericNotify+0x1ac>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00c      	beq.n	8006968 <xTaskGenericNotify+0x120>
        __asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	61bb      	str	r3, [r7, #24]
    }
 8006960:	bf00      	nop
 8006962:	e7fe      	b.n	8006962 <xTaskGenericNotify+0x11a>
                    break;
 8006964:	bf00      	nop
 8006966:	e000      	b.n	800696a <xTaskGenericNotify+0x122>

                    break;
 8006968:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800696a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800696e:	2b01      	cmp	r3, #1
 8006970:	d139      	bne.n	80069e6 <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	3304      	adds	r3, #4
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe fb1e 	bl	8004fb8 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006980:	2201      	movs	r2, #1
 8006982:	409a      	lsls	r2, r3
 8006984:	4b1c      	ldr	r3, [pc, #112]	; (80069f8 <xTaskGenericNotify+0x1b0>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4313      	orrs	r3, r2
 800698a:	4a1b      	ldr	r2, [pc, #108]	; (80069f8 <xTaskGenericNotify+0x1b0>)
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4a18      	ldr	r2, [pc, #96]	; (80069fc <xTaskGenericNotify+0x1b4>)
 800699c:	441a      	add	r2, r3
 800699e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a0:	3304      	adds	r3, #4
 80069a2:	4619      	mov	r1, r3
 80069a4:	4610      	mov	r0, r2
 80069a6:	f7fe faaa 	bl	8004efe <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <xTaskGenericNotify+0x180>
        __asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	617b      	str	r3, [r7, #20]
    }
 80069c4:	bf00      	nop
 80069c6:	e7fe      	b.n	80069c6 <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069cc:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <xTaskGenericNotify+0x1b8>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d907      	bls.n	80069e6 <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80069d6:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <xTaskGenericNotify+0x1bc>)
 80069d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80069e6:	f000 fe67 	bl	80076b8 <vPortExitCritical>

        return xReturn;
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80069ec:	4618      	mov	r0, r3
 80069ee:	3730      	adds	r7, #48	; 0x30
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	200001e8 	.word	0x200001e8
 80069f8:	200001ec 	.word	0x200001ec
 80069fc:	20000110 	.word	0x20000110
 8006a00:	2000010c 	.word	0x2000010c
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b090      	sub	sp, #64	; 0x40
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006a16:	2301      	movs	r3, #1
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8006a4e:	bf00      	nop
 8006a50:	e7fe      	b.n	8006a50 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a52:	f000 fee3 	bl	800781c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8006a5a:	f3ef 8211 	mrs	r2, BASEPRI
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	627a      	str	r2, [r7, #36]	; 0x24
 8006a70:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8006a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d006      	beq.n	8006a8a <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	3214      	adds	r2, #20
 8006a82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a88:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4413      	add	r3, r2
 8006a90:	3354      	adds	r3, #84	; 0x54
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006a98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	3354      	adds	r3, #84	; 0x54
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d83b      	bhi.n	8006b22 <xTaskGenericNotifyFromISR+0x11a>
 8006aaa:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <xTaskGenericNotifyFromISR+0xa8>)
 8006aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab0:	08006b41 	.word	0x08006b41
 8006ab4:	08006ac5 	.word	0x08006ac5
 8006ab8:	08006ae1 	.word	0x08006ae1
 8006abc:	08006af9 	.word	0x08006af9
 8006ac0:	08006b07 	.word	0x08006b07
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	3214      	adds	r2, #20
 8006aca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	ea42 0103 	orr.w	r1, r2, r3
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	3214      	adds	r2, #20
 8006ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006ade:	e032      	b.n	8006b46 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	3214      	adds	r2, #20
 8006ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aea:	1c59      	adds	r1, r3, #1
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	3214      	adds	r2, #20
 8006af2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006af6:	e026      	b.n	8006b46 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	3214      	adds	r2, #20
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006b04:	e01f      	b.n	8006b46 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006b06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d006      	beq.n	8006b1c <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	3214      	adds	r2, #20
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006b1a:	e014      	b.n	8006b46 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 8006b20:	e011      	b.n	8006b46 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006b22:	4b33      	ldr	r3, [pc, #204]	; (8006bf0 <xTaskGenericNotifyFromISR+0x1e8>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00c      	beq.n	8006b44 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	61fb      	str	r3, [r7, #28]
    }
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <xTaskGenericNotifyFromISR+0x136>
                    break;
 8006b40:	bf00      	nop
 8006b42:	e000      	b.n	8006b46 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8006b44:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006b46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d145      	bne.n	8006bda <xTaskGenericNotifyFromISR+0x1d2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00a      	beq.n	8006b6c <xTaskGenericNotifyFromISR+0x164>
        __asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	61bb      	str	r3, [r7, #24]
    }
 8006b68:	bf00      	nop
 8006b6a:	e7fe      	b.n	8006b6a <xTaskGenericNotifyFromISR+0x162>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b6c:	4b21      	ldr	r3, [pc, #132]	; (8006bf4 <xTaskGenericNotifyFromISR+0x1ec>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d11c      	bne.n	8006bae <xTaskGenericNotifyFromISR+0x1a6>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b76:	3304      	adds	r3, #4
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fe fa1d 	bl	8004fb8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b82:	2201      	movs	r2, #1
 8006b84:	409a      	lsls	r2, r3
 8006b86:	4b1c      	ldr	r3, [pc, #112]	; (8006bf8 <xTaskGenericNotifyFromISR+0x1f0>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	4a1a      	ldr	r2, [pc, #104]	; (8006bf8 <xTaskGenericNotifyFromISR+0x1f0>)
 8006b8e:	6013      	str	r3, [r2, #0]
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b94:	4613      	mov	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4a17      	ldr	r2, [pc, #92]	; (8006bfc <xTaskGenericNotifyFromISR+0x1f4>)
 8006b9e:	441a      	add	r2, r3
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	f7fe f9a9 	bl	8004efe <vListInsertEnd>
 8006bac:	e005      	b.n	8006bba <xTaskGenericNotifyFromISR+0x1b2>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	3318      	adds	r3, #24
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4812      	ldr	r0, [pc, #72]	; (8006c00 <xTaskGenericNotifyFromISR+0x1f8>)
 8006bb6:	f7fe f9a2 	bl	8004efe <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbe:	4b11      	ldr	r3, [pc, #68]	; (8006c04 <xTaskGenericNotifyFromISR+0x1fc>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d908      	bls.n	8006bda <xTaskGenericNotifyFromISR+0x1d2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <xTaskGenericNotifyFromISR+0x1cc>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <xTaskGenericNotifyFromISR+0x200>)
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bdc:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f383 8811 	msr	BASEPRI, r3
    }
 8006be4:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8006be8:	4618      	mov	r0, r3
 8006bea:	3740      	adds	r7, #64	; 0x40
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	200001e8 	.word	0x200001e8
 8006bf4:	2000020c 	.word	0x2000020c
 8006bf8:	200001ec 	.word	0x200001ec
 8006bfc:	20000110 	.word	0x20000110
 8006c00:	200001a4 	.word	0x200001a4
 8006c04:	2000010c 	.word	0x2000010c
 8006c08:	200001f8 	.word	0x200001f8

08006c0c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006c16:	4b29      	ldr	r3, [pc, #164]	; (8006cbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c1c:	4b28      	ldr	r3, [pc, #160]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3304      	adds	r3, #4
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fe f9c8 	bl	8004fb8 <uxListRemove>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10b      	bne.n	8006c46 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006c2e:	4b24      	ldr	r3, [pc, #144]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	2201      	movs	r2, #1
 8006c36:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3a:	43da      	mvns	r2, r3
 8006c3c:	4b21      	ldr	r3, [pc, #132]	; (8006cc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4013      	ands	r3, r2
 8006c42:	4a20      	ldr	r2, [pc, #128]	; (8006cc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c44:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4c:	d10a      	bne.n	8006c64 <prvAddCurrentTaskToDelayedList+0x58>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d007      	beq.n	8006c64 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c54:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	481a      	ldr	r0, [pc, #104]	; (8006cc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006c5e:	f7fe f94e 	bl	8004efe <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006c62:	e026      	b.n	8006cb2 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4413      	add	r3, r2
 8006c6a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c6c:	4b14      	ldr	r3, [pc, #80]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d209      	bcs.n	8006c90 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c7c:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	4b0f      	ldr	r3, [pc, #60]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3304      	adds	r3, #4
 8006c86:	4619      	mov	r1, r3
 8006c88:	4610      	mov	r0, r2
 8006c8a:	f7fe f95c 	bl	8004f46 <vListInsert>
}
 8006c8e:	e010      	b.n	8006cb2 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c90:	4b0f      	ldr	r3, [pc, #60]	; (8006cd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f7fe f952 	bl	8004f46 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006ca2:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d202      	bcs.n	8006cb2 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006cac:	4a09      	ldr	r2, [pc, #36]	; (8006cd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	6013      	str	r3, [r2, #0]
}
 8006cb2:	bf00      	nop
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	200001e8 	.word	0x200001e8
 8006cc0:	2000010c 	.word	0x2000010c
 8006cc4:	200001ec 	.word	0x200001ec
 8006cc8:	200001d0 	.word	0x200001d0
 8006ccc:	200001a0 	.word	0x200001a0
 8006cd0:	2000019c 	.word	0x2000019c
 8006cd4:	20000204 	.word	0x20000204

08006cd8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006ce2:	f000 fb31 	bl	8007348 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006ce6:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <xTimerCreateTimerTask+0x54>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00b      	beq.n	8006d06 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006cee:	4b10      	ldr	r3, [pc, #64]	; (8006d30 <xTimerCreateTimerTask+0x58>)
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006cfc:	490d      	ldr	r1, [pc, #52]	; (8006d34 <xTimerCreateTimerTask+0x5c>)
 8006cfe:	480e      	ldr	r0, [pc, #56]	; (8006d38 <xTimerCreateTimerTask+0x60>)
 8006d00:	f7fe ff38 	bl	8005b74 <xTaskCreate>
 8006d04:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	603b      	str	r3, [r7, #0]
    }
 8006d1e:	bf00      	nop
 8006d20:	e7fe      	b.n	8006d20 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006d22:	687b      	ldr	r3, [r7, #4]
    }
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	20000240 	.word	0x20000240
 8006d30:	20000244 	.word	0x20000244
 8006d34:	08008934 	.word	0x08008934
 8006d38:	08006f29 	.word	0x08006f29

08006d3c <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af02      	add	r7, sp, #8
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	607a      	str	r2, [r7, #4]
 8006d48:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006d4a:	202c      	movs	r0, #44	; 0x2c
 8006d4c:	f000 fda6 	bl	800789c <pvPortMalloc>
 8006d50:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00d      	beq.n	8006d74 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	68b9      	ldr	r1, [r7, #8]
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 f805 	bl	8006d7e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006d74:	697b      	ldr	r3, [r7, #20]
        }
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b086      	sub	sp, #24
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	607a      	str	r2, [r7, #4]
 8006d8a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	617b      	str	r3, [r7, #20]
    }
 8006da4:	bf00      	nop
 8006da6:	e7fe      	b.n	8006da6 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d01e      	beq.n	8006dec <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006dae:	f000 facb 	bl	8007348 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	6a3a      	ldr	r2, [r7, #32]
 8006dc8:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7fe f888 	bl	8004ee4 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d008      	beq.n	8006dec <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006de0:	f043 0304 	orr.w	r3, r3, #4
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006dec:	bf00      	nop
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08a      	sub	sp, #40	; 0x28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <xTimerGenericCommand+0x2e>
        __asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	623b      	str	r3, [r7, #32]
    }
 8006e1e:	bf00      	nop
 8006e20:	e7fe      	b.n	8006e20 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006e22:	4b1a      	ldr	r3, [pc, #104]	; (8006e8c <xTimerGenericCommand+0x98>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d02a      	beq.n	8006e80 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2b05      	cmp	r3, #5
 8006e3a:	dc18      	bgt.n	8006e6e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006e3c:	f7ff fbec 	bl	8006618 <xTaskGetSchedulerState>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d109      	bne.n	8006e5a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e46:	4b11      	ldr	r3, [pc, #68]	; (8006e8c <xTimerGenericCommand+0x98>)
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	f107 0114 	add.w	r1, r7, #20
 8006e4e:	2300      	movs	r3, #0
 8006e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e52:	f7fe f9c5 	bl	80051e0 <xQueueGenericSend>
 8006e56:	6278      	str	r0, [r7, #36]	; 0x24
 8006e58:	e012      	b.n	8006e80 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e5a:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <xTimerGenericCommand+0x98>)
 8006e5c:	6818      	ldr	r0, [r3, #0]
 8006e5e:	f107 0114 	add.w	r1, r7, #20
 8006e62:	2300      	movs	r3, #0
 8006e64:	2200      	movs	r2, #0
 8006e66:	f7fe f9bb 	bl	80051e0 <xQueueGenericSend>
 8006e6a:	6278      	str	r0, [r7, #36]	; 0x24
 8006e6c:	e008      	b.n	8006e80 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e6e:	4b07      	ldr	r3, [pc, #28]	; (8006e8c <xTimerGenericCommand+0x98>)
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	f107 0114 	add.w	r1, r7, #20
 8006e76:	2300      	movs	r3, #0
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	f7fe faaf 	bl	80053dc <xQueueGenericSendFromISR>
 8006e7e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8006e82:	4618      	mov	r0, r3
 8006e84:	3728      	adds	r7, #40	; 0x28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000240 	.word	0x20000240

08006e90 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e9a:	4b22      	ldr	r3, [pc, #136]	; (8006f24 <prvProcessExpiredTimer+0x94>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe f885 	bl	8004fb8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d022      	beq.n	8006f02 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	699a      	ldr	r2, [r3, #24]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	18d1      	adds	r1, r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	6978      	ldr	r0, [r7, #20]
 8006eca:	f000 f8d1 	bl	8007070 <prvInsertTimerInActiveList>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01f      	beq.n	8006f14 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	2100      	movs	r1, #0
 8006ede:	6978      	ldr	r0, [r7, #20]
 8006ee0:	f7ff ff88 	bl	8006df4 <xTimerGenericCommand>
 8006ee4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d113      	bne.n	8006f14 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	60fb      	str	r3, [r7, #12]
    }
 8006efe:	bf00      	nop
 8006f00:	e7fe      	b.n	8006f00 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f08:	f023 0301 	bic.w	r3, r3, #1
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	6978      	ldr	r0, [r7, #20]
 8006f1a:	4798      	blx	r3
    }
 8006f1c:	bf00      	nop
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20000238 	.word	0x20000238

08006f28 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f30:	f107 0308 	add.w	r3, r7, #8
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 f857 	bl	8006fe8 <prvGetNextExpireTime>
 8006f3a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f803 	bl	8006f4c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006f46:	f000 f8d5 	bl	80070f4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f4a:	e7f1      	b.n	8006f30 <prvTimerTask+0x8>

08006f4c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006f56:	f7fe ffa5 	bl	8005ea4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f5a:	f107 0308 	add.w	r3, r7, #8
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 f866 	bl	8007030 <prvSampleTimeNow>
 8006f64:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d130      	bne.n	8006fce <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <prvProcessTimerOrBlockTask+0x3c>
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d806      	bhi.n	8006f88 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006f7a:	f7fe ffa1 	bl	8005ec0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f7e:	68f9      	ldr	r1, [r7, #12]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f7ff ff85 	bl	8006e90 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006f86:	e024      	b.n	8006fd2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d008      	beq.n	8006fa0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f8e:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <prvProcessTimerOrBlockTask+0x90>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <prvProcessTimerOrBlockTask+0x50>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e000      	b.n	8006f9e <prvProcessTimerOrBlockTask+0x52>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006fa0:	4b0f      	ldr	r3, [pc, #60]	; (8006fe0 <prvProcessTimerOrBlockTask+0x94>)
 8006fa2:	6818      	ldr	r0, [r3, #0]
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	4619      	mov	r1, r3
 8006fae:	f7fe fdad 	bl	8005b0c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006fb2:	f7fe ff85 	bl	8005ec0 <xTaskResumeAll>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10a      	bne.n	8006fd2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006fbc:	4b09      	ldr	r3, [pc, #36]	; (8006fe4 <prvProcessTimerOrBlockTask+0x98>)
 8006fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	f3bf 8f6f 	isb	sy
    }
 8006fcc:	e001      	b.n	8006fd2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006fce:	f7fe ff77 	bl	8005ec0 <xTaskResumeAll>
    }
 8006fd2:	bf00      	nop
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	2000023c 	.word	0x2000023c
 8006fe0:	20000240 	.word	0x20000240
 8006fe4:	e000ed04 	.word	0xe000ed04

08006fe8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ff0:	4b0e      	ldr	r3, [pc, #56]	; (800702c <prvGetNextExpireTime+0x44>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <prvGetNextExpireTime+0x16>
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	e000      	b.n	8007000 <prvGetNextExpireTime+0x18>
 8006ffe:	2200      	movs	r2, #0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d105      	bne.n	8007018 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800700c:	4b07      	ldr	r3, [pc, #28]	; (800702c <prvGetNextExpireTime+0x44>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	e001      	b.n	800701c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800701c:	68fb      	ldr	r3, [r7, #12]
    }
 800701e:	4618      	mov	r0, r3
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000238 	.word	0x20000238

08007030 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007038:	f7fe ffde 	bl	8005ff8 <xTaskGetTickCount>
 800703c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800703e:	4b0b      	ldr	r3, [pc, #44]	; (800706c <prvSampleTimeNow+0x3c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	429a      	cmp	r2, r3
 8007046:	d205      	bcs.n	8007054 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007048:	f000 f91a 	bl	8007280 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	e002      	b.n	800705a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800705a:	4a04      	ldr	r2, [pc, #16]	; (800706c <prvSampleTimeNow+0x3c>)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007060:	68fb      	ldr	r3, [r7, #12]
    }
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000248 	.word	0x20000248

08007070 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
 800707c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	429a      	cmp	r2, r3
 8007094:	d812      	bhi.n	80070bc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	1ad2      	subs	r2, r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d302      	bcc.n	80070aa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80070a4:	2301      	movs	r3, #1
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	e01b      	b.n	80070e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80070aa:	4b10      	ldr	r3, [pc, #64]	; (80070ec <prvInsertTimerInActiveList+0x7c>)
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4619      	mov	r1, r3
 80070b4:	4610      	mov	r0, r2
 80070b6:	f7fd ff46 	bl	8004f46 <vListInsert>
 80070ba:	e012      	b.n	80070e2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d206      	bcs.n	80070d2 <prvInsertTimerInActiveList+0x62>
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d302      	bcc.n	80070d2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	e007      	b.n	80070e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070d2:	4b07      	ldr	r3, [pc, #28]	; (80070f0 <prvInsertTimerInActiveList+0x80>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3304      	adds	r3, #4
 80070da:	4619      	mov	r1, r3
 80070dc:	4610      	mov	r0, r2
 80070de:	f7fd ff32 	bl	8004f46 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80070e2:	697b      	ldr	r3, [r7, #20]
    }
 80070e4:	4618      	mov	r0, r3
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	2000023c 	.word	0x2000023c
 80070f0:	20000238 	.word	0x20000238

080070f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08c      	sub	sp, #48	; 0x30
 80070f8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070fa:	e0ae      	b.n	800725a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f2c0 80aa 	blt.w	8007258 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d004      	beq.n	800711a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	3304      	adds	r3, #4
 8007114:	4618      	mov	r0, r3
 8007116:	f7fd ff4f 	bl	8004fb8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800711a:	1d3b      	adds	r3, r7, #4
 800711c:	4618      	mov	r0, r3
 800711e:	f7ff ff87 	bl	8007030 <prvSampleTimeNow>
 8007122:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b09      	cmp	r3, #9
 8007128:	f200 8097 	bhi.w	800725a <prvProcessReceivedCommands+0x166>
 800712c:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <prvProcessReceivedCommands+0x40>)
 800712e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007132:	bf00      	nop
 8007134:	0800715d 	.word	0x0800715d
 8007138:	0800715d 	.word	0x0800715d
 800713c:	0800715d 	.word	0x0800715d
 8007140:	080071d1 	.word	0x080071d1
 8007144:	080071e5 	.word	0x080071e5
 8007148:	0800722f 	.word	0x0800722f
 800714c:	0800715d 	.word	0x0800715d
 8007150:	0800715d 	.word	0x0800715d
 8007154:	080071d1 	.word	0x080071d1
 8007158:	080071e5 	.word	0x080071e5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007162:	f043 0301 	orr.w	r3, r3, #1
 8007166:	b2da      	uxtb	r2, r3
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	18d1      	adds	r1, r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a3a      	ldr	r2, [r7, #32]
 800717a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800717c:	f7ff ff78 	bl	8007070 <prvInsertTimerInActiveList>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d069      	beq.n	800725a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800718c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d05e      	beq.n	800725a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	441a      	add	r2, r3
 80071a4:	2300      	movs	r3, #0
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	2300      	movs	r3, #0
 80071aa:	2100      	movs	r1, #0
 80071ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071ae:	f7ff fe21 	bl	8006df4 <xTimerGenericCommand>
 80071b2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d14f      	bne.n	800725a <prvProcessReceivedCommands+0x166>
        __asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	61bb      	str	r3, [r7, #24]
    }
 80071cc:	bf00      	nop
 80071ce:	e7fe      	b.n	80071ce <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071d6:	f023 0301 	bic.w	r3, r3, #1
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80071e2:	e03a      	b.n	800725a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ea:	f043 0301 	orr.w	r3, r3, #1
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10a      	bne.n	800721a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	617b      	str	r3, [r7, #20]
    }
 8007216:	bf00      	nop
 8007218:	e7fe      	b.n	8007218 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	699a      	ldr	r2, [r3, #24]
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	18d1      	adds	r1, r2, r3
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	6a3a      	ldr	r2, [r7, #32]
 8007226:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007228:	f7ff ff22 	bl	8007070 <prvInsertTimerInActiveList>
                        break;
 800722c:	e015      	b.n	800725a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d103      	bne.n	8007244 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800723c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800723e:	f000 fc0d 	bl	8007a5c <vPortFree>
 8007242:	e00a      	b.n	800725a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800724a:	f023 0301 	bic.w	r3, r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007256:	e000      	b.n	800725a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007258:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800725a:	4b08      	ldr	r3, [pc, #32]	; (800727c <prvProcessReceivedCommands+0x188>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f107 0108 	add.w	r1, r7, #8
 8007262:	2200      	movs	r2, #0
 8007264:	4618      	mov	r0, r3
 8007266:	f7fe f963 	bl	8005530 <xQueueReceive>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	f47f af45 	bne.w	80070fc <prvProcessReceivedCommands+0x8>
        }
    }
 8007272:	bf00      	nop
 8007274:	bf00      	nop
 8007276:	3728      	adds	r7, #40	; 0x28
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	20000240 	.word	0x20000240

08007280 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007280:	b580      	push	{r7, lr}
 8007282:	b088      	sub	sp, #32
 8007284:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007286:	e048      	b.n	800731a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007288:	4b2d      	ldr	r3, [pc, #180]	; (8007340 <prvSwitchTimerLists+0xc0>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007292:	4b2b      	ldr	r3, [pc, #172]	; (8007340 <prvSwitchTimerLists+0xc0>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3304      	adds	r3, #4
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fd fe89 	bl	8004fb8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072b4:	f003 0304 	and.w	r3, r3, #4
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d02e      	beq.n	800731a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	4413      	add	r3, r2
 80072c4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d90e      	bls.n	80072ec <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072da:	4b19      	ldr	r3, [pc, #100]	; (8007340 <prvSwitchTimerLists+0xc0>)
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3304      	adds	r3, #4
 80072e2:	4619      	mov	r1, r3
 80072e4:	4610      	mov	r0, r2
 80072e6:	f7fd fe2e 	bl	8004f46 <vListInsert>
 80072ea:	e016      	b.n	800731a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072ec:	2300      	movs	r3, #0
 80072ee:	9300      	str	r3, [sp, #0]
 80072f0:	2300      	movs	r3, #0
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	2100      	movs	r1, #0
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f7ff fd7c 	bl	8006df4 <xTimerGenericCommand>
 80072fc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10a      	bne.n	800731a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8007304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007308:	f383 8811 	msr	BASEPRI, r3
 800730c:	f3bf 8f6f 	isb	sy
 8007310:	f3bf 8f4f 	dsb	sy
 8007314:	603b      	str	r3, [r7, #0]
    }
 8007316:	bf00      	nop
 8007318:	e7fe      	b.n	8007318 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800731a:	4b09      	ldr	r3, [pc, #36]	; (8007340 <prvSwitchTimerLists+0xc0>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1b1      	bne.n	8007288 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007324:	4b06      	ldr	r3, [pc, #24]	; (8007340 <prvSwitchTimerLists+0xc0>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800732a:	4b06      	ldr	r3, [pc, #24]	; (8007344 <prvSwitchTimerLists+0xc4>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a04      	ldr	r2, [pc, #16]	; (8007340 <prvSwitchTimerLists+0xc0>)
 8007330:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007332:	4a04      	ldr	r2, [pc, #16]	; (8007344 <prvSwitchTimerLists+0xc4>)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	6013      	str	r3, [r2, #0]
    }
 8007338:	bf00      	nop
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	20000238 	.word	0x20000238
 8007344:	2000023c 	.word	0x2000023c

08007348 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800734c:	f000 f984 	bl	8007658 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007350:	4b12      	ldr	r3, [pc, #72]	; (800739c <prvCheckForValidListAndQueue+0x54>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d11d      	bne.n	8007394 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007358:	4811      	ldr	r0, [pc, #68]	; (80073a0 <prvCheckForValidListAndQueue+0x58>)
 800735a:	f7fd fda3 	bl	8004ea4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800735e:	4811      	ldr	r0, [pc, #68]	; (80073a4 <prvCheckForValidListAndQueue+0x5c>)
 8007360:	f7fd fda0 	bl	8004ea4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007364:	4b10      	ldr	r3, [pc, #64]	; (80073a8 <prvCheckForValidListAndQueue+0x60>)
 8007366:	4a0e      	ldr	r2, [pc, #56]	; (80073a0 <prvCheckForValidListAndQueue+0x58>)
 8007368:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800736a:	4b10      	ldr	r3, [pc, #64]	; (80073ac <prvCheckForValidListAndQueue+0x64>)
 800736c:	4a0d      	ldr	r2, [pc, #52]	; (80073a4 <prvCheckForValidListAndQueue+0x5c>)
 800736e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007370:	2200      	movs	r2, #0
 8007372:	210c      	movs	r1, #12
 8007374:	200a      	movs	r0, #10
 8007376:	f7fd feb1 	bl	80050dc <xQueueGenericCreate>
 800737a:	4603      	mov	r3, r0
 800737c:	4a07      	ldr	r2, [pc, #28]	; (800739c <prvCheckForValidListAndQueue+0x54>)
 800737e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007380:	4b06      	ldr	r3, [pc, #24]	; (800739c <prvCheckForValidListAndQueue+0x54>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d005      	beq.n	8007394 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007388:	4b04      	ldr	r3, [pc, #16]	; (800739c <prvCheckForValidListAndQueue+0x54>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4908      	ldr	r1, [pc, #32]	; (80073b0 <prvCheckForValidListAndQueue+0x68>)
 800738e:	4618      	mov	r0, r3
 8007390:	f7fe fb92 	bl	8005ab8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007394:	f000 f990 	bl	80076b8 <vPortExitCritical>
    }
 8007398:	bf00      	nop
 800739a:	bd80      	pop	{r7, pc}
 800739c:	20000240 	.word	0x20000240
 80073a0:	20000210 	.word	0x20000210
 80073a4:	20000224 	.word	0x20000224
 80073a8:	20000238 	.word	0x20000238
 80073ac:	2000023c 	.word	0x2000023c
 80073b0:	0800893c 	.word	0x0800893c

080073b4 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10a      	bne.n	80073dc <pvTimerGetTimerID+0x28>
        __asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	60fb      	str	r3, [r7, #12]
    }
 80073d8:	bf00      	nop
 80073da:	e7fe      	b.n	80073da <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80073dc:	f000 f93c 	bl	8007658 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80073e6:	f000 f967 	bl	80076b8 <vPortExitCritical>

        return pvReturn;
 80073ea:	693b      	ldr	r3, [r7, #16]
    }
 80073ec:	4618      	mov	r0, r3
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3b04      	subs	r3, #4
 8007404:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800740c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3b04      	subs	r3, #4
 8007412:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	f023 0201 	bic.w	r2, r3, #1
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3b04      	subs	r3, #4
 8007422:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007424:	4a0c      	ldr	r2, [pc, #48]	; (8007458 <pxPortInitialiseStack+0x64>)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	3b14      	subs	r3, #20
 800742e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3b04      	subs	r3, #4
 800743a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f06f 0202 	mvn.w	r2, #2
 8007442:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	3b20      	subs	r3, #32
 8007448:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800744a:	68fb      	ldr	r3, [r7, #12]
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	0800745d 	.word	0x0800745d

0800745c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007466:	4b12      	ldr	r3, [pc, #72]	; (80074b0 <prvTaskExitError+0x54>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746e:	d00a      	beq.n	8007486 <prvTaskExitError+0x2a>
        __asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	60fb      	str	r3, [r7, #12]
    }
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <prvTaskExitError+0x28>
        __asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	60bb      	str	r3, [r7, #8]
    }
 8007498:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800749a:	bf00      	nop
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0fc      	beq.n	800749c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80074a2:	bf00      	nop
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	20000024 	.word	0x20000024
	...

080074c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80074c0:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <pxCurrentTCBConst2>)
 80074c2:	6819      	ldr	r1, [r3, #0]
 80074c4:	6808      	ldr	r0, [r1, #0]
 80074c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ca:	f380 8809 	msr	PSP, r0
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f04f 0000 	mov.w	r0, #0
 80074d6:	f380 8811 	msr	BASEPRI, r0
 80074da:	4770      	bx	lr
 80074dc:	f3af 8000 	nop.w

080074e0 <pxCurrentTCBConst2>:
 80074e0:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop

080074e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80074e8:	4808      	ldr	r0, [pc, #32]	; (800750c <prvPortStartFirstTask+0x24>)
 80074ea:	6800      	ldr	r0, [r0, #0]
 80074ec:	6800      	ldr	r0, [r0, #0]
 80074ee:	f380 8808 	msr	MSP, r0
 80074f2:	f04f 0000 	mov.w	r0, #0
 80074f6:	f380 8814 	msr	CONTROL, r0
 80074fa:	b662      	cpsie	i
 80074fc:	b661      	cpsie	f
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	df00      	svc	0
 8007508:	bf00      	nop
 800750a:	0000      	.short	0x0000
 800750c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop

08007514 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800751a:	4b46      	ldr	r3, [pc, #280]	; (8007634 <xPortStartScheduler+0x120>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a46      	ldr	r2, [pc, #280]	; (8007638 <xPortStartScheduler+0x124>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d10a      	bne.n	800753a <xPortStartScheduler+0x26>
        __asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	613b      	str	r3, [r7, #16]
    }
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800753a:	4b3e      	ldr	r3, [pc, #248]	; (8007634 <xPortStartScheduler+0x120>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a3f      	ldr	r2, [pc, #252]	; (800763c <xPortStartScheduler+0x128>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d10a      	bne.n	800755a <xPortStartScheduler+0x46>
        __asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	60fb      	str	r3, [r7, #12]
    }
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800755a:	4b39      	ldr	r3, [pc, #228]	; (8007640 <xPortStartScheduler+0x12c>)
 800755c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	22ff      	movs	r2, #255	; 0xff
 800756a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800757c:	b2da      	uxtb	r2, r3
 800757e:	4b31      	ldr	r3, [pc, #196]	; (8007644 <xPortStartScheduler+0x130>)
 8007580:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007582:	4b31      	ldr	r3, [pc, #196]	; (8007648 <xPortStartScheduler+0x134>)
 8007584:	2207      	movs	r2, #7
 8007586:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007588:	e009      	b.n	800759e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800758a:	4b2f      	ldr	r3, [pc, #188]	; (8007648 <xPortStartScheduler+0x134>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3b01      	subs	r3, #1
 8007590:	4a2d      	ldr	r2, [pc, #180]	; (8007648 <xPortStartScheduler+0x134>)
 8007592:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	b2db      	uxtb	r3, r3
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	b2db      	uxtb	r3, r3
 800759c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800759e:	78fb      	ldrb	r3, [r7, #3]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a6:	2b80      	cmp	r3, #128	; 0x80
 80075a8:	d0ef      	beq.n	800758a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075aa:	4b27      	ldr	r3, [pc, #156]	; (8007648 <xPortStartScheduler+0x134>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f1c3 0307 	rsb	r3, r3, #7
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d00a      	beq.n	80075cc <xPortStartScheduler+0xb8>
        __asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	60bb      	str	r3, [r7, #8]
    }
 80075c8:	bf00      	nop
 80075ca:	e7fe      	b.n	80075ca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075cc:	4b1e      	ldr	r3, [pc, #120]	; (8007648 <xPortStartScheduler+0x134>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	4a1d      	ldr	r2, [pc, #116]	; (8007648 <xPortStartScheduler+0x134>)
 80075d4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075d6:	4b1c      	ldr	r3, [pc, #112]	; (8007648 <xPortStartScheduler+0x134>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075de:	4a1a      	ldr	r2, [pc, #104]	; (8007648 <xPortStartScheduler+0x134>)
 80075e0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80075ea:	4b18      	ldr	r3, [pc, #96]	; (800764c <xPortStartScheduler+0x138>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a17      	ldr	r2, [pc, #92]	; (800764c <xPortStartScheduler+0x138>)
 80075f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80075f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80075f6:	4b15      	ldr	r3, [pc, #84]	; (800764c <xPortStartScheduler+0x138>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a14      	ldr	r2, [pc, #80]	; (800764c <xPortStartScheduler+0x138>)
 80075fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007600:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007602:	f000 f8db 	bl	80077bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007606:	4b12      	ldr	r3, [pc, #72]	; (8007650 <xPortStartScheduler+0x13c>)
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800760c:	f000 f8fa 	bl	8007804 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007610:	4b10      	ldr	r3, [pc, #64]	; (8007654 <xPortStartScheduler+0x140>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a0f      	ldr	r2, [pc, #60]	; (8007654 <xPortStartScheduler+0x140>)
 8007616:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800761a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800761c:	f7ff ff64 	bl	80074e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007620:	f7fe fdb2 	bl	8006188 <vTaskSwitchContext>
    prvTaskExitError();
 8007624:	f7ff ff1a 	bl	800745c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	e000ed00 	.word	0xe000ed00
 8007638:	410fc271 	.word	0x410fc271
 800763c:	410fc270 	.word	0x410fc270
 8007640:	e000e400 	.word	0xe000e400
 8007644:	2000024c 	.word	0x2000024c
 8007648:	20000250 	.word	0x20000250
 800764c:	e000ed20 	.word	0xe000ed20
 8007650:	20000024 	.word	0x20000024
 8007654:	e000ef34 	.word	0xe000ef34

08007658 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
        __asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	607b      	str	r3, [r7, #4]
    }
 8007670:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007672:	4b0f      	ldr	r3, [pc, #60]	; (80076b0 <vPortEnterCritical+0x58>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3301      	adds	r3, #1
 8007678:	4a0d      	ldr	r2, [pc, #52]	; (80076b0 <vPortEnterCritical+0x58>)
 800767a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800767c:	4b0c      	ldr	r3, [pc, #48]	; (80076b0 <vPortEnterCritical+0x58>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d10f      	bne.n	80076a4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007684:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <vPortEnterCritical+0x5c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <vPortEnterCritical+0x4c>
        __asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	603b      	str	r3, [r7, #0]
    }
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <vPortEnterCritical+0x4a>
    }
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	20000024 	.word	0x20000024
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80076be:	4b12      	ldr	r3, [pc, #72]	; (8007708 <vPortExitCritical+0x50>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10a      	bne.n	80076dc <vPortExitCritical+0x24>
        __asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	607b      	str	r3, [r7, #4]
    }
 80076d8:	bf00      	nop
 80076da:	e7fe      	b.n	80076da <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80076dc:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <vPortExitCritical+0x50>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	4a09      	ldr	r2, [pc, #36]	; (8007708 <vPortExitCritical+0x50>)
 80076e4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80076e6:	4b08      	ldr	r3, [pc, #32]	; (8007708 <vPortExitCritical+0x50>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d105      	bne.n	80076fa <vPortExitCritical+0x42>
 80076ee:	2300      	movs	r3, #0
 80076f0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	f383 8811 	msr	BASEPRI, r3
    }
 80076f8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	20000024 	.word	0x20000024
 800770c:	00000000 	.word	0x00000000

08007710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007710:	f3ef 8009 	mrs	r0, PSP
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	4b15      	ldr	r3, [pc, #84]	; (8007770 <pxCurrentTCBConst>)
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	f01e 0f10 	tst.w	lr, #16
 8007720:	bf08      	it	eq
 8007722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772a:	6010      	str	r0, [r2, #0]
 800772c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007730:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007734:	f380 8811 	msr	BASEPRI, r0
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f7fe fd22 	bl	8006188 <vTaskSwitchContext>
 8007744:	f04f 0000 	mov.w	r0, #0
 8007748:	f380 8811 	msr	BASEPRI, r0
 800774c:	bc09      	pop	{r0, r3}
 800774e:	6819      	ldr	r1, [r3, #0]
 8007750:	6808      	ldr	r0, [r1, #0]
 8007752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007756:	f01e 0f10 	tst.w	lr, #16
 800775a:	bf08      	it	eq
 800775c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007760:	f380 8809 	msr	PSP, r0
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	f3af 8000 	nop.w

08007770 <pxCurrentTCBConst>:
 8007770:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop

08007778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
        __asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	607b      	str	r3, [r7, #4]
    }
 8007790:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007792:	f7fe fc41 	bl	8006018 <xTaskIncrementTick>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d003      	beq.n	80077a4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <SysTick_Handler+0x40>)
 800779e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	2300      	movs	r3, #0
 80077a6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	f383 8811 	msr	BASEPRI, r3
    }
 80077ae:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	e000ed04 	.word	0xe000ed04

080077bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80077bc:	b480      	push	{r7}
 80077be:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077c0:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <vPortSetupTimerInterrupt+0x34>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077c6:	4b0b      	ldr	r3, [pc, #44]	; (80077f4 <vPortSetupTimerInterrupt+0x38>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077cc:	4b0a      	ldr	r3, [pc, #40]	; (80077f8 <vPortSetupTimerInterrupt+0x3c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <vPortSetupTimerInterrupt+0x40>)
 80077d2:	fba2 2303 	umull	r2, r3, r2, r3
 80077d6:	099b      	lsrs	r3, r3, #6
 80077d8:	4a09      	ldr	r2, [pc, #36]	; (8007800 <vPortSetupTimerInterrupt+0x44>)
 80077da:	3b01      	subs	r3, #1
 80077dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077de:	4b04      	ldr	r3, [pc, #16]	; (80077f0 <vPortSetupTimerInterrupt+0x34>)
 80077e0:	2207      	movs	r2, #7
 80077e2:	601a      	str	r2, [r3, #0]
}
 80077e4:	bf00      	nop
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	e000e010 	.word	0xe000e010
 80077f4:	e000e018 	.word	0xe000e018
 80077f8:	20000010 	.word	0x20000010
 80077fc:	10624dd3 	.word	0x10624dd3
 8007800:	e000e014 	.word	0xe000e014

08007804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007814 <vPortEnableVFP+0x10>
 8007808:	6801      	ldr	r1, [r0, #0]
 800780a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800780e:	6001      	str	r1, [r0, #0]
 8007810:	4770      	bx	lr
 8007812:	0000      	.short	0x0000
 8007814:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007818:	bf00      	nop
 800781a:	bf00      	nop

0800781c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007822:	f3ef 8305 	mrs	r3, IPSR
 8007826:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2b0f      	cmp	r3, #15
 800782c:	d914      	bls.n	8007858 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800782e:	4a17      	ldr	r2, [pc, #92]	; (800788c <vPortValidateInterruptPriority+0x70>)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007838:	4b15      	ldr	r3, [pc, #84]	; (8007890 <vPortValidateInterruptPriority+0x74>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	7afa      	ldrb	r2, [r7, #11]
 800783e:	429a      	cmp	r2, r3
 8007840:	d20a      	bcs.n	8007858 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8007842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007846:	f383 8811 	msr	BASEPRI, r3
 800784a:	f3bf 8f6f 	isb	sy
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	607b      	str	r3, [r7, #4]
    }
 8007854:	bf00      	nop
 8007856:	e7fe      	b.n	8007856 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007858:	4b0e      	ldr	r3, [pc, #56]	; (8007894 <vPortValidateInterruptPriority+0x78>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007860:	4b0d      	ldr	r3, [pc, #52]	; (8007898 <vPortValidateInterruptPriority+0x7c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	429a      	cmp	r2, r3
 8007866:	d90a      	bls.n	800787e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8007868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	603b      	str	r3, [r7, #0]
    }
 800787a:	bf00      	nop
 800787c:	e7fe      	b.n	800787c <vPortValidateInterruptPriority+0x60>
    }
 800787e:	bf00      	nop
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	e000e3f0 	.word	0xe000e3f0
 8007890:	2000024c 	.word	0x2000024c
 8007894:	e000ed0c 	.word	0xe000ed0c
 8007898:	20000250 	.word	0x20000250

0800789c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08a      	sub	sp, #40	; 0x28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80078a4:	2300      	movs	r3, #0
 80078a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80078a8:	f7fe fafc 	bl	8005ea4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80078ac:	4b65      	ldr	r3, [pc, #404]	; (8007a44 <pvPortMalloc+0x1a8>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80078b4:	f000 f934 	bl	8007b20 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80078b8:	4b63      	ldr	r3, [pc, #396]	; (8007a48 <pvPortMalloc+0x1ac>)
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4013      	ands	r3, r2
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f040 80a7 	bne.w	8007a14 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d02d      	beq.n	8007928 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80078cc:	2208      	movs	r2, #8
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d227      	bcs.n	8007928 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80078d8:	2208      	movs	r2, #8
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4413      	add	r3, r2
 80078de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d021      	beq.n	800792e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f023 0307 	bic.w	r3, r3, #7
 80078f0:	3308      	adds	r3, #8
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d214      	bcs.n	8007922 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f023 0307 	bic.w	r3, r3, #7
 80078fe:	3308      	adds	r3, #8
 8007900:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f003 0307 	and.w	r3, r3, #7
 8007908:	2b00      	cmp	r3, #0
 800790a:	d010      	beq.n	800792e <pvPortMalloc+0x92>
        __asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	617b      	str	r3, [r7, #20]
    }
 800791e:	bf00      	nop
 8007920:	e7fe      	b.n	8007920 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007926:	e002      	b.n	800792e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	607b      	str	r3, [r7, #4]
 800792c:	e000      	b.n	8007930 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800792e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d06e      	beq.n	8007a14 <pvPortMalloc+0x178>
 8007936:	4b45      	ldr	r3, [pc, #276]	; (8007a4c <pvPortMalloc+0x1b0>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	429a      	cmp	r2, r3
 800793e:	d869      	bhi.n	8007a14 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007940:	4b43      	ldr	r3, [pc, #268]	; (8007a50 <pvPortMalloc+0x1b4>)
 8007942:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007944:	4b42      	ldr	r3, [pc, #264]	; (8007a50 <pvPortMalloc+0x1b4>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800794a:	e004      	b.n	8007956 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	429a      	cmp	r2, r3
 800795e:	d903      	bls.n	8007968 <pvPortMalloc+0xcc>
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d1f1      	bne.n	800794c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007968:	4b36      	ldr	r3, [pc, #216]	; (8007a44 <pvPortMalloc+0x1a8>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796e:	429a      	cmp	r2, r3
 8007970:	d050      	beq.n	8007a14 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007972:	6a3b      	ldr	r3, [r7, #32]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2208      	movs	r2, #8
 8007978:	4413      	add	r3, r2
 800797a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	2308      	movs	r3, #8
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	429a      	cmp	r2, r3
 8007992:	d91f      	bls.n	80079d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4413      	add	r3, r2
 800799a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	f003 0307 	and.w	r3, r3, #7
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00a      	beq.n	80079bc <pvPortMalloc+0x120>
        __asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079aa:	f383 8811 	msr	BASEPRI, r3
 80079ae:	f3bf 8f6f 	isb	sy
 80079b2:	f3bf 8f4f 	dsb	sy
 80079b6:	613b      	str	r3, [r7, #16]
    }
 80079b8:	bf00      	nop
 80079ba:	e7fe      	b.n	80079ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	685a      	ldr	r2, [r3, #4]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	1ad2      	subs	r2, r2, r3
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80079ce:	69b8      	ldr	r0, [r7, #24]
 80079d0:	f000 f908 	bl	8007be4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80079d4:	4b1d      	ldr	r3, [pc, #116]	; (8007a4c <pvPortMalloc+0x1b0>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	4a1b      	ldr	r2, [pc, #108]	; (8007a4c <pvPortMalloc+0x1b0>)
 80079e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80079e2:	4b1a      	ldr	r3, [pc, #104]	; (8007a4c <pvPortMalloc+0x1b0>)
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	4b1b      	ldr	r3, [pc, #108]	; (8007a54 <pvPortMalloc+0x1b8>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d203      	bcs.n	80079f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079ee:	4b17      	ldr	r3, [pc, #92]	; (8007a4c <pvPortMalloc+0x1b0>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a18      	ldr	r2, [pc, #96]	; (8007a54 <pvPortMalloc+0x1b8>)
 80079f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	4b13      	ldr	r3, [pc, #76]	; (8007a48 <pvPortMalloc+0x1ac>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	431a      	orrs	r2, r3
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	2200      	movs	r2, #0
 8007a08:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007a0a:	4b13      	ldr	r3, [pc, #76]	; (8007a58 <pvPortMalloc+0x1bc>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	4a11      	ldr	r2, [pc, #68]	; (8007a58 <pvPortMalloc+0x1bc>)
 8007a12:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007a14:	f7fe fa54 	bl	8005ec0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00a      	beq.n	8007a38 <pvPortMalloc+0x19c>
        __asm volatile
 8007a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a26:	f383 8811 	msr	BASEPRI, r3
 8007a2a:	f3bf 8f6f 	isb	sy
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	60fb      	str	r3, [r7, #12]
    }
 8007a34:	bf00      	nop
 8007a36:	e7fe      	b.n	8007a36 <pvPortMalloc+0x19a>
    return pvReturn;
 8007a38:	69fb      	ldr	r3, [r7, #28]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3728      	adds	r7, #40	; 0x28
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20012e5c 	.word	0x20012e5c
 8007a48:	20012e70 	.word	0x20012e70
 8007a4c:	20012e60 	.word	0x20012e60
 8007a50:	20012e54 	.word	0x20012e54
 8007a54:	20012e64 	.word	0x20012e64
 8007a58:	20012e68 	.word	0x20012e68

08007a5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d04d      	beq.n	8007b0a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007a6e:	2308      	movs	r3, #8
 8007a70:	425b      	negs	r3, r3
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	4413      	add	r3, r2
 8007a76:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	4b24      	ldr	r3, [pc, #144]	; (8007b14 <vPortFree+0xb8>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4013      	ands	r3, r2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10a      	bne.n	8007aa0 <vPortFree+0x44>
        __asm volatile
 8007a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	60fb      	str	r3, [r7, #12]
    }
 8007a9c:	bf00      	nop
 8007a9e:	e7fe      	b.n	8007a9e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00a      	beq.n	8007abe <vPortFree+0x62>
        __asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	60bb      	str	r3, [r7, #8]
    }
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	685a      	ldr	r2, [r3, #4]
 8007ac2:	4b14      	ldr	r3, [pc, #80]	; (8007b14 <vPortFree+0xb8>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d01e      	beq.n	8007b0a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d11a      	bne.n	8007b0a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	4b0e      	ldr	r3, [pc, #56]	; (8007b14 <vPortFree+0xb8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	43db      	mvns	r3, r3
 8007ade:	401a      	ands	r2, r3
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007ae4:	f7fe f9de 	bl	8005ea4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <vPortFree+0xbc>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4413      	add	r3, r2
 8007af2:	4a09      	ldr	r2, [pc, #36]	; (8007b18 <vPortFree+0xbc>)
 8007af4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007af6:	6938      	ldr	r0, [r7, #16]
 8007af8:	f000 f874 	bl	8007be4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007afc:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <vPortFree+0xc0>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3301      	adds	r3, #1
 8007b02:	4a06      	ldr	r2, [pc, #24]	; (8007b1c <vPortFree+0xc0>)
 8007b04:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007b06:	f7fe f9db 	bl	8005ec0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007b0a:	bf00      	nop
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20012e70 	.word	0x20012e70
 8007b18:	20012e60 	.word	0x20012e60
 8007b1c:	20012e6c 	.word	0x20012e6c

08007b20 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007b26:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8007b2a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007b2c:	4b27      	ldr	r3, [pc, #156]	; (8007bcc <prvHeapInit+0xac>)
 8007b2e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00c      	beq.n	8007b54 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3307      	adds	r3, #7
 8007b3e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0307 	bic.w	r3, r3, #7
 8007b46:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	1ad3      	subs	r3, r2, r3
 8007b4e:	4a1f      	ldr	r2, [pc, #124]	; (8007bcc <prvHeapInit+0xac>)
 8007b50:	4413      	add	r3, r2
 8007b52:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b58:	4a1d      	ldr	r2, [pc, #116]	; (8007bd0 <prvHeapInit+0xb0>)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007b5e:	4b1c      	ldr	r3, [pc, #112]	; (8007bd0 <prvHeapInit+0xb0>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	4413      	add	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007b6c:	2208      	movs	r2, #8
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	1a9b      	subs	r3, r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 0307 	bic.w	r3, r3, #7
 8007b7a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4a15      	ldr	r2, [pc, #84]	; (8007bd4 <prvHeapInit+0xb4>)
 8007b80:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007b82:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <prvHeapInit+0xb4>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2200      	movs	r2, #0
 8007b88:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007b8a:	4b12      	ldr	r3, [pc, #72]	; (8007bd4 <prvHeapInit+0xb4>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	1ad2      	subs	r2, r2, r3
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ba0:	4b0c      	ldr	r3, [pc, #48]	; (8007bd4 <prvHeapInit+0xb4>)
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	4a0a      	ldr	r2, [pc, #40]	; (8007bd8 <prvHeapInit+0xb8>)
 8007bae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	4a09      	ldr	r2, [pc, #36]	; (8007bdc <prvHeapInit+0xbc>)
 8007bb6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007bb8:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <prvHeapInit+0xc0>)
 8007bba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007bbe:	601a      	str	r2, [r3, #0]
}
 8007bc0:	bf00      	nop
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	20000254 	.word	0x20000254
 8007bd0:	20012e54 	.word	0x20012e54
 8007bd4:	20012e5c 	.word	0x20012e5c
 8007bd8:	20012e64 	.word	0x20012e64
 8007bdc:	20012e60 	.word	0x20012e60
 8007be0:	20012e70 	.word	0x20012e70

08007be4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bec:	4b28      	ldr	r3, [pc, #160]	; (8007c90 <prvInsertBlockIntoFreeList+0xac>)
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	e002      	b.n	8007bf8 <prvInsertBlockIntoFreeList+0x14>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	60fb      	str	r3, [r7, #12]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d8f7      	bhi.n	8007bf2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	68ba      	ldr	r2, [r7, #8]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d108      	bne.n	8007c26 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	441a      	add	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	441a      	add	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d118      	bne.n	8007c6c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	4b15      	ldr	r3, [pc, #84]	; (8007c94 <prvInsertBlockIntoFreeList+0xb0>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d00d      	beq.n	8007c62 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	441a      	add	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	e008      	b.n	8007c74 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c62:	4b0c      	ldr	r3, [pc, #48]	; (8007c94 <prvInsertBlockIntoFreeList+0xb0>)
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	e003      	b.n	8007c74 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d002      	beq.n	8007c82 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007c82:	bf00      	nop
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	20012e54 	.word	0x20012e54
 8007c94:	20012e5c 	.word	0x20012e5c

08007c98 <__errno>:
 8007c98:	4b01      	ldr	r3, [pc, #4]	; (8007ca0 <__errno+0x8>)
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	20000028 	.word	0x20000028

08007ca4 <__libc_init_array>:
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	4d0d      	ldr	r5, [pc, #52]	; (8007cdc <__libc_init_array+0x38>)
 8007ca8:	4c0d      	ldr	r4, [pc, #52]	; (8007ce0 <__libc_init_array+0x3c>)
 8007caa:	1b64      	subs	r4, r4, r5
 8007cac:	10a4      	asrs	r4, r4, #2
 8007cae:	2600      	movs	r6, #0
 8007cb0:	42a6      	cmp	r6, r4
 8007cb2:	d109      	bne.n	8007cc8 <__libc_init_array+0x24>
 8007cb4:	4d0b      	ldr	r5, [pc, #44]	; (8007ce4 <__libc_init_array+0x40>)
 8007cb6:	4c0c      	ldr	r4, [pc, #48]	; (8007ce8 <__libc_init_array+0x44>)
 8007cb8:	f000 fc4e 	bl	8008558 <_init>
 8007cbc:	1b64      	subs	r4, r4, r5
 8007cbe:	10a4      	asrs	r4, r4, #2
 8007cc0:	2600      	movs	r6, #0
 8007cc2:	42a6      	cmp	r6, r4
 8007cc4:	d105      	bne.n	8007cd2 <__libc_init_array+0x2e>
 8007cc6:	bd70      	pop	{r4, r5, r6, pc}
 8007cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ccc:	4798      	blx	r3
 8007cce:	3601      	adds	r6, #1
 8007cd0:	e7ee      	b.n	8007cb0 <__libc_init_array+0xc>
 8007cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd6:	4798      	blx	r3
 8007cd8:	3601      	adds	r6, #1
 8007cda:	e7f2      	b.n	8007cc2 <__libc_init_array+0x1e>
 8007cdc:	080089f8 	.word	0x080089f8
 8007ce0:	080089f8 	.word	0x080089f8
 8007ce4:	080089f8 	.word	0x080089f8
 8007ce8:	080089fc 	.word	0x080089fc

08007cec <memcpy>:
 8007cec:	440a      	add	r2, r1
 8007cee:	4291      	cmp	r1, r2
 8007cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cf4:	d100      	bne.n	8007cf8 <memcpy+0xc>
 8007cf6:	4770      	bx	lr
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d02:	4291      	cmp	r1, r2
 8007d04:	d1f9      	bne.n	8007cfa <memcpy+0xe>
 8007d06:	bd10      	pop	{r4, pc}

08007d08 <memset>:
 8007d08:	4402      	add	r2, r0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d100      	bne.n	8007d12 <memset+0xa>
 8007d10:	4770      	bx	lr
 8007d12:	f803 1b01 	strb.w	r1, [r3], #1
 8007d16:	e7f9      	b.n	8007d0c <memset+0x4>

08007d18 <siprintf>:
 8007d18:	b40e      	push	{r1, r2, r3}
 8007d1a:	b500      	push	{lr}
 8007d1c:	b09c      	sub	sp, #112	; 0x70
 8007d1e:	ab1d      	add	r3, sp, #116	; 0x74
 8007d20:	9002      	str	r0, [sp, #8]
 8007d22:	9006      	str	r0, [sp, #24]
 8007d24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d28:	4809      	ldr	r0, [pc, #36]	; (8007d50 <siprintf+0x38>)
 8007d2a:	9107      	str	r1, [sp, #28]
 8007d2c:	9104      	str	r1, [sp, #16]
 8007d2e:	4909      	ldr	r1, [pc, #36]	; (8007d54 <siprintf+0x3c>)
 8007d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d34:	9105      	str	r1, [sp, #20]
 8007d36:	6800      	ldr	r0, [r0, #0]
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	a902      	add	r1, sp, #8
 8007d3c:	f000 f8c4 	bl	8007ec8 <_svfiprintf_r>
 8007d40:	9b02      	ldr	r3, [sp, #8]
 8007d42:	2200      	movs	r2, #0
 8007d44:	701a      	strb	r2, [r3, #0]
 8007d46:	b01c      	add	sp, #112	; 0x70
 8007d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d4c:	b003      	add	sp, #12
 8007d4e:	4770      	bx	lr
 8007d50:	20000028 	.word	0x20000028
 8007d54:	ffff0208 	.word	0xffff0208

08007d58 <__retarget_lock_acquire_recursive>:
 8007d58:	4770      	bx	lr

08007d5a <__retarget_lock_release_recursive>:
 8007d5a:	4770      	bx	lr

08007d5c <_malloc_r>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	1ccd      	adds	r5, r1, #3
 8007d60:	f025 0503 	bic.w	r5, r5, #3
 8007d64:	3508      	adds	r5, #8
 8007d66:	2d0c      	cmp	r5, #12
 8007d68:	bf38      	it	cc
 8007d6a:	250c      	movcc	r5, #12
 8007d6c:	2d00      	cmp	r5, #0
 8007d6e:	4606      	mov	r6, r0
 8007d70:	db01      	blt.n	8007d76 <_malloc_r+0x1a>
 8007d72:	42a9      	cmp	r1, r5
 8007d74:	d903      	bls.n	8007d7e <_malloc_r+0x22>
 8007d76:	230c      	movs	r3, #12
 8007d78:	6033      	str	r3, [r6, #0]
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d7e:	f000 fb61 	bl	8008444 <__malloc_lock>
 8007d82:	4921      	ldr	r1, [pc, #132]	; (8007e08 <_malloc_r+0xac>)
 8007d84:	680a      	ldr	r2, [r1, #0]
 8007d86:	4614      	mov	r4, r2
 8007d88:	b99c      	cbnz	r4, 8007db2 <_malloc_r+0x56>
 8007d8a:	4f20      	ldr	r7, [pc, #128]	; (8007e0c <_malloc_r+0xb0>)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	b923      	cbnz	r3, 8007d9a <_malloc_r+0x3e>
 8007d90:	4621      	mov	r1, r4
 8007d92:	4630      	mov	r0, r6
 8007d94:	f000 fb2c 	bl	80083f0 <_sbrk_r>
 8007d98:	6038      	str	r0, [r7, #0]
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f000 fb27 	bl	80083f0 <_sbrk_r>
 8007da2:	1c43      	adds	r3, r0, #1
 8007da4:	d123      	bne.n	8007dee <_malloc_r+0x92>
 8007da6:	230c      	movs	r3, #12
 8007da8:	6033      	str	r3, [r6, #0]
 8007daa:	4630      	mov	r0, r6
 8007dac:	f000 fb50 	bl	8008450 <__malloc_unlock>
 8007db0:	e7e3      	b.n	8007d7a <_malloc_r+0x1e>
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	1b5b      	subs	r3, r3, r5
 8007db6:	d417      	bmi.n	8007de8 <_malloc_r+0x8c>
 8007db8:	2b0b      	cmp	r3, #11
 8007dba:	d903      	bls.n	8007dc4 <_malloc_r+0x68>
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	441c      	add	r4, r3
 8007dc0:	6025      	str	r5, [r4, #0]
 8007dc2:	e004      	b.n	8007dce <_malloc_r+0x72>
 8007dc4:	6863      	ldr	r3, [r4, #4]
 8007dc6:	42a2      	cmp	r2, r4
 8007dc8:	bf0c      	ite	eq
 8007dca:	600b      	streq	r3, [r1, #0]
 8007dcc:	6053      	strne	r3, [r2, #4]
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f000 fb3e 	bl	8008450 <__malloc_unlock>
 8007dd4:	f104 000b 	add.w	r0, r4, #11
 8007dd8:	1d23      	adds	r3, r4, #4
 8007dda:	f020 0007 	bic.w	r0, r0, #7
 8007dde:	1ac2      	subs	r2, r0, r3
 8007de0:	d0cc      	beq.n	8007d7c <_malloc_r+0x20>
 8007de2:	1a1b      	subs	r3, r3, r0
 8007de4:	50a3      	str	r3, [r4, r2]
 8007de6:	e7c9      	b.n	8007d7c <_malloc_r+0x20>
 8007de8:	4622      	mov	r2, r4
 8007dea:	6864      	ldr	r4, [r4, #4]
 8007dec:	e7cc      	b.n	8007d88 <_malloc_r+0x2c>
 8007dee:	1cc4      	adds	r4, r0, #3
 8007df0:	f024 0403 	bic.w	r4, r4, #3
 8007df4:	42a0      	cmp	r0, r4
 8007df6:	d0e3      	beq.n	8007dc0 <_malloc_r+0x64>
 8007df8:	1a21      	subs	r1, r4, r0
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f000 faf8 	bl	80083f0 <_sbrk_r>
 8007e00:	3001      	adds	r0, #1
 8007e02:	d1dd      	bne.n	8007dc0 <_malloc_r+0x64>
 8007e04:	e7cf      	b.n	8007da6 <_malloc_r+0x4a>
 8007e06:	bf00      	nop
 8007e08:	20012e74 	.word	0x20012e74
 8007e0c:	20012e78 	.word	0x20012e78

08007e10 <__ssputs_r>:
 8007e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e14:	688e      	ldr	r6, [r1, #8]
 8007e16:	429e      	cmp	r6, r3
 8007e18:	4682      	mov	sl, r0
 8007e1a:	460c      	mov	r4, r1
 8007e1c:	4690      	mov	r8, r2
 8007e1e:	461f      	mov	r7, r3
 8007e20:	d838      	bhi.n	8007e94 <__ssputs_r+0x84>
 8007e22:	898a      	ldrh	r2, [r1, #12]
 8007e24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e28:	d032      	beq.n	8007e90 <__ssputs_r+0x80>
 8007e2a:	6825      	ldr	r5, [r4, #0]
 8007e2c:	6909      	ldr	r1, [r1, #16]
 8007e2e:	eba5 0901 	sub.w	r9, r5, r1
 8007e32:	6965      	ldr	r5, [r4, #20]
 8007e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	444b      	add	r3, r9
 8007e40:	106d      	asrs	r5, r5, #1
 8007e42:	429d      	cmp	r5, r3
 8007e44:	bf38      	it	cc
 8007e46:	461d      	movcc	r5, r3
 8007e48:	0553      	lsls	r3, r2, #21
 8007e4a:	d531      	bpl.n	8007eb0 <__ssputs_r+0xa0>
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	f7ff ff85 	bl	8007d5c <_malloc_r>
 8007e52:	4606      	mov	r6, r0
 8007e54:	b950      	cbnz	r0, 8007e6c <__ssputs_r+0x5c>
 8007e56:	230c      	movs	r3, #12
 8007e58:	f8ca 3000 	str.w	r3, [sl]
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e62:	81a3      	strh	r3, [r4, #12]
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e6c:	6921      	ldr	r1, [r4, #16]
 8007e6e:	464a      	mov	r2, r9
 8007e70:	f7ff ff3c 	bl	8007cec <memcpy>
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7e:	81a3      	strh	r3, [r4, #12]
 8007e80:	6126      	str	r6, [r4, #16]
 8007e82:	6165      	str	r5, [r4, #20]
 8007e84:	444e      	add	r6, r9
 8007e86:	eba5 0509 	sub.w	r5, r5, r9
 8007e8a:	6026      	str	r6, [r4, #0]
 8007e8c:	60a5      	str	r5, [r4, #8]
 8007e8e:	463e      	mov	r6, r7
 8007e90:	42be      	cmp	r6, r7
 8007e92:	d900      	bls.n	8007e96 <__ssputs_r+0x86>
 8007e94:	463e      	mov	r6, r7
 8007e96:	4632      	mov	r2, r6
 8007e98:	6820      	ldr	r0, [r4, #0]
 8007e9a:	4641      	mov	r1, r8
 8007e9c:	f000 fab8 	bl	8008410 <memmove>
 8007ea0:	68a3      	ldr	r3, [r4, #8]
 8007ea2:	6822      	ldr	r2, [r4, #0]
 8007ea4:	1b9b      	subs	r3, r3, r6
 8007ea6:	4432      	add	r2, r6
 8007ea8:	60a3      	str	r3, [r4, #8]
 8007eaa:	6022      	str	r2, [r4, #0]
 8007eac:	2000      	movs	r0, #0
 8007eae:	e7db      	b.n	8007e68 <__ssputs_r+0x58>
 8007eb0:	462a      	mov	r2, r5
 8007eb2:	f000 fb23 	bl	80084fc <_realloc_r>
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d1e1      	bne.n	8007e80 <__ssputs_r+0x70>
 8007ebc:	6921      	ldr	r1, [r4, #16]
 8007ebe:	4650      	mov	r0, sl
 8007ec0:	f000 facc 	bl	800845c <_free_r>
 8007ec4:	e7c7      	b.n	8007e56 <__ssputs_r+0x46>
	...

08007ec8 <_svfiprintf_r>:
 8007ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ecc:	4698      	mov	r8, r3
 8007ece:	898b      	ldrh	r3, [r1, #12]
 8007ed0:	061b      	lsls	r3, r3, #24
 8007ed2:	b09d      	sub	sp, #116	; 0x74
 8007ed4:	4607      	mov	r7, r0
 8007ed6:	460d      	mov	r5, r1
 8007ed8:	4614      	mov	r4, r2
 8007eda:	d50e      	bpl.n	8007efa <_svfiprintf_r+0x32>
 8007edc:	690b      	ldr	r3, [r1, #16]
 8007ede:	b963      	cbnz	r3, 8007efa <_svfiprintf_r+0x32>
 8007ee0:	2140      	movs	r1, #64	; 0x40
 8007ee2:	f7ff ff3b 	bl	8007d5c <_malloc_r>
 8007ee6:	6028      	str	r0, [r5, #0]
 8007ee8:	6128      	str	r0, [r5, #16]
 8007eea:	b920      	cbnz	r0, 8007ef6 <_svfiprintf_r+0x2e>
 8007eec:	230c      	movs	r3, #12
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	e0d1      	b.n	800809a <_svfiprintf_r+0x1d2>
 8007ef6:	2340      	movs	r3, #64	; 0x40
 8007ef8:	616b      	str	r3, [r5, #20]
 8007efa:	2300      	movs	r3, #0
 8007efc:	9309      	str	r3, [sp, #36]	; 0x24
 8007efe:	2320      	movs	r3, #32
 8007f00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f08:	2330      	movs	r3, #48	; 0x30
 8007f0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080b4 <_svfiprintf_r+0x1ec>
 8007f0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f12:	f04f 0901 	mov.w	r9, #1
 8007f16:	4623      	mov	r3, r4
 8007f18:	469a      	mov	sl, r3
 8007f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f1e:	b10a      	cbz	r2, 8007f24 <_svfiprintf_r+0x5c>
 8007f20:	2a25      	cmp	r2, #37	; 0x25
 8007f22:	d1f9      	bne.n	8007f18 <_svfiprintf_r+0x50>
 8007f24:	ebba 0b04 	subs.w	fp, sl, r4
 8007f28:	d00b      	beq.n	8007f42 <_svfiprintf_r+0x7a>
 8007f2a:	465b      	mov	r3, fp
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	4629      	mov	r1, r5
 8007f30:	4638      	mov	r0, r7
 8007f32:	f7ff ff6d 	bl	8007e10 <__ssputs_r>
 8007f36:	3001      	adds	r0, #1
 8007f38:	f000 80aa 	beq.w	8008090 <_svfiprintf_r+0x1c8>
 8007f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f3e:	445a      	add	r2, fp
 8007f40:	9209      	str	r2, [sp, #36]	; 0x24
 8007f42:	f89a 3000 	ldrb.w	r3, [sl]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 80a2 	beq.w	8008090 <_svfiprintf_r+0x1c8>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f56:	f10a 0a01 	add.w	sl, sl, #1
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	9307      	str	r3, [sp, #28]
 8007f5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f62:	931a      	str	r3, [sp, #104]	; 0x68
 8007f64:	4654      	mov	r4, sl
 8007f66:	2205      	movs	r2, #5
 8007f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f6c:	4851      	ldr	r0, [pc, #324]	; (80080b4 <_svfiprintf_r+0x1ec>)
 8007f6e:	f7f8 f967 	bl	8000240 <memchr>
 8007f72:	9a04      	ldr	r2, [sp, #16]
 8007f74:	b9d8      	cbnz	r0, 8007fae <_svfiprintf_r+0xe6>
 8007f76:	06d0      	lsls	r0, r2, #27
 8007f78:	bf44      	itt	mi
 8007f7a:	2320      	movmi	r3, #32
 8007f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f80:	0711      	lsls	r1, r2, #28
 8007f82:	bf44      	itt	mi
 8007f84:	232b      	movmi	r3, #43	; 0x2b
 8007f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f90:	d015      	beq.n	8007fbe <_svfiprintf_r+0xf6>
 8007f92:	9a07      	ldr	r2, [sp, #28]
 8007f94:	4654      	mov	r4, sl
 8007f96:	2000      	movs	r0, #0
 8007f98:	f04f 0c0a 	mov.w	ip, #10
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fa2:	3b30      	subs	r3, #48	; 0x30
 8007fa4:	2b09      	cmp	r3, #9
 8007fa6:	d94e      	bls.n	8008046 <_svfiprintf_r+0x17e>
 8007fa8:	b1b0      	cbz	r0, 8007fd8 <_svfiprintf_r+0x110>
 8007faa:	9207      	str	r2, [sp, #28]
 8007fac:	e014      	b.n	8007fd8 <_svfiprintf_r+0x110>
 8007fae:	eba0 0308 	sub.w	r3, r0, r8
 8007fb2:	fa09 f303 	lsl.w	r3, r9, r3
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	9304      	str	r3, [sp, #16]
 8007fba:	46a2      	mov	sl, r4
 8007fbc:	e7d2      	b.n	8007f64 <_svfiprintf_r+0x9c>
 8007fbe:	9b03      	ldr	r3, [sp, #12]
 8007fc0:	1d19      	adds	r1, r3, #4
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	9103      	str	r1, [sp, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	bfbb      	ittet	lt
 8007fca:	425b      	neglt	r3, r3
 8007fcc:	f042 0202 	orrlt.w	r2, r2, #2
 8007fd0:	9307      	strge	r3, [sp, #28]
 8007fd2:	9307      	strlt	r3, [sp, #28]
 8007fd4:	bfb8      	it	lt
 8007fd6:	9204      	strlt	r2, [sp, #16]
 8007fd8:	7823      	ldrb	r3, [r4, #0]
 8007fda:	2b2e      	cmp	r3, #46	; 0x2e
 8007fdc:	d10c      	bne.n	8007ff8 <_svfiprintf_r+0x130>
 8007fde:	7863      	ldrb	r3, [r4, #1]
 8007fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fe2:	d135      	bne.n	8008050 <_svfiprintf_r+0x188>
 8007fe4:	9b03      	ldr	r3, [sp, #12]
 8007fe6:	1d1a      	adds	r2, r3, #4
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	9203      	str	r2, [sp, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bfb8      	it	lt
 8007ff0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ff4:	3402      	adds	r4, #2
 8007ff6:	9305      	str	r3, [sp, #20]
 8007ff8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080c4 <_svfiprintf_r+0x1fc>
 8007ffc:	7821      	ldrb	r1, [r4, #0]
 8007ffe:	2203      	movs	r2, #3
 8008000:	4650      	mov	r0, sl
 8008002:	f7f8 f91d 	bl	8000240 <memchr>
 8008006:	b140      	cbz	r0, 800801a <_svfiprintf_r+0x152>
 8008008:	2340      	movs	r3, #64	; 0x40
 800800a:	eba0 000a 	sub.w	r0, r0, sl
 800800e:	fa03 f000 	lsl.w	r0, r3, r0
 8008012:	9b04      	ldr	r3, [sp, #16]
 8008014:	4303      	orrs	r3, r0
 8008016:	3401      	adds	r4, #1
 8008018:	9304      	str	r3, [sp, #16]
 800801a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800801e:	4826      	ldr	r0, [pc, #152]	; (80080b8 <_svfiprintf_r+0x1f0>)
 8008020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008024:	2206      	movs	r2, #6
 8008026:	f7f8 f90b 	bl	8000240 <memchr>
 800802a:	2800      	cmp	r0, #0
 800802c:	d038      	beq.n	80080a0 <_svfiprintf_r+0x1d8>
 800802e:	4b23      	ldr	r3, [pc, #140]	; (80080bc <_svfiprintf_r+0x1f4>)
 8008030:	bb1b      	cbnz	r3, 800807a <_svfiprintf_r+0x1b2>
 8008032:	9b03      	ldr	r3, [sp, #12]
 8008034:	3307      	adds	r3, #7
 8008036:	f023 0307 	bic.w	r3, r3, #7
 800803a:	3308      	adds	r3, #8
 800803c:	9303      	str	r3, [sp, #12]
 800803e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008040:	4433      	add	r3, r6
 8008042:	9309      	str	r3, [sp, #36]	; 0x24
 8008044:	e767      	b.n	8007f16 <_svfiprintf_r+0x4e>
 8008046:	fb0c 3202 	mla	r2, ip, r2, r3
 800804a:	460c      	mov	r4, r1
 800804c:	2001      	movs	r0, #1
 800804e:	e7a5      	b.n	8007f9c <_svfiprintf_r+0xd4>
 8008050:	2300      	movs	r3, #0
 8008052:	3401      	adds	r4, #1
 8008054:	9305      	str	r3, [sp, #20]
 8008056:	4619      	mov	r1, r3
 8008058:	f04f 0c0a 	mov.w	ip, #10
 800805c:	4620      	mov	r0, r4
 800805e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008062:	3a30      	subs	r2, #48	; 0x30
 8008064:	2a09      	cmp	r2, #9
 8008066:	d903      	bls.n	8008070 <_svfiprintf_r+0x1a8>
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0c5      	beq.n	8007ff8 <_svfiprintf_r+0x130>
 800806c:	9105      	str	r1, [sp, #20]
 800806e:	e7c3      	b.n	8007ff8 <_svfiprintf_r+0x130>
 8008070:	fb0c 2101 	mla	r1, ip, r1, r2
 8008074:	4604      	mov	r4, r0
 8008076:	2301      	movs	r3, #1
 8008078:	e7f0      	b.n	800805c <_svfiprintf_r+0x194>
 800807a:	ab03      	add	r3, sp, #12
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	462a      	mov	r2, r5
 8008080:	4b0f      	ldr	r3, [pc, #60]	; (80080c0 <_svfiprintf_r+0x1f8>)
 8008082:	a904      	add	r1, sp, #16
 8008084:	4638      	mov	r0, r7
 8008086:	f3af 8000 	nop.w
 800808a:	1c42      	adds	r2, r0, #1
 800808c:	4606      	mov	r6, r0
 800808e:	d1d6      	bne.n	800803e <_svfiprintf_r+0x176>
 8008090:	89ab      	ldrh	r3, [r5, #12]
 8008092:	065b      	lsls	r3, r3, #25
 8008094:	f53f af2c 	bmi.w	8007ef0 <_svfiprintf_r+0x28>
 8008098:	9809      	ldr	r0, [sp, #36]	; 0x24
 800809a:	b01d      	add	sp, #116	; 0x74
 800809c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a0:	ab03      	add	r3, sp, #12
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	462a      	mov	r2, r5
 80080a6:	4b06      	ldr	r3, [pc, #24]	; (80080c0 <_svfiprintf_r+0x1f8>)
 80080a8:	a904      	add	r1, sp, #16
 80080aa:	4638      	mov	r0, r7
 80080ac:	f000 f87a 	bl	80081a4 <_printf_i>
 80080b0:	e7eb      	b.n	800808a <_svfiprintf_r+0x1c2>
 80080b2:	bf00      	nop
 80080b4:	080089bc 	.word	0x080089bc
 80080b8:	080089c6 	.word	0x080089c6
 80080bc:	00000000 	.word	0x00000000
 80080c0:	08007e11 	.word	0x08007e11
 80080c4:	080089c2 	.word	0x080089c2

080080c8 <_printf_common>:
 80080c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080cc:	4616      	mov	r6, r2
 80080ce:	4699      	mov	r9, r3
 80080d0:	688a      	ldr	r2, [r1, #8]
 80080d2:	690b      	ldr	r3, [r1, #16]
 80080d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080d8:	4293      	cmp	r3, r2
 80080da:	bfb8      	it	lt
 80080dc:	4613      	movlt	r3, r2
 80080de:	6033      	str	r3, [r6, #0]
 80080e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080e4:	4607      	mov	r7, r0
 80080e6:	460c      	mov	r4, r1
 80080e8:	b10a      	cbz	r2, 80080ee <_printf_common+0x26>
 80080ea:	3301      	adds	r3, #1
 80080ec:	6033      	str	r3, [r6, #0]
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	0699      	lsls	r1, r3, #26
 80080f2:	bf42      	ittt	mi
 80080f4:	6833      	ldrmi	r3, [r6, #0]
 80080f6:	3302      	addmi	r3, #2
 80080f8:	6033      	strmi	r3, [r6, #0]
 80080fa:	6825      	ldr	r5, [r4, #0]
 80080fc:	f015 0506 	ands.w	r5, r5, #6
 8008100:	d106      	bne.n	8008110 <_printf_common+0x48>
 8008102:	f104 0a19 	add.w	sl, r4, #25
 8008106:	68e3      	ldr	r3, [r4, #12]
 8008108:	6832      	ldr	r2, [r6, #0]
 800810a:	1a9b      	subs	r3, r3, r2
 800810c:	42ab      	cmp	r3, r5
 800810e:	dc26      	bgt.n	800815e <_printf_common+0x96>
 8008110:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008114:	1e13      	subs	r3, r2, #0
 8008116:	6822      	ldr	r2, [r4, #0]
 8008118:	bf18      	it	ne
 800811a:	2301      	movne	r3, #1
 800811c:	0692      	lsls	r2, r2, #26
 800811e:	d42b      	bmi.n	8008178 <_printf_common+0xb0>
 8008120:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008124:	4649      	mov	r1, r9
 8008126:	4638      	mov	r0, r7
 8008128:	47c0      	blx	r8
 800812a:	3001      	adds	r0, #1
 800812c:	d01e      	beq.n	800816c <_printf_common+0xa4>
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	68e5      	ldr	r5, [r4, #12]
 8008132:	6832      	ldr	r2, [r6, #0]
 8008134:	f003 0306 	and.w	r3, r3, #6
 8008138:	2b04      	cmp	r3, #4
 800813a:	bf08      	it	eq
 800813c:	1aad      	subeq	r5, r5, r2
 800813e:	68a3      	ldr	r3, [r4, #8]
 8008140:	6922      	ldr	r2, [r4, #16]
 8008142:	bf0c      	ite	eq
 8008144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008148:	2500      	movne	r5, #0
 800814a:	4293      	cmp	r3, r2
 800814c:	bfc4      	itt	gt
 800814e:	1a9b      	subgt	r3, r3, r2
 8008150:	18ed      	addgt	r5, r5, r3
 8008152:	2600      	movs	r6, #0
 8008154:	341a      	adds	r4, #26
 8008156:	42b5      	cmp	r5, r6
 8008158:	d11a      	bne.n	8008190 <_printf_common+0xc8>
 800815a:	2000      	movs	r0, #0
 800815c:	e008      	b.n	8008170 <_printf_common+0xa8>
 800815e:	2301      	movs	r3, #1
 8008160:	4652      	mov	r2, sl
 8008162:	4649      	mov	r1, r9
 8008164:	4638      	mov	r0, r7
 8008166:	47c0      	blx	r8
 8008168:	3001      	adds	r0, #1
 800816a:	d103      	bne.n	8008174 <_printf_common+0xac>
 800816c:	f04f 30ff 	mov.w	r0, #4294967295
 8008170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008174:	3501      	adds	r5, #1
 8008176:	e7c6      	b.n	8008106 <_printf_common+0x3e>
 8008178:	18e1      	adds	r1, r4, r3
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	2030      	movs	r0, #48	; 0x30
 800817e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008182:	4422      	add	r2, r4
 8008184:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008188:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800818c:	3302      	adds	r3, #2
 800818e:	e7c7      	b.n	8008120 <_printf_common+0x58>
 8008190:	2301      	movs	r3, #1
 8008192:	4622      	mov	r2, r4
 8008194:	4649      	mov	r1, r9
 8008196:	4638      	mov	r0, r7
 8008198:	47c0      	blx	r8
 800819a:	3001      	adds	r0, #1
 800819c:	d0e6      	beq.n	800816c <_printf_common+0xa4>
 800819e:	3601      	adds	r6, #1
 80081a0:	e7d9      	b.n	8008156 <_printf_common+0x8e>
	...

080081a4 <_printf_i>:
 80081a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081a8:	460c      	mov	r4, r1
 80081aa:	4691      	mov	r9, r2
 80081ac:	7e27      	ldrb	r7, [r4, #24]
 80081ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081b0:	2f78      	cmp	r7, #120	; 0x78
 80081b2:	4680      	mov	r8, r0
 80081b4:	469a      	mov	sl, r3
 80081b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ba:	d807      	bhi.n	80081cc <_printf_i+0x28>
 80081bc:	2f62      	cmp	r7, #98	; 0x62
 80081be:	d80a      	bhi.n	80081d6 <_printf_i+0x32>
 80081c0:	2f00      	cmp	r7, #0
 80081c2:	f000 80d8 	beq.w	8008376 <_printf_i+0x1d2>
 80081c6:	2f58      	cmp	r7, #88	; 0x58
 80081c8:	f000 80a3 	beq.w	8008312 <_printf_i+0x16e>
 80081cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081d4:	e03a      	b.n	800824c <_printf_i+0xa8>
 80081d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081da:	2b15      	cmp	r3, #21
 80081dc:	d8f6      	bhi.n	80081cc <_printf_i+0x28>
 80081de:	a001      	add	r0, pc, #4	; (adr r0, 80081e4 <_printf_i+0x40>)
 80081e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80081e4:	0800823d 	.word	0x0800823d
 80081e8:	08008251 	.word	0x08008251
 80081ec:	080081cd 	.word	0x080081cd
 80081f0:	080081cd 	.word	0x080081cd
 80081f4:	080081cd 	.word	0x080081cd
 80081f8:	080081cd 	.word	0x080081cd
 80081fc:	08008251 	.word	0x08008251
 8008200:	080081cd 	.word	0x080081cd
 8008204:	080081cd 	.word	0x080081cd
 8008208:	080081cd 	.word	0x080081cd
 800820c:	080081cd 	.word	0x080081cd
 8008210:	0800835d 	.word	0x0800835d
 8008214:	08008281 	.word	0x08008281
 8008218:	0800833f 	.word	0x0800833f
 800821c:	080081cd 	.word	0x080081cd
 8008220:	080081cd 	.word	0x080081cd
 8008224:	0800837f 	.word	0x0800837f
 8008228:	080081cd 	.word	0x080081cd
 800822c:	08008281 	.word	0x08008281
 8008230:	080081cd 	.word	0x080081cd
 8008234:	080081cd 	.word	0x080081cd
 8008238:	08008347 	.word	0x08008347
 800823c:	680b      	ldr	r3, [r1, #0]
 800823e:	1d1a      	adds	r2, r3, #4
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	600a      	str	r2, [r1, #0]
 8008244:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008248:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800824c:	2301      	movs	r3, #1
 800824e:	e0a3      	b.n	8008398 <_printf_i+0x1f4>
 8008250:	6825      	ldr	r5, [r4, #0]
 8008252:	6808      	ldr	r0, [r1, #0]
 8008254:	062e      	lsls	r6, r5, #24
 8008256:	f100 0304 	add.w	r3, r0, #4
 800825a:	d50a      	bpl.n	8008272 <_printf_i+0xce>
 800825c:	6805      	ldr	r5, [r0, #0]
 800825e:	600b      	str	r3, [r1, #0]
 8008260:	2d00      	cmp	r5, #0
 8008262:	da03      	bge.n	800826c <_printf_i+0xc8>
 8008264:	232d      	movs	r3, #45	; 0x2d
 8008266:	426d      	negs	r5, r5
 8008268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800826c:	485e      	ldr	r0, [pc, #376]	; (80083e8 <_printf_i+0x244>)
 800826e:	230a      	movs	r3, #10
 8008270:	e019      	b.n	80082a6 <_printf_i+0x102>
 8008272:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008276:	6805      	ldr	r5, [r0, #0]
 8008278:	600b      	str	r3, [r1, #0]
 800827a:	bf18      	it	ne
 800827c:	b22d      	sxthne	r5, r5
 800827e:	e7ef      	b.n	8008260 <_printf_i+0xbc>
 8008280:	680b      	ldr	r3, [r1, #0]
 8008282:	6825      	ldr	r5, [r4, #0]
 8008284:	1d18      	adds	r0, r3, #4
 8008286:	6008      	str	r0, [r1, #0]
 8008288:	0628      	lsls	r0, r5, #24
 800828a:	d501      	bpl.n	8008290 <_printf_i+0xec>
 800828c:	681d      	ldr	r5, [r3, #0]
 800828e:	e002      	b.n	8008296 <_printf_i+0xf2>
 8008290:	0669      	lsls	r1, r5, #25
 8008292:	d5fb      	bpl.n	800828c <_printf_i+0xe8>
 8008294:	881d      	ldrh	r5, [r3, #0]
 8008296:	4854      	ldr	r0, [pc, #336]	; (80083e8 <_printf_i+0x244>)
 8008298:	2f6f      	cmp	r7, #111	; 0x6f
 800829a:	bf0c      	ite	eq
 800829c:	2308      	moveq	r3, #8
 800829e:	230a      	movne	r3, #10
 80082a0:	2100      	movs	r1, #0
 80082a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082a6:	6866      	ldr	r6, [r4, #4]
 80082a8:	60a6      	str	r6, [r4, #8]
 80082aa:	2e00      	cmp	r6, #0
 80082ac:	bfa2      	ittt	ge
 80082ae:	6821      	ldrge	r1, [r4, #0]
 80082b0:	f021 0104 	bicge.w	r1, r1, #4
 80082b4:	6021      	strge	r1, [r4, #0]
 80082b6:	b90d      	cbnz	r5, 80082bc <_printf_i+0x118>
 80082b8:	2e00      	cmp	r6, #0
 80082ba:	d04d      	beq.n	8008358 <_printf_i+0x1b4>
 80082bc:	4616      	mov	r6, r2
 80082be:	fbb5 f1f3 	udiv	r1, r5, r3
 80082c2:	fb03 5711 	mls	r7, r3, r1, r5
 80082c6:	5dc7      	ldrb	r7, [r0, r7]
 80082c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082cc:	462f      	mov	r7, r5
 80082ce:	42bb      	cmp	r3, r7
 80082d0:	460d      	mov	r5, r1
 80082d2:	d9f4      	bls.n	80082be <_printf_i+0x11a>
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	d10b      	bne.n	80082f0 <_printf_i+0x14c>
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	07df      	lsls	r7, r3, #31
 80082dc:	d508      	bpl.n	80082f0 <_printf_i+0x14c>
 80082de:	6923      	ldr	r3, [r4, #16]
 80082e0:	6861      	ldr	r1, [r4, #4]
 80082e2:	4299      	cmp	r1, r3
 80082e4:	bfde      	ittt	le
 80082e6:	2330      	movle	r3, #48	; 0x30
 80082e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082f0:	1b92      	subs	r2, r2, r6
 80082f2:	6122      	str	r2, [r4, #16]
 80082f4:	f8cd a000 	str.w	sl, [sp]
 80082f8:	464b      	mov	r3, r9
 80082fa:	aa03      	add	r2, sp, #12
 80082fc:	4621      	mov	r1, r4
 80082fe:	4640      	mov	r0, r8
 8008300:	f7ff fee2 	bl	80080c8 <_printf_common>
 8008304:	3001      	adds	r0, #1
 8008306:	d14c      	bne.n	80083a2 <_printf_i+0x1fe>
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	b004      	add	sp, #16
 800830e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008312:	4835      	ldr	r0, [pc, #212]	; (80083e8 <_printf_i+0x244>)
 8008314:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	680e      	ldr	r6, [r1, #0]
 800831c:	061f      	lsls	r7, r3, #24
 800831e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008322:	600e      	str	r6, [r1, #0]
 8008324:	d514      	bpl.n	8008350 <_printf_i+0x1ac>
 8008326:	07d9      	lsls	r1, r3, #31
 8008328:	bf44      	itt	mi
 800832a:	f043 0320 	orrmi.w	r3, r3, #32
 800832e:	6023      	strmi	r3, [r4, #0]
 8008330:	b91d      	cbnz	r5, 800833a <_printf_i+0x196>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	f023 0320 	bic.w	r3, r3, #32
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	2310      	movs	r3, #16
 800833c:	e7b0      	b.n	80082a0 <_printf_i+0xfc>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	f043 0320 	orr.w	r3, r3, #32
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	2378      	movs	r3, #120	; 0x78
 8008348:	4828      	ldr	r0, [pc, #160]	; (80083ec <_printf_i+0x248>)
 800834a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800834e:	e7e3      	b.n	8008318 <_printf_i+0x174>
 8008350:	065e      	lsls	r6, r3, #25
 8008352:	bf48      	it	mi
 8008354:	b2ad      	uxthmi	r5, r5
 8008356:	e7e6      	b.n	8008326 <_printf_i+0x182>
 8008358:	4616      	mov	r6, r2
 800835a:	e7bb      	b.n	80082d4 <_printf_i+0x130>
 800835c:	680b      	ldr	r3, [r1, #0]
 800835e:	6826      	ldr	r6, [r4, #0]
 8008360:	6960      	ldr	r0, [r4, #20]
 8008362:	1d1d      	adds	r5, r3, #4
 8008364:	600d      	str	r5, [r1, #0]
 8008366:	0635      	lsls	r5, r6, #24
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	d501      	bpl.n	8008370 <_printf_i+0x1cc>
 800836c:	6018      	str	r0, [r3, #0]
 800836e:	e002      	b.n	8008376 <_printf_i+0x1d2>
 8008370:	0671      	lsls	r1, r6, #25
 8008372:	d5fb      	bpl.n	800836c <_printf_i+0x1c8>
 8008374:	8018      	strh	r0, [r3, #0]
 8008376:	2300      	movs	r3, #0
 8008378:	6123      	str	r3, [r4, #16]
 800837a:	4616      	mov	r6, r2
 800837c:	e7ba      	b.n	80082f4 <_printf_i+0x150>
 800837e:	680b      	ldr	r3, [r1, #0]
 8008380:	1d1a      	adds	r2, r3, #4
 8008382:	600a      	str	r2, [r1, #0]
 8008384:	681e      	ldr	r6, [r3, #0]
 8008386:	6862      	ldr	r2, [r4, #4]
 8008388:	2100      	movs	r1, #0
 800838a:	4630      	mov	r0, r6
 800838c:	f7f7 ff58 	bl	8000240 <memchr>
 8008390:	b108      	cbz	r0, 8008396 <_printf_i+0x1f2>
 8008392:	1b80      	subs	r0, r0, r6
 8008394:	6060      	str	r0, [r4, #4]
 8008396:	6863      	ldr	r3, [r4, #4]
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	2300      	movs	r3, #0
 800839c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a0:	e7a8      	b.n	80082f4 <_printf_i+0x150>
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	4632      	mov	r2, r6
 80083a6:	4649      	mov	r1, r9
 80083a8:	4640      	mov	r0, r8
 80083aa:	47d0      	blx	sl
 80083ac:	3001      	adds	r0, #1
 80083ae:	d0ab      	beq.n	8008308 <_printf_i+0x164>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	079b      	lsls	r3, r3, #30
 80083b4:	d413      	bmi.n	80083de <_printf_i+0x23a>
 80083b6:	68e0      	ldr	r0, [r4, #12]
 80083b8:	9b03      	ldr	r3, [sp, #12]
 80083ba:	4298      	cmp	r0, r3
 80083bc:	bfb8      	it	lt
 80083be:	4618      	movlt	r0, r3
 80083c0:	e7a4      	b.n	800830c <_printf_i+0x168>
 80083c2:	2301      	movs	r3, #1
 80083c4:	4632      	mov	r2, r6
 80083c6:	4649      	mov	r1, r9
 80083c8:	4640      	mov	r0, r8
 80083ca:	47d0      	blx	sl
 80083cc:	3001      	adds	r0, #1
 80083ce:	d09b      	beq.n	8008308 <_printf_i+0x164>
 80083d0:	3501      	adds	r5, #1
 80083d2:	68e3      	ldr	r3, [r4, #12]
 80083d4:	9903      	ldr	r1, [sp, #12]
 80083d6:	1a5b      	subs	r3, r3, r1
 80083d8:	42ab      	cmp	r3, r5
 80083da:	dcf2      	bgt.n	80083c2 <_printf_i+0x21e>
 80083dc:	e7eb      	b.n	80083b6 <_printf_i+0x212>
 80083de:	2500      	movs	r5, #0
 80083e0:	f104 0619 	add.w	r6, r4, #25
 80083e4:	e7f5      	b.n	80083d2 <_printf_i+0x22e>
 80083e6:	bf00      	nop
 80083e8:	080089cd 	.word	0x080089cd
 80083ec:	080089de 	.word	0x080089de

080083f0 <_sbrk_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d06      	ldr	r5, [pc, #24]	; (800840c <_sbrk_r+0x1c>)
 80083f4:	2300      	movs	r3, #0
 80083f6:	4604      	mov	r4, r0
 80083f8:	4608      	mov	r0, r1
 80083fa:	602b      	str	r3, [r5, #0]
 80083fc:	f7f8 ff1a 	bl	8001234 <_sbrk>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d102      	bne.n	800840a <_sbrk_r+0x1a>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	b103      	cbz	r3, 800840a <_sbrk_r+0x1a>
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	bd38      	pop	{r3, r4, r5, pc}
 800840c:	20012fa8 	.word	0x20012fa8

08008410 <memmove>:
 8008410:	4288      	cmp	r0, r1
 8008412:	b510      	push	{r4, lr}
 8008414:	eb01 0402 	add.w	r4, r1, r2
 8008418:	d902      	bls.n	8008420 <memmove+0x10>
 800841a:	4284      	cmp	r4, r0
 800841c:	4623      	mov	r3, r4
 800841e:	d807      	bhi.n	8008430 <memmove+0x20>
 8008420:	1e43      	subs	r3, r0, #1
 8008422:	42a1      	cmp	r1, r4
 8008424:	d008      	beq.n	8008438 <memmove+0x28>
 8008426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800842a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800842e:	e7f8      	b.n	8008422 <memmove+0x12>
 8008430:	4402      	add	r2, r0
 8008432:	4601      	mov	r1, r0
 8008434:	428a      	cmp	r2, r1
 8008436:	d100      	bne.n	800843a <memmove+0x2a>
 8008438:	bd10      	pop	{r4, pc}
 800843a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800843e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008442:	e7f7      	b.n	8008434 <memmove+0x24>

08008444 <__malloc_lock>:
 8008444:	4801      	ldr	r0, [pc, #4]	; (800844c <__malloc_lock+0x8>)
 8008446:	f7ff bc87 	b.w	8007d58 <__retarget_lock_acquire_recursive>
 800844a:	bf00      	nop
 800844c:	20012fa0 	.word	0x20012fa0

08008450 <__malloc_unlock>:
 8008450:	4801      	ldr	r0, [pc, #4]	; (8008458 <__malloc_unlock+0x8>)
 8008452:	f7ff bc82 	b.w	8007d5a <__retarget_lock_release_recursive>
 8008456:	bf00      	nop
 8008458:	20012fa0 	.word	0x20012fa0

0800845c <_free_r>:
 800845c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800845e:	2900      	cmp	r1, #0
 8008460:	d048      	beq.n	80084f4 <_free_r+0x98>
 8008462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008466:	9001      	str	r0, [sp, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	f1a1 0404 	sub.w	r4, r1, #4
 800846e:	bfb8      	it	lt
 8008470:	18e4      	addlt	r4, r4, r3
 8008472:	f7ff ffe7 	bl	8008444 <__malloc_lock>
 8008476:	4a20      	ldr	r2, [pc, #128]	; (80084f8 <_free_r+0x9c>)
 8008478:	9801      	ldr	r0, [sp, #4]
 800847a:	6813      	ldr	r3, [r2, #0]
 800847c:	4615      	mov	r5, r2
 800847e:	b933      	cbnz	r3, 800848e <_free_r+0x32>
 8008480:	6063      	str	r3, [r4, #4]
 8008482:	6014      	str	r4, [r2, #0]
 8008484:	b003      	add	sp, #12
 8008486:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800848a:	f7ff bfe1 	b.w	8008450 <__malloc_unlock>
 800848e:	42a3      	cmp	r3, r4
 8008490:	d90b      	bls.n	80084aa <_free_r+0x4e>
 8008492:	6821      	ldr	r1, [r4, #0]
 8008494:	1862      	adds	r2, r4, r1
 8008496:	4293      	cmp	r3, r2
 8008498:	bf04      	itt	eq
 800849a:	681a      	ldreq	r2, [r3, #0]
 800849c:	685b      	ldreq	r3, [r3, #4]
 800849e:	6063      	str	r3, [r4, #4]
 80084a0:	bf04      	itt	eq
 80084a2:	1852      	addeq	r2, r2, r1
 80084a4:	6022      	streq	r2, [r4, #0]
 80084a6:	602c      	str	r4, [r5, #0]
 80084a8:	e7ec      	b.n	8008484 <_free_r+0x28>
 80084aa:	461a      	mov	r2, r3
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	b10b      	cbz	r3, 80084b4 <_free_r+0x58>
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	d9fa      	bls.n	80084aa <_free_r+0x4e>
 80084b4:	6811      	ldr	r1, [r2, #0]
 80084b6:	1855      	adds	r5, r2, r1
 80084b8:	42a5      	cmp	r5, r4
 80084ba:	d10b      	bne.n	80084d4 <_free_r+0x78>
 80084bc:	6824      	ldr	r4, [r4, #0]
 80084be:	4421      	add	r1, r4
 80084c0:	1854      	adds	r4, r2, r1
 80084c2:	42a3      	cmp	r3, r4
 80084c4:	6011      	str	r1, [r2, #0]
 80084c6:	d1dd      	bne.n	8008484 <_free_r+0x28>
 80084c8:	681c      	ldr	r4, [r3, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	6053      	str	r3, [r2, #4]
 80084ce:	4421      	add	r1, r4
 80084d0:	6011      	str	r1, [r2, #0]
 80084d2:	e7d7      	b.n	8008484 <_free_r+0x28>
 80084d4:	d902      	bls.n	80084dc <_free_r+0x80>
 80084d6:	230c      	movs	r3, #12
 80084d8:	6003      	str	r3, [r0, #0]
 80084da:	e7d3      	b.n	8008484 <_free_r+0x28>
 80084dc:	6825      	ldr	r5, [r4, #0]
 80084de:	1961      	adds	r1, r4, r5
 80084e0:	428b      	cmp	r3, r1
 80084e2:	bf04      	itt	eq
 80084e4:	6819      	ldreq	r1, [r3, #0]
 80084e6:	685b      	ldreq	r3, [r3, #4]
 80084e8:	6063      	str	r3, [r4, #4]
 80084ea:	bf04      	itt	eq
 80084ec:	1949      	addeq	r1, r1, r5
 80084ee:	6021      	streq	r1, [r4, #0]
 80084f0:	6054      	str	r4, [r2, #4]
 80084f2:	e7c7      	b.n	8008484 <_free_r+0x28>
 80084f4:	b003      	add	sp, #12
 80084f6:	bd30      	pop	{r4, r5, pc}
 80084f8:	20012e74 	.word	0x20012e74

080084fc <_realloc_r>:
 80084fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fe:	4607      	mov	r7, r0
 8008500:	4614      	mov	r4, r2
 8008502:	460e      	mov	r6, r1
 8008504:	b921      	cbnz	r1, 8008510 <_realloc_r+0x14>
 8008506:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800850a:	4611      	mov	r1, r2
 800850c:	f7ff bc26 	b.w	8007d5c <_malloc_r>
 8008510:	b922      	cbnz	r2, 800851c <_realloc_r+0x20>
 8008512:	f7ff ffa3 	bl	800845c <_free_r>
 8008516:	4625      	mov	r5, r4
 8008518:	4628      	mov	r0, r5
 800851a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800851c:	f000 f814 	bl	8008548 <_malloc_usable_size_r>
 8008520:	42a0      	cmp	r0, r4
 8008522:	d20f      	bcs.n	8008544 <_realloc_r+0x48>
 8008524:	4621      	mov	r1, r4
 8008526:	4638      	mov	r0, r7
 8008528:	f7ff fc18 	bl	8007d5c <_malloc_r>
 800852c:	4605      	mov	r5, r0
 800852e:	2800      	cmp	r0, #0
 8008530:	d0f2      	beq.n	8008518 <_realloc_r+0x1c>
 8008532:	4631      	mov	r1, r6
 8008534:	4622      	mov	r2, r4
 8008536:	f7ff fbd9 	bl	8007cec <memcpy>
 800853a:	4631      	mov	r1, r6
 800853c:	4638      	mov	r0, r7
 800853e:	f7ff ff8d 	bl	800845c <_free_r>
 8008542:	e7e9      	b.n	8008518 <_realloc_r+0x1c>
 8008544:	4635      	mov	r5, r6
 8008546:	e7e7      	b.n	8008518 <_realloc_r+0x1c>

08008548 <_malloc_usable_size_r>:
 8008548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800854c:	1f18      	subs	r0, r3, #4
 800854e:	2b00      	cmp	r3, #0
 8008550:	bfbc      	itt	lt
 8008552:	580b      	ldrlt	r3, [r1, r0]
 8008554:	18c0      	addlt	r0, r0, r3
 8008556:	4770      	bx	lr

08008558 <_init>:
 8008558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855a:	bf00      	nop
 800855c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855e:	bc08      	pop	{r3}
 8008560:	469e      	mov	lr, r3
 8008562:	4770      	bx	lr

08008564 <_fini>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr
