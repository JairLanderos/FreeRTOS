
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  080064c4  080064c4  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006648  08006648  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006648  08006648  00016648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006650  08006650  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006650  08006650  00016650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006654  08006654  00016654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014430  20000080  080066d8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144b0  080066d8  000244b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001807a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003195  00000000  00000000  0003812a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0003b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  0003c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247a8  00000000  00000000  0003d538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015abc  00000000  00000000  00061ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc75f  00000000  00000000  0007779c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153efb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e48  00000000  00000000  00153f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080064ac 	.word	0x080064ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080064ac 	.word	0x080064ac

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200143f8 	.word	0x200143f8
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b96e 	b.w	8000644 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	4604      	mov	r4, r0
 8000388:	468c      	mov	ip, r1
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8083 	bne.w	8000496 <__udivmoddi4+0x116>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d947      	bls.n	8000426 <__udivmoddi4+0xa6>
 8000396:	fab2 f282 	clz	r2, r2
 800039a:	b142      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039c:	f1c2 0020 	rsb	r0, r2, #32
 80003a0:	fa24 f000 	lsr.w	r0, r4, r0
 80003a4:	4091      	lsls	r1, r2
 80003a6:	4097      	lsls	r7, r2
 80003a8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ac:	4094      	lsls	r4, r2
 80003ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fbbc f6f8 	udiv	r6, ip, r8
 80003b8:	fa1f fe87 	uxth.w	lr, r7
 80003bc:	fb08 c116 	mls	r1, r8, r6, ip
 80003c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c4:	fb06 f10e 	mul.w	r1, r6, lr
 80003c8:	4299      	cmp	r1, r3
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x60>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 30ff 	add.w	r0, r6, #4294967295
 80003d2:	f080 8119 	bcs.w	8000608 <__udivmoddi4+0x288>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 8116 	bls.w	8000608 <__udivmoddi4+0x288>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d909      	bls.n	800040c <__udivmoddi4+0x8c>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fe:	f080 8105 	bcs.w	800060c <__udivmoddi4+0x28c>
 8000402:	45a6      	cmp	lr, r4
 8000404:	f240 8102 	bls.w	800060c <__udivmoddi4+0x28c>
 8000408:	3802      	subs	r0, #2
 800040a:	443c      	add	r4, r7
 800040c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	2600      	movs	r6, #0
 8000416:	b11d      	cbz	r5, 8000420 <__udivmoddi4+0xa0>
 8000418:	40d4      	lsrs	r4, r2
 800041a:	2300      	movs	r3, #0
 800041c:	e9c5 4300 	strd	r4, r3, [r5]
 8000420:	4631      	mov	r1, r6
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	b902      	cbnz	r2, 800042a <__udivmoddi4+0xaa>
 8000428:	deff      	udf	#255	; 0xff
 800042a:	fab2 f282 	clz	r2, r2
 800042e:	2a00      	cmp	r2, #0
 8000430:	d150      	bne.n	80004d4 <__udivmoddi4+0x154>
 8000432:	1bcb      	subs	r3, r1, r7
 8000434:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000438:	fa1f f887 	uxth.w	r8, r7
 800043c:	2601      	movs	r6, #1
 800043e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000442:	0c21      	lsrs	r1, r4, #16
 8000444:	fb0e 331c 	mls	r3, lr, ip, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb08 f30c 	mul.w	r3, r8, ip
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0xe4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0xe2>
 800045c:	428b      	cmp	r3, r1
 800045e:	f200 80e9 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 8000462:	4684      	mov	ip, r0
 8000464:	1ac9      	subs	r1, r1, r3
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000470:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x10c>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x10a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80d9 	bhi.w	800063c <__udivmoddi4+0x2bc>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e7bf      	b.n	8000416 <__udivmoddi4+0x96>
 8000496:	428b      	cmp	r3, r1
 8000498:	d909      	bls.n	80004ae <__udivmoddi4+0x12e>
 800049a:	2d00      	cmp	r5, #0
 800049c:	f000 80b1 	beq.w	8000602 <__udivmoddi4+0x282>
 80004a0:	2600      	movs	r6, #0
 80004a2:	e9c5 0100 	strd	r0, r1, [r5]
 80004a6:	4630      	mov	r0, r6
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	fab3 f683 	clz	r6, r3
 80004b2:	2e00      	cmp	r6, #0
 80004b4:	d14a      	bne.n	800054c <__udivmoddi4+0x1cc>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d302      	bcc.n	80004c0 <__udivmoddi4+0x140>
 80004ba:	4282      	cmp	r2, r0
 80004bc:	f200 80b8 	bhi.w	8000630 <__udivmoddi4+0x2b0>
 80004c0:	1a84      	subs	r4, r0, r2
 80004c2:	eb61 0103 	sbc.w	r1, r1, r3
 80004c6:	2001      	movs	r0, #1
 80004c8:	468c      	mov	ip, r1
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	d0a8      	beq.n	8000420 <__udivmoddi4+0xa0>
 80004ce:	e9c5 4c00 	strd	r4, ip, [r5]
 80004d2:	e7a5      	b.n	8000420 <__udivmoddi4+0xa0>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f603 	lsr.w	r6, r0, r3
 80004dc:	4097      	lsls	r7, r2
 80004de:	fa01 f002 	lsl.w	r0, r1, r2
 80004e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e6:	40d9      	lsrs	r1, r3
 80004e8:	4330      	orrs	r0, r6
 80004ea:	0c03      	lsrs	r3, r0, #16
 80004ec:	fbb1 f6fe 	udiv	r6, r1, lr
 80004f0:	fa1f f887 	uxth.w	r8, r7
 80004f4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004fc:	fb06 f108 	mul.w	r1, r6, r8
 8000500:	4299      	cmp	r1, r3
 8000502:	fa04 f402 	lsl.w	r4, r4, r2
 8000506:	d909      	bls.n	800051c <__udivmoddi4+0x19c>
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	f106 3cff 	add.w	ip, r6, #4294967295
 800050e:	f080 808d 	bcs.w	800062c <__udivmoddi4+0x2ac>
 8000512:	4299      	cmp	r1, r3
 8000514:	f240 808a 	bls.w	800062c <__udivmoddi4+0x2ac>
 8000518:	3e02      	subs	r6, #2
 800051a:	443b      	add	r3, r7
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b281      	uxth	r1, r0
 8000520:	fbb3 f0fe 	udiv	r0, r3, lr
 8000524:	fb0e 3310 	mls	r3, lr, r0, r3
 8000528:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052c:	fb00 f308 	mul.w	r3, r0, r8
 8000530:	428b      	cmp	r3, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x1c4>
 8000534:	1879      	adds	r1, r7, r1
 8000536:	f100 3cff 	add.w	ip, r0, #4294967295
 800053a:	d273      	bcs.n	8000624 <__udivmoddi4+0x2a4>
 800053c:	428b      	cmp	r3, r1
 800053e:	d971      	bls.n	8000624 <__udivmoddi4+0x2a4>
 8000540:	3802      	subs	r0, #2
 8000542:	4439      	add	r1, r7
 8000544:	1acb      	subs	r3, r1, r3
 8000546:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800054a:	e778      	b.n	800043e <__udivmoddi4+0xbe>
 800054c:	f1c6 0c20 	rsb	ip, r6, #32
 8000550:	fa03 f406 	lsl.w	r4, r3, r6
 8000554:	fa22 f30c 	lsr.w	r3, r2, ip
 8000558:	431c      	orrs	r4, r3
 800055a:	fa20 f70c 	lsr.w	r7, r0, ip
 800055e:	fa01 f306 	lsl.w	r3, r1, r6
 8000562:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000566:	fa21 f10c 	lsr.w	r1, r1, ip
 800056a:	431f      	orrs	r7, r3
 800056c:	0c3b      	lsrs	r3, r7, #16
 800056e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000572:	fa1f f884 	uxth.w	r8, r4
 8000576:	fb0e 1119 	mls	r1, lr, r9, r1
 800057a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800057e:	fb09 fa08 	mul.w	sl, r9, r8
 8000582:	458a      	cmp	sl, r1
 8000584:	fa02 f206 	lsl.w	r2, r2, r6
 8000588:	fa00 f306 	lsl.w	r3, r0, r6
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x220>
 800058e:	1861      	adds	r1, r4, r1
 8000590:	f109 30ff 	add.w	r0, r9, #4294967295
 8000594:	d248      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 8000596:	458a      	cmp	sl, r1
 8000598:	d946      	bls.n	8000628 <__udivmoddi4+0x2a8>
 800059a:	f1a9 0902 	sub.w	r9, r9, #2
 800059e:	4421      	add	r1, r4
 80005a0:	eba1 010a 	sub.w	r1, r1, sl
 80005a4:	b2bf      	uxth	r7, r7
 80005a6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005aa:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ae:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005b2:	fb00 f808 	mul.w	r8, r0, r8
 80005b6:	45b8      	cmp	r8, r7
 80005b8:	d907      	bls.n	80005ca <__udivmoddi4+0x24a>
 80005ba:	19e7      	adds	r7, r4, r7
 80005bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80005c0:	d22e      	bcs.n	8000620 <__udivmoddi4+0x2a0>
 80005c2:	45b8      	cmp	r8, r7
 80005c4:	d92c      	bls.n	8000620 <__udivmoddi4+0x2a0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	4427      	add	r7, r4
 80005ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005ce:	eba7 0708 	sub.w	r7, r7, r8
 80005d2:	fba0 8902 	umull	r8, r9, r0, r2
 80005d6:	454f      	cmp	r7, r9
 80005d8:	46c6      	mov	lr, r8
 80005da:	4649      	mov	r1, r9
 80005dc:	d31a      	bcc.n	8000614 <__udivmoddi4+0x294>
 80005de:	d017      	beq.n	8000610 <__udivmoddi4+0x290>
 80005e0:	b15d      	cbz	r5, 80005fa <__udivmoddi4+0x27a>
 80005e2:	ebb3 020e 	subs.w	r2, r3, lr
 80005e6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ea:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ee:	40f2      	lsrs	r2, r6
 80005f0:	ea4c 0202 	orr.w	r2, ip, r2
 80005f4:	40f7      	lsrs	r7, r6
 80005f6:	e9c5 2700 	strd	r2, r7, [r5]
 80005fa:	2600      	movs	r6, #0
 80005fc:	4631      	mov	r1, r6
 80005fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000602:	462e      	mov	r6, r5
 8000604:	4628      	mov	r0, r5
 8000606:	e70b      	b.n	8000420 <__udivmoddi4+0xa0>
 8000608:	4606      	mov	r6, r0
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0x60>
 800060c:	4618      	mov	r0, r3
 800060e:	e6fd      	b.n	800040c <__udivmoddi4+0x8c>
 8000610:	4543      	cmp	r3, r8
 8000612:	d2e5      	bcs.n	80005e0 <__udivmoddi4+0x260>
 8000614:	ebb8 0e02 	subs.w	lr, r8, r2
 8000618:	eb69 0104 	sbc.w	r1, r9, r4
 800061c:	3801      	subs	r0, #1
 800061e:	e7df      	b.n	80005e0 <__udivmoddi4+0x260>
 8000620:	4608      	mov	r0, r1
 8000622:	e7d2      	b.n	80005ca <__udivmoddi4+0x24a>
 8000624:	4660      	mov	r0, ip
 8000626:	e78d      	b.n	8000544 <__udivmoddi4+0x1c4>
 8000628:	4681      	mov	r9, r0
 800062a:	e7b9      	b.n	80005a0 <__udivmoddi4+0x220>
 800062c:	4666      	mov	r6, ip
 800062e:	e775      	b.n	800051c <__udivmoddi4+0x19c>
 8000630:	4630      	mov	r0, r6
 8000632:	e74a      	b.n	80004ca <__udivmoddi4+0x14a>
 8000634:	f1ac 0c02 	sub.w	ip, ip, #2
 8000638:	4439      	add	r1, r7
 800063a:	e713      	b.n	8000464 <__udivmoddi4+0xe4>
 800063c:	3802      	subs	r0, #2
 800063e:	443c      	add	r4, r7
 8000640:	e724      	b.n	800048c <__udivmoddi4+0x10c>
 8000642:	bf00      	nop

08000644 <__aeabi_idiv0>:
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <main>:
static void task1_handler(void* parameters);
static void task2_handler(void* parameters);
extern  void SEGGER_UART_init(uint32_t);

int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af02      	add	r7, sp, #8

	TaskHandle_t task1_handle;
	TaskHandle_t task2_handle;
	BaseType_t status;

	HAL_Init();
 800064e:	f000 fa77 	bl	8000b40 <HAL_Init>

	SystemClock_Config();
 8000652:	f000 f853 	bl	80006fc <SystemClock_Config>

	MX_GPIO_Init();
 8000656:	f000 f8c3 	bl	80007e0 <MX_GPIO_Init>

	/* Enable the CYCCNT counter */
	DWT_CTRL |= ( 1 << 0);
 800065a:	4b20      	ldr	r3, [pc, #128]	; (80006dc <main+0x94>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a1f      	ldr	r2, [pc, #124]	; (80006dc <main+0x94>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6013      	str	r3, [r2, #0]

	SEGGER_UART_init(250000);
 8000666:	481e      	ldr	r0, [pc, #120]	; (80006e0 <main+0x98>)
 8000668:	f003 f9d2 	bl	8003a10 <SEGGER_UART_init>

	SEGGER_SYSVIEW_Conf();
 800066c:	f003 f802 	bl	8003674 <SEGGER_SYSVIEW_Conf>

	status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2302      	movs	r3, #2
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <main+0x9c>)
 800067c:	22c8      	movs	r2, #200	; 0xc8
 800067e:	491a      	ldr	r1, [pc, #104]	; (80006e8 <main+0xa0>)
 8000680:	481a      	ldr	r0, [pc, #104]	; (80006ec <main+0xa4>)
 8000682:	f001 fe0c 	bl	800229e <xTaskCreate>
 8000686:	6178      	str	r0, [r7, #20]

	configASSERT(status == pdPASS);
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d00a      	beq.n	80006a4 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800068e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000692:	f383 8811 	msr	BASEPRI, r3
 8000696:	f3bf 8f6f 	isb	sy
 800069a:	f3bf 8f4f 	dsb	sy
 800069e:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006a0:	bf00      	nop
 80006a2:	e7fe      	b.n	80006a2 <main+0x5a>

	status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	2302      	movs	r3, #2
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <main+0xa8>)
 80006ae:	22c8      	movs	r2, #200	; 0xc8
 80006b0:	4910      	ldr	r1, [pc, #64]	; (80006f4 <main+0xac>)
 80006b2:	4811      	ldr	r0, [pc, #68]	; (80006f8 <main+0xb0>)
 80006b4:	f001 fdf3 	bl	800229e <xTaskCreate>
 80006b8:	6178      	str	r0, [r7, #20]

	configASSERT(status == pdPASS);
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d00a      	beq.n	80006d6 <main+0x8e>
        __asm volatile
 80006c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c4:	f383 8811 	msr	BASEPRI, r3
 80006c8:	f3bf 8f6f 	isb	sy
 80006cc:	f3bf 8f4f 	dsb	sy
 80006d0:	60fb      	str	r3, [r7, #12]
    }
 80006d2:	bf00      	nop
 80006d4:	e7fe      	b.n	80006d4 <main+0x8c>

	/* Start the FreeRTOS scheduler */
	vTaskStartScheduler();
 80006d6:	f001 ff6d 	bl	80025b4 <vTaskStartScheduler>

	while (1)
 80006da:	e7fe      	b.n	80006da <main+0x92>
 80006dc:	e0001000 	.word	0xe0001000
 80006e0:	0003d090 	.word	0x0003d090
 80006e4:	080064c4 	.word	0x080064c4
 80006e8:	080064dc 	.word	0x080064dc
 80006ec:	080008dd 	.word	0x080008dd
 80006f0:	080064e4 	.word	0x080064e4
 80006f4:	080064fc 	.word	0x080064fc
 80006f8:	08000919 	.word	0x08000919

080006fc <SystemClock_Config>:

	}
}

void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2234      	movs	r2, #52	; 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f005 fa84 	bl	8005c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <SystemClock_Config+0xdc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a2b      	ldr	r2, [pc, #172]	; (80007d8 <SystemClock_Config+0xdc>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <SystemClock_Config+0xdc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <SystemClock_Config+0xe0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a25      	ldr	r2, [pc, #148]	; (80007dc <SystemClock_Config+0xe0>)
 8000746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <SystemClock_Config+0xe0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2310      	movs	r3, #16
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800076c:	2308      	movs	r3, #8
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000770:	23b4      	movs	r3, #180	; 0xb4
 8000772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4618      	mov	r0, r3
 8000786:	f000 ffe7 	bl	8001758 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000790:	f000 f8f2 	bl	8000978 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000794:	f000 fca6 	bl	80010e4 <HAL_PWREx_EnableOverDrive>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800079e:	f000 f8eb 	bl	8000978 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2302      	movs	r3, #2
 80007a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	2105      	movs	r1, #5
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 fcdf 	bl	8001184 <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007cc:	f000 f8d4 	bl	8000978 <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	3750      	adds	r7, #80	; 0x50
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b35      	ldr	r3, [pc, #212]	; (80008d0 <MX_GPIO_Init+0xf0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a34      	ldr	r2, [pc, #208]	; (80008d0 <MX_GPIO_Init+0xf0>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b32      	ldr	r3, [pc, #200]	; (80008d0 <MX_GPIO_Init+0xf0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <MX_GPIO_Init+0xf0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a2d      	ldr	r2, [pc, #180]	; (80008d0 <MX_GPIO_Init+0xf0>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <MX_GPIO_Init+0xf0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b27      	ldr	r3, [pc, #156]	; (80008d0 <MX_GPIO_Init+0xf0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a26      	ldr	r2, [pc, #152]	; (80008d0 <MX_GPIO_Init+0xf0>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <MX_GPIO_Init+0xf0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <MX_GPIO_Init+0xf0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a1f      	ldr	r2, [pc, #124]	; (80008d0 <MX_GPIO_Init+0xf0>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_GPIO_Init+0xf0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2120      	movs	r1, #32
 800086a:	481a      	ldr	r0, [pc, #104]	; (80008d4 <MX_GPIO_Init+0xf4>)
 800086c:	f000 fc20 	bl	80010b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000876:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4814      	ldr	r0, [pc, #80]	; (80008d8 <MX_GPIO_Init+0xf8>)
 8000888:	f000 fa7e 	bl	8000d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800088c:	230c      	movs	r3, #12
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800089c:	2307      	movs	r3, #7
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <MX_GPIO_Init+0xf4>)
 80008a8:	f000 fa6e 	bl	8000d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ac:	2320      	movs	r3, #32
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_GPIO_Init+0xf4>)
 80008c4:	f000 fa60 	bl	8000d88 <HAL_GPIO_Init>

}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	; 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40020800 	.word	0x40020800

080008dc <task1_handler>:

static void task1_handler(void* parameters)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b09c      	sub	sp, #112	; 0x70
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 80008e4:	f107 000c 	add.w	r0, r7, #12
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a09      	ldr	r2, [pc, #36]	; (8000910 <task1_handler+0x34>)
 80008ec:	2164      	movs	r1, #100	; 0x64
 80008ee:	f005 f99b 	bl	8005c28 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 f8b0 	bl	8005a5c <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <task1_handler+0x38>)
 80008fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	f3bf 8f4f 	dsb	sy
 8000908:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 800090c:	e7ea      	b.n	80008e4 <task1_handler+0x8>
 800090e:	bf00      	nop
 8000910:	08006504 	.word	0x08006504
 8000914:	e000ed04 	.word	0xe000ed04

08000918 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09c      	sub	sp, #112	; 0x70
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	char msg[100];

	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000920:	f107 000c 	add.w	r0, r7, #12
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4a09      	ldr	r2, [pc, #36]	; (800094c <task2_handler+0x34>)
 8000928:	2164      	movs	r1, #100	; 0x64
 800092a:	f005 f97d 	bl	8005c28 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4618      	mov	r0, r3
 8000934:	f005 f892 	bl	8005a5c <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <task2_handler+0x38>)
 800093a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	f3bf 8f4f 	dsb	sy
 8000944:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000948:	e7ea      	b.n	8000920 <task2_handler+0x8>
 800094a:	bf00      	nop
 800094c:	08006504 	.word	0x08006504
 8000950:	e000ed04 	.word	0xe000ed04

08000954 <HAL_TIM_PeriodElapsedCallback>:
	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a04      	ldr	r2, [pc, #16]	; (8000974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d101      	bne.n	800096a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000966:	f000 f90d 	bl	8000b84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40001000 	.word	0x40001000

08000978 <Error_Handler>:

void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	e7fe      	b.n	8000980 <Error_Handler+0x8>
	...

08000984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <HAL_MspInit+0x4c>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <HAL_MspInit+0x4c>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	6453      	str	r3, [r2, #68]	; 0x44
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_MspInit+0x4c>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80009c2:	f002 faa1 	bl	8002f08 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	2036      	movs	r0, #54	; 0x36
 80009ea:	f000 f9a3 	bl	8000d34 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009ee:	2036      	movs	r0, #54	; 0x36
 80009f0:	f000 f9bc 	bl	8000d6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <HAL_InitTick+0xa4>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <HAL_InitTick+0xa4>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6413      	str	r3, [r2, #64]	; 0x40
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <HAL_InitTick+0xa4>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 0310 	and.w	r3, r3, #16
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a10:	f107 0210 	add.w	r2, r7, #16
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 fcb8 	bl	8001390 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a20:	f000 fca2 	bl	8001368 <HAL_RCC_GetPCLK1Freq>
 8000a24:	4603      	mov	r3, r0
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a2c:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <HAL_InitTick+0xa8>)
 8000a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a32:	0c9b      	lsrs	r3, r3, #18
 8000a34:	3b01      	subs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_InitTick+0xac>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <HAL_InitTick+0xb0>)
 8000a3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_InitTick+0xac>)
 8000a40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a44:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a46:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <HAL_InitTick+0xac>)
 8000a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <HAL_InitTick+0xac>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <HAL_InitTick+0xac>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <HAL_InitTick+0xac>)
 8000a5a:	f001 f91b 	bl	8001c94 <HAL_TIM_Base_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d104      	bne.n	8000a6e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a64:	4806      	ldr	r0, [pc, #24]	; (8000a80 <HAL_InitTick+0xac>)
 8000a66:	f001 f96f 	bl	8001d48 <HAL_TIM_Base_Start_IT>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3730      	adds	r7, #48	; 0x30
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	431bde83 	.word	0x431bde83
 8000a80:	200143ac 	.word	0x200143ac
 8000a84:	40001000 	.word	0x40001000

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <TIM6_DAC_IRQHandler+0x10>)
 8000aba:	f001 f9b5 	bl	8001e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200143ac 	.word	0x200143ac

08000ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000af2:	490e      	ldr	r1, [pc, #56]	; (8000b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b08:	4c0b      	ldr	r4, [pc, #44]	; (8000b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b16:	f7ff ffd7 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b1a:	f005 f83d 	bl	8005b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1e:	f7ff fd93 	bl	8000648 <main>
  bx  lr    
 8000b22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b2c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000b30:	08006658 	.word	0x08006658
  ldr r2, =_sbss
 8000b34:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000b38:	200144b0 	.word	0x200144b0

08000b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b3c:	e7fe      	b.n	8000b3c <ADC_IRQHandler>
	...

08000b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <HAL_Init+0x40>)
 8000b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_Init+0x40>)
 8000b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_Init+0x40>)
 8000b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 f8d8 	bl	8000d1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f7ff ff30 	bl	80009d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b74:	f7ff ff06 	bl	8000984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023c00 	.word	0x40023c00

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	200143f4 	.word	0x200143f4

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	200143f4 	.word	0x200143f4

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ff4c 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d46:	f7ff ff61 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	68b9      	ldr	r1, [r7, #8]
 8000d50:	6978      	ldr	r0, [r7, #20]
 8000d52:	f7ff ffb1 	bl	8000cb8 <NVIC_EncodePriority>
 8000d56:	4602      	mov	r2, r0
 8000d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff80 	bl	8000c64 <__NVIC_SetPriority>
}
 8000d64:	bf00      	nop
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff54 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	e165      	b.n	8001070 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f040 8154 	bne.w	800106a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d005      	beq.n	8000dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d130      	bne.n	8000e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 0201 	and.w	r2, r3, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d017      	beq.n	8000e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d123      	bne.n	8000ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	69b9      	ldr	r1, [r7, #24]
 8000ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0203 	and.w	r2, r3, #3
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80ae 	beq.w	800106a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b5d      	ldr	r3, [pc, #372]	; (8001088 <HAL_GPIO_Init+0x300>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a5c      	ldr	r2, [pc, #368]	; (8001088 <HAL_GPIO_Init+0x300>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b5a      	ldr	r3, [pc, #360]	; (8001088 <HAL_GPIO_Init+0x300>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2a:	4a58      	ldr	r2, [pc, #352]	; (800108c <HAL_GPIO_Init+0x304>)
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	220f      	movs	r2, #15
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <HAL_GPIO_Init+0x308>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d025      	beq.n	8000fa2 <HAL_GPIO_Init+0x21a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_GPIO_Init+0x30c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d01f      	beq.n	8000f9e <HAL_GPIO_Init+0x216>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <HAL_GPIO_Init+0x310>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x314>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x20e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x318>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x20a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4a      	ldr	r2, [pc, #296]	; (80010a4 <HAL_GPIO_Init+0x31c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x206>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a49      	ldr	r2, [pc, #292]	; (80010a8 <HAL_GPIO_Init+0x320>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x202>
 8000f86:	2306      	movs	r3, #6
 8000f88:	e00c      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	e00a      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	e008      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f92:	2304      	movs	r3, #4
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f96:	2303      	movs	r3, #3
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	f002 0203 	and.w	r2, r2, #3
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb4:	4935      	ldr	r1, [pc, #212]	; (800108c <HAL_GPIO_Init+0x304>)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc2:	4b3a      	ldr	r3, [pc, #232]	; (80010ac <HAL_GPIO_Init+0x324>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe6:	4a31      	ldr	r2, [pc, #196]	; (80010ac <HAL_GPIO_Init+0x324>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fec:	4b2f      	ldr	r3, [pc, #188]	; (80010ac <HAL_GPIO_Init+0x324>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001010:	4a26      	ldr	r2, [pc, #152]	; (80010ac <HAL_GPIO_Init+0x324>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <HAL_GPIO_Init+0x324>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <HAL_GPIO_Init+0x324>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <HAL_GPIO_Init+0x324>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001064:	4a11      	ldr	r2, [pc, #68]	; (80010ac <HAL_GPIO_Init+0x324>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3301      	adds	r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	2b0f      	cmp	r3, #15
 8001074:	f67f ae96 	bls.w	8000da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40013800 	.word	0x40013800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400
 8001098:	40020800 	.word	0x40020800
 800109c:	40020c00 	.word	0x40020c00
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40021400 	.word	0x40021400
 80010a8:	40021800 	.word	0x40021800
 80010ac:	40013c00 	.word	0x40013c00

080010b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	807b      	strh	r3, [r7, #2]
 80010bc:	4613      	mov	r3, r2
 80010be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c0:	787b      	ldrb	r3, [r7, #1]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010cc:	e003      	b.n	80010d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ce:	887b      	ldrh	r3, [r7, #2]
 80010d0:	041a      	lsls	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	619a      	str	r2, [r3, #24]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b20      	ldr	r3, [pc, #128]	; (8001174 <HAL_PWREx_EnableOverDrive+0x90>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	4a1f      	ldr	r2, [pc, #124]	; (8001174 <HAL_PWREx_EnableOverDrive+0x90>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	; 0x40
 80010fe:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <HAL_PWREx_EnableOverDrive+0x90>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800110a:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_PWREx_EnableOverDrive+0x94>)
 800110c:	2201      	movs	r2, #1
 800110e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001110:	f7ff fd4c 	bl	8000bac <HAL_GetTick>
 8001114:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001116:	e009      	b.n	800112c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001118:	f7ff fd48 	bl	8000bac <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001126:	d901      	bls.n	800112c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e01f      	b.n	800116c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_PWREx_EnableOverDrive+0x98>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001138:	d1ee      	bne.n	8001118 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_PWREx_EnableOverDrive+0x9c>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001140:	f7ff fd34 	bl	8000bac <HAL_GetTick>
 8001144:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001146:	e009      	b.n	800115c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001148:	f7ff fd30 	bl	8000bac <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001156:	d901      	bls.n	800115c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e007      	b.n	800116c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <HAL_PWREx_EnableOverDrive+0x98>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001168:	d1ee      	bne.n	8001148 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	420e0040 	.word	0x420e0040
 800117c:	40007000 	.word	0x40007000
 8001180:	420e0044 	.word	0x420e0044

08001184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0cc      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001198:	4b68      	ldr	r3, [pc, #416]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	683a      	ldr	r2, [r7, #0]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d90c      	bls.n	80011c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a6:	4b65      	ldr	r3, [pc, #404]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ae:	4b63      	ldr	r3, [pc, #396]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d001      	beq.n	80011c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0b8      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d8:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4a58      	ldr	r2, [pc, #352]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0308 	and.w	r3, r3, #8
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011f0:	4b53      	ldr	r3, [pc, #332]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4a52      	ldr	r2, [pc, #328]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011fc:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	494d      	ldr	r1, [pc, #308]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	4313      	orrs	r3, r2
 800120c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	2b00      	cmp	r3, #0
 8001218:	d044      	beq.n	80012a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d107      	bne.n	8001232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d119      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e07f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d003      	beq.n	8001242 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800123e:	2b03      	cmp	r3, #3
 8001240:	d107      	bne.n	8001252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001242:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d109      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e06f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001252:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e067      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001262:	4b37      	ldr	r3, [pc, #220]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f023 0203 	bic.w	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	4934      	ldr	r1, [pc, #208]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	4313      	orrs	r3, r2
 8001272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001274:	f7ff fc9a 	bl	8000bac <HAL_GetTick>
 8001278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127a:	e00a      	b.n	8001292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127c:	f7ff fc96 	bl	8000bac <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	f241 3288 	movw	r2, #5000	; 0x1388
 800128a:	4293      	cmp	r3, r2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e04f      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001292:	4b2b      	ldr	r3, [pc, #172]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 020c 	and.w	r2, r3, #12
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d1eb      	bne.n	800127c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d20c      	bcs.n	80012cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_RCC_ClockConfig+0x1b8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d001      	beq.n	80012cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e032      	b.n	8001332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d008      	beq.n	80012ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	4916      	ldr	r1, [pc, #88]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d009      	beq.n	800130a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	490e      	ldr	r1, [pc, #56]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	4313      	orrs	r3, r2
 8001308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800130a:	f000 f873 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 800130e:	4602      	mov	r2, r0
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	091b      	lsrs	r3, r3, #4
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	490a      	ldr	r1, [pc, #40]	; (8001344 <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	5ccb      	ldrb	r3, [r1, r3]
 800131e:	fa22 f303 	lsr.w	r3, r2, r3
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_RCC_ClockConfig+0x1c8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fb52 	bl	80009d4 <HAL_InitTick>

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023c00 	.word	0x40023c00
 8001340:	40023800 	.word	0x40023800
 8001344:	080065d4 	.word	0x080065d4
 8001348:	20000000 	.word	0x20000000
 800134c:	20000004 	.word	0x20000004

08001350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_RCC_GetHCLKFreq+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000000 	.word	0x20000000

08001368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800136c:	f7ff fff0 	bl	8001350 <HAL_RCC_GetHCLKFreq>
 8001370:	4602      	mov	r2, r0
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	0a9b      	lsrs	r3, r3, #10
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	4903      	ldr	r1, [pc, #12]	; (800138c <HAL_RCC_GetPCLK1Freq+0x24>)
 800137e:	5ccb      	ldrb	r3, [r1, r3]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001384:	4618      	mov	r0, r3
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40023800 	.word	0x40023800
 800138c:	080065e4 	.word	0x080065e4

08001390 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	220f      	movs	r2, #15
 800139e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_RCC_GetClockConfig+0x5c>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0203 	and.w	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <HAL_RCC_GetClockConfig+0x5c>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <HAL_RCC_GetClockConfig+0x5c>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_RCC_GetClockConfig+0x5c>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_RCC_GetClockConfig+0x60>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 020f 	and.w	r2, r3, #15
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	601a      	str	r2, [r3, #0]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40023c00 	.word	0x40023c00

080013f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013f8:	b088      	sub	sp, #32
 80013fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001410:	4bce      	ldr	r3, [pc, #824]	; (800174c <HAL_RCC_GetSysClockFreq+0x358>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 030c 	and.w	r3, r3, #12
 8001418:	2b0c      	cmp	r3, #12
 800141a:	f200 818d 	bhi.w	8001738 <HAL_RCC_GetSysClockFreq+0x344>
 800141e:	a201      	add	r2, pc, #4	; (adr r2, 8001424 <HAL_RCC_GetSysClockFreq+0x30>)
 8001420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001424:	08001459 	.word	0x08001459
 8001428:	08001739 	.word	0x08001739
 800142c:	08001739 	.word	0x08001739
 8001430:	08001739 	.word	0x08001739
 8001434:	0800145f 	.word	0x0800145f
 8001438:	08001739 	.word	0x08001739
 800143c:	08001739 	.word	0x08001739
 8001440:	08001739 	.word	0x08001739
 8001444:	08001465 	.word	0x08001465
 8001448:	08001739 	.word	0x08001739
 800144c:	08001739 	.word	0x08001739
 8001450:	08001739 	.word	0x08001739
 8001454:	080015d9 	.word	0x080015d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001458:	4bbd      	ldr	r3, [pc, #756]	; (8001750 <HAL_RCC_GetSysClockFreq+0x35c>)
 800145a:	61bb      	str	r3, [r7, #24]
       break;
 800145c:	e16f      	b.n	800173e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800145e:	4bbd      	ldr	r3, [pc, #756]	; (8001754 <HAL_RCC_GetSysClockFreq+0x360>)
 8001460:	61bb      	str	r3, [r7, #24]
      break;
 8001462:	e16c      	b.n	800173e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001464:	4bb9      	ldr	r3, [pc, #740]	; (800174c <HAL_RCC_GetSysClockFreq+0x358>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800146c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800146e:	4bb7      	ldr	r3, [pc, #732]	; (800174c <HAL_RCC_GetSysClockFreq+0x358>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d053      	beq.n	8001522 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800147a:	4bb4      	ldr	r3, [pc, #720]	; (800174c <HAL_RCC_GetSysClockFreq+0x358>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	099b      	lsrs	r3, r3, #6
 8001480:	461a      	mov	r2, r3
 8001482:	f04f 0300 	mov.w	r3, #0
 8001486:	f240 10ff 	movw	r0, #511	; 0x1ff
 800148a:	f04f 0100 	mov.w	r1, #0
 800148e:	ea02 0400 	and.w	r4, r2, r0
 8001492:	603c      	str	r4, [r7, #0]
 8001494:	400b      	ands	r3, r1
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	e9d7 4500 	ldrd	r4, r5, [r7]
 800149c:	4620      	mov	r0, r4
 800149e:	4629      	mov	r1, r5
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	014b      	lsls	r3, r1, #5
 80014aa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014ae:	0142      	lsls	r2, r0, #5
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	4623      	mov	r3, r4
 80014b6:	1ac0      	subs	r0, r0, r3
 80014b8:	462b      	mov	r3, r5
 80014ba:	eb61 0103 	sbc.w	r1, r1, r3
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	018b      	lsls	r3, r1, #6
 80014c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80014cc:	0182      	lsls	r2, r0, #6
 80014ce:	1a12      	subs	r2, r2, r0
 80014d0:	eb63 0301 	sbc.w	r3, r3, r1
 80014d4:	f04f 0000 	mov.w	r0, #0
 80014d8:	f04f 0100 	mov.w	r1, #0
 80014dc:	00d9      	lsls	r1, r3, #3
 80014de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014e2:	00d0      	lsls	r0, r2, #3
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4621      	mov	r1, r4
 80014ea:	1852      	adds	r2, r2, r1
 80014ec:	4629      	mov	r1, r5
 80014ee:	eb43 0101 	adc.w	r1, r3, r1
 80014f2:	460b      	mov	r3, r1
 80014f4:	f04f 0000 	mov.w	r0, #0
 80014f8:	f04f 0100 	mov.w	r1, #0
 80014fc:	0259      	lsls	r1, r3, #9
 80014fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001502:	0250      	lsls	r0, r2, #9
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	461a      	mov	r2, r3
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f7fe ff1c 	bl	8000350 <__aeabi_uldivmod>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4613      	mov	r3, r2
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	e04c      	b.n	80015bc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001522:	4b8a      	ldr	r3, [pc, #552]	; (800174c <HAL_RCC_GetSysClockFreq+0x358>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	099b      	lsrs	r3, r3, #6
 8001528:	461a      	mov	r2, r3
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001532:	f04f 0100 	mov.w	r1, #0
 8001536:	ea02 0a00 	and.w	sl, r2, r0
 800153a:	ea03 0b01 	and.w	fp, r3, r1
 800153e:	4650      	mov	r0, sl
 8001540:	4659      	mov	r1, fp
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	014b      	lsls	r3, r1, #5
 800154c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001550:	0142      	lsls	r2, r0, #5
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	ebb0 000a 	subs.w	r0, r0, sl
 800155a:	eb61 010b 	sbc.w	r1, r1, fp
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	018b      	lsls	r3, r1, #6
 8001568:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800156c:	0182      	lsls	r2, r0, #6
 800156e:	1a12      	subs	r2, r2, r0
 8001570:	eb63 0301 	sbc.w	r3, r3, r1
 8001574:	f04f 0000 	mov.w	r0, #0
 8001578:	f04f 0100 	mov.w	r1, #0
 800157c:	00d9      	lsls	r1, r3, #3
 800157e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001582:	00d0      	lsls	r0, r2, #3
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	eb12 020a 	adds.w	r2, r2, sl
 800158c:	eb43 030b 	adc.w	r3, r3, fp
 8001590:	f04f 0000 	mov.w	r0, #0
 8001594:	f04f 0100 	mov.w	r1, #0
 8001598:	0299      	lsls	r1, r3, #10
 800159a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800159e:	0290      	lsls	r0, r2, #10
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	461a      	mov	r2, r3
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	f7fe fece 	bl	8000350 <__aeabi_uldivmod>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4613      	mov	r3, r2
 80015ba:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015bc:	4b63      	ldr	r3, [pc, #396]	; (800174c <HAL_RCC_GetSysClockFreq+0x358>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	0c1b      	lsrs	r3, r3, #16
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	3301      	adds	r3, #1
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d4:	61bb      	str	r3, [r7, #24]
      break;
 80015d6:	e0b2      	b.n	800173e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015d8:	4b5c      	ldr	r3, [pc, #368]	; (800174c <HAL_RCC_GetSysClockFreq+0x358>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015e0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015e2:	4b5a      	ldr	r3, [pc, #360]	; (800174c <HAL_RCC_GetSysClockFreq+0x358>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d04d      	beq.n	800168a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ee:	4b57      	ldr	r3, [pc, #348]	; (800174c <HAL_RCC_GetSysClockFreq+0x358>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	099b      	lsrs	r3, r3, #6
 80015f4:	461a      	mov	r2, r3
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015fe:	f04f 0100 	mov.w	r1, #0
 8001602:	ea02 0800 	and.w	r8, r2, r0
 8001606:	ea03 0901 	and.w	r9, r3, r1
 800160a:	4640      	mov	r0, r8
 800160c:	4649      	mov	r1, r9
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	014b      	lsls	r3, r1, #5
 8001618:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800161c:	0142      	lsls	r2, r0, #5
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	ebb0 0008 	subs.w	r0, r0, r8
 8001626:	eb61 0109 	sbc.w	r1, r1, r9
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	018b      	lsls	r3, r1, #6
 8001634:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001638:	0182      	lsls	r2, r0, #6
 800163a:	1a12      	subs	r2, r2, r0
 800163c:	eb63 0301 	sbc.w	r3, r3, r1
 8001640:	f04f 0000 	mov.w	r0, #0
 8001644:	f04f 0100 	mov.w	r1, #0
 8001648:	00d9      	lsls	r1, r3, #3
 800164a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800164e:	00d0      	lsls	r0, r2, #3
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	eb12 0208 	adds.w	r2, r2, r8
 8001658:	eb43 0309 	adc.w	r3, r3, r9
 800165c:	f04f 0000 	mov.w	r0, #0
 8001660:	f04f 0100 	mov.w	r1, #0
 8001664:	0259      	lsls	r1, r3, #9
 8001666:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800166a:	0250      	lsls	r0, r2, #9
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	461a      	mov	r2, r3
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	f7fe fe68 	bl	8000350 <__aeabi_uldivmod>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4613      	mov	r3, r2
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	e04a      	b.n	8001720 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800168a:	4b30      	ldr	r3, [pc, #192]	; (800174c <HAL_RCC_GetSysClockFreq+0x358>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	099b      	lsrs	r3, r3, #6
 8001690:	461a      	mov	r2, r3
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	f240 10ff 	movw	r0, #511	; 0x1ff
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	ea02 0400 	and.w	r4, r2, r0
 80016a2:	ea03 0501 	and.w	r5, r3, r1
 80016a6:	4620      	mov	r0, r4
 80016a8:	4629      	mov	r1, r5
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	014b      	lsls	r3, r1, #5
 80016b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016b8:	0142      	lsls	r2, r0, #5
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	1b00      	subs	r0, r0, r4
 80016c0:	eb61 0105 	sbc.w	r1, r1, r5
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	018b      	lsls	r3, r1, #6
 80016ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016d2:	0182      	lsls	r2, r0, #6
 80016d4:	1a12      	subs	r2, r2, r0
 80016d6:	eb63 0301 	sbc.w	r3, r3, r1
 80016da:	f04f 0000 	mov.w	r0, #0
 80016de:	f04f 0100 	mov.w	r1, #0
 80016e2:	00d9      	lsls	r1, r3, #3
 80016e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016e8:	00d0      	lsls	r0, r2, #3
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	1912      	adds	r2, r2, r4
 80016f0:	eb45 0303 	adc.w	r3, r5, r3
 80016f4:	f04f 0000 	mov.w	r0, #0
 80016f8:	f04f 0100 	mov.w	r1, #0
 80016fc:	0299      	lsls	r1, r3, #10
 80016fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001702:	0290      	lsls	r0, r2, #10
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	461a      	mov	r2, r3
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	f7fe fe1c 	bl	8000350 <__aeabi_uldivmod>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4613      	mov	r3, r2
 800171e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001720:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_RCC_GetSysClockFreq+0x358>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	0f1b      	lsrs	r3, r3, #28
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	fbb2 f3f3 	udiv	r3, r2, r3
 8001734:	61bb      	str	r3, [r7, #24]
      break;
 8001736:	e002      	b.n	800173e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_RCC_GetSysClockFreq+0x35c>)
 800173a:	61bb      	str	r3, [r7, #24]
      break;
 800173c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800173e:	69bb      	ldr	r3, [r7, #24]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	00f42400 	.word	0x00f42400
 8001754:	007a1200 	.word	0x007a1200

08001758 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e28d      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 8083 	beq.w	800187e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001778:	4b94      	ldr	r3, [pc, #592]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b04      	cmp	r3, #4
 8001782:	d019      	beq.n	80017b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001784:	4b91      	ldr	r3, [pc, #580]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800178c:	2b08      	cmp	r3, #8
 800178e:	d106      	bne.n	800179e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001790:	4b8e      	ldr	r3, [pc, #568]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800179c:	d00c      	beq.n	80017b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800179e:	4b8b      	ldr	r3, [pc, #556]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017a6:	2b0c      	cmp	r3, #12
 80017a8:	d112      	bne.n	80017d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017aa:	4b88      	ldr	r3, [pc, #544]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017b6:	d10b      	bne.n	80017d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b8:	4b84      	ldr	r3, [pc, #528]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d05b      	beq.n	800187c <HAL_RCC_OscConfig+0x124>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d157      	bne.n	800187c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e25a      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d8:	d106      	bne.n	80017e8 <HAL_RCC_OscConfig+0x90>
 80017da:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a7b      	ldr	r2, [pc, #492]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80017e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e01d      	b.n	8001824 <HAL_RCC_OscConfig+0xcc>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0xb4>
 80017f2:	4b76      	ldr	r3, [pc, #472]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a75      	ldr	r2, [pc, #468]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80017f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b73      	ldr	r3, [pc, #460]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a72      	ldr	r2, [pc, #456]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 8001804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e00b      	b.n	8001824 <HAL_RCC_OscConfig+0xcc>
 800180c:	4b6f      	ldr	r3, [pc, #444]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a6e      	ldr	r2, [pc, #440]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 8001812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b6c      	ldr	r3, [pc, #432]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a6b      	ldr	r2, [pc, #428]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 800181e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d013      	beq.n	8001854 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff f9be 	bl	8000bac <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff f9ba 	bl	8000bac <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e21f      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	4b61      	ldr	r3, [pc, #388]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0xdc>
 8001852:	e014      	b.n	800187e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff f9aa 	bl	8000bac <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff f9a6 	bl	8000bac <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e20b      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	4b57      	ldr	r3, [pc, #348]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x104>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d06f      	beq.n	800196a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800188a:	4b50      	ldr	r3, [pc, #320]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b00      	cmp	r3, #0
 8001894:	d017      	beq.n	80018c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001896:	4b4d      	ldr	r3, [pc, #308]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d105      	bne.n	80018ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018a2:	4b4a      	ldr	r3, [pc, #296]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ae:	4b47      	ldr	r3, [pc, #284]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018b6:	2b0c      	cmp	r3, #12
 80018b8:	d11c      	bne.n	80018f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ba:	4b44      	ldr	r3, [pc, #272]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d116      	bne.n	80018f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c6:	4b41      	ldr	r3, [pc, #260]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d005      	beq.n	80018de <HAL_RCC_OscConfig+0x186>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d001      	beq.n	80018de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e1d3      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018de:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4937      	ldr	r1, [pc, #220]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f2:	e03a      	b.n	800196a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fc:	4b34      	ldr	r3, [pc, #208]	; (80019d0 <HAL_RCC_OscConfig+0x278>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff f953 	bl	8000bac <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff f94f 	bl	8000bac <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e1b4      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191c:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b28      	ldr	r3, [pc, #160]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4925      	ldr	r1, [pc, #148]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
 800193c:	e015      	b.n	800196a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <HAL_RCC_OscConfig+0x278>)
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff f932 	bl	8000bac <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800194c:	f7ff f92e 	bl	8000bac <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e193      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b00      	cmp	r3, #0
 8001974:	d036      	beq.n	80019e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d016      	beq.n	80019ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_RCC_OscConfig+0x27c>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff f912 	bl	8000bac <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800198c:	f7ff f90e 	bl	8000bac <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e173      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <HAL_RCC_OscConfig+0x274>)
 80019a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x234>
 80019aa:	e01b      	b.n	80019e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_RCC_OscConfig+0x27c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b2:	f7ff f8fb 	bl	8000bac <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b8:	e00e      	b.n	80019d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ba:	f7ff f8f7 	bl	8000bac <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d907      	bls.n	80019d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e15c      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
 80019cc:	40023800 	.word	0x40023800
 80019d0:	42470000 	.word	0x42470000
 80019d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d8:	4b8a      	ldr	r3, [pc, #552]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 80019da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1ea      	bne.n	80019ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8097 	beq.w	8001b20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f6:	4b83      	ldr	r3, [pc, #524]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10f      	bne.n	8001a22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	4b7f      	ldr	r3, [pc, #508]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a7e      	ldr	r2, [pc, #504]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b7c      	ldr	r3, [pc, #496]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a22:	4b79      	ldr	r3, [pc, #484]	; (8001c08 <HAL_RCC_OscConfig+0x4b0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d118      	bne.n	8001a60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2e:	4b76      	ldr	r3, [pc, #472]	; (8001c08 <HAL_RCC_OscConfig+0x4b0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a75      	ldr	r2, [pc, #468]	; (8001c08 <HAL_RCC_OscConfig+0x4b0>)
 8001a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff f8b7 	bl	8000bac <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a42:	f7ff f8b3 	bl	8000bac <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e118      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a54:	4b6c      	ldr	r3, [pc, #432]	; (8001c08 <HAL_RCC_OscConfig+0x4b0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x31e>
 8001a68:	4b66      	ldr	r3, [pc, #408]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6c:	4a65      	ldr	r2, [pc, #404]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6713      	str	r3, [r2, #112]	; 0x70
 8001a74:	e01c      	b.n	8001ab0 <HAL_RCC_OscConfig+0x358>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x340>
 8001a7e:	4b61      	ldr	r3, [pc, #388]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a82:	4a60      	ldr	r2, [pc, #384]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6713      	str	r3, [r2, #112]	; 0x70
 8001a8a:	4b5e      	ldr	r3, [pc, #376]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8e:	4a5d      	ldr	r2, [pc, #372]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6713      	str	r3, [r2, #112]	; 0x70
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x358>
 8001a98:	4b5a      	ldr	r3, [pc, #360]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9c:	4a59      	ldr	r2, [pc, #356]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001a9e:	f023 0301 	bic.w	r3, r3, #1
 8001aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa4:	4b57      	ldr	r3, [pc, #348]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	4a56      	ldr	r2, [pc, #344]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001aaa:	f023 0304 	bic.w	r3, r3, #4
 8001aae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d015      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab8:	f7ff f878 	bl	8000bac <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac0:	f7ff f874 	bl	8000bac <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e0d7      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad6:	4b4b      	ldr	r3, [pc, #300]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0ee      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x368>
 8001ae2:	e014      	b.n	8001b0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f862 	bl	8000bac <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aec:	f7ff f85e 	bl	8000bac <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0c1      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b02:	4b40      	ldr	r3, [pc, #256]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1ee      	bne.n	8001aec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b0e:	7dfb      	ldrb	r3, [r7, #23]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d105      	bne.n	8001b20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b14:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	4a3a      	ldr	r2, [pc, #232]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80ad 	beq.w	8001c84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b2a:	4b36      	ldr	r3, [pc, #216]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d060      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d145      	bne.n	8001bca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3e:	4b33      	ldr	r3, [pc, #204]	; (8001c0c <HAL_RCC_OscConfig+0x4b4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7ff f832 	bl	8000bac <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7ff f82e 	bl	8000bac <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e093      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5e:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69da      	ldr	r2, [r3, #28]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	019b      	lsls	r3, r3, #6
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	085b      	lsrs	r3, r3, #1
 8001b82:	3b01      	subs	r3, #1
 8001b84:	041b      	lsls	r3, r3, #16
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	061b      	lsls	r3, r3, #24
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	071b      	lsls	r3, r3, #28
 8001b96:	491b      	ldr	r1, [pc, #108]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_RCC_OscConfig+0x4b4>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f803 	bl	8000bac <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001baa:	f7fe ffff 	bl	8000bac <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e064      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0f0      	beq.n	8001baa <HAL_RCC_OscConfig+0x452>
 8001bc8:	e05c      	b.n	8001c84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_RCC_OscConfig+0x4b4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7fe ffec 	bl	8000bac <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7fe ffe8 	bl	8000bac <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e04d      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x480>
 8001bf6:	e045      	b.n	8001c84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e040      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40007000 	.word	0x40007000
 8001c0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c10:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <HAL_RCC_OscConfig+0x538>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d030      	beq.n	8001c80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d129      	bne.n	8001c80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d122      	bne.n	8001c80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c40:	4013      	ands	r3, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d119      	bne.n	8001c80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	085b      	lsrs	r3, r3, #1
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d10f      	bne.n	8001c80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d107      	bne.n	8001c80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800

08001c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e041      	b.n	8001d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d106      	bne.n	8001cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 f839 	bl	8001d32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f000 f9d8 	bl	8002088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d001      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e04e      	b.n	8001dfe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <HAL_TIM_Base_Start_IT+0xc4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d022      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x80>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8a:	d01d      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x80>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d018      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x80>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1e      	ldr	r2, [pc, #120]	; (8001e14 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d013      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x80>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <HAL_TIM_Base_Start_IT+0xd0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00e      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x80>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <HAL_TIM_Base_Start_IT+0xd4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x80>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x80>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a18      	ldr	r2, [pc, #96]	; (8001e24 <HAL_TIM_Base_Start_IT+0xdc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d111      	bne.n	8001dec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b06      	cmp	r3, #6
 8001dd8:	d010      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f042 0201 	orr.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dea:	e007      	b.n	8001dfc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40010000 	.word	0x40010000
 8001e10:	40000400 	.word	0x40000400
 8001e14:	40000800 	.word	0x40000800
 8001e18:	40000c00 	.word	0x40000c00
 8001e1c:	40010400 	.word	0x40010400
 8001e20:	40014000 	.word	0x40014000
 8001e24:	40001800 	.word	0x40001800

08001e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d122      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d11b      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0202 	mvn.w	r2, #2
 8001e54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f8ee 	bl	800204c <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8e0 	bl	8002038 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f8f1 	bl	8002060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d122      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0204 	mvn.w	r2, #4
 8001ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2202      	movs	r2, #2
 8001eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f8c4 	bl	800204c <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8b6 	bl	8002038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f8c7 	bl	8002060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d122      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d11b      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0208 	mvn.w	r2, #8
 8001efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2204      	movs	r2, #4
 8001f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f89a 	bl	800204c <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f88c 	bl	8002038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f89d 	bl	8002060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b10      	cmp	r3, #16
 8001f38:	d122      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b10      	cmp	r3, #16
 8001f46:	d11b      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0210 	mvn.w	r2, #16
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2208      	movs	r2, #8
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f870 	bl	800204c <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f862 	bl	8002038 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f873 	bl	8002060 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d10e      	bne.n	8001fac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d107      	bne.n	8001fac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0201 	mvn.w	r2, #1
 8001fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7fe fcd4 	bl	8000954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb6:	2b80      	cmp	r3, #128	; 0x80
 8001fb8:	d10e      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	2b80      	cmp	r3, #128	; 0x80
 8001fc6:	d107      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f902 	bl	80021dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe2:	2b40      	cmp	r3, #64	; 0x40
 8001fe4:	d10e      	bne.n	8002004 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff0:	2b40      	cmp	r3, #64	; 0x40
 8001ff2:	d107      	bne.n	8002004 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f838 	bl	8002074 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b20      	cmp	r3, #32
 8002010:	d10e      	bne.n	8002030 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b20      	cmp	r3, #32
 800201e:	d107      	bne.n	8002030 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f06f 0220 	mvn.w	r2, #32
 8002028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f8cc 	bl	80021c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a40      	ldr	r2, [pc, #256]	; (800219c <TIM_Base_SetConfig+0x114>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d013      	beq.n	80020c8 <TIM_Base_SetConfig+0x40>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a6:	d00f      	beq.n	80020c8 <TIM_Base_SetConfig+0x40>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a3d      	ldr	r2, [pc, #244]	; (80021a0 <TIM_Base_SetConfig+0x118>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00b      	beq.n	80020c8 <TIM_Base_SetConfig+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a3c      	ldr	r2, [pc, #240]	; (80021a4 <TIM_Base_SetConfig+0x11c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d007      	beq.n	80020c8 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3b      	ldr	r2, [pc, #236]	; (80021a8 <TIM_Base_SetConfig+0x120>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d003      	beq.n	80020c8 <TIM_Base_SetConfig+0x40>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a3a      	ldr	r2, [pc, #232]	; (80021ac <TIM_Base_SetConfig+0x124>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d108      	bne.n	80020da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a2f      	ldr	r2, [pc, #188]	; (800219c <TIM_Base_SetConfig+0x114>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d02b      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e8:	d027      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a2c      	ldr	r2, [pc, #176]	; (80021a0 <TIM_Base_SetConfig+0x118>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d023      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a2b      	ldr	r2, [pc, #172]	; (80021a4 <TIM_Base_SetConfig+0x11c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d01f      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a2a      	ldr	r2, [pc, #168]	; (80021a8 <TIM_Base_SetConfig+0x120>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01b      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a29      	ldr	r2, [pc, #164]	; (80021ac <TIM_Base_SetConfig+0x124>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d017      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a28      	ldr	r2, [pc, #160]	; (80021b0 <TIM_Base_SetConfig+0x128>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <TIM_Base_SetConfig+0x12c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00f      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <TIM_Base_SetConfig+0x130>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00b      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a25      	ldr	r2, [pc, #148]	; (80021bc <TIM_Base_SetConfig+0x134>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d007      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a24      	ldr	r2, [pc, #144]	; (80021c0 <TIM_Base_SetConfig+0x138>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d003      	beq.n	800213a <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <TIM_Base_SetConfig+0x13c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d108      	bne.n	800214c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	4313      	orrs	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	4313      	orrs	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a0a      	ldr	r2, [pc, #40]	; (800219c <TIM_Base_SetConfig+0x114>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d003      	beq.n	8002180 <TIM_Base_SetConfig+0xf8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a0c      	ldr	r2, [pc, #48]	; (80021ac <TIM_Base_SetConfig+0x124>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d103      	bne.n	8002188 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	615a      	str	r2, [r3, #20]
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40010000 	.word	0x40010000
 80021a0:	40000400 	.word	0x40000400
 80021a4:	40000800 	.word	0x40000800
 80021a8:	40000c00 	.word	0x40000c00
 80021ac:	40010400 	.word	0x40010400
 80021b0:	40014000 	.word	0x40014000
 80021b4:	40014400 	.word	0x40014400
 80021b8:	40014800 	.word	0x40014800
 80021bc:	40001800 	.word	0x40001800
 80021c0:	40001c00 	.word	0x40001c00
 80021c4:	40002000 	.word	0x40002000

080021c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f103 0208 	add.w	r2, r3, #8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f103 0208 	add.w	r2, r3, #8
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f103 0208 	add.w	r2, r3, #8
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800224a:	b480      	push	{r7}
 800224c:	b085      	sub	sp, #20
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6892      	ldr	r2, [r2, #8]
 8002260:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6852      	ldr	r2, [r2, #4]
 800226a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	429a      	cmp	r2, r3
 8002274:	d103      	bne.n	800227e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	1e5a      	subs	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800229e:	b580      	push	{r7, lr}
 80022a0:	b08c      	sub	sp, #48	; 0x30
 80022a2:	af04      	add	r7, sp, #16
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	4613      	mov	r3, r2
 80022ac:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 ffd2 	bl	800325c <pvPortMalloc>
 80022b8:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80022c0:	2058      	movs	r0, #88	; 0x58
 80022c2:	f000 ffcb 	bl	800325c <pvPortMalloc>
 80022c6:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
 80022d4:	e005      	b.n	80022e2 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f001 f8a0 	bl	800341c <vPortFree>
 80022dc:	e001      	b.n	80022e2 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022e8:	88fa      	ldrh	r2, [r7, #6]
 80022ea:	2300      	movs	r3, #0
 80022ec:	9303      	str	r3, [sp, #12]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	9302      	str	r3, [sp, #8]
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f80e 	bl	8002320 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002304:	69f8      	ldr	r0, [r7, #28]
 8002306:	f000 f8af 	bl	8002468 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800230a:	2301      	movs	r3, #1
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	e002      	b.n	8002316 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
 8002314:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002316:	69bb      	ldr	r3, [r7, #24]
    }
 8002318:	4618      	mov	r0, r3
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002330:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	461a      	mov	r2, r3
 8002338:	21a5      	movs	r1, #165	; 0xa5
 800233a:	f003 fc6d 	bl	8005c18 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800233e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002348:	3b01      	subs	r3, #1
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	f023 0307 	bic.w	r3, r3, #7
 8002356:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002366:	f383 8811 	msr	BASEPRI, r3
 800236a:	f3bf 8f6f 	isb	sy
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	617b      	str	r3, [r7, #20]
    }
 8002374:	bf00      	nop
 8002376:	e7fe      	b.n	8002376 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d01f      	beq.n	80023be <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	e012      	b.n	80023aa <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	4413      	add	r3, r2
 800238a:	7819      	ldrb	r1, [r3, #0]
 800238c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	4413      	add	r3, r2
 8002392:	3334      	adds	r3, #52	; 0x34
 8002394:	460a      	mov	r2, r1
 8002396:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	4413      	add	r3, r2
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	3301      	adds	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	2b09      	cmp	r3, #9
 80023ae:	d9e9      	bls.n	8002384 <prvInitialiseNewTask+0x64>
 80023b0:	e000      	b.n	80023b4 <prvInitialiseNewTask+0x94>
            {
                break;
 80023b2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80023bc:	e003      	b.n	80023c6 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d90a      	bls.n	80023e2 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80023cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d0:	f383 8811 	msr	BASEPRI, r3
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	613b      	str	r3, [r7, #16]
    }
 80023de:	bf00      	nop
 80023e0:	e7fe      	b.n	80023e0 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d901      	bls.n	80023ec <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023e8:	2304      	movs	r3, #4
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80023ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023f6:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	2200      	movs	r2, #0
 80023fc:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	3304      	adds	r3, #4
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff14 	bl	8002230 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	3318      	adds	r3, #24
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff0f 	bl	8002230 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002416:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241a:	f1c3 0205 	rsb	r2, r3, #5
 800241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002420:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002426:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	3350      	adds	r3, #80	; 0x50
 800242c:	2204      	movs	r2, #4
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f003 fbf1 	bl	8005c18 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	3354      	adds	r3, #84	; 0x54
 800243a:	2201      	movs	r2, #1
 800243c:	2100      	movs	r1, #0
 800243e:	4618      	mov	r0, r3
 8002440:	f003 fbea 	bl	8005c18 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	68f9      	ldr	r1, [r7, #12]
 8002448:	69b8      	ldr	r0, [r7, #24]
 800244a:	f000 fc2f 	bl	8002cac <pxPortInitialiseStack>
 800244e:	4602      	mov	r2, r0
 8002450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002452:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002460:	bf00      	nop
 8002462:	3720      	adds	r7, #32
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af02      	add	r7, sp, #8
 800246e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002470:	f000 fdc8 	bl	8003004 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002474:	4b49      	ldr	r3, [pc, #292]	; (800259c <prvAddNewTaskToReadyList+0x134>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3301      	adds	r3, #1
 800247a:	4a48      	ldr	r2, [pc, #288]	; (800259c <prvAddNewTaskToReadyList+0x134>)
 800247c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800247e:	4b48      	ldr	r3, [pc, #288]	; (80025a0 <prvAddNewTaskToReadyList+0x138>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002486:	4a46      	ldr	r2, [pc, #280]	; (80025a0 <prvAddNewTaskToReadyList+0x138>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800248c:	4b43      	ldr	r3, [pc, #268]	; (800259c <prvAddNewTaskToReadyList+0x134>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d110      	bne.n	80024b6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002494:	f000 fb70 	bl	8002b78 <prvInitialiseTaskLists>
 8002498:	e00d      	b.n	80024b6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800249a:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <prvAddNewTaskToReadyList+0x13c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024a2:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <prvAddNewTaskToReadyList+0x138>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d802      	bhi.n	80024b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80024b0:	4a3b      	ldr	r2, [pc, #236]	; (80025a0 <prvAddNewTaskToReadyList+0x138>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80024b6:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <prvAddNewTaskToReadyList+0x140>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	3301      	adds	r3, #1
 80024bc:	4a3a      	ldr	r2, [pc, #232]	; (80025a8 <prvAddNewTaskToReadyList+0x140>)
 80024be:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80024c0:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <prvAddNewTaskToReadyList+0x140>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d016      	beq.n	80024fc <prvAddNewTaskToReadyList+0x94>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f003 f921 	bl	8005718 <SEGGER_SYSVIEW_OnTaskCreate>
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	461d      	mov	r5, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	461c      	mov	r4, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	1ae3      	subs	r3, r4, r3
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	462b      	mov	r3, r5
 80024f8:	f001 f956 	bl	80037a8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 f98e 	bl	8005820 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	2201      	movs	r2, #1
 800250a:	409a      	lsls	r2, r3
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <prvAddNewTaskToReadyList+0x144>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4313      	orrs	r3, r2
 8002512:	4a26      	ldr	r2, [pc, #152]	; (80025ac <prvAddNewTaskToReadyList+0x144>)
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800251a:	4925      	ldr	r1, [pc, #148]	; (80025b0 <prvAddNewTaskToReadyList+0x148>)
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	3304      	adds	r3, #4
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	3204      	adds	r2, #4
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	1d1a      	adds	r2, r3, #4
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4a15      	ldr	r2, [pc, #84]	; (80025b0 <prvAddNewTaskToReadyList+0x148>)
 800255a:	441a      	add	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	615a      	str	r2, [r3, #20]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002564:	4912      	ldr	r1, [pc, #72]	; (80025b0 <prvAddNewTaskToReadyList+0x148>)
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	1c59      	adds	r1, r3, #1
 8002574:	480e      	ldr	r0, [pc, #56]	; (80025b0 <prvAddNewTaskToReadyList+0x148>)
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4403      	add	r3, r0
 8002580:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002582:	f000 fd6f 	bl	8003064 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <prvAddNewTaskToReadyList+0x13c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800258e:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <prvAddNewTaskToReadyList+0x138>)
 8002590:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bdb0      	pop	{r4, r5, r7, pc}
 800259a:	bf00      	nop
 800259c:	20000174 	.word	0x20000174
 80025a0:	2000009c 	.word	0x2000009c
 80025a4:	20000180 	.word	0x20000180
 80025a8:	20000190 	.word	0x20000190
 80025ac:	2000017c 	.word	0x2000017c
 80025b0:	200000a0 	.word	0x200000a0

080025b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80025ba:	4b24      	ldr	r3, [pc, #144]	; (800264c <vTaskStartScheduler+0x98>)
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	2300      	movs	r3, #0
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2300      	movs	r3, #0
 80025c4:	2282      	movs	r2, #130	; 0x82
 80025c6:	4922      	ldr	r1, [pc, #136]	; (8002650 <vTaskStartScheduler+0x9c>)
 80025c8:	4822      	ldr	r0, [pc, #136]	; (8002654 <vTaskStartScheduler+0xa0>)
 80025ca:	f7ff fe68 	bl	800229e <xTaskCreate>
 80025ce:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d124      	bne.n	8002620 <vTaskStartScheduler+0x6c>
        __asm volatile
 80025d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025da:	f383 8811 	msr	BASEPRI, r3
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f3bf 8f4f 	dsb	sy
 80025e6:	60bb      	str	r3, [r7, #8]
    }
 80025e8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <vTaskStartScheduler+0xa4>)
 80025ec:	f04f 32ff 	mov.w	r2, #4294967295
 80025f0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <vTaskStartScheduler+0xa8>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <vTaskStartScheduler+0xac>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <vTaskStartScheduler+0xb0>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <vTaskStartScheduler+0x98>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d102      	bne.n	8002610 <vTaskStartScheduler+0x5c>
 800260a:	f003 f869 	bl	80056e0 <SEGGER_SYSVIEW_OnIdle>
 800260e:	e004      	b.n	800261a <vTaskStartScheduler+0x66>
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <vTaskStartScheduler+0xb0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f003 f8c1 	bl	800579c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800261a:	f000 fbd3 	bl	8002dc4 <xPortStartScheduler>
 800261e:	e00e      	b.n	800263e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002626:	d10a      	bne.n	800263e <vTaskStartScheduler+0x8a>
        __asm volatile
 8002628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262c:	f383 8811 	msr	BASEPRI, r3
 8002630:	f3bf 8f6f 	isb	sy
 8002634:	f3bf 8f4f 	dsb	sy
 8002638:	607b      	str	r3, [r7, #4]
    }
 800263a:	bf00      	nop
 800263c:	e7fe      	b.n	800263c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <vTaskStartScheduler+0xb4>)
 8002640:	681b      	ldr	r3, [r3, #0]
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20000198 	.word	0x20000198
 8002650:	08006508 	.word	0x08006508
 8002654:	08002b55 	.word	0x08002b55
 8002658:	20000194 	.word	0x20000194
 800265c:	20000180 	.word	0x20000180
 8002660:	20000178 	.word	0x20000178
 8002664:	2000009c 	.word	0x2000009c
 8002668:	2000000c 	.word	0x2000000c

0800266c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002670:	4b04      	ldr	r3, [pc, #16]	; (8002684 <vTaskSuspendAll+0x18>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	4a03      	ldr	r2, [pc, #12]	; (8002684 <vTaskSuspendAll+0x18>)
 8002678:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	2000019c 	.word	0x2000019c

08002688 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002696:	4b6d      	ldr	r3, [pc, #436]	; (800284c <xTaskResumeAll+0x1c4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10a      	bne.n	80026b4 <xTaskResumeAll+0x2c>
        __asm volatile
 800269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	607b      	str	r3, [r7, #4]
    }
 80026b0:	bf00      	nop
 80026b2:	e7fe      	b.n	80026b2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80026b4:	f000 fca6 	bl	8003004 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80026b8:	4b64      	ldr	r3, [pc, #400]	; (800284c <xTaskResumeAll+0x1c4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3b01      	subs	r3, #1
 80026be:	4a63      	ldr	r2, [pc, #396]	; (800284c <xTaskResumeAll+0x1c4>)
 80026c0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026c2:	4b62      	ldr	r3, [pc, #392]	; (800284c <xTaskResumeAll+0x1c4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f040 80b8 	bne.w	800283c <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026cc:	4b60      	ldr	r3, [pc, #384]	; (8002850 <xTaskResumeAll+0x1c8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80b3 	beq.w	800283c <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026d6:	e08e      	b.n	80027f6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026d8:	4b5e      	ldr	r3, [pc, #376]	; (8002854 <xTaskResumeAll+0x1cc>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	6a12      	ldr	r2, [r2, #32]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	69d2      	ldr	r2, [r2, #28]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3318      	adds	r3, #24
 8002702:	429a      	cmp	r2, r3
 8002704:	d103      	bne.n	800270e <xTaskResumeAll+0x86>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	6a1a      	ldr	r2, [r3, #32]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	2200      	movs	r2, #0
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	68d2      	ldr	r2, [r2, #12]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	6892      	ldr	r2, [r2, #8]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	3304      	adds	r3, #4
 8002740:	429a      	cmp	r2, r3
 8002742:	d103      	bne.n	800274c <xTaskResumeAll+0xc4>
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	605a      	str	r2, [r3, #4]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2200      	movs	r2, #0
 8002750:	615a      	str	r2, [r3, #20]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	1e5a      	subs	r2, r3, #1
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	4618      	mov	r0, r3
 8002760:	f003 f85e 	bl	8005820 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002768:	2201      	movs	r2, #1
 800276a:	409a      	lsls	r2, r3
 800276c:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <xTaskResumeAll+0x1d0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4313      	orrs	r3, r2
 8002772:	4a39      	ldr	r2, [pc, #228]	; (8002858 <xTaskResumeAll+0x1d0>)
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277a:	4938      	ldr	r1, [pc, #224]	; (800285c <xTaskResumeAll+0x1d4>)
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	3304      	adds	r3, #4
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	3204      	adds	r2, #4
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	1d1a      	adds	r2, r3, #4
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4a28      	ldr	r2, [pc, #160]	; (800285c <xTaskResumeAll+0x1d4>)
 80027ba:	441a      	add	r2, r3
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	615a      	str	r2, [r3, #20]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c4:	4925      	ldr	r1, [pc, #148]	; (800285c <xTaskResumeAll+0x1d4>)
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	1c59      	adds	r1, r3, #1
 80027d4:	4821      	ldr	r0, [pc, #132]	; (800285c <xTaskResumeAll+0x1d4>)
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4403      	add	r3, r0
 80027e0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <xTaskResumeAll+0x1d8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d302      	bcc.n	80027f6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80027f0:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <xTaskResumeAll+0x1dc>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <xTaskResumeAll+0x1cc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f47f af6c 	bne.w	80026d8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002806:	f000 fa35 	bl	8002c74 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <xTaskResumeAll+0x1e0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002816:	f000 f83b 	bl	8002890 <xTaskIncrementTick>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002820:	4b10      	ldr	r3, [pc, #64]	; (8002864 <xTaskResumeAll+0x1dc>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	3b01      	subs	r3, #1
 800282a:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f1      	bne.n	8002816 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <xTaskResumeAll+0x1e0>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <xTaskResumeAll+0x1dc>)
 800283a:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800283c:	f000 fc12 	bl	8003064 <vPortExitCritical>

    return xAlreadyYielded;
 8002840:	697b      	ldr	r3, [r7, #20]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	2000019c 	.word	0x2000019c
 8002850:	20000174 	.word	0x20000174
 8002854:	20000134 	.word	0x20000134
 8002858:	2000017c 	.word	0x2000017c
 800285c:	200000a0 	.word	0x200000a0
 8002860:	2000009c 	.word	0x2000009c
 8002864:	20000188 	.word	0x20000188
 8002868:	20000184 	.word	0x20000184

0800286c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002872:	f000 fcb3 	bl	80031dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800287a:	4b04      	ldr	r3, [pc, #16]	; (800288c <xTaskGetTickCountFromISR+0x20>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002880:	683b      	ldr	r3, [r7, #0]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000178 	.word	0x20000178

08002890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800289a:	4b70      	ldr	r3, [pc, #448]	; (8002a5c <xTaskIncrementTick+0x1cc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 80d1 	bne.w	8002a46 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028a4:	4b6e      	ldr	r3, [pc, #440]	; (8002a60 <xTaskIncrementTick+0x1d0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3301      	adds	r3, #1
 80028aa:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80028ac:	4a6c      	ldr	r2, [pc, #432]	; (8002a60 <xTaskIncrementTick+0x1d0>)
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d120      	bne.n	80028fa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80028b8:	4b6a      	ldr	r3, [pc, #424]	; (8002a64 <xTaskIncrementTick+0x1d4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <xTaskIncrementTick+0x48>
        __asm volatile
 80028c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	607b      	str	r3, [r7, #4]
    }
 80028d4:	bf00      	nop
 80028d6:	e7fe      	b.n	80028d6 <xTaskIncrementTick+0x46>
 80028d8:	4b62      	ldr	r3, [pc, #392]	; (8002a64 <xTaskIncrementTick+0x1d4>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	4b62      	ldr	r3, [pc, #392]	; (8002a68 <xTaskIncrementTick+0x1d8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a60      	ldr	r2, [pc, #384]	; (8002a64 <xTaskIncrementTick+0x1d4>)
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4a60      	ldr	r2, [pc, #384]	; (8002a68 <xTaskIncrementTick+0x1d8>)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b5f      	ldr	r3, [pc, #380]	; (8002a6c <xTaskIncrementTick+0x1dc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	4a5e      	ldr	r2, [pc, #376]	; (8002a6c <xTaskIncrementTick+0x1dc>)
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	f000 f9bd 	bl	8002c74 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80028fa:	4b5d      	ldr	r3, [pc, #372]	; (8002a70 <xTaskIncrementTick+0x1e0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6a3a      	ldr	r2, [r7, #32]
 8002900:	429a      	cmp	r2, r3
 8002902:	f0c0 80a5 	bcc.w	8002a50 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002906:	4b57      	ldr	r3, [pc, #348]	; (8002a64 <xTaskIncrementTick+0x1d4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d104      	bne.n	800291a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002910:	4b57      	ldr	r3, [pc, #348]	; (8002a70 <xTaskIncrementTick+0x1e0>)
 8002912:	f04f 32ff 	mov.w	r2, #4294967295
 8002916:	601a      	str	r2, [r3, #0]
                    break;
 8002918:	e09a      	b.n	8002a50 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800291a:	4b52      	ldr	r3, [pc, #328]	; (8002a64 <xTaskIncrementTick+0x1d4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800292a:	6a3a      	ldr	r2, [r7, #32]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	429a      	cmp	r2, r3
 8002930:	d203      	bcs.n	800293a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002932:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <xTaskIncrementTick+0x1e0>)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002938:	e08a      	b.n	8002a50 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	68d2      	ldr	r2, [r2, #12]
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	6892      	ldr	r2, [r2, #8]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	3304      	adds	r3, #4
 800295c:	429a      	cmp	r2, r3
 800295e:	d103      	bne.n	8002968 <xTaskIncrementTick+0xd8>
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2200      	movs	r2, #0
 800296c:	615a      	str	r2, [r3, #20]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	1e5a      	subs	r2, r3, #1
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01e      	beq.n	80029be <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	6a12      	ldr	r2, [r2, #32]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	69d2      	ldr	r2, [r2, #28]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	3318      	adds	r3, #24
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d103      	bne.n	80029ae <xTaskIncrementTick+0x11e>
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	6a1a      	ldr	r2, [r3, #32]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2200      	movs	r2, #0
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	1e5a      	subs	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f002 ff2d 	bl	8005820 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	2201      	movs	r2, #1
 80029cc:	409a      	lsls	r2, r3
 80029ce:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <xTaskIncrementTick+0x1e4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	4a27      	ldr	r2, [pc, #156]	; (8002a74 <xTaskIncrementTick+0x1e4>)
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029dc:	4926      	ldr	r1, [pc, #152]	; (8002a78 <xTaskIncrementTick+0x1e8>)
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	3304      	adds	r3, #4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	3204      	adds	r2, #4
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	1d1a      	adds	r2, r3, #4
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <xTaskIncrementTick+0x1e8>)
 8002a1c:	441a      	add	r2, r3
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	615a      	str	r2, [r3, #20]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a26:	4914      	ldr	r1, [pc, #80]	; (8002a78 <xTaskIncrementTick+0x1e8>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	1c59      	adds	r1, r3, #1
 8002a36:	4810      	ldr	r0, [pc, #64]	; (8002a78 <xTaskIncrementTick+0x1e8>)
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4403      	add	r3, r0
 8002a42:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a44:	e75f      	b.n	8002906 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <xTaskIncrementTick+0x1ec>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	4a0b      	ldr	r2, [pc, #44]	; (8002a7c <xTaskIncrementTick+0x1ec>)
 8002a4e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3728      	adds	r7, #40	; 0x28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	2000019c 	.word	0x2000019c
 8002a60:	20000178 	.word	0x20000178
 8002a64:	2000012c 	.word	0x2000012c
 8002a68:	20000130 	.word	0x20000130
 8002a6c:	2000018c 	.word	0x2000018c
 8002a70:	20000194 	.word	0x20000194
 8002a74:	2000017c 	.word	0x2000017c
 8002a78:	200000a0 	.word	0x200000a0
 8002a7c:	20000184 	.word	0x20000184

08002a80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a86:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <vTaskSwitchContext+0xbc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002a8e:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <vTaskSwitchContext+0xc0>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002a94:	e04d      	b.n	8002b32 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002a96:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <vTaskSwitchContext+0xc0>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a9c:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <vTaskSwitchContext+0xc4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	f1c3 031f 	rsb	r3, r3, #31
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	4925      	ldr	r1, [pc, #148]	; (8002b48 <vTaskSwitchContext+0xc8>)
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10a      	bne.n	8002adc <vTaskSwitchContext+0x5c>
        __asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	607b      	str	r3, [r7, #4]
    }
 8002ad8:	bf00      	nop
 8002ada:	e7fe      	b.n	8002ada <vTaskSwitchContext+0x5a>
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4a18      	ldr	r2, [pc, #96]	; (8002b48 <vTaskSwitchContext+0xc8>)
 8002ae8:	4413      	add	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	3308      	adds	r3, #8
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d104      	bne.n	8002b0c <vTaskSwitchContext+0x8c>
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	4a0e      	ldr	r2, [pc, #56]	; (8002b4c <vTaskSwitchContext+0xcc>)
 8002b14:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <vTaskSwitchContext+0xcc>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <vTaskSwitchContext+0xd0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d102      	bne.n	8002b28 <vTaskSwitchContext+0xa8>
 8002b22:	f002 fddd 	bl	80056e0 <SEGGER_SYSVIEW_OnIdle>
}
 8002b26:	e004      	b.n	8002b32 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <vTaskSwitchContext+0xcc>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f002 fe35 	bl	800579c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	2000019c 	.word	0x2000019c
 8002b40:	20000188 	.word	0x20000188
 8002b44:	2000017c 	.word	0x2000017c
 8002b48:	200000a0 	.word	0x200000a0
 8002b4c:	2000009c 	.word	0x2000009c
 8002b50:	20000198 	.word	0x20000198

08002b54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b5c:	f000 f84c 	bl	8002bf8 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002b60:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <prvIdleTask+0x20>)
 8002b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002b70:	e7f4      	b.n	8002b5c <prvIdleTask+0x8>
 8002b72:	bf00      	nop
 8002b74:	e000ed04 	.word	0xe000ed04

08002b78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
 8002b82:	e00c      	b.n	8002b9e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <prvInitialiseTaskLists+0x60>)
 8002b90:	4413      	add	r3, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fb2c 	bl	80021f0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d9ef      	bls.n	8002b84 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002ba4:	480d      	ldr	r0, [pc, #52]	; (8002bdc <prvInitialiseTaskLists+0x64>)
 8002ba6:	f7ff fb23 	bl	80021f0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002baa:	480d      	ldr	r0, [pc, #52]	; (8002be0 <prvInitialiseTaskLists+0x68>)
 8002bac:	f7ff fb20 	bl	80021f0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002bb0:	480c      	ldr	r0, [pc, #48]	; (8002be4 <prvInitialiseTaskLists+0x6c>)
 8002bb2:	f7ff fb1d 	bl	80021f0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002bb6:	480c      	ldr	r0, [pc, #48]	; (8002be8 <prvInitialiseTaskLists+0x70>)
 8002bb8:	f7ff fb1a 	bl	80021f0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002bbc:	480b      	ldr	r0, [pc, #44]	; (8002bec <prvInitialiseTaskLists+0x74>)
 8002bbe:	f7ff fb17 	bl	80021f0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <prvInitialiseTaskLists+0x78>)
 8002bc4:	4a05      	ldr	r2, [pc, #20]	; (8002bdc <prvInitialiseTaskLists+0x64>)
 8002bc6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <prvInitialiseTaskLists+0x7c>)
 8002bca:	4a05      	ldr	r2, [pc, #20]	; (8002be0 <prvInitialiseTaskLists+0x68>)
 8002bcc:	601a      	str	r2, [r3, #0]
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	200000a0 	.word	0x200000a0
 8002bdc:	20000104 	.word	0x20000104
 8002be0:	20000118 	.word	0x20000118
 8002be4:	20000134 	.word	0x20000134
 8002be8:	20000148 	.word	0x20000148
 8002bec:	20000160 	.word	0x20000160
 8002bf0:	2000012c 	.word	0x2000012c
 8002bf4:	20000130 	.word	0x20000130

08002bf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bfe:	e019      	b.n	8002c34 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002c00:	f000 fa00 	bl	8003004 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c04:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <prvCheckTasksWaitingTermination+0x50>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fb1a 	bl	800224a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <prvCheckTasksWaitingTermination+0x54>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	4a0b      	ldr	r2, [pc, #44]	; (8002c4c <prvCheckTasksWaitingTermination+0x54>)
 8002c1e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <prvCheckTasksWaitingTermination+0x58>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <prvCheckTasksWaitingTermination+0x58>)
 8002c28:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002c2a:	f000 fa1b 	bl	8003064 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f810 	bl	8002c54 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <prvCheckTasksWaitingTermination+0x58>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e1      	bne.n	8002c00 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000148 	.word	0x20000148
 8002c4c:	20000174 	.word	0x20000174
 8002c50:	2000015c 	.word	0x2000015c

08002c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 fbdb 	bl	800341c <vPortFree>
                vPortFree( pxTCB );
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fbd8 	bl	800341c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <prvResetNextTaskUnblockTime+0x30>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d104      	bne.n	8002c8c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <prvResetNextTaskUnblockTime+0x34>)
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295
 8002c88:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002c8a:	e005      	b.n	8002c98 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <prvResetNextTaskUnblockTime+0x30>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <prvResetNextTaskUnblockTime+0x34>)
 8002c96:	6013      	str	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	2000012c 	.word	0x2000012c
 8002ca8:	20000194 	.word	0x20000194

08002cac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	3b04      	subs	r3, #4
 8002cbc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3b04      	subs	r3, #4
 8002cca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f023 0201 	bic.w	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3b04      	subs	r3, #4
 8002cda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002cdc:	4a0c      	ldr	r2, [pc, #48]	; (8002d10 <pxPortInitialiseStack+0x64>)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	3b14      	subs	r3, #20
 8002ce6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3b04      	subs	r3, #4
 8002cf2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f06f 0202 	mvn.w	r2, #2
 8002cfa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3b20      	subs	r3, #32
 8002d00:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002d02:	68fb      	ldr	r3, [r7, #12]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	08002d15 	.word	0x08002d15

08002d14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <prvTaskExitError+0x54>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d26:	d00a      	beq.n	8002d3e <prvTaskExitError+0x2a>
        __asm volatile
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	60fb      	str	r3, [r7, #12]
    }
 8002d3a:	bf00      	nop
 8002d3c:	e7fe      	b.n	8002d3c <prvTaskExitError+0x28>
        __asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	60bb      	str	r3, [r7, #8]
    }
 8002d50:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d52:	bf00      	nop
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0fc      	beq.n	8002d54 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	20000010 	.word	0x20000010
 8002d6c:	00000000 	.word	0x00000000

08002d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002d70:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <pxCurrentTCBConst2>)
 8002d72:	6819      	ldr	r1, [r3, #0]
 8002d74:	6808      	ldr	r0, [r1, #0]
 8002d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d7a:	f380 8809 	msr	PSP, r0
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f04f 0000 	mov.w	r0, #0
 8002d86:	f380 8811 	msr	BASEPRI, r0
 8002d8a:	4770      	bx	lr
 8002d8c:	f3af 8000 	nop.w

08002d90 <pxCurrentTCBConst2>:
 8002d90:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop

08002d98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002d98:	4808      	ldr	r0, [pc, #32]	; (8002dbc <prvPortStartFirstTask+0x24>)
 8002d9a:	6800      	ldr	r0, [r0, #0]
 8002d9c:	6800      	ldr	r0, [r0, #0]
 8002d9e:	f380 8808 	msr	MSP, r0
 8002da2:	f04f 0000 	mov.w	r0, #0
 8002da6:	f380 8814 	msr	CONTROL, r0
 8002daa:	b662      	cpsie	i
 8002dac:	b661      	cpsie	f
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	df00      	svc	0
 8002db8:	bf00      	nop
 8002dba:	0000      	.short	0x0000
 8002dbc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop

08002dc4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002dca:	4b46      	ldr	r3, [pc, #280]	; (8002ee4 <xPortStartScheduler+0x120>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a46      	ldr	r2, [pc, #280]	; (8002ee8 <xPortStartScheduler+0x124>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10a      	bne.n	8002dea <xPortStartScheduler+0x26>
        __asm volatile
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	613b      	str	r3, [r7, #16]
    }
 8002de6:	bf00      	nop
 8002de8:	e7fe      	b.n	8002de8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002dea:	4b3e      	ldr	r3, [pc, #248]	; (8002ee4 <xPortStartScheduler+0x120>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a3f      	ldr	r2, [pc, #252]	; (8002eec <xPortStartScheduler+0x128>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d10a      	bne.n	8002e0a <xPortStartScheduler+0x46>
        __asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	60fb      	str	r3, [r7, #12]
    }
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e0a:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <xPortStartScheduler+0x12c>)
 8002e0c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	22ff      	movs	r2, #255	; 0xff
 8002e1a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <xPortStartScheduler+0x130>)
 8002e30:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e32:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e34:	2207      	movs	r2, #7
 8002e36:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e38:	e009      	b.n	8002e4e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	4a2d      	ldr	r2, [pc, #180]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e42:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e56:	2b80      	cmp	r3, #128	; 0x80
 8002e58:	d0ef      	beq.n	8002e3a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e5a:	4b27      	ldr	r3, [pc, #156]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f1c3 0307 	rsb	r3, r3, #7
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d00a      	beq.n	8002e7c <xPortStartScheduler+0xb8>
        __asm volatile
 8002e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	60bb      	str	r3, [r7, #8]
    }
 8002e78:	bf00      	nop
 8002e7a:	e7fe      	b.n	8002e7a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e84:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e86:	4b1c      	ldr	r3, [pc, #112]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e8e:	4a1a      	ldr	r2, [pc, #104]	; (8002ef8 <xPortStartScheduler+0x134>)
 8002e90:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e9a:	4b18      	ldr	r3, [pc, #96]	; (8002efc <xPortStartScheduler+0x138>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a17      	ldr	r2, [pc, #92]	; (8002efc <xPortStartScheduler+0x138>)
 8002ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ea4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002ea6:	4b15      	ldr	r3, [pc, #84]	; (8002efc <xPortStartScheduler+0x138>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a14      	ldr	r2, [pc, #80]	; (8002efc <xPortStartScheduler+0x138>)
 8002eac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002eb0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002eb2:	f000 f963 	bl	800317c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <xPortStartScheduler+0x13c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002ebc:	f000 f982 	bl	80031c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002ec0:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <xPortStartScheduler+0x140>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0f      	ldr	r2, [pc, #60]	; (8002f04 <xPortStartScheduler+0x140>)
 8002ec6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002eca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002ecc:	f7ff ff64 	bl	8002d98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002ed0:	f7ff fdd6 	bl	8002a80 <vTaskSwitchContext>
    prvTaskExitError();
 8002ed4:	f7ff ff1e 	bl	8002d14 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	e000ed00 	.word	0xe000ed00
 8002ee8:	410fc271 	.word	0x410fc271
 8002eec:	410fc270 	.word	0x410fc270
 8002ef0:	e000e400 	.word	0xe000e400
 8002ef4:	200001a0 	.word	0x200001a0
 8002ef8:	200001a4 	.word	0x200001a4
 8002efc:	e000ed20 	.word	0xe000ed20
 8002f00:	20000010 	.word	0x20000010
 8002f04:	e000ef34 	.word	0xe000ef34

08002f08 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <vInitPrioGroupValue+0xe4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a37      	ldr	r2, [pc, #220]	; (8002ff0 <vInitPrioGroupValue+0xe8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d10a      	bne.n	8002f2e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	613b      	str	r3, [r7, #16]
    }
 8002f2a:	bf00      	nop
 8002f2c:	e7fe      	b.n	8002f2c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <vInitPrioGroupValue+0xe4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a30      	ldr	r2, [pc, #192]	; (8002ff4 <vInitPrioGroupValue+0xec>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d10a      	bne.n	8002f4e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3c:	f383 8811 	msr	BASEPRI, r3
 8002f40:	f3bf 8f6f 	isb	sy
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	60fb      	str	r3, [r7, #12]
    }
 8002f4a:	bf00      	nop
 8002f4c:	e7fe      	b.n	8002f4c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f4e:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <vInitPrioGroupValue+0xf0>)
 8002f50:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	22ff      	movs	r2, #255	; 0xff
 8002f5e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <vInitPrioGroupValue+0xf4>)
 8002f74:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f76:	4b22      	ldr	r3, [pc, #136]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002f78:	2207      	movs	r2, #7
 8002f7a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f7c:	e009      	b.n	8002f92 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002f7e:	4b20      	ldr	r3, [pc, #128]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	4a1e      	ldr	r2, [pc, #120]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002f86:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	2b80      	cmp	r3, #128	; 0x80
 8002f9c:	d0ef      	beq.n	8002f7e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f9e:	4b18      	ldr	r3, [pc, #96]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1c3 0307 	rsb	r3, r3, #7
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d00a      	beq.n	8002fc0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	60bb      	str	r3, [r7, #8]
    }
 8002fbc:	bf00      	nop
 8002fbe:	e7fe      	b.n	8002fbe <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	021b      	lsls	r3, r3, #8
 8002fc6:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002fc8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002fca:	4b0d      	ldr	r3, [pc, #52]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <vInitPrioGroupValue+0xf8>)
 8002fd4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	e000ed00 	.word	0xe000ed00
 8002ff0:	410fc271 	.word	0x410fc271
 8002ff4:	410fc270 	.word	0x410fc270
 8002ff8:	e000e400 	.word	0xe000e400
 8002ffc:	200001a0 	.word	0x200001a0
 8003000:	200001a4 	.word	0x200001a4

08003004 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
        __asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	607b      	str	r3, [r7, #4]
    }
 800301c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800301e:	4b0f      	ldr	r3, [pc, #60]	; (800305c <vPortEnterCritical+0x58>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	4a0d      	ldr	r2, [pc, #52]	; (800305c <vPortEnterCritical+0x58>)
 8003026:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <vPortEnterCritical+0x58>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d10f      	bne.n	8003050 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <vPortEnterCritical+0x5c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00a      	beq.n	8003050 <vPortEnterCritical+0x4c>
        __asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	603b      	str	r3, [r7, #0]
    }
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <vPortEnterCritical+0x4a>
    }
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	20000010 	.word	0x20000010
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <vPortExitCritical+0x50>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <vPortExitCritical+0x24>
        __asm volatile
 8003072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	607b      	str	r3, [r7, #4]
    }
 8003084:	bf00      	nop
 8003086:	e7fe      	b.n	8003086 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003088:	4b0a      	ldr	r3, [pc, #40]	; (80030b4 <vPortExitCritical+0x50>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3b01      	subs	r3, #1
 800308e:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <vPortExitCritical+0x50>)
 8003090:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <vPortExitCritical+0x50>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d105      	bne.n	80030a6 <vPortExitCritical+0x42>
 800309a:	2300      	movs	r3, #0
 800309c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80030a4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000010 	.word	0x20000010
	...

080030c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80030c0:	f3ef 8009 	mrs	r0, PSP
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	4b15      	ldr	r3, [pc, #84]	; (8003120 <pxCurrentTCBConst>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	f01e 0f10 	tst.w	lr, #16
 80030d0:	bf08      	it	eq
 80030d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80030d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030da:	6010      	str	r0, [r2, #0]
 80030dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80030e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80030e4:	f380 8811 	msr	BASEPRI, r0
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f7ff fcc6 	bl	8002a80 <vTaskSwitchContext>
 80030f4:	f04f 0000 	mov.w	r0, #0
 80030f8:	f380 8811 	msr	BASEPRI, r0
 80030fc:	bc09      	pop	{r0, r3}
 80030fe:	6819      	ldr	r1, [r3, #0]
 8003100:	6808      	ldr	r0, [r1, #0]
 8003102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003106:	f01e 0f10 	tst.w	lr, #16
 800310a:	bf08      	it	eq
 800310c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003110:	f380 8809 	msr	PSP, r0
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	f3af 8000 	nop.w

08003120 <pxCurrentTCBConst>:
 8003120:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003124:	bf00      	nop
 8003126:	bf00      	nop

08003128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
        __asm volatile
 800312e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	607b      	str	r3, [r7, #4]
    }
 8003140:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003142:	f002 fa53 	bl	80055ec <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003146:	f7ff fba3 	bl	8002890 <xTaskIncrementTick>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d006      	beq.n	800315e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003150:	f002 faaa 	bl	80056a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <SysTick_Handler+0x50>)
 8003156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	e001      	b.n	8003162 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800315e:	f002 fa87 	bl	8005670 <SEGGER_SYSVIEW_RecordExitISR>
 8003162:	2300      	movs	r3, #0
 8003164:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	f383 8811 	msr	BASEPRI, r3
    }
 800316c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	e000ed04 	.word	0xe000ed04

0800317c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <vPortSetupTimerInterrupt+0x34>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <vPortSetupTimerInterrupt+0x38>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <vPortSetupTimerInterrupt+0x3c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <vPortSetupTimerInterrupt+0x40>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	099b      	lsrs	r3, r3, #6
 8003198:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <vPortSetupTimerInterrupt+0x44>)
 800319a:	3b01      	subs	r3, #1
 800319c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800319e:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <vPortSetupTimerInterrupt+0x34>)
 80031a0:	2207      	movs	r2, #7
 80031a2:	601a      	str	r2, [r3, #0]
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000e010 	.word	0xe000e010
 80031b4:	e000e018 	.word	0xe000e018
 80031b8:	20000000 	.word	0x20000000
 80031bc:	10624dd3 	.word	0x10624dd3
 80031c0:	e000e014 	.word	0xe000e014

080031c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80031c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80031d4 <vPortEnableVFP+0x10>
 80031c8:	6801      	ldr	r1, [r0, #0]
 80031ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80031ce:	6001      	str	r1, [r0, #0]
 80031d0:	4770      	bx	lr
 80031d2:	0000      	.short	0x0000
 80031d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop

080031dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80031e2:	f3ef 8305 	mrs	r3, IPSR
 80031e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b0f      	cmp	r3, #15
 80031ec:	d914      	bls.n	8003218 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80031ee:	4a17      	ldr	r2, [pc, #92]	; (800324c <vPortValidateInterruptPriority+0x70>)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4413      	add	r3, r2
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80031f8:	4b15      	ldr	r3, [pc, #84]	; (8003250 <vPortValidateInterruptPriority+0x74>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	7afa      	ldrb	r2, [r7, #11]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d20a      	bcs.n	8003218 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	607b      	str	r3, [r7, #4]
    }
 8003214:	bf00      	nop
 8003216:	e7fe      	b.n	8003216 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003218:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <vPortValidateInterruptPriority+0x78>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003220:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <vPortValidateInterruptPriority+0x7c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d90a      	bls.n	800323e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	603b      	str	r3, [r7, #0]
    }
 800323a:	bf00      	nop
 800323c:	e7fe      	b.n	800323c <vPortValidateInterruptPriority+0x60>
    }
 800323e:	bf00      	nop
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	e000e3f0 	.word	0xe000e3f0
 8003250:	200001a0 	.word	0x200001a0
 8003254:	e000ed0c 	.word	0xe000ed0c
 8003258:	200001a4 	.word	0x200001a4

0800325c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003264:	2300      	movs	r3, #0
 8003266:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003268:	f7ff fa00 	bl	800266c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800326c:	4b65      	ldr	r3, [pc, #404]	; (8003404 <pvPortMalloc+0x1a8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003274:	f000 f934 	bl	80034e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003278:	4b63      	ldr	r3, [pc, #396]	; (8003408 <pvPortMalloc+0x1ac>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4013      	ands	r3, r2
 8003280:	2b00      	cmp	r3, #0
 8003282:	f040 80a7 	bne.w	80033d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02d      	beq.n	80032e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800328c:	2208      	movs	r2, #8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	d227      	bcs.n	80032e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003298:	2208      	movs	r2, #8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d021      	beq.n	80032ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f023 0307 	bic.w	r3, r3, #7
 80032b0:	3308      	adds	r3, #8
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d214      	bcs.n	80032e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f023 0307 	bic.w	r3, r3, #7
 80032be:	3308      	adds	r3, #8
 80032c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d010      	beq.n	80032ee <pvPortMalloc+0x92>
        __asm volatile
 80032cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	617b      	str	r3, [r7, #20]
    }
 80032de:	bf00      	nop
 80032e0:	e7fe      	b.n	80032e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032e6:	e002      	b.n	80032ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	e000      	b.n	80032f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d06e      	beq.n	80033d4 <pvPortMalloc+0x178>
 80032f6:	4b45      	ldr	r3, [pc, #276]	; (800340c <pvPortMalloc+0x1b0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d869      	bhi.n	80033d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003300:	4b43      	ldr	r3, [pc, #268]	; (8003410 <pvPortMalloc+0x1b4>)
 8003302:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003304:	4b42      	ldr	r3, [pc, #264]	; (8003410 <pvPortMalloc+0x1b4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800330a:	e004      	b.n	8003316 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	429a      	cmp	r2, r3
 800331e:	d903      	bls.n	8003328 <pvPortMalloc+0xcc>
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f1      	bne.n	800330c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003328:	4b36      	ldr	r3, [pc, #216]	; (8003404 <pvPortMalloc+0x1a8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332e:	429a      	cmp	r2, r3
 8003330:	d050      	beq.n	80033d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2208      	movs	r2, #8
 8003338:	4413      	add	r3, r2
 800333a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	1ad2      	subs	r2, r2, r3
 800334c:	2308      	movs	r3, #8
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	429a      	cmp	r2, r3
 8003352:	d91f      	bls.n	8003394 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <pvPortMalloc+0x120>
        __asm volatile
 8003366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	613b      	str	r3, [r7, #16]
    }
 8003378:	bf00      	nop
 800337a:	e7fe      	b.n	800337a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	1ad2      	subs	r2, r2, r3
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800338e:	69b8      	ldr	r0, [r7, #24]
 8003390:	f000 f908 	bl	80035a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003394:	4b1d      	ldr	r3, [pc, #116]	; (800340c <pvPortMalloc+0x1b0>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	4a1b      	ldr	r2, [pc, #108]	; (800340c <pvPortMalloc+0x1b0>)
 80033a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033a2:	4b1a      	ldr	r3, [pc, #104]	; (800340c <pvPortMalloc+0x1b0>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <pvPortMalloc+0x1b8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d203      	bcs.n	80033b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80033ae:	4b17      	ldr	r3, [pc, #92]	; (800340c <pvPortMalloc+0x1b0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a18      	ldr	r2, [pc, #96]	; (8003414 <pvPortMalloc+0x1b8>)
 80033b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <pvPortMalloc+0x1ac>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	431a      	orrs	r2, r3
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <pvPortMalloc+0x1bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3301      	adds	r3, #1
 80033d0:	4a11      	ldr	r2, [pc, #68]	; (8003418 <pvPortMalloc+0x1bc>)
 80033d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80033d4:	f7ff f958 	bl	8002688 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <pvPortMalloc+0x19c>
        __asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	60fb      	str	r3, [r7, #12]
    }
 80033f4:	bf00      	nop
 80033f6:	e7fe      	b.n	80033f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80033f8:	69fb      	ldr	r3, [r7, #28]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3728      	adds	r7, #40	; 0x28
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	20012db0 	.word	0x20012db0
 8003408:	20012dc4 	.word	0x20012dc4
 800340c:	20012db4 	.word	0x20012db4
 8003410:	20012da8 	.word	0x20012da8
 8003414:	20012db8 	.word	0x20012db8
 8003418:	20012dbc 	.word	0x20012dbc

0800341c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d04d      	beq.n	80034ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800342e:	2308      	movs	r3, #8
 8003430:	425b      	negs	r3, r3
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4413      	add	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <vPortFree+0xb8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <vPortFree+0x44>
        __asm volatile
 800344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	60fb      	str	r3, [r7, #12]
    }
 800345c:	bf00      	nop
 800345e:	e7fe      	b.n	800345e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00a      	beq.n	800347e <vPortFree+0x62>
        __asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	60bb      	str	r3, [r7, #8]
    }
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <vPortFree+0xb8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d01e      	beq.n	80034ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d11a      	bne.n	80034ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <vPortFree+0xb8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	43db      	mvns	r3, r3
 800349e:	401a      	ands	r2, r3
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80034a4:	f7ff f8e2 	bl	800266c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <vPortFree+0xbc>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <vPortFree+0xbc>)
 80034b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80034b6:	6938      	ldr	r0, [r7, #16]
 80034b8:	f000 f874 	bl	80035a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80034bc:	4b07      	ldr	r3, [pc, #28]	; (80034dc <vPortFree+0xc0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	4a06      	ldr	r2, [pc, #24]	; (80034dc <vPortFree+0xc0>)
 80034c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80034c6:	f7ff f8df 	bl	8002688 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20012dc4 	.word	0x20012dc4
 80034d8:	20012db4 	.word	0x20012db4
 80034dc:	20012dc0 	.word	0x20012dc0

080034e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80034e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80034ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80034ec:	4b27      	ldr	r3, [pc, #156]	; (800358c <prvHeapInit+0xac>)
 80034ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3307      	adds	r3, #7
 80034fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0307 	bic.w	r3, r3, #7
 8003506:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	4a1f      	ldr	r2, [pc, #124]	; (800358c <prvHeapInit+0xac>)
 8003510:	4413      	add	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003518:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <prvHeapInit+0xb0>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800351e:	4b1c      	ldr	r3, [pc, #112]	; (8003590 <prvHeapInit+0xb0>)
 8003520:	2200      	movs	r2, #0
 8003522:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	4413      	add	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800352c:	2208      	movs	r2, #8
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0307 	bic.w	r3, r3, #7
 800353a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a15      	ldr	r2, [pc, #84]	; (8003594 <prvHeapInit+0xb4>)
 8003540:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003542:	4b14      	ldr	r3, [pc, #80]	; (8003594 <prvHeapInit+0xb4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2200      	movs	r2, #0
 8003548:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800354a:	4b12      	ldr	r3, [pc, #72]	; (8003594 <prvHeapInit+0xb4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	1ad2      	subs	r2, r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <prvHeapInit+0xb4>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <prvHeapInit+0xb8>)
 800356e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a09      	ldr	r2, [pc, #36]	; (800359c <prvHeapInit+0xbc>)
 8003576:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <prvHeapInit+0xc0>)
 800357a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800357e:	601a      	str	r2, [r3, #0]
}
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	200001a8 	.word	0x200001a8
 8003590:	20012da8 	.word	0x20012da8
 8003594:	20012db0 	.word	0x20012db0
 8003598:	20012db8 	.word	0x20012db8
 800359c:	20012db4 	.word	0x20012db4
 80035a0:	20012dc4 	.word	0x20012dc4

080035a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035ac:	4b28      	ldr	r3, [pc, #160]	; (8003650 <prvInsertBlockIntoFreeList+0xac>)
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e002      	b.n	80035b8 <prvInsertBlockIntoFreeList+0x14>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d8f7      	bhi.n	80035b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	4413      	add	r3, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d108      	bne.n	80035e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	441a      	add	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	441a      	add	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d118      	bne.n	800362c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <prvInsertBlockIntoFreeList+0xb0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d00d      	beq.n	8003622 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	441a      	add	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	e008      	b.n	8003634 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <prvInsertBlockIntoFreeList+0xb0>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e003      	b.n	8003634 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	d002      	beq.n	8003642 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20012da8 	.word	0x20012da8
 8003654:	20012db0 	.word	0x20012db0

08003658 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800365c:	4803      	ldr	r0, [pc, #12]	; (800366c <_cbSendSystemDesc+0x14>)
 800365e:	f001 ff6f 	bl	8005540 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003662:	4803      	ldr	r0, [pc, #12]	; (8003670 <_cbSendSystemDesc+0x18>)
 8003664:	f001 ff6c 	bl	8005540 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}
 800366c:	08006510 	.word	0x08006510
 8003670:	0800654c 	.word	0x0800654c

08003674 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <SEGGER_SYSVIEW_Conf+0x20>)
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <SEGGER_SYSVIEW_Conf+0x20>)
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <SEGGER_SYSVIEW_Conf+0x24>)
 8003682:	4a06      	ldr	r2, [pc, #24]	; (800369c <SEGGER_SYSVIEW_Conf+0x28>)
 8003684:	f001 fbe0 	bl	8004e48 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003688:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800368c:	f001 fc20 	bl	8004ed0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003690:	bf00      	nop
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000000 	.word	0x20000000
 8003698:	08003659 	.word	0x08003659
 800369c:	080065ec 	.word	0x080065ec

080036a0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80036a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80036a6:	2300      	movs	r3, #0
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	e033      	b.n	8003714 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80036ac:	491e      	ldr	r1, [pc, #120]	; (8003728 <_cbSendTaskList+0x88>)
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	491a      	ldr	r1, [pc, #104]	; (8003728 <_cbSendTaskList+0x88>)
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	3304      	adds	r3, #4
 80036cc:	6819      	ldr	r1, [r3, #0]
 80036ce:	4c16      	ldr	r4, [pc, #88]	; (8003728 <_cbSendTaskList+0x88>)
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4423      	add	r3, r4
 80036dc:	3308      	adds	r3, #8
 80036de:	681c      	ldr	r4, [r3, #0]
 80036e0:	4d11      	ldr	r5, [pc, #68]	; (8003728 <_cbSendTaskList+0x88>)
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	442b      	add	r3, r5
 80036ee:	330c      	adds	r3, #12
 80036f0:	681d      	ldr	r5, [r3, #0]
 80036f2:	4e0d      	ldr	r6, [pc, #52]	; (8003728 <_cbSendTaskList+0x88>)
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4433      	add	r3, r6
 8003700:	3310      	adds	r3, #16
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	462b      	mov	r3, r5
 8003708:	4622      	mov	r2, r4
 800370a:	f000 f8b5 	bl	8003878 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3301      	adds	r3, #1
 8003712:	607b      	str	r3, [r7, #4]
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <_cbSendTaskList+0x8c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	429a      	cmp	r2, r3
 800371c:	d3c6      	bcc.n	80036ac <_cbSendTaskList+0xc>
  }
}
 800371e:	bf00      	nop
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003728:	20012dc8 	.word	0x20012dc8
 800372c:	20012e68 	.word	0x20012e68

08003730 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003730:	b5b0      	push	{r4, r5, r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003736:	f7ff f899 	bl	800286c <xTaskGetTickCountFromISR>
 800373a:	4603      	mov	r3, r0
 800373c:	461a      	mov	r2, r3
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003746:	e9d7 0100 	ldrd	r0, r1, [r7]
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	f04f 0400 	mov.w	r4, #0
 8003752:	f04f 0500 	mov.w	r5, #0
 8003756:	015d      	lsls	r5, r3, #5
 8003758:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800375c:	0154      	lsls	r4, r2, #5
 800375e:	4622      	mov	r2, r4
 8003760:	462b      	mov	r3, r5
 8003762:	1a12      	subs	r2, r2, r0
 8003764:	eb63 0301 	sbc.w	r3, r3, r1
 8003768:	f04f 0400 	mov.w	r4, #0
 800376c:	f04f 0500 	mov.w	r5, #0
 8003770:	009d      	lsls	r5, r3, #2
 8003772:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003776:	0094      	lsls	r4, r2, #2
 8003778:	4622      	mov	r2, r4
 800377a:	462b      	mov	r3, r5
 800377c:	1812      	adds	r2, r2, r0
 800377e:	eb41 0303 	adc.w	r3, r1, r3
 8003782:	f04f 0000 	mov.w	r0, #0
 8003786:	f04f 0100 	mov.w	r1, #0
 800378a:	00d9      	lsls	r1, r3, #3
 800378c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003790:	00d0      	lsls	r0, r2, #3
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800379a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800379e:	4610      	mov	r0, r2
 80037a0:	4619      	mov	r1, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bdb0      	pop	{r4, r5, r7, pc}

080037a8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80037b6:	2205      	movs	r2, #5
 80037b8:	492b      	ldr	r1, [pc, #172]	; (8003868 <SYSVIEW_AddTask+0xc0>)
 80037ba:	68b8      	ldr	r0, [r7, #8]
 80037bc:	f002 fa10 	bl	8005be0 <memcmp>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d04b      	beq.n	800385e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80037c6:	4b29      	ldr	r3, [pc, #164]	; (800386c <SYSVIEW_AddTask+0xc4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b07      	cmp	r3, #7
 80037cc:	d903      	bls.n	80037d6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80037ce:	4828      	ldr	r0, [pc, #160]	; (8003870 <SYSVIEW_AddTask+0xc8>)
 80037d0:	f002 f958 	bl	8005a84 <SEGGER_SYSVIEW_Warn>
    return;
 80037d4:	e044      	b.n	8003860 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80037d6:	4b25      	ldr	r3, [pc, #148]	; (800386c <SYSVIEW_AddTask+0xc4>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	4926      	ldr	r1, [pc, #152]	; (8003874 <SYSVIEW_AddTask+0xcc>)
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <SYSVIEW_AddTask+0xc4>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4921      	ldr	r1, [pc, #132]	; (8003874 <SYSVIEW_AddTask+0xcc>)
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	3304      	adds	r3, #4
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003800:	4b1a      	ldr	r3, [pc, #104]	; (800386c <SYSVIEW_AddTask+0xc4>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	491b      	ldr	r1, [pc, #108]	; (8003874 <SYSVIEW_AddTask+0xcc>)
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	3308      	adds	r3, #8
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003816:	4b15      	ldr	r3, [pc, #84]	; (800386c <SYSVIEW_AddTask+0xc4>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4916      	ldr	r1, [pc, #88]	; (8003874 <SYSVIEW_AddTask+0xcc>)
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	330c      	adds	r3, #12
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <SYSVIEW_AddTask+0xc4>)
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4910      	ldr	r1, [pc, #64]	; (8003874 <SYSVIEW_AddTask+0xcc>)
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3310      	adds	r3, #16
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <SYSVIEW_AddTask+0xc4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	4a08      	ldr	r2, [pc, #32]	; (800386c <SYSVIEW_AddTask+0xc4>)
 800384a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f80e 	bl	8003878 <SYSVIEW_SendTaskInfo>
 800385c:	e000      	b.n	8003860 <SYSVIEW_AddTask+0xb8>
    return;
 800385e:	bf00      	nop

}
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	0800655c 	.word	0x0800655c
 800386c:	20012e68 	.word	0x20012e68
 8003870:	08006564 	.word	0x08006564
 8003874:	20012dc8 	.word	0x20012dc8

08003878 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003886:	f107 0314 	add.w	r3, r7, #20
 800388a:	2214      	movs	r2, #20
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f002 f9c2 	bl	8005c18 <memset>
  TaskInfo.TaskID     = TaskID;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 fd4f 	bl	8005350 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80038b2:	bf00      	nop
 80038b4:	3728      	adds	r7, #40	; 0x28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <__NVIC_EnableIRQ>:
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	db0b      	blt.n	80038e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	f003 021f 	and.w	r2, r3, #31
 80038d4:	4907      	ldr	r1, [pc, #28]	; (80038f4 <__NVIC_EnableIRQ+0x38>)
 80038d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	2001      	movs	r0, #1
 80038de:	fa00 f202 	lsl.w	r2, r0, r2
 80038e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	e000e100 	.word	0xe000e100

080038f8 <__NVIC_SetPriority>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	6039      	str	r1, [r7, #0]
 8003902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003908:	2b00      	cmp	r3, #0
 800390a:	db0a      	blt.n	8003922 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	490c      	ldr	r1, [pc, #48]	; (8003944 <__NVIC_SetPriority+0x4c>)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	0112      	lsls	r2, r2, #4
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	440b      	add	r3, r1
 800391c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003920:	e00a      	b.n	8003938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	b2da      	uxtb	r2, r3
 8003926:	4908      	ldr	r1, [pc, #32]	; (8003948 <__NVIC_SetPriority+0x50>)
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	3b04      	subs	r3, #4
 8003930:	0112      	lsls	r2, r2, #4
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	440b      	add	r3, r1
 8003936:	761a      	strb	r2, [r3, #24]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000e100 	.word	0xe000e100
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8003952:	f002 f8f3 	bl	8005b3c <SEGGER_SYSVIEW_IsStarted>
 8003956:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800395e:	f001 fb7b 	bl	8005058 <SEGGER_SYSVIEW_Start>
  }
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <_cbOnUARTRx+0x3c>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d806      	bhi.n	800398c <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800397e:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <_cbOnUARTRx+0x3c>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <_cbOnUARTRx+0x3c>)
 8003988:	701a      	strb	r2, [r3, #0]
    goto Done;
 800398a:	e009      	b.n	80039a0 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 800398c:	f7ff ffde 	bl	800394c <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <_cbOnUARTRx+0x3c>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4618      	mov	r0, r3
 8003996:	1dfb      	adds	r3, r7, #7
 8003998:	2201      	movs	r2, #1
 800399a:	4619      	mov	r1, r3
 800399c:	f000 fb9a 	bl	80040d4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80039a0:	bf00      	nop
}
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000014 	.word	0x20000014

080039ac <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80039b4:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <_cbOnUARTTx+0x5c>)
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d80f      	bhi.n	80039dc <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <_cbOnUARTTx+0x5c>)
 80039be:	785b      	ldrb	r3, [r3, #1]
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <_cbOnUARTTx+0x60>)
 80039c4:	5c9a      	ldrb	r2, [r3, r2]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80039ca:	4b0f      	ldr	r3, [pc, #60]	; (8003a08 <_cbOnUARTTx+0x5c>)
 80039cc:	785b      	ldrb	r3, [r3, #1]
 80039ce:	3301      	adds	r3, #1
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <_cbOnUARTTx+0x5c>)
 80039d4:	705a      	strb	r2, [r3, #1]
    r = 1;
 80039d6:	2301      	movs	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
    goto Done;
 80039da:	e00f      	b.n	80039fc <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <_cbOnUARTTx+0x5c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fa19 	bl	8003e1c <SEGGER_RTT_ReadUpBufferNoLock>
 80039ea:	4603      	mov	r3, r0
 80039ec:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	da02      	bge.n	80039fa <_cbOnUARTTx+0x4e>
    r = 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e000      	b.n	80039fc <_cbOnUARTTx+0x50>
  }
Done:
 80039fa:	bf00      	nop
  return r;
 80039fc:	68fb      	ldr	r3, [r7, #12]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000014 	.word	0x20000014
 8003a0c:	080065f4 	.word	0x080065f4

08003a10 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8003a18:	4a04      	ldr	r2, [pc, #16]	; (8003a2c <SEGGER_UART_init+0x1c>)
 8003a1a:	4905      	ldr	r1, [pc, #20]	; (8003a30 <SEGGER_UART_init+0x20>)
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f863 	bl	8003ae8 <HIF_UART_Init>
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	0800396d 	.word	0x0800396d
 8003a30:	080039ad 	.word	0x080039ad

08003a34 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <USART2_IRQHandler+0x80>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d011      	beq.n	8003a6e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <USART2_IRQHandler+0x84>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 030b 	and.w	r3, r3, #11
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d108      	bne.n	8003a6e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003a5c:	4b17      	ldr	r3, [pc, #92]	; (8003abc <USART2_IRQHandler+0x88>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d004      	beq.n	8003a6e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003a64:	4b15      	ldr	r3, [pc, #84]	; (8003abc <USART2_IRQHandler+0x88>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	79fa      	ldrb	r2, [r7, #7]
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01a      	beq.n	8003aae <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <USART2_IRQHandler+0x8c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d015      	beq.n	8003aac <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003a80:	4b0f      	ldr	r3, [pc, #60]	; (8003ac0 <USART2_IRQHandler+0x8c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	1dfa      	adds	r2, r7, #7
 8003a86:	4610      	mov	r0, r2
 8003a88:	4798      	blx	r3
 8003a8a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003a92:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <USART2_IRQHandler+0x90>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <USART2_IRQHandler+0x90>)
 8003a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e006      	b.n	8003aae <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003aa0:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <USART2_IRQHandler+0x80>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003aa4:	79fa      	ldrb	r2, [r7, #7]
 8003aa6:	4b04      	ldr	r3, [pc, #16]	; (8003ab8 <USART2_IRQHandler+0x84>)
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	e000      	b.n	8003aae <USART2_IRQHandler+0x7a>
      return;
 8003aac:	bf00      	nop
    }
  }
}
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40004400 	.word	0x40004400
 8003ab8:	40004404 	.word	0x40004404
 8003abc:	20012e6c 	.word	0x20012e6c
 8003ac0:	20012e70 	.word	0x20012e70
 8003ac4:	4000440c 	.word	0x4000440c

08003ac8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a04      	ldr	r2, [pc, #16]	; (8003ae4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad6:	6013      	str	r3, [r2, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	4000440c 	.word	0x4000440c

08003ae8 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8003af4:	4b2e      	ldr	r3, [pc, #184]	; (8003bb0 <HIF_UART_Init+0xc8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2d      	ldr	r2, [pc, #180]	; (8003bb0 <HIF_UART_Init+0xc8>)
 8003afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afe:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8003b00:	4b2c      	ldr	r3, [pc, #176]	; (8003bb4 <HIF_UART_Init+0xcc>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a2b      	ldr	r2, [pc, #172]	; (8003bb4 <HIF_UART_Init+0xcc>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8003b0c:	4b2a      	ldr	r3, [pc, #168]	; (8003bb8 <HIF_UART_Init+0xd0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b18:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8003b20:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8003b22:	4a25      	ldr	r2, [pc, #148]	; (8003bb8 <HIF_UART_Init+0xd0>)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8003b28:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <HIF_UART_Init+0xd4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b34:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003b3c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8003b3e:	4a1f      	ldr	r2, [pc, #124]	; (8003bbc <HIF_UART_Init+0xd4>)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8003b44:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <HIF_UART_Init+0xd8>)
 8003b46:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8003b4a:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8003b4c:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <HIF_UART_Init+0xdc>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8003b52:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HIF_UART_Init+0xe0>)
 8003b54:	2280      	movs	r2, #128	; 0x80
 8003b56:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8003b5e:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <HIF_UART_Init+0xe4>)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	085b      	lsrs	r3, r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b76:	d302      	bcc.n	8003b7e <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003b78:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003b7c:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d004      	beq.n	8003b8e <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	4a11      	ldr	r2, [pc, #68]	; (8003bd0 <HIF_UART_Init+0xe8>)
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8003b8e:	4a11      	ldr	r2, [pc, #68]	; (8003bd4 <HIF_UART_Init+0xec>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003b94:	4a10      	ldr	r2, [pc, #64]	; (8003bd8 <HIF_UART_Init+0xf0>)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003b9a:	2106      	movs	r1, #6
 8003b9c:	2026      	movs	r0, #38	; 0x26
 8003b9e:	f7ff feab 	bl	80038f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8003ba2:	2026      	movs	r0, #38	; 0x26
 8003ba4:	f7ff fe8a 	bl	80038bc <__NVIC_EnableIRQ>
}
 8003ba8:	bf00      	nop
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40023840 	.word	0x40023840
 8003bb4:	40023830 	.word	0x40023830
 8003bb8:	40020020 	.word	0x40020020
 8003bbc:	40020000 	.word	0x40020000
 8003bc0:	4000440c 	.word	0x4000440c
 8003bc4:	40004410 	.word	0x40004410
 8003bc8:	40004414 	.word	0x40004414
 8003bcc:	0501bd00 	.word	0x0501bd00
 8003bd0:	40004408 	.word	0x40004408
 8003bd4:	20012e6c 	.word	0x20012e6c
 8003bd8:	20012e70 	.word	0x20012e70

08003bdc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003be2:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <_DoInit+0x98>)
 8003be4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2203      	movs	r2, #3
 8003bea:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2203      	movs	r2, #3
 8003bf0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <_DoInit+0x9c>)
 8003bf6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a20      	ldr	r2, [pc, #128]	; (8003c7c <_DoInit+0xa0>)
 8003bfc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c04:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a17      	ldr	r2, [pc, #92]	; (8003c78 <_DoInit+0x9c>)
 8003c1c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a17      	ldr	r2, [pc, #92]	; (8003c80 <_DoInit+0xa4>)
 8003c22:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2210      	movs	r2, #16
 8003c28:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3307      	adds	r3, #7
 8003c40:	4a10      	ldr	r2, [pc, #64]	; (8003c84 <_DoInit+0xa8>)
 8003c42:	6810      	ldr	r0, [r2, #0]
 8003c44:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c46:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a0e      	ldr	r2, [pc, #56]	; (8003c88 <_DoInit+0xac>)
 8003c4e:	6810      	ldr	r0, [r2, #0]
 8003c50:	6018      	str	r0, [r3, #0]
 8003c52:	8891      	ldrh	r1, [r2, #4]
 8003c54:	7992      	ldrb	r2, [r2, #6]
 8003c56:	8099      	strh	r1, [r3, #4]
 8003c58:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c5a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003c64:	f3bf 8f5f 	dmb	sy
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	200143f8 	.word	0x200143f8
 8003c78:	080065b4 	.word	0x080065b4
 8003c7c:	20012e74 	.word	0x20012e74
 8003c80:	20013274 	.word	0x20013274
 8003c84:	080065c0 	.word	0x080065c0
 8003c88:	080065c4 	.word	0x080065c4

08003c8c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b08a      	sub	sp, #40	; 0x28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d905      	bls.n	8003cbc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cba:	e007      	b.n	8003ccc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	69b9      	ldr	r1, [r7, #24]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	1acb      	subs	r3, r1, r3
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	bf28      	it	cs
 8003cda:	4613      	movcs	r3, r2
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	bf28      	it	cs
 8003ce6:	4613      	movcs	r3, r2
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	6978      	ldr	r0, [r7, #20]
 8003cfa:	f001 ff7f 	bl	8005bfc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003cfe:	6a3a      	ldr	r2, [r7, #32]
 8003d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d02:	4413      	add	r3, r2
 8003d04:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	4413      	add	r3, r2
 8003d0c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	4413      	add	r3, r2
 8003d1c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d101      	bne.n	8003d2c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d2c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1b2      	bne.n	8003ca2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3728      	adds	r7, #40	; 0x28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b088      	sub	sp, #32
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	60f8      	str	r0, [r7, #12]
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d911      	bls.n	8003d8e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	4413      	add	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	6938      	ldr	r0, [r7, #16]
 8003d7a:	f001 ff3f 	bl	8005bfc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d7e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	441a      	add	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003d8c:	e01f      	b.n	8003dce <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	4413      	add	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	6938      	ldr	r0, [r7, #16]
 8003da2:	f001 ff2b 	bl	8005bfc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	4413      	add	r3, r2
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6938      	ldr	r0, [r7, #16]
 8003dc0:	f001 ff1c 	bl	8005bfc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003dc4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	60da      	str	r2, [r3, #12]
}
 8003dce:	bf00      	nop
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003dd6:	b480      	push	{r7}
 8003dd8:	b087      	sub	sp, #28
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d808      	bhi.n	8003e04 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad2      	subs	r2, r2, r3
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e004      	b.n	8003e0e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003e0e:	697b      	ldr	r3, [r7, #20]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08c      	sub	sp, #48	; 0x30
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003e28:	4b3e      	ldr	r3, [pc, #248]	; (8003f24 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003e2a:	623b      	str	r3, [r7, #32]
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003e36:	f7ff fed1 	bl	8003bdc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	4613      	mov	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4413      	add	r3, r2
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4a37      	ldr	r2, [pc, #220]	; (8003f24 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003e48:	4413      	add	r3, r2
 8003e4a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d92b      	bls.n	8003ec0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4293      	cmp	r3, r2
 8003e78:	bf28      	it	cs
 8003e7a:	4613      	movcs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	4413      	add	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	6939      	ldr	r1, [r7, #16]
 8003e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e8e:	f001 feb5 	bl	8005bfc <memcpy>
    NumBytesRead += NumBytesRem;
 8003e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	4413      	add	r3, r2
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	4413      	add	r3, r2
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d101      	bne.n	8003ec0 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	bf28      	it	cs
 8003ed0:	4613      	movcs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d019      	beq.n	8003f0e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	4413      	add	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	6939      	ldr	r1, [r7, #16]
 8003ee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eea:	f001 fe87 	bl	8005bfc <memcpy>
    NumBytesRead += NumBytesRem;
 8003eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	4413      	add	r3, r2
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f18:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3730      	adds	r7, #48	; 0x30
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	200143f8 	.word	0x200143f8

08003f28 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08c      	sub	sp, #48	; 0x30
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003f34:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f36:	623b      	str	r3, [r7, #32]
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <SEGGER_RTT_ReadNoLock+0x1e>
 8003f42:	f7ff fe4b 	bl	8003bdc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	3360      	adds	r3, #96	; 0x60
 8003f52:	4a37      	ldr	r2, [pc, #220]	; (8004030 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f54:	4413      	add	r3, r2
 8003f56:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d92b      	bls.n	8003fcc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4293      	cmp	r3, r2
 8003f84:	bf28      	it	cs
 8003f86:	4613      	movcs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	4413      	add	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	6939      	ldr	r1, [r7, #16]
 8003f98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f9a:	f001 fe2f 	bl	8005bfc <memcpy>
    NumBytesRead += NumBytesRem;
 8003f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	4413      	add	r3, r2
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	4413      	add	r3, r2
 8003fbc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d101      	bne.n	8003fcc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	bf28      	it	cs
 8003fdc:	4613      	movcs	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d019      	beq.n	800401a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	4413      	add	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	6939      	ldr	r1, [r7, #16]
 8003ff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ff6:	f001 fe01 	bl	8005bfc <memcpy>
    NumBytesRead += NumBytesRem;
 8003ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	4413      	add	r3, r2
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	4413      	add	r3, r2
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	4413      	add	r3, r2
 8004018:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004024:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004028:	4618      	mov	r0, r3
 800402a:	3730      	adds	r7, #48	; 0x30
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	200143f8 	.word	0x200143f8

08004034 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4613      	mov	r3, r2
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	3360      	adds	r3, #96	; 0x60
 8004050:	4a1f      	ldr	r2, [pc, #124]	; (80040d0 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004052:	4413      	add	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d029      	beq.n	80040b2 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800405e:	2b02      	cmp	r3, #2
 8004060:	d82e      	bhi.n	80040c0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004066:	2b01      	cmp	r3, #1
 8004068:	d013      	beq.n	8004092 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800406a:	e029      	b.n	80040c0 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800406c:	6978      	ldr	r0, [r7, #20]
 800406e:	f7ff feb2 	bl	8003dd6 <_GetAvailWriteSpace>
 8004072:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	429a      	cmp	r2, r3
 800407a:	d202      	bcs.n	8004082 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800407c:	2300      	movs	r3, #0
 800407e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004080:	e021      	b.n	80040c6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	69b9      	ldr	r1, [r7, #24]
 800408a:	6978      	ldr	r0, [r7, #20]
 800408c:	f7ff fe5b 	bl	8003d46 <_WriteNoCheck>
    break;
 8004090:	e019      	b.n	80040c6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004092:	6978      	ldr	r0, [r7, #20]
 8004094:	f7ff fe9f 	bl	8003dd6 <_GetAvailWriteSpace>
 8004098:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4293      	cmp	r3, r2
 80040a0:	bf28      	it	cs
 80040a2:	4613      	movcs	r3, r2
 80040a4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	69b9      	ldr	r1, [r7, #24]
 80040aa:	6978      	ldr	r0, [r7, #20]
 80040ac:	f7ff fe4b 	bl	8003d46 <_WriteNoCheck>
    break;
 80040b0:	e009      	b.n	80040c6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	69b9      	ldr	r1, [r7, #24]
 80040b6:	6978      	ldr	r0, [r7, #20]
 80040b8:	f7ff fde8 	bl	8003c8c <_WriteBlocking>
 80040bc:	61f8      	str	r0, [r7, #28]
    break;
 80040be:	e002      	b.n	80040c6 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61fb      	str	r3, [r7, #28]
    break;
 80040c4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80040c6:	69fb      	ldr	r3, [r7, #28]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	200143f8 	.word	0x200143f8

080040d4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80040e0:	4b0e      	ldr	r3, [pc, #56]	; (800411c <SEGGER_RTT_WriteDownBuffer+0x48>)
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80040ee:	f7ff fd75 	bl	8003bdc <_DoInit>
  SEGGER_RTT_LOCK();
 80040f2:	f3ef 8311 	mrs	r3, BASEPRI
 80040f6:	f04f 0120 	mov.w	r1, #32
 80040fa:	f381 8811 	msr	BASEPRI, r1
 80040fe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7ff ff95 	bl	8004034 <SEGGER_RTT_WriteDownBufferNoLock>
 800410a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004112:	697b      	ldr	r3, [r7, #20]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3720      	adds	r7, #32
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	200143f8 	.word	0x200143f8

08004120 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800412e:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <SEGGER_RTT_AllocUpBuffer+0x20>
 800413c:	f7ff fd4e 	bl	8003bdc <_DoInit>
  SEGGER_RTT_LOCK();
 8004140:	f3ef 8311 	mrs	r3, BASEPRI
 8004144:	f04f 0120 	mov.w	r1, #32
 8004148:	f381 8811 	msr	BASEPRI, r1
 800414c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800414e:	4b35      	ldr	r3, [pc, #212]	; (8004224 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004150:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004156:	6939      	ldr	r1, [r7, #16]
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	4613      	mov	r3, r2
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	4413      	add	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	440b      	add	r3, r1
 8004166:	3304      	adds	r3, #4
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3301      	adds	r3, #1
 8004172:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	429a      	cmp	r2, r3
 800417c:	dbeb      	blt.n	8004156 <SEGGER_RTT_AllocUpBuffer+0x36>
 800417e:	e000      	b.n	8004182 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004180:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	429a      	cmp	r2, r3
 800418a:	da3f      	bge.n	800420c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800418c:	6939      	ldr	r1, [r7, #16]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	4613      	mov	r3, r2
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	4413      	add	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	440b      	add	r3, r1
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80041a0:	6939      	ldr	r1, [r7, #16]
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	4613      	mov	r3, r2
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	4413      	add	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	440b      	add	r3, r1
 80041b0:	3304      	adds	r3, #4
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80041b6:	6939      	ldr	r1, [r7, #16]
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	4613      	mov	r3, r2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	4413      	add	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	440b      	add	r3, r1
 80041c4:	3320      	adds	r3, #32
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80041ca:	6939      	ldr	r1, [r7, #16]
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	4613      	mov	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4413      	add	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	440b      	add	r3, r1
 80041d8:	3328      	adds	r3, #40	; 0x28
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80041de:	6939      	ldr	r1, [r7, #16]
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	4613      	mov	r3, r2
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	4413      	add	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	440b      	add	r3, r1
 80041ec:	3324      	adds	r3, #36	; 0x24
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80041f2:	6939      	ldr	r1, [r7, #16]
 80041f4:	69fa      	ldr	r2, [r7, #28]
 80041f6:	4613      	mov	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	440b      	add	r3, r1
 8004200:	332c      	adds	r3, #44	; 0x2c
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004206:	f3bf 8f5f 	dmb	sy
 800420a:	e002      	b.n	8004212 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800420c:	f04f 33ff 	mov.w	r3, #4294967295
 8004210:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004218:	69fb      	ldr	r3, [r7, #28]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	200143f8 	.word	0x200143f8

08004228 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004236:	4b21      	ldr	r3, [pc, #132]	; (80042bc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004238:	623b      	str	r3, [r7, #32]
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004244:	f7ff fcca 	bl	8003bdc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004248:	4b1c      	ldr	r3, [pc, #112]	; (80042bc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800424a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d82c      	bhi.n	80042ac <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004252:	f3ef 8311 	mrs	r3, BASEPRI
 8004256:	f04f 0120 	mov.w	r1, #32
 800425a:	f381 8811 	msr	BASEPRI, r1
 800425e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4613      	mov	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	3360      	adds	r3, #96	; 0x60
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	4413      	add	r3, r2
 8004270:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00e      	beq.n	8004296 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2200      	movs	r2, #0
 800428e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2200      	movs	r2, #0
 8004294:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800429c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80042a6:	2300      	movs	r3, #0
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
 80042aa:	e002      	b.n	80042b2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80042ac:	f04f 33ff 	mov.w	r3, #4294967295
 80042b0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3728      	adds	r7, #40	; 0x28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	200143f8 	.word	0x200143f8

080042c0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80042c0:	b480      	push	{r7}
 80042c2:	b087      	sub	sp, #28
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00f      	beq.n	80042f6 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80042d6:	e002      	b.n	80042de <_EncodeStr+0x1e>
      Len++;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	3301      	adds	r3, #1
 80042dc:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4413      	add	r3, r2
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f6      	bne.n	80042d8 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d901      	bls.n	80042f6 <_EncodeStr+0x36>
      Len = Limit;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2bfe      	cmp	r3, #254	; 0xfe
 80042fa:	d806      	bhi.n	800430a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	60fa      	str	r2, [r7, #12]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	e011      	b.n	800432e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	60fa      	str	r2, [r7, #12]
 8004310:	22ff      	movs	r2, #255	; 0xff
 8004312:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	60fa      	str	r2, [r7, #12]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	0a19      	lsrs	r1, r3, #8
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	60fa      	str	r2, [r7, #12]
 800432a:	b2ca      	uxtb	r2, r1
 800432c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004332:	e00a      	b.n	800434a <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	1c53      	adds	r3, r2, #1
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1c59      	adds	r1, r3, #1
 800433e:	60f9      	str	r1, [r7, #12]
 8004340:	7812      	ldrb	r2, [r2, #0]
 8004342:	701a      	strb	r2, [r3, #0]
    n++;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	3301      	adds	r3, #1
 8004348:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	429a      	cmp	r2, r3
 8004350:	d3f0      	bcc.n	8004334 <_EncodeStr+0x74>
  }
  return pPayload;
 8004352:	68fb      	ldr	r3, [r7, #12]
}
 8004354:	4618      	mov	r0, r3
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3304      	adds	r3, #4
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800437e:	4b36      	ldr	r3, [pc, #216]	; (8004458 <_HandleIncomingPacket+0xe0>)
 8004380:	7e1b      	ldrb	r3, [r3, #24]
 8004382:	4618      	mov	r0, r3
 8004384:	1cfb      	adds	r3, r7, #3
 8004386:	2201      	movs	r2, #1
 8004388:	4619      	mov	r1, r3
 800438a:	f7ff fdcd 	bl	8003f28 <SEGGER_RTT_ReadNoLock>
 800438e:	4603      	mov	r3, r0
 8004390:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	dd54      	ble.n	8004442 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	2b80      	cmp	r3, #128	; 0x80
 800439c:	d032      	beq.n	8004404 <_HandleIncomingPacket+0x8c>
 800439e:	2b80      	cmp	r3, #128	; 0x80
 80043a0:	dc42      	bgt.n	8004428 <_HandleIncomingPacket+0xb0>
 80043a2:	2b07      	cmp	r3, #7
 80043a4:	dc16      	bgt.n	80043d4 <_HandleIncomingPacket+0x5c>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	dd3e      	ble.n	8004428 <_HandleIncomingPacket+0xb0>
 80043aa:	3b01      	subs	r3, #1
 80043ac:	2b06      	cmp	r3, #6
 80043ae:	d83b      	bhi.n	8004428 <_HandleIncomingPacket+0xb0>
 80043b0:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <_HandleIncomingPacket+0x40>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	080043db 	.word	0x080043db
 80043bc:	080043e1 	.word	0x080043e1
 80043c0:	080043e7 	.word	0x080043e7
 80043c4:	080043ed 	.word	0x080043ed
 80043c8:	080043f3 	.word	0x080043f3
 80043cc:	080043f9 	.word	0x080043f9
 80043d0:	080043ff 	.word	0x080043ff
 80043d4:	2b7f      	cmp	r3, #127	; 0x7f
 80043d6:	d036      	beq.n	8004446 <_HandleIncomingPacket+0xce>
 80043d8:	e026      	b.n	8004428 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80043da:	f000 fe3d 	bl	8005058 <SEGGER_SYSVIEW_Start>
      break;
 80043de:	e037      	b.n	8004450 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80043e0:	f000 fef6 	bl	80051d0 <SEGGER_SYSVIEW_Stop>
      break;
 80043e4:	e034      	b.n	8004450 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80043e6:	f001 f8cf 	bl	8005588 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80043ea:	e031      	b.n	8004450 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80043ec:	f001 f894 	bl	8005518 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80043f0:	e02e      	b.n	8004450 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80043f2:	f000 ff13 	bl	800521c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80043f6:	e02b      	b.n	8004450 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80043f8:	f001 faf2 	bl	80059e0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80043fc:	e028      	b.n	8004450 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80043fe:	f001 fad1 	bl	80059a4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004402:	e025      	b.n	8004450 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004404:	4b14      	ldr	r3, [pc, #80]	; (8004458 <_HandleIncomingPacket+0xe0>)
 8004406:	7e1b      	ldrb	r3, [r3, #24]
 8004408:	4618      	mov	r0, r3
 800440a:	1cfb      	adds	r3, r7, #3
 800440c:	2201      	movs	r2, #1
 800440e:	4619      	mov	r1, r3
 8004410:	f7ff fd8a 	bl	8003f28 <SEGGER_RTT_ReadNoLock>
 8004414:	4603      	mov	r3, r0
 8004416:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	dd15      	ble.n	800444a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800441e:	78fb      	ldrb	r3, [r7, #3]
 8004420:	4618      	mov	r0, r3
 8004422:	f001 fa3f 	bl	80058a4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004426:	e010      	b.n	800444a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	b25b      	sxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	da0e      	bge.n	800444e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004430:	4b09      	ldr	r3, [pc, #36]	; (8004458 <_HandleIncomingPacket+0xe0>)
 8004432:	7e1b      	ldrb	r3, [r3, #24]
 8004434:	4618      	mov	r0, r3
 8004436:	1cfb      	adds	r3, r7, #3
 8004438:	2201      	movs	r2, #1
 800443a:	4619      	mov	r1, r3
 800443c:	f7ff fd74 	bl	8003f28 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004440:	e005      	b.n	800444e <_HandleIncomingPacket+0xd6>
    }
  }
 8004442:	bf00      	nop
 8004444:	e004      	b.n	8004450 <_HandleIncomingPacket+0xd8>
      break;
 8004446:	bf00      	nop
 8004448:	e002      	b.n	8004450 <_HandleIncomingPacket+0xd8>
      break;
 800444a:	bf00      	nop
 800444c:	e000      	b.n	8004450 <_HandleIncomingPacket+0xd8>
      break;
 800444e:	bf00      	nop
}
 8004450:	bf00      	nop
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	2001428c 	.word	0x2001428c

0800445c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800445c:	b580      	push	{r7, lr}
 800445e:	b08c      	sub	sp, #48	; 0x30
 8004460:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004462:	2301      	movs	r3, #1
 8004464:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004466:	1d3b      	adds	r3, r7, #4
 8004468:	3301      	adds	r3, #1
 800446a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004470:	4b32      	ldr	r3, [pc, #200]	; (800453c <_TrySendOverflowPacket+0xe0>)
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
 8004476:	e00b      	b.n	8004490 <_TrySendOverflowPacket+0x34>
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447a:	b2da      	uxtb	r2, r3
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447e:	1c59      	adds	r1, r3, #1
 8004480:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	09db      	lsrs	r3, r3, #7
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	2b7f      	cmp	r3, #127	; 0x7f
 8004494:	d8f0      	bhi.n	8004478 <_TrySendOverflowPacket+0x1c>
 8004496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800449c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80044a6:	4b26      	ldr	r3, [pc, #152]	; (8004540 <_TrySendOverflowPacket+0xe4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80044ac:	4b23      	ldr	r3, [pc, #140]	; (800453c <_TrySendOverflowPacket+0xe0>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	623b      	str	r3, [r7, #32]
 80044be:	e00b      	b.n	80044d8 <_TrySendOverflowPacket+0x7c>
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	1c59      	adds	r1, r3, #1
 80044c8:	6279      	str	r1, [r7, #36]	; 0x24
 80044ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	09db      	lsrs	r3, r3, #7
 80044d6:	623b      	str	r3, [r7, #32]
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	2b7f      	cmp	r3, #127	; 0x7f
 80044dc:	d8f0      	bhi.n	80044c0 <_TrySendOverflowPacket+0x64>
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	627a      	str	r2, [r7, #36]	; 0x24
 80044e4:	6a3a      	ldr	r2, [r7, #32]
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <_TrySendOverflowPacket+0xe0>)
 80044f0:	785b      	ldrb	r3, [r3, #1]
 80044f2:	4618      	mov	r0, r3
 80044f4:	1d3b      	adds	r3, r7, #4
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	1d3b      	adds	r3, r7, #4
 80044fe:	4619      	mov	r1, r3
 8004500:	f7fb fe86 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004504:	4603      	mov	r3, r0
 8004506:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8004508:	f7ff fade 	bl	8003ac8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004512:	4a0a      	ldr	r2, [pc, #40]	; (800453c <_TrySendOverflowPacket+0xe0>)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004518:	4b08      	ldr	r3, [pc, #32]	; (800453c <_TrySendOverflowPacket+0xe0>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	3b01      	subs	r3, #1
 800451e:	b2da      	uxtb	r2, r3
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <_TrySendOverflowPacket+0xe0>)
 8004522:	701a      	strb	r2, [r3, #0]
 8004524:	e004      	b.n	8004530 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004526:	4b05      	ldr	r3, [pc, #20]	; (800453c <_TrySendOverflowPacket+0xe0>)
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	3301      	adds	r3, #1
 800452c:	4a03      	ldr	r2, [pc, #12]	; (800453c <_TrySendOverflowPacket+0xe0>)
 800452e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004530:	693b      	ldr	r3, [r7, #16]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3730      	adds	r7, #48	; 0x30
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	2001428c 	.word	0x2001428c
 8004540:	e0001004 	.word	0xe0001004

08004544 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004544:	b580      	push	{r7, lr}
 8004546:	b08a      	sub	sp, #40	; 0x28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004550:	4b6d      	ldr	r3, [pc, #436]	; (8004708 <_SendPacket+0x1c4>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d010      	beq.n	800457a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004558:	4b6b      	ldr	r3, [pc, #428]	; (8004708 <_SendPacket+0x1c4>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80a5 	beq.w	80046ac <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004562:	4b69      	ldr	r3, [pc, #420]	; (8004708 <_SendPacket+0x1c4>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d109      	bne.n	800457e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800456a:	f7ff ff77 	bl	800445c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800456e:	4b66      	ldr	r3, [pc, #408]	; (8004708 <_SendPacket+0x1c4>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b01      	cmp	r3, #1
 8004574:	f040 809c 	bne.w	80046b0 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004578:	e001      	b.n	800457e <_SendPacket+0x3a>
    goto Send;
 800457a:	bf00      	nop
 800457c:	e000      	b.n	8004580 <_SendPacket+0x3c>
Send:
 800457e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b1f      	cmp	r3, #31
 8004584:	d809      	bhi.n	800459a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004586:	4b60      	ldr	r3, [pc, #384]	; (8004708 <_SendPacket+0x1c4>)
 8004588:	69da      	ldr	r2, [r3, #28]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	f040 808d 	bne.w	80046b4 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b17      	cmp	r3, #23
 800459e:	d807      	bhi.n	80045b0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	e03d      	b.n	800462c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	2b7f      	cmp	r3, #127	; 0x7f
 80045bc:	d912      	bls.n	80045e4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	09da      	lsrs	r2, r3, #7
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	3a01      	subs	r2, #1
 80045d6:	60fa      	str	r2, [r7, #12]
 80045d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e006      	b.n	80045f2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b7f      	cmp	r3, #127	; 0x7f
 80045f6:	d912      	bls.n	800461e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	09da      	lsrs	r2, r3, #7
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3b01      	subs	r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	3a01      	subs	r2, #1
 8004610:	60fa      	str	r2, [r7, #12]
 8004612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004616:	b2da      	uxtb	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	e006      	b.n	800462c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3b01      	subs	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	b2da      	uxtb	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800462c:	4b37      	ldr	r3, [pc, #220]	; (800470c <_SendPacket+0x1c8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004632:	4b35      	ldr	r3, [pc, #212]	; (8004708 <_SendPacket+0x1c4>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	623b      	str	r3, [r7, #32]
 8004644:	e00b      	b.n	800465e <_SendPacket+0x11a>
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	b2da      	uxtb	r2, r3
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	1c59      	adds	r1, r3, #1
 800464e:	6279      	str	r1, [r7, #36]	; 0x24
 8004650:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	09db      	lsrs	r3, r3, #7
 800465c:	623b      	str	r3, [r7, #32]
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	2b7f      	cmp	r3, #127	; 0x7f
 8004662:	d8f0      	bhi.n	8004646 <_SendPacket+0x102>
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	627a      	str	r2, [r7, #36]	; 0x24
 800466a:	6a3a      	ldr	r2, [r7, #32]
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004674:	4b24      	ldr	r3, [pc, #144]	; (8004708 <_SendPacket+0x1c4>)
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	4618      	mov	r0, r3
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	461a      	mov	r2, r3
 8004682:	68f9      	ldr	r1, [r7, #12]
 8004684:	f7fb fdc4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004688:	4603      	mov	r3, r0
 800468a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800468c:	f7ff fa1c 	bl	8003ac8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004696:	4a1c      	ldr	r2, [pc, #112]	; (8004708 <_SendPacket+0x1c4>)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	60d3      	str	r3, [r2, #12]
 800469c:	e00b      	b.n	80046b6 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800469e:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <_SendPacket+0x1c4>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	3301      	adds	r3, #1
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	4b18      	ldr	r3, [pc, #96]	; (8004708 <_SendPacket+0x1c4>)
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e004      	b.n	80046b6 <_SendPacket+0x172>
    goto SendDone;
 80046ac:	bf00      	nop
 80046ae:	e002      	b.n	80046b6 <_SendPacket+0x172>
      goto SendDone;
 80046b0:	bf00      	nop
 80046b2:	e000      	b.n	80046b6 <_SendPacket+0x172>
      goto SendDone;
 80046b4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <_SendPacket+0x1c4>)
 80046b8:	7e1b      	ldrb	r3, [r3, #24]
 80046ba:	4619      	mov	r1, r3
 80046bc:	4a14      	ldr	r2, [pc, #80]	; (8004710 <_SendPacket+0x1cc>)
 80046be:	460b      	mov	r3, r1
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	440b      	add	r3, r1
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	4413      	add	r3, r2
 80046c8:	336c      	adds	r3, #108	; 0x6c
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <_SendPacket+0x1c4>)
 80046ce:	7e1b      	ldrb	r3, [r3, #24]
 80046d0:	4618      	mov	r0, r3
 80046d2:	490f      	ldr	r1, [pc, #60]	; (8004710 <_SendPacket+0x1cc>)
 80046d4:	4603      	mov	r3, r0
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	4403      	add	r3, r0
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	440b      	add	r3, r1
 80046de:	3370      	adds	r3, #112	; 0x70
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d00b      	beq.n	80046fe <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <_SendPacket+0x1c4>)
 80046e8:	789b      	ldrb	r3, [r3, #2]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d107      	bne.n	80046fe <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80046ee:	4b06      	ldr	r3, [pc, #24]	; (8004708 <_SendPacket+0x1c4>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80046f4:	f7ff fe40 	bl	8004378 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <_SendPacket+0x1c4>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80046fe:	bf00      	nop
 8004700:	3728      	adds	r7, #40	; 0x28
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	2001428c 	.word	0x2001428c
 800470c:	e0001004 	.word	0xe0001004
 8004710:	200143f8 	.word	0x200143f8

08004714 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004714:	b580      	push	{r7, lr}
 8004716:	b08a      	sub	sp, #40	; 0x28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	3301      	adds	r3, #1
 800472a:	2b80      	cmp	r3, #128	; 0x80
 800472c:	d80a      	bhi.n	8004744 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	1c59      	adds	r1, r3, #1
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6051      	str	r1, [r2, #4]
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b80      	cmp	r3, #128	; 0x80
 800474a:	d15a      	bne.n	8004802 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691a      	ldr	r2, [r3, #16]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	623b      	str	r3, [r7, #32]
 800476c:	e00b      	b.n	8004786 <_StoreChar+0x72>
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	b2da      	uxtb	r2, r3
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	1c59      	adds	r1, r3, #1
 8004776:	6279      	str	r1, [r7, #36]	; 0x24
 8004778:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	09db      	lsrs	r3, r3, #7
 8004784:	623b      	str	r3, [r7, #32]
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	2b7f      	cmp	r3, #127	; 0x7f
 800478a:	d8f0      	bhi.n	800476e <_StoreChar+0x5a>
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	627a      	str	r2, [r7, #36]	; 0x24
 8004792:	6a3a      	ldr	r2, [r7, #32]
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	61fb      	str	r3, [r7, #28]
 80047a0:	2300      	movs	r3, #0
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	e00b      	b.n	80047be <_StoreChar+0xaa>
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	1c59      	adds	r1, r3, #1
 80047ae:	61f9      	str	r1, [r7, #28]
 80047b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047b4:	b2d2      	uxtb	r2, r2
 80047b6:	701a      	strb	r2, [r3, #0]
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	09db      	lsrs	r3, r3, #7
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b7f      	cmp	r3, #127	; 0x7f
 80047c2:	d8f0      	bhi.n	80047a6 <_StoreChar+0x92>
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	61fa      	str	r2, [r7, #28]
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	221a      	movs	r2, #26
 80047da:	6939      	ldr	r1, [r7, #16]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7ff feb1 	bl	8004544 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fdba 	bl	8004360 <_PreparePacket>
 80047ec:	4602      	mov	r2, r0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	611a      	str	r2, [r3, #16]
  }
}
 8004802:	bf00      	nop
 8004804:	3728      	adds	r7, #40	; 0x28
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	; 0x28
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800481e:	2301      	movs	r3, #1
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004822:	2301      	movs	r3, #1
 8004824:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004826:	e007      	b.n	8004838 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004828:	6a3a      	ldr	r2, [r7, #32]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	623b      	str	r3, [r7, #32]
    Width++;
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	3301      	adds	r3, #1
 8004836:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004838:	6a3a      	ldr	r2, [r7, #32]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	429a      	cmp	r2, r3
 800483e:	d2f3      	bcs.n	8004828 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	429a      	cmp	r2, r3
 8004846:	d901      	bls.n	800484c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800484c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d11f      	bne.n	8004896 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	2b00      	cmp	r3, #0
 800485a:	d01c      	beq.n	8004896 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <_PrintUnsigned+0x66>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <_PrintUnsigned+0x66>
        c = '0';
 800486c:	2330      	movs	r3, #48	; 0x30
 800486e:	76fb      	strb	r3, [r7, #27]
 8004870:	e001      	b.n	8004876 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004872:	2320      	movs	r3, #32
 8004874:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004876:	e007      	b.n	8004888 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	3b01      	subs	r3, #1
 800487c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800487e:	7efb      	ldrb	r3, [r7, #27]
 8004880:	4619      	mov	r1, r3
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f7ff ff46 	bl	8004714 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <_PrintUnsigned+0x8a>
 800488e:	69fa      	ldr	r2, [r7, #28]
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	429a      	cmp	r2, r3
 8004894:	d3f0      	bcc.n	8004878 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d903      	bls.n	80048a4 <_PrintUnsigned+0x98>
      NumDigits--;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	3b01      	subs	r3, #1
 80048a0:	603b      	str	r3, [r7, #0]
 80048a2:	e009      	b.n	80048b8 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ac:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d200      	bcs.n	80048b8 <_PrintUnsigned+0xac>
        break;
 80048b6:	e005      	b.n	80048c4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	fb02 f303 	mul.w	r3, r2, r3
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80048c2:	e7e8      	b.n	8004896 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80048dc:	4a15      	ldr	r2, [pc, #84]	; (8004934 <_PrintUnsigned+0x128>)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	4413      	add	r3, r2
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	4619      	mov	r1, r3
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff ff14 	bl	8004714 <_StoreChar>
    Digit /= Base;
 80048ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e3      	bne.n	80048c4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80048fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d011      	beq.n	800492a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00e      	beq.n	800492a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800490c:	e006      	b.n	800491c <_PrintUnsigned+0x110>
        FieldWidth--;
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	3b01      	subs	r3, #1
 8004912:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004914:	2120      	movs	r1, #32
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7ff fefc 	bl	8004714 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <_PrintUnsigned+0x11e>
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	429a      	cmp	r2, r3
 8004928:	d3f1      	bcc.n	800490e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800492a:	bf00      	nop
 800492c:	3728      	adds	r7, #40	; 0x28
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	08006604 	.word	0x08006604

08004938 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	bfb8      	it	lt
 800494c:	425b      	neglt	r3, r3
 800494e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004950:	2301      	movs	r3, #1
 8004952:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004954:	e007      	b.n	8004966 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	fb92 f3f3 	sdiv	r3, r2, r3
 800495e:	613b      	str	r3, [r7, #16]
    Width++;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	3301      	adds	r3, #1
 8004964:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	429a      	cmp	r2, r3
 800496c:	daf3      	bge.n	8004956 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	429a      	cmp	r2, r3
 8004974:	d901      	bls.n	800497a <_PrintInt+0x42>
    Width = NumDigits;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <_PrintInt+0x5e>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	db04      	blt.n	8004990 <_PrintInt+0x58>
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <_PrintInt+0x5e>
    FieldWidth--;
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	3b01      	subs	r3, #1
 8004994:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <_PrintInt+0x6e>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d016      	beq.n	80049d4 <_PrintInt+0x9c>
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d111      	bne.n	80049d4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00e      	beq.n	80049d4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049b6:	e006      	b.n	80049c6 <_PrintInt+0x8e>
        FieldWidth--;
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80049be:	2120      	movs	r1, #32
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7ff fea7 	bl	8004714 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <_PrintInt+0x9c>
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d3f1      	bcc.n	80049b8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	da07      	bge.n	80049ea <_PrintInt+0xb2>
    v = -v;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	425b      	negs	r3, r3
 80049de:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80049e0:	212d      	movs	r1, #45	; 0x2d
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff fe96 	bl	8004714 <_StoreChar>
 80049e8:	e008      	b.n	80049fc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80049f4:	212b      	movs	r1, #43	; 0x2b
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7ff fe8c 	bl	8004714 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d019      	beq.n	8004a3a <_PrintInt+0x102>
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d114      	bne.n	8004a3a <_PrintInt+0x102>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d111      	bne.n	8004a3a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00e      	beq.n	8004a3a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a1c:	e006      	b.n	8004a2c <_PrintInt+0xf4>
        FieldWidth--;
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004a24:	2130      	movs	r1, #48	; 0x30
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f7ff fe74 	bl	8004714 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <_PrintInt+0x102>
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d3f1      	bcc.n	8004a1e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004a3a:	68b9      	ldr	r1, [r7, #8]
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f7ff fedf 	bl	800480c <_PrintUnsigned>
}
 8004a4e:	bf00      	nop
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b098      	sub	sp, #96	; 0x60
 8004a5c:	af02      	add	r7, sp, #8
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a64:	f3ef 8311 	mrs	r3, BASEPRI
 8004a68:	f04f 0120 	mov.w	r1, #32
 8004a6c:	f381 8811 	msr	BASEPRI, r1
 8004a70:	633b      	str	r3, [r7, #48]	; 0x30
 8004a72:	48b7      	ldr	r0, [pc, #732]	; (8004d50 <_VPrintTarget+0x2f8>)
 8004a74:	f7ff fc74 	bl	8004360 <_PreparePacket>
 8004a78:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004a7a:	4bb5      	ldr	r3, [pc, #724]	; (8004d50 <_VPrintTarget+0x2f8>)
 8004a7c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004a9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8183 	beq.w	8004dae <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004aac:	2b25      	cmp	r3, #37	; 0x25
 8004aae:	f040 8170 	bne.w	8004d92 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004ac2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ac6:	3b23      	subs	r3, #35	; 0x23
 8004ac8:	2b0d      	cmp	r3, #13
 8004aca:	d83f      	bhi.n	8004b4c <_VPrintTarget+0xf4>
 8004acc:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <_VPrintTarget+0x7c>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004b3d 	.word	0x08004b3d
 8004ad8:	08004b4d 	.word	0x08004b4d
 8004adc:	08004b4d 	.word	0x08004b4d
 8004ae0:	08004b4d 	.word	0x08004b4d
 8004ae4:	08004b4d 	.word	0x08004b4d
 8004ae8:	08004b4d 	.word	0x08004b4d
 8004aec:	08004b4d 	.word	0x08004b4d
 8004af0:	08004b4d 	.word	0x08004b4d
 8004af4:	08004b2d 	.word	0x08004b2d
 8004af8:	08004b4d 	.word	0x08004b4d
 8004afc:	08004b0d 	.word	0x08004b0d
 8004b00:	08004b4d 	.word	0x08004b4d
 8004b04:	08004b4d 	.word	0x08004b4d
 8004b08:	08004b1d 	.word	0x08004b1d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3301      	adds	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	e01a      	b.n	8004b52 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b1e:	f043 0302 	orr.w	r3, r3, #2
 8004b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3301      	adds	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	e012      	b.n	8004b52 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004b2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2e:	f043 0304 	orr.w	r3, r3, #4
 8004b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3301      	adds	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]
 8004b3a:	e00a      	b.n	8004b52 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3e:	f043 0308 	orr.w	r3, r3, #8
 8004b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3301      	adds	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	e002      	b.n	8004b52 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b50:	bf00      	nop
        }
      } while (v);
 8004b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1b0      	bne.n	8004aba <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004b64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b68:	2b2f      	cmp	r3, #47	; 0x2f
 8004b6a:	d912      	bls.n	8004b92 <_VPrintTarget+0x13a>
 8004b6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b70:	2b39      	cmp	r3, #57	; 0x39
 8004b72:	d80e      	bhi.n	8004b92 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	3301      	adds	r3, #1
 8004b78:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004b7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	461a      	mov	r2, r3
 8004b86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3b30      	subs	r3, #48	; 0x30
 8004b8e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004b90:	e7e4      	b.n	8004b5c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004b92:	2300      	movs	r3, #0
 8004b94:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004b9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ba4:	d11d      	bne.n	8004be2 <_VPrintTarget+0x18a>
        sFormat++;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004bb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bb8:	2b2f      	cmp	r3, #47	; 0x2f
 8004bba:	d912      	bls.n	8004be2 <_VPrintTarget+0x18a>
 8004bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bc0:	2b39      	cmp	r3, #57	; 0x39
 8004bc2:	d80e      	bhi.n	8004be2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004bca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bda:	4413      	add	r3, r2
 8004bdc:	3b30      	subs	r3, #48	; 0x30
 8004bde:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004be0:	e7e4      	b.n	8004bac <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004bea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bee:	2b6c      	cmp	r3, #108	; 0x6c
 8004bf0:	d003      	beq.n	8004bfa <_VPrintTarget+0x1a2>
 8004bf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bf6:	2b68      	cmp	r3, #104	; 0x68
 8004bf8:	d107      	bne.n	8004c0a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3301      	adds	r3, #1
 8004c06:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004c08:	e7ef      	b.n	8004bea <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004c0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c0e:	2b25      	cmp	r3, #37	; 0x25
 8004c10:	f000 80b3 	beq.w	8004d7a <_VPrintTarget+0x322>
 8004c14:	2b25      	cmp	r3, #37	; 0x25
 8004c16:	f2c0 80b7 	blt.w	8004d88 <_VPrintTarget+0x330>
 8004c1a:	2b78      	cmp	r3, #120	; 0x78
 8004c1c:	f300 80b4 	bgt.w	8004d88 <_VPrintTarget+0x330>
 8004c20:	2b58      	cmp	r3, #88	; 0x58
 8004c22:	f2c0 80b1 	blt.w	8004d88 <_VPrintTarget+0x330>
 8004c26:	3b58      	subs	r3, #88	; 0x58
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	f200 80ad 	bhi.w	8004d88 <_VPrintTarget+0x330>
 8004c2e:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <_VPrintTarget+0x1dc>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004d2b 	.word	0x08004d2b
 8004c38:	08004d89 	.word	0x08004d89
 8004c3c:	08004d89 	.word	0x08004d89
 8004c40:	08004d89 	.word	0x08004d89
 8004c44:	08004d89 	.word	0x08004d89
 8004c48:	08004d89 	.word	0x08004d89
 8004c4c:	08004d89 	.word	0x08004d89
 8004c50:	08004d89 	.word	0x08004d89
 8004c54:	08004d89 	.word	0x08004d89
 8004c58:	08004d89 	.word	0x08004d89
 8004c5c:	08004d89 	.word	0x08004d89
 8004c60:	08004cb9 	.word	0x08004cb9
 8004c64:	08004cdf 	.word	0x08004cdf
 8004c68:	08004d89 	.word	0x08004d89
 8004c6c:	08004d89 	.word	0x08004d89
 8004c70:	08004d89 	.word	0x08004d89
 8004c74:	08004d89 	.word	0x08004d89
 8004c78:	08004d89 	.word	0x08004d89
 8004c7c:	08004d89 	.word	0x08004d89
 8004c80:	08004d89 	.word	0x08004d89
 8004c84:	08004d89 	.word	0x08004d89
 8004c88:	08004d89 	.word	0x08004d89
 8004c8c:	08004d89 	.word	0x08004d89
 8004c90:	08004d89 	.word	0x08004d89
 8004c94:	08004d55 	.word	0x08004d55
 8004c98:	08004d89 	.word	0x08004d89
 8004c9c:	08004d89 	.word	0x08004d89
 8004ca0:	08004d89 	.word	0x08004d89
 8004ca4:	08004d89 	.word	0x08004d89
 8004ca8:	08004d05 	.word	0x08004d05
 8004cac:	08004d89 	.word	0x08004d89
 8004cb0:	08004d89 	.word	0x08004d89
 8004cb4:	08004d2b 	.word	0x08004d2b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	1d19      	adds	r1, r3, #4
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6011      	str	r1, [r2, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004ccc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff fd1c 	bl	8004714 <_StoreChar>
        break;
 8004cdc:	e055      	b.n	8004d8a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	1d19      	adds	r1, r3, #4
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6011      	str	r1, [r2, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004cec:	f107 0014 	add.w	r0, r7, #20
 8004cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cfa:	220a      	movs	r2, #10
 8004cfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004cfe:	f7ff fe1b 	bl	8004938 <_PrintInt>
        break;
 8004d02:	e042      	b.n	8004d8a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	1d19      	adds	r1, r3, #4
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6011      	str	r1, [r2, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004d12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d14:	f107 0014 	add.w	r0, r7, #20
 8004d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d1a:	9301      	str	r3, [sp, #4]
 8004d1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d22:	220a      	movs	r2, #10
 8004d24:	f7ff fd72 	bl	800480c <_PrintUnsigned>
        break;
 8004d28:	e02f      	b.n	8004d8a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	1d19      	adds	r1, r3, #4
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6011      	str	r1, [r2, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004d38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d3a:	f107 0014 	add.w	r0, r7, #20
 8004d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d40:	9301      	str	r3, [sp, #4]
 8004d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d48:	2210      	movs	r2, #16
 8004d4a:	f7ff fd5f 	bl	800480c <_PrintUnsigned>
        break;
 8004d4e:	e01c      	b.n	8004d8a <_VPrintTarget+0x332>
 8004d50:	200142bc 	.word	0x200142bc
      case 'p':
        v = va_arg(*pParamList, int);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	1d19      	adds	r1, r3, #4
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6011      	str	r1, [r2, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004d62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d64:	f107 0014 	add.w	r0, r7, #20
 8004d68:	2300      	movs	r3, #0
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	2308      	movs	r3, #8
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2308      	movs	r3, #8
 8004d72:	2210      	movs	r2, #16
 8004d74:	f7ff fd4a 	bl	800480c <_PrintUnsigned>
        break;
 8004d78:	e007      	b.n	8004d8a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004d7a:	f107 0314 	add.w	r3, r7, #20
 8004d7e:	2125      	movs	r1, #37	; 0x25
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff fcc7 	bl	8004714 <_StoreChar>
        break;
 8004d86:	e000      	b.n	8004d8a <_VPrintTarget+0x332>
      default:
        break;
 8004d88:	bf00      	nop
      }
      sFormat++;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	e007      	b.n	8004da2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004d92:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004d96:	f107 0314 	add.w	r3, r7, #20
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fcb9 	bl	8004714 <_StoreChar>
    }
  } while (*sFormat);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f47f ae72 	bne.w	8004a90 <_VPrintTarget+0x38>
 8004dac:	e000      	b.n	8004db0 <_VPrintTarget+0x358>
      break;
 8004dae:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d041      	beq.n	8004e3a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dc6:	e00b      	b.n	8004de0 <_VPrintTarget+0x388>
 8004dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dce:	1c59      	adds	r1, r3, #1
 8004dd0:	6439      	str	r1, [r7, #64]	; 0x40
 8004dd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ddc:	09db      	lsrs	r3, r3, #7
 8004dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de2:	2b7f      	cmp	r3, #127	; 0x7f
 8004de4:	d8f0      	bhi.n	8004dc8 <_VPrintTarget+0x370>
 8004de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	643a      	str	r2, [r7, #64]	; 0x40
 8004dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfe:	e00b      	b.n	8004e18 <_VPrintTarget+0x3c0>
 8004e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	1c59      	adds	r1, r3, #1
 8004e08:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]
 8004e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e14:	09db      	lsrs	r3, r3, #7
 8004e16:	637b      	str	r3, [r7, #52]	; 0x34
 8004e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e1c:	d8f0      	bhi.n	8004e00 <_VPrintTarget+0x3a8>
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e26:	b2d2      	uxtb	r2, r2
 8004e28:	701a      	strb	r2, [r3, #0]
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	69b9      	ldr	r1, [r7, #24]
 8004e32:	221a      	movs	r2, #26
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fb85 	bl	8004544 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004e40:	bf00      	nop
 8004e42:	3758      	adds	r7, #88	; 0x58
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af02      	add	r7, sp, #8
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e56:	2300      	movs	r3, #0
 8004e58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e5c:	4917      	ldr	r1, [pc, #92]	; (8004ebc <SEGGER_SYSVIEW_Init+0x74>)
 8004e5e:	4818      	ldr	r0, [pc, #96]	; (8004ec0 <SEGGER_SYSVIEW_Init+0x78>)
 8004e60:	f7ff f95e 	bl	8004120 <SEGGER_RTT_AllocUpBuffer>
 8004e64:	4603      	mov	r3, r0
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	4b16      	ldr	r3, [pc, #88]	; (8004ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e6a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004e6c:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e6e:	785a      	ldrb	r2, [r3, #1]
 8004e70:	4b14      	ldr	r3, [pc, #80]	; (8004ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e72:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e74:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e76:	7e1b      	ldrb	r3, [r3, #24]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	2308      	movs	r3, #8
 8004e80:	4a11      	ldr	r2, [pc, #68]	; (8004ec8 <SEGGER_SYSVIEW_Init+0x80>)
 8004e82:	490f      	ldr	r1, [pc, #60]	; (8004ec0 <SEGGER_SYSVIEW_Init+0x78>)
 8004e84:	f7ff f9d0 	bl	8004228 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004e88:	4b0e      	ldr	r3, [pc, #56]	; (8004ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <SEGGER_SYSVIEW_Init+0x84>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a0c      	ldr	r2, [pc, #48]	; (8004ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e94:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004e96:	4a0b      	ldr	r2, [pc, #44]	; (8004ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004e9c:	4a09      	ldr	r2, [pc, #36]	; (8004ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004ea2:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004ea8:	4a06      	ldr	r2, [pc, #24]	; (8004ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004eae:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <SEGGER_SYSVIEW_Init+0x7c>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20013284 	.word	0x20013284
 8004ec0:	080065cc 	.word	0x080065cc
 8004ec4:	2001428c 	.word	0x2001428c
 8004ec8:	20014284 	.word	0x20014284
 8004ecc:	e0001004 	.word	0xe0001004

08004ed0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004ed8:	4a04      	ldr	r2, [pc, #16]	; (8004eec <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6113      	str	r3, [r2, #16]
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	2001428c 	.word	0x2001428c

08004ef0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8004efc:	f04f 0120 	mov.w	r1, #32
 8004f00:	f381 8811 	msr	BASEPRI, r1
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	4808      	ldr	r0, [pc, #32]	; (8004f28 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004f08:	f7ff fa2a 	bl	8004360 <_PreparePacket>
 8004f0c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	68b8      	ldr	r0, [r7, #8]
 8004f14:	f7ff fb16 	bl	8004544 <_SendPacket>
  RECORD_END();
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f383 8811 	msr	BASEPRI, r3
}
 8004f1e:	bf00      	nop
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	200142bc 	.word	0x200142bc

08004f2c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f36:	f3ef 8311 	mrs	r3, BASEPRI
 8004f3a:	f04f 0120 	mov.w	r1, #32
 8004f3e:	f381 8811 	msr	BASEPRI, r1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	4816      	ldr	r0, [pc, #88]	; (8004fa0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004f46:	f7ff fa0b 	bl	8004360 <_PreparePacket>
 8004f4a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	61fb      	str	r3, [r7, #28]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	61bb      	str	r3, [r7, #24]
 8004f58:	e00b      	b.n	8004f72 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	1c59      	adds	r1, r3, #1
 8004f62:	61f9      	str	r1, [r7, #28]
 8004f64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	09db      	lsrs	r3, r3, #7
 8004f70:	61bb      	str	r3, [r7, #24]
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	2b7f      	cmp	r3, #127	; 0x7f
 8004f76:	d8f0      	bhi.n	8004f5a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	61fa      	str	r2, [r7, #28]
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	6938      	ldr	r0, [r7, #16]
 8004f8e:	f7ff fad9 	bl	8004544 <_SendPacket>
  RECORD_END();
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f383 8811 	msr	BASEPRI, r3
}
 8004f98:	bf00      	nop
 8004f9a:	3720      	adds	r7, #32
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	200142bc 	.word	0x200142bc

08004fa4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08c      	sub	sp, #48	; 0x30
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fb0:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb4:	f04f 0120 	mov.w	r1, #32
 8004fb8:	f381 8811 	msr	BASEPRI, r1
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	4825      	ldr	r0, [pc, #148]	; (8005054 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004fc0:	f7ff f9ce 	bl	8004360 <_PreparePacket>
 8004fc4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd2:	e00b      	b.n	8004fec <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fda:	1c59      	adds	r1, r3, #1
 8004fdc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	09db      	lsrs	r3, r3, #7
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff0:	d8f0      	bhi.n	8004fd4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ff8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	623b      	str	r3, [r7, #32]
 800500a:	e00b      	b.n	8005024 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	b2da      	uxtb	r2, r3
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	1c59      	adds	r1, r3, #1
 8005014:	6279      	str	r1, [r7, #36]	; 0x24
 8005016:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	09db      	lsrs	r3, r3, #7
 8005022:	623b      	str	r3, [r7, #32]
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	2b7f      	cmp	r3, #127	; 0x7f
 8005028:	d8f0      	bhi.n	800500c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	627a      	str	r2, [r7, #36]	; 0x24
 8005030:	6a3a      	ldr	r2, [r7, #32]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	6979      	ldr	r1, [r7, #20]
 800503e:	69b8      	ldr	r0, [r7, #24]
 8005040:	f7ff fa80 	bl	8004544 <_SendPacket>
  RECORD_END();
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	f383 8811 	msr	BASEPRI, r3
}
 800504a:	bf00      	nop
 800504c:	3730      	adds	r7, #48	; 0x30
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	200142bc 	.word	0x200142bc

08005058 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b08c      	sub	sp, #48	; 0x30
 800505c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800505e:	4b59      	ldr	r3, [pc, #356]	; (80051c4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005060:	2201      	movs	r2, #1
 8005062:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005064:	f3ef 8311 	mrs	r3, BASEPRI
 8005068:	f04f 0120 	mov.w	r1, #32
 800506c:	f381 8811 	msr	BASEPRI, r1
 8005070:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005072:	4b54      	ldr	r3, [pc, #336]	; (80051c4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005074:	785b      	ldrb	r3, [r3, #1]
 8005076:	220a      	movs	r2, #10
 8005078:	4953      	ldr	r1, [pc, #332]	; (80051c8 <SEGGER_SYSVIEW_Start+0x170>)
 800507a:	4618      	mov	r0, r3
 800507c:	f7fb f8c8 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005086:	f7fe fd1f 	bl	8003ac8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800508a:	200a      	movs	r0, #10
 800508c:	f7ff ff30 	bl	8004ef0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005090:	f3ef 8311 	mrs	r3, BASEPRI
 8005094:	f04f 0120 	mov.w	r1, #32
 8005098:	f381 8811 	msr	BASEPRI, r1
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	484b      	ldr	r0, [pc, #300]	; (80051cc <SEGGER_SYSVIEW_Start+0x174>)
 80050a0:	f7ff f95e 	bl	8004360 <_PreparePacket>
 80050a4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ae:	4b45      	ldr	r3, [pc, #276]	; (80051c4 <SEGGER_SYSVIEW_Start+0x16c>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b4:	e00b      	b.n	80050ce <SEGGER_SYSVIEW_Start+0x76>
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050bc:	1c59      	adds	r1, r3, #1
 80050be:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	701a      	strb	r2, [r3, #0]
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	09db      	lsrs	r3, r3, #7
 80050cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d0:	2b7f      	cmp	r3, #127	; 0x7f
 80050d2:	d8f0      	bhi.n	80050b6 <SEGGER_SYSVIEW_Start+0x5e>
 80050d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
 80050e8:	4b36      	ldr	r3, [pc, #216]	; (80051c4 <SEGGER_SYSVIEW_Start+0x16c>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	623b      	str	r3, [r7, #32]
 80050ee:	e00b      	b.n	8005108 <SEGGER_SYSVIEW_Start+0xb0>
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	b2da      	uxtb	r2, r3
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	1c59      	adds	r1, r3, #1
 80050f8:	6279      	str	r1, [r7, #36]	; 0x24
 80050fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	09db      	lsrs	r3, r3, #7
 8005106:	623b      	str	r3, [r7, #32]
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	2b7f      	cmp	r3, #127	; 0x7f
 800510c:	d8f0      	bhi.n	80050f0 <SEGGER_SYSVIEW_Start+0x98>
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	627a      	str	r2, [r7, #36]	; 0x24
 8005114:	6a3a      	ldr	r2, [r7, #32]
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <SEGGER_SYSVIEW_Start+0x16c>)
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	61bb      	str	r3, [r7, #24]
 8005128:	e00b      	b.n	8005142 <SEGGER_SYSVIEW_Start+0xea>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	1c59      	adds	r1, r3, #1
 8005132:	61f9      	str	r1, [r7, #28]
 8005134:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	701a      	strb	r2, [r3, #0]
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	09db      	lsrs	r3, r3, #7
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b7f      	cmp	r3, #127	; 0x7f
 8005146:	d8f0      	bhi.n	800512a <SEGGER_SYSVIEW_Start+0xd2>
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	61fa      	str	r2, [r7, #28]
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	701a      	strb	r2, [r3, #0]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	2300      	movs	r3, #0
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	e00b      	b.n	800517a <SEGGER_SYSVIEW_Start+0x122>
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	b2da      	uxtb	r2, r3
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	1c59      	adds	r1, r3, #1
 800516a:	6179      	str	r1, [r7, #20]
 800516c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005170:	b2d2      	uxtb	r2, r2
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	09db      	lsrs	r3, r3, #7
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b7f      	cmp	r3, #127	; 0x7f
 800517e:	d8f0      	bhi.n	8005162 <SEGGER_SYSVIEW_Start+0x10a>
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	617a      	str	r2, [r7, #20]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005190:	2218      	movs	r2, #24
 8005192:	6839      	ldr	r1, [r7, #0]
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff f9d5 	bl	8004544 <_SendPacket>
      RECORD_END();
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80051a0:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <SEGGER_SYSVIEW_Start+0x16c>)
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d002      	beq.n	80051ae <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80051a8:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <SEGGER_SYSVIEW_Start+0x16c>)
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80051ae:	f000 f9eb 	bl	8005588 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80051b2:	f000 f9b1 	bl	8005518 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80051b6:	f000 fc13 	bl	80059e0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80051ba:	bf00      	nop
 80051bc:	3730      	adds	r7, #48	; 0x30
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	2001428c 	.word	0x2001428c
 80051c8:	080065f8 	.word	0x080065f8
 80051cc:	200142bc 	.word	0x200142bc

080051d0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80051d6:	f3ef 8311 	mrs	r3, BASEPRI
 80051da:	f04f 0120 	mov.w	r1, #32
 80051de:	f381 8811 	msr	BASEPRI, r1
 80051e2:	607b      	str	r3, [r7, #4]
 80051e4:	480b      	ldr	r0, [pc, #44]	; (8005214 <SEGGER_SYSVIEW_Stop+0x44>)
 80051e6:	f7ff f8bb 	bl	8004360 <_PreparePacket>
 80051ea:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80051ec:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <SEGGER_SYSVIEW_Stop+0x48>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80051f4:	220b      	movs	r2, #11
 80051f6:	6839      	ldr	r1, [r7, #0]
 80051f8:	6838      	ldr	r0, [r7, #0]
 80051fa:	f7ff f9a3 	bl	8004544 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80051fe:	4b06      	ldr	r3, [pc, #24]	; (8005218 <SEGGER_SYSVIEW_Stop+0x48>)
 8005200:	2200      	movs	r2, #0
 8005202:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f383 8811 	msr	BASEPRI, r3
}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	200142bc 	.word	0x200142bc
 8005218:	2001428c 	.word	0x2001428c

0800521c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800521c:	b580      	push	{r7, lr}
 800521e:	b08c      	sub	sp, #48	; 0x30
 8005220:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005222:	f3ef 8311 	mrs	r3, BASEPRI
 8005226:	f04f 0120 	mov.w	r1, #32
 800522a:	f381 8811 	msr	BASEPRI, r1
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	4845      	ldr	r0, [pc, #276]	; (8005348 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005232:	f7ff f895 	bl	8004360 <_PreparePacket>
 8005236:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005240:	4b42      	ldr	r3, [pc, #264]	; (800534c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
 8005246:	e00b      	b.n	8005260 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	b2da      	uxtb	r2, r3
 800524c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524e:	1c59      	adds	r1, r3, #1
 8005250:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005252:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005256:	b2d2      	uxtb	r2, r2
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	09db      	lsrs	r3, r3, #7
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	2b7f      	cmp	r3, #127	; 0x7f
 8005264:	d8f0      	bhi.n	8005248 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800526c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005274:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
 800527a:	4b34      	ldr	r3, [pc, #208]	; (800534c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	623b      	str	r3, [r7, #32]
 8005280:	e00b      	b.n	800529a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	1c59      	adds	r1, r3, #1
 800528a:	6279      	str	r1, [r7, #36]	; 0x24
 800528c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	701a      	strb	r2, [r3, #0]
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	09db      	lsrs	r3, r3, #7
 8005298:	623b      	str	r3, [r7, #32]
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	2b7f      	cmp	r3, #127	; 0x7f
 800529e:	d8f0      	bhi.n	8005282 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	627a      	str	r2, [r7, #36]	; 0x24
 80052a6:	6a3a      	ldr	r2, [r7, #32]
 80052a8:	b2d2      	uxtb	r2, r2
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	4b25      	ldr	r3, [pc, #148]	; (800534c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	e00b      	b.n	80052d4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	1c59      	adds	r1, r3, #1
 80052c4:	61f9      	str	r1, [r7, #28]
 80052c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	09db      	lsrs	r3, r3, #7
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b7f      	cmp	r3, #127	; 0x7f
 80052d8:	d8f0      	bhi.n	80052bc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	61fa      	str	r2, [r7, #28]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	e00b      	b.n	800530c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	1c59      	adds	r1, r3, #1
 80052fc:	6179      	str	r1, [r7, #20]
 80052fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	09db      	lsrs	r3, r3, #7
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b7f      	cmp	r3, #127	; 0x7f
 8005310:	d8f0      	bhi.n	80052f4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	617a      	str	r2, [r7, #20]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	b2d2      	uxtb	r2, r2
 800531c:	701a      	strb	r2, [r3, #0]
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005322:	2218      	movs	r2, #24
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	68b8      	ldr	r0, [r7, #8]
 8005328:	f7ff f90c 	bl	8004544 <_SendPacket>
  RECORD_END();
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005332:	4b06      	ldr	r3, [pc, #24]	; (800534c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800533a:	4b04      	ldr	r3, [pc, #16]	; (800534c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	4798      	blx	r3
  }
}
 8005340:	bf00      	nop
 8005342:	3730      	adds	r7, #48	; 0x30
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	200142bc 	.word	0x200142bc
 800534c:	2001428c 	.word	0x2001428c

08005350 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005350:	b580      	push	{r7, lr}
 8005352:	b092      	sub	sp, #72	; 0x48
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005358:	f3ef 8311 	mrs	r3, BASEPRI
 800535c:	f04f 0120 	mov.w	r1, #32
 8005360:	f381 8811 	msr	BASEPRI, r1
 8005364:	617b      	str	r3, [r7, #20]
 8005366:	486a      	ldr	r0, [pc, #424]	; (8005510 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005368:	f7fe fffa 	bl	8004360 <_PreparePacket>
 800536c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	647b      	str	r3, [r7, #68]	; 0x44
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4b66      	ldr	r3, [pc, #408]	; (8005514 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	643b      	str	r3, [r7, #64]	; 0x40
 8005382:	e00b      	b.n	800539c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005386:	b2da      	uxtb	r2, r3
 8005388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800538a:	1c59      	adds	r1, r3, #1
 800538c:	6479      	str	r1, [r7, #68]	; 0x44
 800538e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005398:	09db      	lsrs	r3, r3, #7
 800539a:	643b      	str	r3, [r7, #64]	; 0x40
 800539c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800539e:	2b7f      	cmp	r3, #127	; 0x7f
 80053a0:	d8f0      	bhi.n	8005384 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80053a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	647a      	str	r2, [r7, #68]	; 0x44
 80053a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80053bc:	e00b      	b.n	80053d6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053c4:	1c59      	adds	r1, r3, #1
 80053c6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80053c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d2:	09db      	lsrs	r3, r3, #7
 80053d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	2b7f      	cmp	r3, #127	; 0x7f
 80053da:	d8f0      	bhi.n	80053be <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80053dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80053e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ea:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	4619      	mov	r1, r3
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f7fe ff63 	bl	80042c0 <_EncodeStr>
 80053fa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80053fc:	2209      	movs	r2, #9
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	6938      	ldr	r0, [r7, #16]
 8005402:	f7ff f89f 	bl	8004544 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	637b      	str	r3, [r7, #52]	; 0x34
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	4b40      	ldr	r3, [pc, #256]	; (8005514 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	633b      	str	r3, [r7, #48]	; 0x30
 800541a:	e00b      	b.n	8005434 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	b2da      	uxtb	r2, r3
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	1c59      	adds	r1, r3, #1
 8005424:	6379      	str	r1, [r7, #52]	; 0x34
 8005426:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	09db      	lsrs	r3, r3, #7
 8005432:	633b      	str	r3, [r7, #48]	; 0x30
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	2b7f      	cmp	r3, #127	; 0x7f
 8005438:	d8f0      	bhi.n	800541c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800543a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	637a      	str	r2, [r7, #52]	; 0x34
 8005440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005448:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
 8005454:	e00b      	b.n	800546e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	b2da      	uxtb	r2, r3
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545c:	1c59      	adds	r1, r3, #1
 800545e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005460:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	09db      	lsrs	r3, r3, #7
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	2b7f      	cmp	r3, #127	; 0x7f
 8005472:	d8f0      	bhi.n	8005456 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	62fa      	str	r2, [r7, #44]	; 0x2c
 800547a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	623b      	str	r3, [r7, #32]
 800548e:	e00b      	b.n	80054a8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	b2da      	uxtb	r2, r3
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	1c59      	adds	r1, r3, #1
 8005498:	6279      	str	r1, [r7, #36]	; 0x24
 800549a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	09db      	lsrs	r3, r3, #7
 80054a6:	623b      	str	r3, [r7, #32]
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	2b7f      	cmp	r3, #127	; 0x7f
 80054ac:	d8f0      	bhi.n	8005490 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	627a      	str	r2, [r7, #36]	; 0x24
 80054b4:	6a3a      	ldr	r2, [r7, #32]
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	2300      	movs	r3, #0
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	e00b      	b.n	80054e0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	1c59      	adds	r1, r3, #1
 80054d0:	61f9      	str	r1, [r7, #28]
 80054d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	09db      	lsrs	r3, r3, #7
 80054de:	61bb      	str	r3, [r7, #24]
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	2b7f      	cmp	r3, #127	; 0x7f
 80054e4:	d8f0      	bhi.n	80054c8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	61fa      	str	r2, [r7, #28]
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80054f6:	2215      	movs	r2, #21
 80054f8:	68f9      	ldr	r1, [r7, #12]
 80054fa:	6938      	ldr	r0, [r7, #16]
 80054fc:	f7ff f822 	bl	8004544 <_SendPacket>
  RECORD_END();
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f383 8811 	msr	BASEPRI, r3
}
 8005506:	bf00      	nop
 8005508:	3748      	adds	r7, #72	; 0x48
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	200142bc 	.word	0x200142bc
 8005514:	2001428c 	.word	0x2001428c

08005518 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800551c:	4b07      	ldr	r3, [pc, #28]	; (800553c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d008      	beq.n	8005536 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005524:	4b05      	ldr	r3, [pc, #20]	; (800553c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800552e:	4b03      	ldr	r3, [pc, #12]	; (800553c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4798      	blx	r3
  }
}
 8005536:	bf00      	nop
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	2001428c 	.word	0x2001428c

08005540 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005548:	f3ef 8311 	mrs	r3, BASEPRI
 800554c:	f04f 0120 	mov.w	r1, #32
 8005550:	f381 8811 	msr	BASEPRI, r1
 8005554:	617b      	str	r3, [r7, #20]
 8005556:	480b      	ldr	r0, [pc, #44]	; (8005584 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005558:	f7fe ff02 	bl	8004360 <_PreparePacket>
 800555c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800555e:	2280      	movs	r2, #128	; 0x80
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	6938      	ldr	r0, [r7, #16]
 8005564:	f7fe feac 	bl	80042c0 <_EncodeStr>
 8005568:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800556a:	220e      	movs	r2, #14
 800556c:	68f9      	ldr	r1, [r7, #12]
 800556e:	6938      	ldr	r0, [r7, #16]
 8005570:	f7fe ffe8 	bl	8004544 <_SendPacket>
  RECORD_END();
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f383 8811 	msr	BASEPRI, r3
}
 800557a:	bf00      	nop
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	200142bc 	.word	0x200142bc

08005588 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005588:	b590      	push	{r4, r7, lr}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800558e:	4b15      	ldr	r3, [pc, #84]	; (80055e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d01a      	beq.n	80055cc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005596:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d015      	beq.n	80055cc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80055a0:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4798      	blx	r3
 80055a8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80055ac:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80055ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	f04f 0300 	mov.w	r3, #0
 80055ba:	000a      	movs	r2, r1
 80055bc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80055be:	4613      	mov	r3, r2
 80055c0:	461a      	mov	r2, r3
 80055c2:	4621      	mov	r1, r4
 80055c4:	200d      	movs	r0, #13
 80055c6:	f7ff fced 	bl	8004fa4 <SEGGER_SYSVIEW_RecordU32x2>
 80055ca:	e006      	b.n	80055da <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80055cc:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4619      	mov	r1, r3
 80055d2:	200c      	movs	r0, #12
 80055d4:	f7ff fcaa 	bl	8004f2c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80055d8:	bf00      	nop
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd90      	pop	{r4, r7, pc}
 80055e2:	bf00      	nop
 80055e4:	2001428c 	.word	0x2001428c
 80055e8:	e0001004 	.word	0xe0001004

080055ec <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055f2:	f3ef 8311 	mrs	r3, BASEPRI
 80055f6:	f04f 0120 	mov.w	r1, #32
 80055fa:	f381 8811 	msr	BASEPRI, r1
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	4819      	ldr	r0, [pc, #100]	; (8005668 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005602:	f7fe fead 	bl	8004360 <_PreparePacket>
 8005606:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800560c:	4b17      	ldr	r3, [pc, #92]	; (800566c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005614:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	e00b      	b.n	8005638 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	b2da      	uxtb	r2, r3
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1c59      	adds	r1, r3, #1
 8005628:	6179      	str	r1, [r7, #20]
 800562a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	09db      	lsrs	r3, r3, #7
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b7f      	cmp	r3, #127	; 0x7f
 800563c:	d8f0      	bhi.n	8005620 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	1c5a      	adds	r2, r3, #1
 8005642:	617a      	str	r2, [r7, #20]
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	b2d2      	uxtb	r2, r2
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800564e:	2202      	movs	r2, #2
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	68b8      	ldr	r0, [r7, #8]
 8005654:	f7fe ff76 	bl	8004544 <_SendPacket>
  RECORD_END();
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f383 8811 	msr	BASEPRI, r3
}
 800565e:	bf00      	nop
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	200142bc 	.word	0x200142bc
 800566c:	e000ed04 	.word	0xe000ed04

08005670 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005676:	f3ef 8311 	mrs	r3, BASEPRI
 800567a:	f04f 0120 	mov.w	r1, #32
 800567e:	f381 8811 	msr	BASEPRI, r1
 8005682:	607b      	str	r3, [r7, #4]
 8005684:	4807      	ldr	r0, [pc, #28]	; (80056a4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005686:	f7fe fe6b 	bl	8004360 <_PreparePacket>
 800568a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800568c:	2203      	movs	r2, #3
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6838      	ldr	r0, [r7, #0]
 8005692:	f7fe ff57 	bl	8004544 <_SendPacket>
  RECORD_END();
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f383 8811 	msr	BASEPRI, r3
}
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	200142bc 	.word	0x200142bc

080056a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056ae:	f3ef 8311 	mrs	r3, BASEPRI
 80056b2:	f04f 0120 	mov.w	r1, #32
 80056b6:	f381 8811 	msr	BASEPRI, r1
 80056ba:	607b      	str	r3, [r7, #4]
 80056bc:	4807      	ldr	r0, [pc, #28]	; (80056dc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80056be:	f7fe fe4f 	bl	8004360 <_PreparePacket>
 80056c2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80056c4:	2212      	movs	r2, #18
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	6838      	ldr	r0, [r7, #0]
 80056ca:	f7fe ff3b 	bl	8004544 <_SendPacket>
  RECORD_END();
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f383 8811 	msr	BASEPRI, r3
}
 80056d4:	bf00      	nop
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	200142bc 	.word	0x200142bc

080056e0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056e6:	f3ef 8311 	mrs	r3, BASEPRI
 80056ea:	f04f 0120 	mov.w	r1, #32
 80056ee:	f381 8811 	msr	BASEPRI, r1
 80056f2:	607b      	str	r3, [r7, #4]
 80056f4:	4807      	ldr	r0, [pc, #28]	; (8005714 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80056f6:	f7fe fe33 	bl	8004360 <_PreparePacket>
 80056fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80056fc:	2211      	movs	r2, #17
 80056fe:	6839      	ldr	r1, [r7, #0]
 8005700:	6838      	ldr	r0, [r7, #0]
 8005702:	f7fe ff1f 	bl	8004544 <_SendPacket>
  RECORD_END();
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f383 8811 	msr	BASEPRI, r3
}
 800570c:	bf00      	nop
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	200142bc 	.word	0x200142bc

08005718 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005718:	b580      	push	{r7, lr}
 800571a:	b088      	sub	sp, #32
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005720:	f3ef 8311 	mrs	r3, BASEPRI
 8005724:	f04f 0120 	mov.w	r1, #32
 8005728:	f381 8811 	msr	BASEPRI, r1
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	4819      	ldr	r0, [pc, #100]	; (8005794 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005730:	f7fe fe16 	bl	8004360 <_PreparePacket>
 8005734:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800573a:	4b17      	ldr	r3, [pc, #92]	; (8005798 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	e00b      	b.n	8005766 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	b2da      	uxtb	r2, r3
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	1c59      	adds	r1, r3, #1
 8005756:	61f9      	str	r1, [r7, #28]
 8005758:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	701a      	strb	r2, [r3, #0]
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	09db      	lsrs	r3, r3, #7
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b7f      	cmp	r3, #127	; 0x7f
 800576a:	d8f0      	bhi.n	800574e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	61fa      	str	r2, [r7, #28]
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800577c:	2208      	movs	r2, #8
 800577e:	68f9      	ldr	r1, [r7, #12]
 8005780:	6938      	ldr	r0, [r7, #16]
 8005782:	f7fe fedf 	bl	8004544 <_SendPacket>
  RECORD_END();
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f383 8811 	msr	BASEPRI, r3
}
 800578c:	bf00      	nop
 800578e:	3720      	adds	r7, #32
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	200142bc 	.word	0x200142bc
 8005798:	2001428c 	.word	0x2001428c

0800579c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800579c:	b580      	push	{r7, lr}
 800579e:	b088      	sub	sp, #32
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80057a4:	f3ef 8311 	mrs	r3, BASEPRI
 80057a8:	f04f 0120 	mov.w	r1, #32
 80057ac:	f381 8811 	msr	BASEPRI, r1
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	4819      	ldr	r0, [pc, #100]	; (8005818 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80057b4:	f7fe fdd4 	bl	8004360 <_PreparePacket>
 80057b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057be:	4b17      	ldr	r3, [pc, #92]	; (800581c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	61fb      	str	r3, [r7, #28]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	61bb      	str	r3, [r7, #24]
 80057d0:	e00b      	b.n	80057ea <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	1c59      	adds	r1, r3, #1
 80057da:	61f9      	str	r1, [r7, #28]
 80057dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	09db      	lsrs	r3, r3, #7
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b7f      	cmp	r3, #127	; 0x7f
 80057ee:	d8f0      	bhi.n	80057d2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	61fa      	str	r2, [r7, #28]
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	b2d2      	uxtb	r2, r2
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005800:	2204      	movs	r2, #4
 8005802:	68f9      	ldr	r1, [r7, #12]
 8005804:	6938      	ldr	r0, [r7, #16]
 8005806:	f7fe fe9d 	bl	8004544 <_SendPacket>
  RECORD_END();
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f383 8811 	msr	BASEPRI, r3
}
 8005810:	bf00      	nop
 8005812:	3720      	adds	r7, #32
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	200142bc 	.word	0x200142bc
 800581c:	2001428c 	.word	0x2001428c

08005820 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005828:	f3ef 8311 	mrs	r3, BASEPRI
 800582c:	f04f 0120 	mov.w	r1, #32
 8005830:	f381 8811 	msr	BASEPRI, r1
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	4819      	ldr	r0, [pc, #100]	; (800589c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005838:	f7fe fd92 	bl	8004360 <_PreparePacket>
 800583c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005842:	4b17      	ldr	r3, [pc, #92]	; (80058a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	61bb      	str	r3, [r7, #24]
 8005854:	e00b      	b.n	800586e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	b2da      	uxtb	r2, r3
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	1c59      	adds	r1, r3, #1
 800585e:	61f9      	str	r1, [r7, #28]
 8005860:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	09db      	lsrs	r3, r3, #7
 800586c:	61bb      	str	r3, [r7, #24]
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	2b7f      	cmp	r3, #127	; 0x7f
 8005872:	d8f0      	bhi.n	8005856 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	61fa      	str	r2, [r7, #28]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	701a      	strb	r2, [r3, #0]
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005884:	2206      	movs	r2, #6
 8005886:	68f9      	ldr	r1, [r7, #12]
 8005888:	6938      	ldr	r0, [r7, #16]
 800588a:	f7fe fe5b 	bl	8004544 <_SendPacket>
  RECORD_END();
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f383 8811 	msr	BASEPRI, r3
}
 8005894:	bf00      	nop
 8005896:	3720      	adds	r7, #32
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	200142bc 	.word	0x200142bc
 80058a0:	2001428c 	.word	0x2001428c

080058a4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08c      	sub	sp, #48	; 0x30
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	4603      	mov	r3, r0
 80058ac:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80058ae:	4b3b      	ldr	r3, [pc, #236]	; (800599c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d06d      	beq.n	8005992 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80058b6:	4b39      	ldr	r3, [pc, #228]	; (800599c <SEGGER_SYSVIEW_SendModule+0xf8>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80058bc:	2300      	movs	r3, #0
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c0:	e008      	b.n	80058d4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80058c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	3301      	adds	r3, #1
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d8:	429a      	cmp	r2, r3
 80058da:	d3f2      	bcc.n	80058c2 <SEGGER_SYSVIEW_SendModule+0x1e>
 80058dc:	e000      	b.n	80058e0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80058de:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d055      	beq.n	8005992 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058e6:	f3ef 8311 	mrs	r3, BASEPRI
 80058ea:	f04f 0120 	mov.w	r1, #32
 80058ee:	f381 8811 	msr	BASEPRI, r1
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	482a      	ldr	r0, [pc, #168]	; (80059a0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80058f6:	f7fe fd33 	bl	8004360 <_PreparePacket>
 80058fa:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	627b      	str	r3, [r7, #36]	; 0x24
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	623b      	str	r3, [r7, #32]
 8005908:	e00b      	b.n	8005922 <SEGGER_SYSVIEW_SendModule+0x7e>
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	b2da      	uxtb	r2, r3
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	1c59      	adds	r1, r3, #1
 8005912:	6279      	str	r1, [r7, #36]	; 0x24
 8005914:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005918:	b2d2      	uxtb	r2, r2
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	09db      	lsrs	r3, r3, #7
 8005920:	623b      	str	r3, [r7, #32]
 8005922:	6a3b      	ldr	r3, [r7, #32]
 8005924:	2b7f      	cmp	r3, #127	; 0x7f
 8005926:	d8f0      	bhi.n	800590a <SEGGER_SYSVIEW_SendModule+0x66>
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	627a      	str	r2, [r7, #36]	; 0x24
 800592e:	6a3a      	ldr	r2, [r7, #32]
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	61bb      	str	r3, [r7, #24]
 8005942:	e00b      	b.n	800595c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	b2da      	uxtb	r2, r3
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	1c59      	adds	r1, r3, #1
 800594c:	61f9      	str	r1, [r7, #28]
 800594e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	701a      	strb	r2, [r3, #0]
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	09db      	lsrs	r3, r3, #7
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b7f      	cmp	r3, #127	; 0x7f
 8005960:	d8f0      	bhi.n	8005944 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	61fa      	str	r2, [r7, #28]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2280      	movs	r2, #128	; 0x80
 8005978:	4619      	mov	r1, r3
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f7fe fca0 	bl	80042c0 <_EncodeStr>
 8005980:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005982:	2216      	movs	r2, #22
 8005984:	68f9      	ldr	r1, [r7, #12]
 8005986:	6938      	ldr	r0, [r7, #16]
 8005988:	f7fe fddc 	bl	8004544 <_SendPacket>
      RECORD_END();
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005992:	bf00      	nop
 8005994:	3730      	adds	r7, #48	; 0x30
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	200142b4 	.word	0x200142b4
 80059a0:	200142bc 	.word	0x200142bc

080059a4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80059aa:	4b0c      	ldr	r3, [pc, #48]	; (80059dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00f      	beq.n	80059d2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80059b2:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1f2      	bne.n	80059b8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80059d2:	bf00      	nop
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	200142b4 	.word	0x200142b4

080059e0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80059e6:	f3ef 8311 	mrs	r3, BASEPRI
 80059ea:	f04f 0120 	mov.w	r1, #32
 80059ee:	f381 8811 	msr	BASEPRI, r1
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	4817      	ldr	r0, [pc, #92]	; (8005a54 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80059f6:	f7fe fcb3 	bl	8004360 <_PreparePacket>
 80059fa:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	e00b      	b.n	8005a24 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	1c59      	adds	r1, r3, #1
 8005a14:	6179      	str	r1, [r7, #20]
 8005a16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	09db      	lsrs	r3, r3, #7
 8005a22:	613b      	str	r3, [r7, #16]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	2b7f      	cmp	r3, #127	; 0x7f
 8005a28:	d8f0      	bhi.n	8005a0c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	617a      	str	r2, [r7, #20]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005a3a:	221b      	movs	r2, #27
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	68b8      	ldr	r0, [r7, #8]
 8005a40:	f7fe fd80 	bl	8004544 <_SendPacket>
  RECORD_END();
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f383 8811 	msr	BASEPRI, r3
}
 8005a4a:	bf00      	nop
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	200142bc 	.word	0x200142bc
 8005a58:	200142b8 	.word	0x200142b8

08005a5c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005a5c:	b40f      	push	{r0, r1, r2, r3}
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b082      	sub	sp, #8
 8005a62:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005a6a:	1d3b      	adds	r3, r7, #4
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	2100      	movs	r1, #0
 8005a70:	6938      	ldr	r0, [r7, #16]
 8005a72:	f7fe fff1 	bl	8004a58 <_VPrintTarget>
  va_end(ParamList);
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a80:	b004      	add	sp, #16
 8005a82:	4770      	bx	lr

08005a84 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08a      	sub	sp, #40	; 0x28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a90:	f04f 0120 	mov.w	r1, #32
 8005a94:	f381 8811 	msr	BASEPRI, r1
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	4827      	ldr	r0, [pc, #156]	; (8005b38 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a9c:	f7fe fc60 	bl	8004360 <_PreparePacket>
 8005aa0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005aa2:	2280      	movs	r2, #128	; 0x80
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	6938      	ldr	r0, [r7, #16]
 8005aa8:	f7fe fc0a 	bl	80042c0 <_EncodeStr>
 8005aac:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	623b      	str	r3, [r7, #32]
 8005ab6:	e00b      	b.n	8005ad0 <SEGGER_SYSVIEW_Warn+0x4c>
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	1c59      	adds	r1, r3, #1
 8005ac0:	6279      	str	r1, [r7, #36]	; 0x24
 8005ac2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ac6:	b2d2      	uxtb	r2, r2
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	09db      	lsrs	r3, r3, #7
 8005ace:	623b      	str	r3, [r7, #32]
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ad4:	d8f0      	bhi.n	8005ab8 <SEGGER_SYSVIEW_Warn+0x34>
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	627a      	str	r2, [r7, #36]	; 0x24
 8005adc:	6a3a      	ldr	r2, [r7, #32]
 8005ade:	b2d2      	uxtb	r2, r2
 8005ae0:	701a      	strb	r2, [r3, #0]
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	61fb      	str	r3, [r7, #28]
 8005aea:	2300      	movs	r3, #0
 8005aec:	61bb      	str	r3, [r7, #24]
 8005aee:	e00b      	b.n	8005b08 <SEGGER_SYSVIEW_Warn+0x84>
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	1c59      	adds	r1, r3, #1
 8005af8:	61f9      	str	r1, [r7, #28]
 8005afa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	09db      	lsrs	r3, r3, #7
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b0c:	d8f0      	bhi.n	8005af0 <SEGGER_SYSVIEW_Warn+0x6c>
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	61fa      	str	r2, [r7, #28]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	b2d2      	uxtb	r2, r2
 8005b18:	701a      	strb	r2, [r3, #0]
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b1e:	221a      	movs	r2, #26
 8005b20:	68f9      	ldr	r1, [r7, #12]
 8005b22:	6938      	ldr	r0, [r7, #16]
 8005b24:	f7fe fd0e 	bl	8004544 <_SendPacket>
  RECORD_END();
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f383 8811 	msr	BASEPRI, r3
}
 8005b2e:	bf00      	nop
 8005b30:	3728      	adds	r7, #40	; 0x28
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	200142bc 	.word	0x200142bc

08005b3c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b40:	4b13      	ldr	r3, [pc, #76]	; (8005b90 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b42:	7e1b      	ldrb	r3, [r3, #24]
 8005b44:	4619      	mov	r1, r3
 8005b46:	4a13      	ldr	r2, [pc, #76]	; (8005b94 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b48:	460b      	mov	r3, r1
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	440b      	add	r3, r1
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	4413      	add	r3, r2
 8005b52:	336c      	adds	r3, #108	; 0x6c
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4b0e      	ldr	r3, [pc, #56]	; (8005b90 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b58:	7e1b      	ldrb	r3, [r3, #24]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	490d      	ldr	r1, [pc, #52]	; (8005b94 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8005b5e:	4603      	mov	r3, r0
 8005b60:	005b      	lsls	r3, r3, #1
 8005b62:	4403      	add	r3, r0
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	440b      	add	r3, r1
 8005b68:	3370      	adds	r3, #112	; 0x70
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d00b      	beq.n	8005b88 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b70:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b72:	789b      	ldrb	r3, [r3, #2]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d107      	bne.n	8005b88 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b78:	4b05      	ldr	r3, [pc, #20]	; (8005b90 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b7e:	f7fe fbfb 	bl	8004378 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b82:	4b03      	ldr	r3, [pc, #12]	; (8005b90 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8005b88:	4b01      	ldr	r3, [pc, #4]	; (8005b90 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	2001428c 	.word	0x2001428c
 8005b94:	200143f8 	.word	0x200143f8

08005b98 <__libc_init_array>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	4d0d      	ldr	r5, [pc, #52]	; (8005bd0 <__libc_init_array+0x38>)
 8005b9c:	4c0d      	ldr	r4, [pc, #52]	; (8005bd4 <__libc_init_array+0x3c>)
 8005b9e:	1b64      	subs	r4, r4, r5
 8005ba0:	10a4      	asrs	r4, r4, #2
 8005ba2:	2600      	movs	r6, #0
 8005ba4:	42a6      	cmp	r6, r4
 8005ba6:	d109      	bne.n	8005bbc <__libc_init_array+0x24>
 8005ba8:	4d0b      	ldr	r5, [pc, #44]	; (8005bd8 <__libc_init_array+0x40>)
 8005baa:	4c0c      	ldr	r4, [pc, #48]	; (8005bdc <__libc_init_array+0x44>)
 8005bac:	f000 fc7e 	bl	80064ac <_init>
 8005bb0:	1b64      	subs	r4, r4, r5
 8005bb2:	10a4      	asrs	r4, r4, #2
 8005bb4:	2600      	movs	r6, #0
 8005bb6:	42a6      	cmp	r6, r4
 8005bb8:	d105      	bne.n	8005bc6 <__libc_init_array+0x2e>
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc0:	4798      	blx	r3
 8005bc2:	3601      	adds	r6, #1
 8005bc4:	e7ee      	b.n	8005ba4 <__libc_init_array+0xc>
 8005bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bca:	4798      	blx	r3
 8005bcc:	3601      	adds	r6, #1
 8005bce:	e7f2      	b.n	8005bb6 <__libc_init_array+0x1e>
 8005bd0:	08006650 	.word	0x08006650
 8005bd4:	08006650 	.word	0x08006650
 8005bd8:	08006650 	.word	0x08006650
 8005bdc:	08006654 	.word	0x08006654

08005be0 <memcmp>:
 8005be0:	b530      	push	{r4, r5, lr}
 8005be2:	3901      	subs	r1, #1
 8005be4:	2400      	movs	r4, #0
 8005be6:	42a2      	cmp	r2, r4
 8005be8:	d101      	bne.n	8005bee <memcmp+0xe>
 8005bea:	2000      	movs	r0, #0
 8005bec:	e005      	b.n	8005bfa <memcmp+0x1a>
 8005bee:	5d03      	ldrb	r3, [r0, r4]
 8005bf0:	3401      	adds	r4, #1
 8005bf2:	5d0d      	ldrb	r5, [r1, r4]
 8005bf4:	42ab      	cmp	r3, r5
 8005bf6:	d0f6      	beq.n	8005be6 <memcmp+0x6>
 8005bf8:	1b58      	subs	r0, r3, r5
 8005bfa:	bd30      	pop	{r4, r5, pc}

08005bfc <memcpy>:
 8005bfc:	440a      	add	r2, r1
 8005bfe:	4291      	cmp	r1, r2
 8005c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c04:	d100      	bne.n	8005c08 <memcpy+0xc>
 8005c06:	4770      	bx	lr
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c12:	4291      	cmp	r1, r2
 8005c14:	d1f9      	bne.n	8005c0a <memcpy+0xe>
 8005c16:	bd10      	pop	{r4, pc}

08005c18 <memset>:
 8005c18:	4402      	add	r2, r0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d100      	bne.n	8005c22 <memset+0xa>
 8005c20:	4770      	bx	lr
 8005c22:	f803 1b01 	strb.w	r1, [r3], #1
 8005c26:	e7f9      	b.n	8005c1c <memset+0x4>

08005c28 <sniprintf>:
 8005c28:	b40c      	push	{r2, r3}
 8005c2a:	b530      	push	{r4, r5, lr}
 8005c2c:	4b17      	ldr	r3, [pc, #92]	; (8005c8c <sniprintf+0x64>)
 8005c2e:	1e0c      	subs	r4, r1, #0
 8005c30:	681d      	ldr	r5, [r3, #0]
 8005c32:	b09d      	sub	sp, #116	; 0x74
 8005c34:	da08      	bge.n	8005c48 <sniprintf+0x20>
 8005c36:	238b      	movs	r3, #139	; 0x8b
 8005c38:	602b      	str	r3, [r5, #0]
 8005c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3e:	b01d      	add	sp, #116	; 0x74
 8005c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c44:	b002      	add	sp, #8
 8005c46:	4770      	bx	lr
 8005c48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005c4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005c50:	bf14      	ite	ne
 8005c52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005c56:	4623      	moveq	r3, r4
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	9307      	str	r3, [sp, #28]
 8005c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c60:	9002      	str	r0, [sp, #8]
 8005c62:	9006      	str	r0, [sp, #24]
 8005c64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005c68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c6a:	ab21      	add	r3, sp, #132	; 0x84
 8005c6c:	a902      	add	r1, sp, #8
 8005c6e:	4628      	mov	r0, r5
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	f000 f869 	bl	8005d48 <_svfiprintf_r>
 8005c76:	1c43      	adds	r3, r0, #1
 8005c78:	bfbc      	itt	lt
 8005c7a:	238b      	movlt	r3, #139	; 0x8b
 8005c7c:	602b      	strlt	r3, [r5, #0]
 8005c7e:	2c00      	cmp	r4, #0
 8005c80:	d0dd      	beq.n	8005c3e <sniprintf+0x16>
 8005c82:	9b02      	ldr	r3, [sp, #8]
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	e7d9      	b.n	8005c3e <sniprintf+0x16>
 8005c8a:	bf00      	nop
 8005c8c:	2000001c 	.word	0x2000001c

08005c90 <__ssputs_r>:
 8005c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c94:	688e      	ldr	r6, [r1, #8]
 8005c96:	429e      	cmp	r6, r3
 8005c98:	4682      	mov	sl, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	4690      	mov	r8, r2
 8005c9e:	461f      	mov	r7, r3
 8005ca0:	d838      	bhi.n	8005d14 <__ssputs_r+0x84>
 8005ca2:	898a      	ldrh	r2, [r1, #12]
 8005ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ca8:	d032      	beq.n	8005d10 <__ssputs_r+0x80>
 8005caa:	6825      	ldr	r5, [r4, #0]
 8005cac:	6909      	ldr	r1, [r1, #16]
 8005cae:	eba5 0901 	sub.w	r9, r5, r1
 8005cb2:	6965      	ldr	r5, [r4, #20]
 8005cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	444b      	add	r3, r9
 8005cc0:	106d      	asrs	r5, r5, #1
 8005cc2:	429d      	cmp	r5, r3
 8005cc4:	bf38      	it	cc
 8005cc6:	461d      	movcc	r5, r3
 8005cc8:	0553      	lsls	r3, r2, #21
 8005cca:	d531      	bpl.n	8005d30 <__ssputs_r+0xa0>
 8005ccc:	4629      	mov	r1, r5
 8005cce:	f000 fb39 	bl	8006344 <_malloc_r>
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	b950      	cbnz	r0, 8005cec <__ssputs_r+0x5c>
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	f8ca 3000 	str.w	r3, [sl]
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ce2:	81a3      	strh	r3, [r4, #12]
 8005ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cec:	6921      	ldr	r1, [r4, #16]
 8005cee:	464a      	mov	r2, r9
 8005cf0:	f7ff ff84 	bl	8005bfc <memcpy>
 8005cf4:	89a3      	ldrh	r3, [r4, #12]
 8005cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cfe:	81a3      	strh	r3, [r4, #12]
 8005d00:	6126      	str	r6, [r4, #16]
 8005d02:	6165      	str	r5, [r4, #20]
 8005d04:	444e      	add	r6, r9
 8005d06:	eba5 0509 	sub.w	r5, r5, r9
 8005d0a:	6026      	str	r6, [r4, #0]
 8005d0c:	60a5      	str	r5, [r4, #8]
 8005d0e:	463e      	mov	r6, r7
 8005d10:	42be      	cmp	r6, r7
 8005d12:	d900      	bls.n	8005d16 <__ssputs_r+0x86>
 8005d14:	463e      	mov	r6, r7
 8005d16:	4632      	mov	r2, r6
 8005d18:	6820      	ldr	r0, [r4, #0]
 8005d1a:	4641      	mov	r1, r8
 8005d1c:	f000 faa8 	bl	8006270 <memmove>
 8005d20:	68a3      	ldr	r3, [r4, #8]
 8005d22:	6822      	ldr	r2, [r4, #0]
 8005d24:	1b9b      	subs	r3, r3, r6
 8005d26:	4432      	add	r2, r6
 8005d28:	60a3      	str	r3, [r4, #8]
 8005d2a:	6022      	str	r2, [r4, #0]
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	e7db      	b.n	8005ce8 <__ssputs_r+0x58>
 8005d30:	462a      	mov	r2, r5
 8005d32:	f000 fb61 	bl	80063f8 <_realloc_r>
 8005d36:	4606      	mov	r6, r0
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d1e1      	bne.n	8005d00 <__ssputs_r+0x70>
 8005d3c:	6921      	ldr	r1, [r4, #16]
 8005d3e:	4650      	mov	r0, sl
 8005d40:	f000 fab0 	bl	80062a4 <_free_r>
 8005d44:	e7c7      	b.n	8005cd6 <__ssputs_r+0x46>
	...

08005d48 <_svfiprintf_r>:
 8005d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4c:	4698      	mov	r8, r3
 8005d4e:	898b      	ldrh	r3, [r1, #12]
 8005d50:	061b      	lsls	r3, r3, #24
 8005d52:	b09d      	sub	sp, #116	; 0x74
 8005d54:	4607      	mov	r7, r0
 8005d56:	460d      	mov	r5, r1
 8005d58:	4614      	mov	r4, r2
 8005d5a:	d50e      	bpl.n	8005d7a <_svfiprintf_r+0x32>
 8005d5c:	690b      	ldr	r3, [r1, #16]
 8005d5e:	b963      	cbnz	r3, 8005d7a <_svfiprintf_r+0x32>
 8005d60:	2140      	movs	r1, #64	; 0x40
 8005d62:	f000 faef 	bl	8006344 <_malloc_r>
 8005d66:	6028      	str	r0, [r5, #0]
 8005d68:	6128      	str	r0, [r5, #16]
 8005d6a:	b920      	cbnz	r0, 8005d76 <_svfiprintf_r+0x2e>
 8005d6c:	230c      	movs	r3, #12
 8005d6e:	603b      	str	r3, [r7, #0]
 8005d70:	f04f 30ff 	mov.w	r0, #4294967295
 8005d74:	e0d1      	b.n	8005f1a <_svfiprintf_r+0x1d2>
 8005d76:	2340      	movs	r3, #64	; 0x40
 8005d78:	616b      	str	r3, [r5, #20]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d7e:	2320      	movs	r3, #32
 8005d80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d88:	2330      	movs	r3, #48	; 0x30
 8005d8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005f34 <_svfiprintf_r+0x1ec>
 8005d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d92:	f04f 0901 	mov.w	r9, #1
 8005d96:	4623      	mov	r3, r4
 8005d98:	469a      	mov	sl, r3
 8005d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d9e:	b10a      	cbz	r2, 8005da4 <_svfiprintf_r+0x5c>
 8005da0:	2a25      	cmp	r2, #37	; 0x25
 8005da2:	d1f9      	bne.n	8005d98 <_svfiprintf_r+0x50>
 8005da4:	ebba 0b04 	subs.w	fp, sl, r4
 8005da8:	d00b      	beq.n	8005dc2 <_svfiprintf_r+0x7a>
 8005daa:	465b      	mov	r3, fp
 8005dac:	4622      	mov	r2, r4
 8005dae:	4629      	mov	r1, r5
 8005db0:	4638      	mov	r0, r7
 8005db2:	f7ff ff6d 	bl	8005c90 <__ssputs_r>
 8005db6:	3001      	adds	r0, #1
 8005db8:	f000 80aa 	beq.w	8005f10 <_svfiprintf_r+0x1c8>
 8005dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dbe:	445a      	add	r2, fp
 8005dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8005dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 80a2 	beq.w	8005f10 <_svfiprintf_r+0x1c8>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dd6:	f10a 0a01 	add.w	sl, sl, #1
 8005dda:	9304      	str	r3, [sp, #16]
 8005ddc:	9307      	str	r3, [sp, #28]
 8005dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005de2:	931a      	str	r3, [sp, #104]	; 0x68
 8005de4:	4654      	mov	r4, sl
 8005de6:	2205      	movs	r2, #5
 8005de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dec:	4851      	ldr	r0, [pc, #324]	; (8005f34 <_svfiprintf_r+0x1ec>)
 8005dee:	f7fa fa5f 	bl	80002b0 <memchr>
 8005df2:	9a04      	ldr	r2, [sp, #16]
 8005df4:	b9d8      	cbnz	r0, 8005e2e <_svfiprintf_r+0xe6>
 8005df6:	06d0      	lsls	r0, r2, #27
 8005df8:	bf44      	itt	mi
 8005dfa:	2320      	movmi	r3, #32
 8005dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e00:	0711      	lsls	r1, r2, #28
 8005e02:	bf44      	itt	mi
 8005e04:	232b      	movmi	r3, #43	; 0x2b
 8005e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e10:	d015      	beq.n	8005e3e <_svfiprintf_r+0xf6>
 8005e12:	9a07      	ldr	r2, [sp, #28]
 8005e14:	4654      	mov	r4, sl
 8005e16:	2000      	movs	r0, #0
 8005e18:	f04f 0c0a 	mov.w	ip, #10
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e22:	3b30      	subs	r3, #48	; 0x30
 8005e24:	2b09      	cmp	r3, #9
 8005e26:	d94e      	bls.n	8005ec6 <_svfiprintf_r+0x17e>
 8005e28:	b1b0      	cbz	r0, 8005e58 <_svfiprintf_r+0x110>
 8005e2a:	9207      	str	r2, [sp, #28]
 8005e2c:	e014      	b.n	8005e58 <_svfiprintf_r+0x110>
 8005e2e:	eba0 0308 	sub.w	r3, r0, r8
 8005e32:	fa09 f303 	lsl.w	r3, r9, r3
 8005e36:	4313      	orrs	r3, r2
 8005e38:	9304      	str	r3, [sp, #16]
 8005e3a:	46a2      	mov	sl, r4
 8005e3c:	e7d2      	b.n	8005de4 <_svfiprintf_r+0x9c>
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	1d19      	adds	r1, r3, #4
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	9103      	str	r1, [sp, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	bfbb      	ittet	lt
 8005e4a:	425b      	neglt	r3, r3
 8005e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8005e50:	9307      	strge	r3, [sp, #28]
 8005e52:	9307      	strlt	r3, [sp, #28]
 8005e54:	bfb8      	it	lt
 8005e56:	9204      	strlt	r2, [sp, #16]
 8005e58:	7823      	ldrb	r3, [r4, #0]
 8005e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e5c:	d10c      	bne.n	8005e78 <_svfiprintf_r+0x130>
 8005e5e:	7863      	ldrb	r3, [r4, #1]
 8005e60:	2b2a      	cmp	r3, #42	; 0x2a
 8005e62:	d135      	bne.n	8005ed0 <_svfiprintf_r+0x188>
 8005e64:	9b03      	ldr	r3, [sp, #12]
 8005e66:	1d1a      	adds	r2, r3, #4
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	9203      	str	r2, [sp, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	bfb8      	it	lt
 8005e70:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e74:	3402      	adds	r4, #2
 8005e76:	9305      	str	r3, [sp, #20]
 8005e78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005f44 <_svfiprintf_r+0x1fc>
 8005e7c:	7821      	ldrb	r1, [r4, #0]
 8005e7e:	2203      	movs	r2, #3
 8005e80:	4650      	mov	r0, sl
 8005e82:	f7fa fa15 	bl	80002b0 <memchr>
 8005e86:	b140      	cbz	r0, 8005e9a <_svfiprintf_r+0x152>
 8005e88:	2340      	movs	r3, #64	; 0x40
 8005e8a:	eba0 000a 	sub.w	r0, r0, sl
 8005e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8005e92:	9b04      	ldr	r3, [sp, #16]
 8005e94:	4303      	orrs	r3, r0
 8005e96:	3401      	adds	r4, #1
 8005e98:	9304      	str	r3, [sp, #16]
 8005e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e9e:	4826      	ldr	r0, [pc, #152]	; (8005f38 <_svfiprintf_r+0x1f0>)
 8005ea0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ea4:	2206      	movs	r2, #6
 8005ea6:	f7fa fa03 	bl	80002b0 <memchr>
 8005eaa:	2800      	cmp	r0, #0
 8005eac:	d038      	beq.n	8005f20 <_svfiprintf_r+0x1d8>
 8005eae:	4b23      	ldr	r3, [pc, #140]	; (8005f3c <_svfiprintf_r+0x1f4>)
 8005eb0:	bb1b      	cbnz	r3, 8005efa <_svfiprintf_r+0x1b2>
 8005eb2:	9b03      	ldr	r3, [sp, #12]
 8005eb4:	3307      	adds	r3, #7
 8005eb6:	f023 0307 	bic.w	r3, r3, #7
 8005eba:	3308      	adds	r3, #8
 8005ebc:	9303      	str	r3, [sp, #12]
 8005ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec0:	4433      	add	r3, r6
 8005ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ec4:	e767      	b.n	8005d96 <_svfiprintf_r+0x4e>
 8005ec6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005eca:	460c      	mov	r4, r1
 8005ecc:	2001      	movs	r0, #1
 8005ece:	e7a5      	b.n	8005e1c <_svfiprintf_r+0xd4>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	3401      	adds	r4, #1
 8005ed4:	9305      	str	r3, [sp, #20]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	f04f 0c0a 	mov.w	ip, #10
 8005edc:	4620      	mov	r0, r4
 8005ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ee2:	3a30      	subs	r2, #48	; 0x30
 8005ee4:	2a09      	cmp	r2, #9
 8005ee6:	d903      	bls.n	8005ef0 <_svfiprintf_r+0x1a8>
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d0c5      	beq.n	8005e78 <_svfiprintf_r+0x130>
 8005eec:	9105      	str	r1, [sp, #20]
 8005eee:	e7c3      	b.n	8005e78 <_svfiprintf_r+0x130>
 8005ef0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e7f0      	b.n	8005edc <_svfiprintf_r+0x194>
 8005efa:	ab03      	add	r3, sp, #12
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	462a      	mov	r2, r5
 8005f00:	4b0f      	ldr	r3, [pc, #60]	; (8005f40 <_svfiprintf_r+0x1f8>)
 8005f02:	a904      	add	r1, sp, #16
 8005f04:	4638      	mov	r0, r7
 8005f06:	f3af 8000 	nop.w
 8005f0a:	1c42      	adds	r2, r0, #1
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	d1d6      	bne.n	8005ebe <_svfiprintf_r+0x176>
 8005f10:	89ab      	ldrh	r3, [r5, #12]
 8005f12:	065b      	lsls	r3, r3, #25
 8005f14:	f53f af2c 	bmi.w	8005d70 <_svfiprintf_r+0x28>
 8005f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f1a:	b01d      	add	sp, #116	; 0x74
 8005f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f20:	ab03      	add	r3, sp, #12
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	462a      	mov	r2, r5
 8005f26:	4b06      	ldr	r3, [pc, #24]	; (8005f40 <_svfiprintf_r+0x1f8>)
 8005f28:	a904      	add	r1, sp, #16
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	f000 f87a 	bl	8006024 <_printf_i>
 8005f30:	e7eb      	b.n	8005f0a <_svfiprintf_r+0x1c2>
 8005f32:	bf00      	nop
 8005f34:	08006614 	.word	0x08006614
 8005f38:	0800661e 	.word	0x0800661e
 8005f3c:	00000000 	.word	0x00000000
 8005f40:	08005c91 	.word	0x08005c91
 8005f44:	0800661a 	.word	0x0800661a

08005f48 <_printf_common>:
 8005f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f4c:	4616      	mov	r6, r2
 8005f4e:	4699      	mov	r9, r3
 8005f50:	688a      	ldr	r2, [r1, #8]
 8005f52:	690b      	ldr	r3, [r1, #16]
 8005f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	bfb8      	it	lt
 8005f5c:	4613      	movlt	r3, r2
 8005f5e:	6033      	str	r3, [r6, #0]
 8005f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f64:	4607      	mov	r7, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	b10a      	cbz	r2, 8005f6e <_printf_common+0x26>
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	6033      	str	r3, [r6, #0]
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	0699      	lsls	r1, r3, #26
 8005f72:	bf42      	ittt	mi
 8005f74:	6833      	ldrmi	r3, [r6, #0]
 8005f76:	3302      	addmi	r3, #2
 8005f78:	6033      	strmi	r3, [r6, #0]
 8005f7a:	6825      	ldr	r5, [r4, #0]
 8005f7c:	f015 0506 	ands.w	r5, r5, #6
 8005f80:	d106      	bne.n	8005f90 <_printf_common+0x48>
 8005f82:	f104 0a19 	add.w	sl, r4, #25
 8005f86:	68e3      	ldr	r3, [r4, #12]
 8005f88:	6832      	ldr	r2, [r6, #0]
 8005f8a:	1a9b      	subs	r3, r3, r2
 8005f8c:	42ab      	cmp	r3, r5
 8005f8e:	dc26      	bgt.n	8005fde <_printf_common+0x96>
 8005f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f94:	1e13      	subs	r3, r2, #0
 8005f96:	6822      	ldr	r2, [r4, #0]
 8005f98:	bf18      	it	ne
 8005f9a:	2301      	movne	r3, #1
 8005f9c:	0692      	lsls	r2, r2, #26
 8005f9e:	d42b      	bmi.n	8005ff8 <_printf_common+0xb0>
 8005fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fa4:	4649      	mov	r1, r9
 8005fa6:	4638      	mov	r0, r7
 8005fa8:	47c0      	blx	r8
 8005faa:	3001      	adds	r0, #1
 8005fac:	d01e      	beq.n	8005fec <_printf_common+0xa4>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	68e5      	ldr	r5, [r4, #12]
 8005fb2:	6832      	ldr	r2, [r6, #0]
 8005fb4:	f003 0306 	and.w	r3, r3, #6
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	bf08      	it	eq
 8005fbc:	1aad      	subeq	r5, r5, r2
 8005fbe:	68a3      	ldr	r3, [r4, #8]
 8005fc0:	6922      	ldr	r2, [r4, #16]
 8005fc2:	bf0c      	ite	eq
 8005fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fc8:	2500      	movne	r5, #0
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	bfc4      	itt	gt
 8005fce:	1a9b      	subgt	r3, r3, r2
 8005fd0:	18ed      	addgt	r5, r5, r3
 8005fd2:	2600      	movs	r6, #0
 8005fd4:	341a      	adds	r4, #26
 8005fd6:	42b5      	cmp	r5, r6
 8005fd8:	d11a      	bne.n	8006010 <_printf_common+0xc8>
 8005fda:	2000      	movs	r0, #0
 8005fdc:	e008      	b.n	8005ff0 <_printf_common+0xa8>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	4652      	mov	r2, sl
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	4638      	mov	r0, r7
 8005fe6:	47c0      	blx	r8
 8005fe8:	3001      	adds	r0, #1
 8005fea:	d103      	bne.n	8005ff4 <_printf_common+0xac>
 8005fec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff4:	3501      	adds	r5, #1
 8005ff6:	e7c6      	b.n	8005f86 <_printf_common+0x3e>
 8005ff8:	18e1      	adds	r1, r4, r3
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	2030      	movs	r0, #48	; 0x30
 8005ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006002:	4422      	add	r2, r4
 8006004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800600c:	3302      	adds	r3, #2
 800600e:	e7c7      	b.n	8005fa0 <_printf_common+0x58>
 8006010:	2301      	movs	r3, #1
 8006012:	4622      	mov	r2, r4
 8006014:	4649      	mov	r1, r9
 8006016:	4638      	mov	r0, r7
 8006018:	47c0      	blx	r8
 800601a:	3001      	adds	r0, #1
 800601c:	d0e6      	beq.n	8005fec <_printf_common+0xa4>
 800601e:	3601      	adds	r6, #1
 8006020:	e7d9      	b.n	8005fd6 <_printf_common+0x8e>
	...

08006024 <_printf_i>:
 8006024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006028:	460c      	mov	r4, r1
 800602a:	4691      	mov	r9, r2
 800602c:	7e27      	ldrb	r7, [r4, #24]
 800602e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006030:	2f78      	cmp	r7, #120	; 0x78
 8006032:	4680      	mov	r8, r0
 8006034:	469a      	mov	sl, r3
 8006036:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800603a:	d807      	bhi.n	800604c <_printf_i+0x28>
 800603c:	2f62      	cmp	r7, #98	; 0x62
 800603e:	d80a      	bhi.n	8006056 <_printf_i+0x32>
 8006040:	2f00      	cmp	r7, #0
 8006042:	f000 80d8 	beq.w	80061f6 <_printf_i+0x1d2>
 8006046:	2f58      	cmp	r7, #88	; 0x58
 8006048:	f000 80a3 	beq.w	8006192 <_printf_i+0x16e>
 800604c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006054:	e03a      	b.n	80060cc <_printf_i+0xa8>
 8006056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800605a:	2b15      	cmp	r3, #21
 800605c:	d8f6      	bhi.n	800604c <_printf_i+0x28>
 800605e:	a001      	add	r0, pc, #4	; (adr r0, 8006064 <_printf_i+0x40>)
 8006060:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006064:	080060bd 	.word	0x080060bd
 8006068:	080060d1 	.word	0x080060d1
 800606c:	0800604d 	.word	0x0800604d
 8006070:	0800604d 	.word	0x0800604d
 8006074:	0800604d 	.word	0x0800604d
 8006078:	0800604d 	.word	0x0800604d
 800607c:	080060d1 	.word	0x080060d1
 8006080:	0800604d 	.word	0x0800604d
 8006084:	0800604d 	.word	0x0800604d
 8006088:	0800604d 	.word	0x0800604d
 800608c:	0800604d 	.word	0x0800604d
 8006090:	080061dd 	.word	0x080061dd
 8006094:	08006101 	.word	0x08006101
 8006098:	080061bf 	.word	0x080061bf
 800609c:	0800604d 	.word	0x0800604d
 80060a0:	0800604d 	.word	0x0800604d
 80060a4:	080061ff 	.word	0x080061ff
 80060a8:	0800604d 	.word	0x0800604d
 80060ac:	08006101 	.word	0x08006101
 80060b0:	0800604d 	.word	0x0800604d
 80060b4:	0800604d 	.word	0x0800604d
 80060b8:	080061c7 	.word	0x080061c7
 80060bc:	680b      	ldr	r3, [r1, #0]
 80060be:	1d1a      	adds	r2, r3, #4
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	600a      	str	r2, [r1, #0]
 80060c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80060c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060cc:	2301      	movs	r3, #1
 80060ce:	e0a3      	b.n	8006218 <_printf_i+0x1f4>
 80060d0:	6825      	ldr	r5, [r4, #0]
 80060d2:	6808      	ldr	r0, [r1, #0]
 80060d4:	062e      	lsls	r6, r5, #24
 80060d6:	f100 0304 	add.w	r3, r0, #4
 80060da:	d50a      	bpl.n	80060f2 <_printf_i+0xce>
 80060dc:	6805      	ldr	r5, [r0, #0]
 80060de:	600b      	str	r3, [r1, #0]
 80060e0:	2d00      	cmp	r5, #0
 80060e2:	da03      	bge.n	80060ec <_printf_i+0xc8>
 80060e4:	232d      	movs	r3, #45	; 0x2d
 80060e6:	426d      	negs	r5, r5
 80060e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ec:	485e      	ldr	r0, [pc, #376]	; (8006268 <_printf_i+0x244>)
 80060ee:	230a      	movs	r3, #10
 80060f0:	e019      	b.n	8006126 <_printf_i+0x102>
 80060f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80060f6:	6805      	ldr	r5, [r0, #0]
 80060f8:	600b      	str	r3, [r1, #0]
 80060fa:	bf18      	it	ne
 80060fc:	b22d      	sxthne	r5, r5
 80060fe:	e7ef      	b.n	80060e0 <_printf_i+0xbc>
 8006100:	680b      	ldr	r3, [r1, #0]
 8006102:	6825      	ldr	r5, [r4, #0]
 8006104:	1d18      	adds	r0, r3, #4
 8006106:	6008      	str	r0, [r1, #0]
 8006108:	0628      	lsls	r0, r5, #24
 800610a:	d501      	bpl.n	8006110 <_printf_i+0xec>
 800610c:	681d      	ldr	r5, [r3, #0]
 800610e:	e002      	b.n	8006116 <_printf_i+0xf2>
 8006110:	0669      	lsls	r1, r5, #25
 8006112:	d5fb      	bpl.n	800610c <_printf_i+0xe8>
 8006114:	881d      	ldrh	r5, [r3, #0]
 8006116:	4854      	ldr	r0, [pc, #336]	; (8006268 <_printf_i+0x244>)
 8006118:	2f6f      	cmp	r7, #111	; 0x6f
 800611a:	bf0c      	ite	eq
 800611c:	2308      	moveq	r3, #8
 800611e:	230a      	movne	r3, #10
 8006120:	2100      	movs	r1, #0
 8006122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006126:	6866      	ldr	r6, [r4, #4]
 8006128:	60a6      	str	r6, [r4, #8]
 800612a:	2e00      	cmp	r6, #0
 800612c:	bfa2      	ittt	ge
 800612e:	6821      	ldrge	r1, [r4, #0]
 8006130:	f021 0104 	bicge.w	r1, r1, #4
 8006134:	6021      	strge	r1, [r4, #0]
 8006136:	b90d      	cbnz	r5, 800613c <_printf_i+0x118>
 8006138:	2e00      	cmp	r6, #0
 800613a:	d04d      	beq.n	80061d8 <_printf_i+0x1b4>
 800613c:	4616      	mov	r6, r2
 800613e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006142:	fb03 5711 	mls	r7, r3, r1, r5
 8006146:	5dc7      	ldrb	r7, [r0, r7]
 8006148:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800614c:	462f      	mov	r7, r5
 800614e:	42bb      	cmp	r3, r7
 8006150:	460d      	mov	r5, r1
 8006152:	d9f4      	bls.n	800613e <_printf_i+0x11a>
 8006154:	2b08      	cmp	r3, #8
 8006156:	d10b      	bne.n	8006170 <_printf_i+0x14c>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	07df      	lsls	r7, r3, #31
 800615c:	d508      	bpl.n	8006170 <_printf_i+0x14c>
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	6861      	ldr	r1, [r4, #4]
 8006162:	4299      	cmp	r1, r3
 8006164:	bfde      	ittt	le
 8006166:	2330      	movle	r3, #48	; 0x30
 8006168:	f806 3c01 	strble.w	r3, [r6, #-1]
 800616c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006170:	1b92      	subs	r2, r2, r6
 8006172:	6122      	str	r2, [r4, #16]
 8006174:	f8cd a000 	str.w	sl, [sp]
 8006178:	464b      	mov	r3, r9
 800617a:	aa03      	add	r2, sp, #12
 800617c:	4621      	mov	r1, r4
 800617e:	4640      	mov	r0, r8
 8006180:	f7ff fee2 	bl	8005f48 <_printf_common>
 8006184:	3001      	adds	r0, #1
 8006186:	d14c      	bne.n	8006222 <_printf_i+0x1fe>
 8006188:	f04f 30ff 	mov.w	r0, #4294967295
 800618c:	b004      	add	sp, #16
 800618e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006192:	4835      	ldr	r0, [pc, #212]	; (8006268 <_printf_i+0x244>)
 8006194:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	680e      	ldr	r6, [r1, #0]
 800619c:	061f      	lsls	r7, r3, #24
 800619e:	f856 5b04 	ldr.w	r5, [r6], #4
 80061a2:	600e      	str	r6, [r1, #0]
 80061a4:	d514      	bpl.n	80061d0 <_printf_i+0x1ac>
 80061a6:	07d9      	lsls	r1, r3, #31
 80061a8:	bf44      	itt	mi
 80061aa:	f043 0320 	orrmi.w	r3, r3, #32
 80061ae:	6023      	strmi	r3, [r4, #0]
 80061b0:	b91d      	cbnz	r5, 80061ba <_printf_i+0x196>
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	f023 0320 	bic.w	r3, r3, #32
 80061b8:	6023      	str	r3, [r4, #0]
 80061ba:	2310      	movs	r3, #16
 80061bc:	e7b0      	b.n	8006120 <_printf_i+0xfc>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	f043 0320 	orr.w	r3, r3, #32
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	2378      	movs	r3, #120	; 0x78
 80061c8:	4828      	ldr	r0, [pc, #160]	; (800626c <_printf_i+0x248>)
 80061ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061ce:	e7e3      	b.n	8006198 <_printf_i+0x174>
 80061d0:	065e      	lsls	r6, r3, #25
 80061d2:	bf48      	it	mi
 80061d4:	b2ad      	uxthmi	r5, r5
 80061d6:	e7e6      	b.n	80061a6 <_printf_i+0x182>
 80061d8:	4616      	mov	r6, r2
 80061da:	e7bb      	b.n	8006154 <_printf_i+0x130>
 80061dc:	680b      	ldr	r3, [r1, #0]
 80061de:	6826      	ldr	r6, [r4, #0]
 80061e0:	6960      	ldr	r0, [r4, #20]
 80061e2:	1d1d      	adds	r5, r3, #4
 80061e4:	600d      	str	r5, [r1, #0]
 80061e6:	0635      	lsls	r5, r6, #24
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	d501      	bpl.n	80061f0 <_printf_i+0x1cc>
 80061ec:	6018      	str	r0, [r3, #0]
 80061ee:	e002      	b.n	80061f6 <_printf_i+0x1d2>
 80061f0:	0671      	lsls	r1, r6, #25
 80061f2:	d5fb      	bpl.n	80061ec <_printf_i+0x1c8>
 80061f4:	8018      	strh	r0, [r3, #0]
 80061f6:	2300      	movs	r3, #0
 80061f8:	6123      	str	r3, [r4, #16]
 80061fa:	4616      	mov	r6, r2
 80061fc:	e7ba      	b.n	8006174 <_printf_i+0x150>
 80061fe:	680b      	ldr	r3, [r1, #0]
 8006200:	1d1a      	adds	r2, r3, #4
 8006202:	600a      	str	r2, [r1, #0]
 8006204:	681e      	ldr	r6, [r3, #0]
 8006206:	6862      	ldr	r2, [r4, #4]
 8006208:	2100      	movs	r1, #0
 800620a:	4630      	mov	r0, r6
 800620c:	f7fa f850 	bl	80002b0 <memchr>
 8006210:	b108      	cbz	r0, 8006216 <_printf_i+0x1f2>
 8006212:	1b80      	subs	r0, r0, r6
 8006214:	6060      	str	r0, [r4, #4]
 8006216:	6863      	ldr	r3, [r4, #4]
 8006218:	6123      	str	r3, [r4, #16]
 800621a:	2300      	movs	r3, #0
 800621c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006220:	e7a8      	b.n	8006174 <_printf_i+0x150>
 8006222:	6923      	ldr	r3, [r4, #16]
 8006224:	4632      	mov	r2, r6
 8006226:	4649      	mov	r1, r9
 8006228:	4640      	mov	r0, r8
 800622a:	47d0      	blx	sl
 800622c:	3001      	adds	r0, #1
 800622e:	d0ab      	beq.n	8006188 <_printf_i+0x164>
 8006230:	6823      	ldr	r3, [r4, #0]
 8006232:	079b      	lsls	r3, r3, #30
 8006234:	d413      	bmi.n	800625e <_printf_i+0x23a>
 8006236:	68e0      	ldr	r0, [r4, #12]
 8006238:	9b03      	ldr	r3, [sp, #12]
 800623a:	4298      	cmp	r0, r3
 800623c:	bfb8      	it	lt
 800623e:	4618      	movlt	r0, r3
 8006240:	e7a4      	b.n	800618c <_printf_i+0x168>
 8006242:	2301      	movs	r3, #1
 8006244:	4632      	mov	r2, r6
 8006246:	4649      	mov	r1, r9
 8006248:	4640      	mov	r0, r8
 800624a:	47d0      	blx	sl
 800624c:	3001      	adds	r0, #1
 800624e:	d09b      	beq.n	8006188 <_printf_i+0x164>
 8006250:	3501      	adds	r5, #1
 8006252:	68e3      	ldr	r3, [r4, #12]
 8006254:	9903      	ldr	r1, [sp, #12]
 8006256:	1a5b      	subs	r3, r3, r1
 8006258:	42ab      	cmp	r3, r5
 800625a:	dcf2      	bgt.n	8006242 <_printf_i+0x21e>
 800625c:	e7eb      	b.n	8006236 <_printf_i+0x212>
 800625e:	2500      	movs	r5, #0
 8006260:	f104 0619 	add.w	r6, r4, #25
 8006264:	e7f5      	b.n	8006252 <_printf_i+0x22e>
 8006266:	bf00      	nop
 8006268:	08006625 	.word	0x08006625
 800626c:	08006636 	.word	0x08006636

08006270 <memmove>:
 8006270:	4288      	cmp	r0, r1
 8006272:	b510      	push	{r4, lr}
 8006274:	eb01 0402 	add.w	r4, r1, r2
 8006278:	d902      	bls.n	8006280 <memmove+0x10>
 800627a:	4284      	cmp	r4, r0
 800627c:	4623      	mov	r3, r4
 800627e:	d807      	bhi.n	8006290 <memmove+0x20>
 8006280:	1e43      	subs	r3, r0, #1
 8006282:	42a1      	cmp	r1, r4
 8006284:	d008      	beq.n	8006298 <memmove+0x28>
 8006286:	f811 2b01 	ldrb.w	r2, [r1], #1
 800628a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800628e:	e7f8      	b.n	8006282 <memmove+0x12>
 8006290:	4402      	add	r2, r0
 8006292:	4601      	mov	r1, r0
 8006294:	428a      	cmp	r2, r1
 8006296:	d100      	bne.n	800629a <memmove+0x2a>
 8006298:	bd10      	pop	{r4, pc}
 800629a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800629e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80062a2:	e7f7      	b.n	8006294 <memmove+0x24>

080062a4 <_free_r>:
 80062a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062a6:	2900      	cmp	r1, #0
 80062a8:	d048      	beq.n	800633c <_free_r+0x98>
 80062aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ae:	9001      	str	r0, [sp, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f1a1 0404 	sub.w	r4, r1, #4
 80062b6:	bfb8      	it	lt
 80062b8:	18e4      	addlt	r4, r4, r3
 80062ba:	f000 f8d3 	bl	8006464 <__malloc_lock>
 80062be:	4a20      	ldr	r2, [pc, #128]	; (8006340 <_free_r+0x9c>)
 80062c0:	9801      	ldr	r0, [sp, #4]
 80062c2:	6813      	ldr	r3, [r2, #0]
 80062c4:	4615      	mov	r5, r2
 80062c6:	b933      	cbnz	r3, 80062d6 <_free_r+0x32>
 80062c8:	6063      	str	r3, [r4, #4]
 80062ca:	6014      	str	r4, [r2, #0]
 80062cc:	b003      	add	sp, #12
 80062ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062d2:	f000 b8cd 	b.w	8006470 <__malloc_unlock>
 80062d6:	42a3      	cmp	r3, r4
 80062d8:	d90b      	bls.n	80062f2 <_free_r+0x4e>
 80062da:	6821      	ldr	r1, [r4, #0]
 80062dc:	1862      	adds	r2, r4, r1
 80062de:	4293      	cmp	r3, r2
 80062e0:	bf04      	itt	eq
 80062e2:	681a      	ldreq	r2, [r3, #0]
 80062e4:	685b      	ldreq	r3, [r3, #4]
 80062e6:	6063      	str	r3, [r4, #4]
 80062e8:	bf04      	itt	eq
 80062ea:	1852      	addeq	r2, r2, r1
 80062ec:	6022      	streq	r2, [r4, #0]
 80062ee:	602c      	str	r4, [r5, #0]
 80062f0:	e7ec      	b.n	80062cc <_free_r+0x28>
 80062f2:	461a      	mov	r2, r3
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	b10b      	cbz	r3, 80062fc <_free_r+0x58>
 80062f8:	42a3      	cmp	r3, r4
 80062fa:	d9fa      	bls.n	80062f2 <_free_r+0x4e>
 80062fc:	6811      	ldr	r1, [r2, #0]
 80062fe:	1855      	adds	r5, r2, r1
 8006300:	42a5      	cmp	r5, r4
 8006302:	d10b      	bne.n	800631c <_free_r+0x78>
 8006304:	6824      	ldr	r4, [r4, #0]
 8006306:	4421      	add	r1, r4
 8006308:	1854      	adds	r4, r2, r1
 800630a:	42a3      	cmp	r3, r4
 800630c:	6011      	str	r1, [r2, #0]
 800630e:	d1dd      	bne.n	80062cc <_free_r+0x28>
 8006310:	681c      	ldr	r4, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	6053      	str	r3, [r2, #4]
 8006316:	4421      	add	r1, r4
 8006318:	6011      	str	r1, [r2, #0]
 800631a:	e7d7      	b.n	80062cc <_free_r+0x28>
 800631c:	d902      	bls.n	8006324 <_free_r+0x80>
 800631e:	230c      	movs	r3, #12
 8006320:	6003      	str	r3, [r0, #0]
 8006322:	e7d3      	b.n	80062cc <_free_r+0x28>
 8006324:	6825      	ldr	r5, [r4, #0]
 8006326:	1961      	adds	r1, r4, r5
 8006328:	428b      	cmp	r3, r1
 800632a:	bf04      	itt	eq
 800632c:	6819      	ldreq	r1, [r3, #0]
 800632e:	685b      	ldreq	r3, [r3, #4]
 8006330:	6063      	str	r3, [r4, #4]
 8006332:	bf04      	itt	eq
 8006334:	1949      	addeq	r1, r1, r5
 8006336:	6021      	streq	r1, [r4, #0]
 8006338:	6054      	str	r4, [r2, #4]
 800633a:	e7c7      	b.n	80062cc <_free_r+0x28>
 800633c:	b003      	add	sp, #12
 800633e:	bd30      	pop	{r4, r5, pc}
 8006340:	200143a0 	.word	0x200143a0

08006344 <_malloc_r>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	1ccd      	adds	r5, r1, #3
 8006348:	f025 0503 	bic.w	r5, r5, #3
 800634c:	3508      	adds	r5, #8
 800634e:	2d0c      	cmp	r5, #12
 8006350:	bf38      	it	cc
 8006352:	250c      	movcc	r5, #12
 8006354:	2d00      	cmp	r5, #0
 8006356:	4606      	mov	r6, r0
 8006358:	db01      	blt.n	800635e <_malloc_r+0x1a>
 800635a:	42a9      	cmp	r1, r5
 800635c:	d903      	bls.n	8006366 <_malloc_r+0x22>
 800635e:	230c      	movs	r3, #12
 8006360:	6033      	str	r3, [r6, #0]
 8006362:	2000      	movs	r0, #0
 8006364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006366:	f000 f87d 	bl	8006464 <__malloc_lock>
 800636a:	4921      	ldr	r1, [pc, #132]	; (80063f0 <_malloc_r+0xac>)
 800636c:	680a      	ldr	r2, [r1, #0]
 800636e:	4614      	mov	r4, r2
 8006370:	b99c      	cbnz	r4, 800639a <_malloc_r+0x56>
 8006372:	4f20      	ldr	r7, [pc, #128]	; (80063f4 <_malloc_r+0xb0>)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	b923      	cbnz	r3, 8006382 <_malloc_r+0x3e>
 8006378:	4621      	mov	r1, r4
 800637a:	4630      	mov	r0, r6
 800637c:	f000 f862 	bl	8006444 <_sbrk_r>
 8006380:	6038      	str	r0, [r7, #0]
 8006382:	4629      	mov	r1, r5
 8006384:	4630      	mov	r0, r6
 8006386:	f000 f85d 	bl	8006444 <_sbrk_r>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	d123      	bne.n	80063d6 <_malloc_r+0x92>
 800638e:	230c      	movs	r3, #12
 8006390:	6033      	str	r3, [r6, #0]
 8006392:	4630      	mov	r0, r6
 8006394:	f000 f86c 	bl	8006470 <__malloc_unlock>
 8006398:	e7e3      	b.n	8006362 <_malloc_r+0x1e>
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	1b5b      	subs	r3, r3, r5
 800639e:	d417      	bmi.n	80063d0 <_malloc_r+0x8c>
 80063a0:	2b0b      	cmp	r3, #11
 80063a2:	d903      	bls.n	80063ac <_malloc_r+0x68>
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	441c      	add	r4, r3
 80063a8:	6025      	str	r5, [r4, #0]
 80063aa:	e004      	b.n	80063b6 <_malloc_r+0x72>
 80063ac:	6863      	ldr	r3, [r4, #4]
 80063ae:	42a2      	cmp	r2, r4
 80063b0:	bf0c      	ite	eq
 80063b2:	600b      	streq	r3, [r1, #0]
 80063b4:	6053      	strne	r3, [r2, #4]
 80063b6:	4630      	mov	r0, r6
 80063b8:	f000 f85a 	bl	8006470 <__malloc_unlock>
 80063bc:	f104 000b 	add.w	r0, r4, #11
 80063c0:	1d23      	adds	r3, r4, #4
 80063c2:	f020 0007 	bic.w	r0, r0, #7
 80063c6:	1ac2      	subs	r2, r0, r3
 80063c8:	d0cc      	beq.n	8006364 <_malloc_r+0x20>
 80063ca:	1a1b      	subs	r3, r3, r0
 80063cc:	50a3      	str	r3, [r4, r2]
 80063ce:	e7c9      	b.n	8006364 <_malloc_r+0x20>
 80063d0:	4622      	mov	r2, r4
 80063d2:	6864      	ldr	r4, [r4, #4]
 80063d4:	e7cc      	b.n	8006370 <_malloc_r+0x2c>
 80063d6:	1cc4      	adds	r4, r0, #3
 80063d8:	f024 0403 	bic.w	r4, r4, #3
 80063dc:	42a0      	cmp	r0, r4
 80063de:	d0e3      	beq.n	80063a8 <_malloc_r+0x64>
 80063e0:	1a21      	subs	r1, r4, r0
 80063e2:	4630      	mov	r0, r6
 80063e4:	f000 f82e 	bl	8006444 <_sbrk_r>
 80063e8:	3001      	adds	r0, #1
 80063ea:	d1dd      	bne.n	80063a8 <_malloc_r+0x64>
 80063ec:	e7cf      	b.n	800638e <_malloc_r+0x4a>
 80063ee:	bf00      	nop
 80063f0:	200143a0 	.word	0x200143a0
 80063f4:	200143a4 	.word	0x200143a4

080063f8 <_realloc_r>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	4607      	mov	r7, r0
 80063fc:	4614      	mov	r4, r2
 80063fe:	460e      	mov	r6, r1
 8006400:	b921      	cbnz	r1, 800640c <_realloc_r+0x14>
 8006402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006406:	4611      	mov	r1, r2
 8006408:	f7ff bf9c 	b.w	8006344 <_malloc_r>
 800640c:	b922      	cbnz	r2, 8006418 <_realloc_r+0x20>
 800640e:	f7ff ff49 	bl	80062a4 <_free_r>
 8006412:	4625      	mov	r5, r4
 8006414:	4628      	mov	r0, r5
 8006416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006418:	f000 f830 	bl	800647c <_malloc_usable_size_r>
 800641c:	42a0      	cmp	r0, r4
 800641e:	d20f      	bcs.n	8006440 <_realloc_r+0x48>
 8006420:	4621      	mov	r1, r4
 8006422:	4638      	mov	r0, r7
 8006424:	f7ff ff8e 	bl	8006344 <_malloc_r>
 8006428:	4605      	mov	r5, r0
 800642a:	2800      	cmp	r0, #0
 800642c:	d0f2      	beq.n	8006414 <_realloc_r+0x1c>
 800642e:	4631      	mov	r1, r6
 8006430:	4622      	mov	r2, r4
 8006432:	f7ff fbe3 	bl	8005bfc <memcpy>
 8006436:	4631      	mov	r1, r6
 8006438:	4638      	mov	r0, r7
 800643a:	f7ff ff33 	bl	80062a4 <_free_r>
 800643e:	e7e9      	b.n	8006414 <_realloc_r+0x1c>
 8006440:	4635      	mov	r5, r6
 8006442:	e7e7      	b.n	8006414 <_realloc_r+0x1c>

08006444 <_sbrk_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	4d06      	ldr	r5, [pc, #24]	; (8006460 <_sbrk_r+0x1c>)
 8006448:	2300      	movs	r3, #0
 800644a:	4604      	mov	r4, r0
 800644c:	4608      	mov	r0, r1
 800644e:	602b      	str	r3, [r5, #0]
 8006450:	f000 f81e 	bl	8006490 <_sbrk>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d102      	bne.n	800645e <_sbrk_r+0x1a>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	b103      	cbz	r3, 800645e <_sbrk_r+0x1a>
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	bd38      	pop	{r3, r4, r5, pc}
 8006460:	200144a0 	.word	0x200144a0

08006464 <__malloc_lock>:
 8006464:	4801      	ldr	r0, [pc, #4]	; (800646c <__malloc_lock+0x8>)
 8006466:	f000 b811 	b.w	800648c <__retarget_lock_acquire_recursive>
 800646a:	bf00      	nop
 800646c:	200144a8 	.word	0x200144a8

08006470 <__malloc_unlock>:
 8006470:	4801      	ldr	r0, [pc, #4]	; (8006478 <__malloc_unlock+0x8>)
 8006472:	f000 b80c 	b.w	800648e <__retarget_lock_release_recursive>
 8006476:	bf00      	nop
 8006478:	200144a8 	.word	0x200144a8

0800647c <_malloc_usable_size_r>:
 800647c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006480:	1f18      	subs	r0, r3, #4
 8006482:	2b00      	cmp	r3, #0
 8006484:	bfbc      	itt	lt
 8006486:	580b      	ldrlt	r3, [r1, r0]
 8006488:	18c0      	addlt	r0, r0, r3
 800648a:	4770      	bx	lr

0800648c <__retarget_lock_acquire_recursive>:
 800648c:	4770      	bx	lr

0800648e <__retarget_lock_release_recursive>:
 800648e:	4770      	bx	lr

08006490 <_sbrk>:
 8006490:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <_sbrk+0x14>)
 8006492:	6819      	ldr	r1, [r3, #0]
 8006494:	4602      	mov	r2, r0
 8006496:	b909      	cbnz	r1, 800649c <_sbrk+0xc>
 8006498:	4903      	ldr	r1, [pc, #12]	; (80064a8 <_sbrk+0x18>)
 800649a:	6019      	str	r1, [r3, #0]
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	4402      	add	r2, r0
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	4770      	bx	lr
 80064a4:	200143a8 	.word	0x200143a8
 80064a8:	200144b0 	.word	0x200144b0

080064ac <_init>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	bf00      	nop
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr

080064b8 <_fini>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr
