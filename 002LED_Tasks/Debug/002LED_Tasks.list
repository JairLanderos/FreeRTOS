
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004844  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004a14  08004a14  00014a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ad4  08004ad4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004ad4  08004ad4  00014ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004adc  08004adc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004adc  08004adc  00014adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ae0  08004ae0  00014ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001340c  20000014  08004af8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013420  08004af8  00023420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f06  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e86  00000000  00000000  00036f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00039dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  0003af50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023859  00000000  00000000  0003bf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001477c  00000000  00000000  0005f7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db9cd  00000000  00000000  00073f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f90a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f4  00000000  00000000  0014f960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080049fc 	.word	0x080049fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	080049fc 	.word	0x080049fc

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20013378 	.word	0x20013378

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
static void led1_handler(void* parameters);
static void led2_handler(void* parameters);
static void led3_handler(void* parameters);

int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af02      	add	r7, sp, #8
	TaskHandle_t led1_handle;
	TaskHandle_t led2_handle;
	TaskHandle_t led3_handle;
	BaseType_t status;

	HAL_Init();
 80005a2:	f000 fa99 	bl	8000ad8 <HAL_Init>

	SystemClock_Config();
 80005a6:	f000 f867 	bl	8000678 <SystemClock_Config>

	MX_GPIO_Init();
 80005aa:	f000 f8d3 	bl	8000754 <MX_GPIO_Init>

	/* Enable the CYCCNT counter */
	DWT_CTRL |= ( 1 << 0);
 80005ae:	4b2b      	ldr	r3, [pc, #172]	; (800065c <main+0xc0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a2a      	ldr	r2, [pc, #168]	; (800065c <main+0xc0>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6013      	str	r3, [r2, #0]

	/* Task 1 creation */
	status = xTaskCreate(led1_handler, "LED1_task", 200, NULL, 2, &led1_handle);
 80005ba:	f107 030c 	add.w	r3, r7, #12
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2302      	movs	r3, #2
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2300      	movs	r3, #0
 80005c6:	22c8      	movs	r2, #200	; 0xc8
 80005c8:	4925      	ldr	r1, [pc, #148]	; (8000660 <main+0xc4>)
 80005ca:	4826      	ldr	r0, [pc, #152]	; (8000664 <main+0xc8>)
 80005cc:	f001 fe21 	bl	8002212 <xTaskCreate>
 80005d0:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00a      	beq.n	80005ee <main+0x52>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005dc:	f383 8811 	msr	BASEPRI, r3
 80005e0:	f3bf 8f6f 	isb	sy
 80005e4:	f3bf 8f4f 	dsb	sy
 80005e8:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ea:	bf00      	nop
 80005ec:	e7fe      	b.n	80005ec <main+0x50>

	/* Task 2 creation */
	status = xTaskCreate(led2_handler, "LED2_task", 200, NULL, 2, &led2_handle);
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2302      	movs	r3, #2
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	22c8      	movs	r2, #200	; 0xc8
 80005fc:	491a      	ldr	r1, [pc, #104]	; (8000668 <main+0xcc>)
 80005fe:	481b      	ldr	r0, [pc, #108]	; (800066c <main+0xd0>)
 8000600:	f001 fe07 	bl	8002212 <xTaskCreate>
 8000604:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d00a      	beq.n	8000622 <main+0x86>
        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	617b      	str	r3, [r7, #20]
    }
 800061e:	bf00      	nop
 8000620:	e7fe      	b.n	8000620 <main+0x84>

	/* Task 3 creation */
	status = xTaskCreate(led3_handler, "LED3_task", 200, NULL, 2, &led3_handle);
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2302      	movs	r3, #2
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	22c8      	movs	r2, #200	; 0xc8
 800062e:	4910      	ldr	r1, [pc, #64]	; (8000670 <main+0xd4>)
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <main+0xd8>)
 8000632:	f001 fdee 	bl	8002212 <xTaskCreate>
 8000636:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	2b01      	cmp	r3, #1
 800063c:	d00a      	beq.n	8000654 <main+0xb8>
        __asm volatile
 800063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000642:	f383 8811 	msr	BASEPRI, r3
 8000646:	f3bf 8f6f 	isb	sy
 800064a:	f3bf 8f4f 	dsb	sy
 800064e:	613b      	str	r3, [r7, #16]
    }
 8000650:	bf00      	nop
 8000652:	e7fe      	b.n	8000652 <main+0xb6>

	/* Start the scheduler */
	vTaskStartScheduler();
 8000654:	f001 ff76 	bl	8002544 <vTaskStartScheduler>

	while (1)
 8000658:	e7fe      	b.n	8000658 <main+0xbc>
 800065a:	bf00      	nop
 800065c:	e0001000 	.word	0xe0001000
 8000660:	08004a14 	.word	0x08004a14
 8000664:	0800088d 	.word	0x0800088d
 8000668:	08004a20 	.word	0x08004a20
 800066c:	080008ad 	.word	0x080008ad
 8000670:	08004a2c 	.word	0x08004a2c
 8000674:	080008cd 	.word	0x080008cd

08000678 <SystemClock_Config>:
	}

}

void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2234      	movs	r2, #52	; 0x34
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f004 f9b0 	bl	80049ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b2a      	ldr	r3, [pc, #168]	; (800074c <SystemClock_Config+0xd4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a29      	ldr	r2, [pc, #164]	; (800074c <SystemClock_Config+0xd4>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b27      	ldr	r3, [pc, #156]	; (800074c <SystemClock_Config+0xd4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <SystemClock_Config+0xd8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a22      	ldr	r2, [pc, #136]	; (8000750 <SystemClock_Config+0xd8>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b20      	ldr	r3, [pc, #128]	; (8000750 <SystemClock_Config+0xd8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006ec:	2310      	movs	r3, #16
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4618      	mov	r0, r3
 8000708:	f000 ffe0 	bl	80016cc <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000712:	f000 f8fd 	bl	8000910 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fce0 	bl	80010f8 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800073e:	f000 f8e7 	bl	8000910 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b44      	ldr	r3, [pc, #272]	; (8000880 <MX_GPIO_Init+0x12c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a43      	ldr	r2, [pc, #268]	; (8000880 <MX_GPIO_Init+0x12c>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b41      	ldr	r3, [pc, #260]	; (8000880 <MX_GPIO_Init+0x12c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b3d      	ldr	r3, [pc, #244]	; (8000880 <MX_GPIO_Init+0x12c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a3c      	ldr	r2, [pc, #240]	; (8000880 <MX_GPIO_Init+0x12c>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b3a      	ldr	r3, [pc, #232]	; (8000880 <MX_GPIO_Init+0x12c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b36      	ldr	r3, [pc, #216]	; (8000880 <MX_GPIO_Init+0x12c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a35      	ldr	r2, [pc, #212]	; (8000880 <MX_GPIO_Init+0x12c>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b33      	ldr	r3, [pc, #204]	; (8000880 <MX_GPIO_Init+0x12c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <MX_GPIO_Init+0x12c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a2e      	ldr	r2, [pc, #184]	; (8000880 <MX_GPIO_Init+0x12c>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <MX_GPIO_Init+0x12c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2120      	movs	r1, #32
 80007de:	4829      	ldr	r0, [pc, #164]	; (8000884 <MX_GPIO_Init+0x130>)
 80007e0:	f000 fc56 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	4619      	mov	r1, r3
 80007fa:	4823      	ldr	r0, [pc, #140]	; (8000888 <MX_GPIO_Init+0x134>)
 80007fc:	f000 fab4 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000800:	230c      	movs	r3, #12
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000810:	2307      	movs	r3, #7
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	481a      	ldr	r0, [pc, #104]	; (8000884 <MX_GPIO_Init+0x130>)
 800081c:	f000 faa4 	bl	8000d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000820:	2320      	movs	r3, #32
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4813      	ldr	r0, [pc, #76]	; (8000884 <MX_GPIO_Init+0x130>)
 8000838:	f000 fa96 	bl	8000d68 <HAL_GPIO_Init>

  /* Configure LED Tasks GPIO Pins */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800083c:	2301      	movs	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	480c      	ldr	r0, [pc, #48]	; (8000884 <MX_GPIO_Init+0x130>)
 8000854:	f000 fa88 	bl	8000d68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000858:	2302      	movs	r3, #2
 800085a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	4808      	ldr	r0, [pc, #32]	; (8000884 <MX_GPIO_Init+0x130>)
 8000864:	f000 fa80 	bl	8000d68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000868:	2310      	movs	r3, #16
 800086a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_GPIO_Init+0x130>)
 8000874:	f000 fa78 	bl	8000d68 <HAL_GPIO_Init>

}
 8000878:	bf00      	nop
 800087a:	3728      	adds	r7, #40	; 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40020000 	.word	0x40020000
 8000888:	40020800 	.word	0x40020800

0800088c <led1_handler>:

static void led1_handler(void* parameters)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000894:	2101      	movs	r1, #1
 8000896:	4804      	ldr	r0, [pc, #16]	; (80008a8 <led1_handler+0x1c>)
 8000898:	f000 fc13 	bl	80010c2 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800089c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a0:	f000 f95c 	bl	8000b5c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80008a4:	e7f6      	b.n	8000894 <led1_handler+0x8>
 80008a6:	bf00      	nop
 80008a8:	40020000 	.word	0x40020000

080008ac <led2_handler>:
	}
}

static void led2_handler(void* parameters)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80008b4:	2102      	movs	r1, #2
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <led2_handler+0x1c>)
 80008b8:	f000 fc03 	bl	80010c2 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 80008bc:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008c0:	f000 f94c 	bl	8000b5c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80008c4:	e7f6      	b.n	80008b4 <led2_handler+0x8>
 80008c6:	bf00      	nop
 80008c8:	40020000 	.word	0x40020000

080008cc <led3_handler>:
	}
}

static void led3_handler(void* parameters)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80008d4:	2110      	movs	r1, #16
 80008d6:	4804      	ldr	r0, [pc, #16]	; (80008e8 <led3_handler+0x1c>)
 80008d8:	f000 fbf3 	bl	80010c2 <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 80008dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008e0:	f000 f93c 	bl	8000b5c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80008e4:	e7f6      	b.n	80008d4 <led3_handler+0x8>
 80008e6:	bf00      	nop
 80008e8:	40020000 	.word	0x40020000

080008ec <HAL_TIM_PeriodElapsedCallback>:
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d101      	bne.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008fe:	f000 f90d 	bl	8000b1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40001000 	.word	0x40001000

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800095a:	f002 fac5 	bl	8002ee8 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	; 0x30
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	2036      	movs	r0, #54	; 0x36
 8000982:	f000 f9c7 	bl	8000d14 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000986:	2036      	movs	r0, #54	; 0x36
 8000988:	f000 f9e0 	bl	8000d4c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <HAL_InitTick+0xa4>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	4a1e      	ldr	r2, [pc, #120]	; (8000a10 <HAL_InitTick+0xa4>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6413      	str	r3, [r2, #64]	; 0x40
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <HAL_InitTick+0xa4>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	f003 0310 	and.w	r3, r3, #16
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009a8:	f107 0210 	add.w	r2, r7, #16
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4611      	mov	r1, r2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fca6 	bl	8001304 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009b8:	f000 fc90 	bl	80012dc <HAL_RCC_GetPCLK1Freq>
 80009bc:	4603      	mov	r3, r0
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c4:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <HAL_InitTick+0xa8>)
 80009c6:	fba2 2303 	umull	r2, r3, r2, r3
 80009ca:	0c9b      	lsrs	r3, r3, #18
 80009cc:	3b01      	subs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <HAL_InitTick+0xac>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <HAL_InitTick+0xb0>)
 80009d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <HAL_InitTick+0xac>)
 80009d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_InitTick+0xac>)
 80009e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <HAL_InitTick+0xac>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_InitTick+0xac>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <HAL_InitTick+0xac>)
 80009f2:	f001 f909 	bl	8001c08 <HAL_TIM_Base_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d104      	bne.n	8000a06 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009fc:	4806      	ldr	r0, [pc, #24]	; (8000a18 <HAL_InitTick+0xac>)
 80009fe:	f001 f95d 	bl	8001cbc <HAL_TIM_Base_Start_IT>
 8000a02:	4603      	mov	r3, r0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3730      	adds	r7, #48	; 0x30
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	431bde83 	.word	0x431bde83
 8000a18:	2001332c 	.word	0x2001332c
 8000a1c:	40001000 	.word	0x40001000

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <TIM6_DAC_IRQHandler+0x10>)
 8000a52:	f001 f9a3 	bl	8001d9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	2001332c 	.word	0x2001332c

08000a60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a8a:	490e      	ldr	r1, [pc, #56]	; (8000ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa0:	4c0b      	ldr	r4, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aae:	f7ff ffd7 	bl	8000a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f003 ff5b 	bl	800496c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab6:	f7ff fd71 	bl	800059c <main>
  bx  lr    
 8000aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000abc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ac8:	08004ae4 	.word	0x08004ae4
  ldr r2, =_sbss
 8000acc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ad0:	20013420 	.word	0x20013420

08000ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC_IRQHandler>
	...

08000ad8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <HAL_Init+0x40>)
 8000ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <HAL_Init+0x40>)
 8000aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_Init+0x40>)
 8000afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f8fc 	bl	8000cfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff ff30 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b0c:	f7ff ff06 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023c00 	.word	0x40023c00

08000b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x20>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_IncTick+0x24>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_IncTick+0x24>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20013374 	.word	0x20013374

08000b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_GetTick+0x14>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20013374 	.word	0x20013374

08000b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b64:	f7ff ffee 	bl	8000b44 <HAL_GetTick>
 8000b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b74:	d005      	beq.n	8000b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_Delay+0x44>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4413      	add	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b82:	bf00      	nop
 8000b84:	f7ff ffde 	bl	8000b44 <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d8f7      	bhi.n	8000b84 <HAL_Delay+0x28>
  {
  }
}
 8000b94:	bf00      	nop
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	60d3      	str	r3, [r2, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <__NVIC_GetPriorityGrouping+0x18>)
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	0a1b      	lsrs	r3, r3, #8
 8000bf6:	f003 0307 	and.w	r3, r3, #7
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0b      	blt.n	8000c32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <__NVIC_EnableIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ff4c 	bl	8000ba4 <__NVIC_SetPriorityGrouping>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d26:	f7ff ff61 	bl	8000bec <__NVIC_GetPriorityGrouping>
 8000d2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	68b9      	ldr	r1, [r7, #8]
 8000d30:	6978      	ldr	r0, [r7, #20]
 8000d32:	f7ff ffb1 	bl	8000c98 <NVIC_EncodePriority>
 8000d36:	4602      	mov	r2, r0
 8000d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff80 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff54 	bl	8000c08 <__NVIC_EnableIRQ>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	e165      	b.n	8001050 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d84:	2201      	movs	r2, #1
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f040 8154 	bne.w	800104a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d005      	beq.n	8000dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d130      	bne.n	8000e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df0:	2201      	movs	r2, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	091b      	lsrs	r3, r3, #4
 8000e06:	f003 0201 	and.w	r2, r3, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d017      	beq.n	8000e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d123      	bne.n	8000eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	220f      	movs	r2, #15
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	69b9      	ldr	r1, [r7, #24]
 8000ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0203 	and.w	r2, r3, #3
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 80ae 	beq.w	800104a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b5d      	ldr	r3, [pc, #372]	; (8001068 <HAL_GPIO_Init+0x300>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a5c      	ldr	r2, [pc, #368]	; (8001068 <HAL_GPIO_Init+0x300>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b5a      	ldr	r3, [pc, #360]	; (8001068 <HAL_GPIO_Init+0x300>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f0a:	4a58      	ldr	r2, [pc, #352]	; (800106c <HAL_GPIO_Init+0x304>)
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	220f      	movs	r2, #15
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4f      	ldr	r2, [pc, #316]	; (8001070 <HAL_GPIO_Init+0x308>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d025      	beq.n	8000f82 <HAL_GPIO_Init+0x21a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4e      	ldr	r2, [pc, #312]	; (8001074 <HAL_GPIO_Init+0x30c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d01f      	beq.n	8000f7e <HAL_GPIO_Init+0x216>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4d      	ldr	r2, [pc, #308]	; (8001078 <HAL_GPIO_Init+0x310>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d019      	beq.n	8000f7a <HAL_GPIO_Init+0x212>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4c      	ldr	r2, [pc, #304]	; (800107c <HAL_GPIO_Init+0x314>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d013      	beq.n	8000f76 <HAL_GPIO_Init+0x20e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4b      	ldr	r2, [pc, #300]	; (8001080 <HAL_GPIO_Init+0x318>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d00d      	beq.n	8000f72 <HAL_GPIO_Init+0x20a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4a      	ldr	r2, [pc, #296]	; (8001084 <HAL_GPIO_Init+0x31c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x206>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a49      	ldr	r2, [pc, #292]	; (8001088 <HAL_GPIO_Init+0x320>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d101      	bne.n	8000f6a <HAL_GPIO_Init+0x202>
 8000f66:	2306      	movs	r3, #6
 8000f68:	e00c      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	e00a      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f6e:	2305      	movs	r3, #5
 8000f70:	e008      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f72:	2304      	movs	r3, #4
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f76:	2303      	movs	r3, #3
 8000f78:	e004      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e002      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <HAL_GPIO_Init+0x21c>
 8000f82:	2300      	movs	r3, #0
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	f002 0203 	and.w	r2, r2, #3
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	4093      	lsls	r3, r2
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f94:	4935      	ldr	r1, [pc, #212]	; (800106c <HAL_GPIO_Init+0x304>)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	089b      	lsrs	r3, r3, #2
 8000f9a:	3302      	adds	r3, #2
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa2:	4b3a      	ldr	r3, [pc, #232]	; (800108c <HAL_GPIO_Init+0x324>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fc6:	4a31      	ldr	r2, [pc, #196]	; (800108c <HAL_GPIO_Init+0x324>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <HAL_GPIO_Init+0x324>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ff0:	4a26      	ldr	r2, [pc, #152]	; (800108c <HAL_GPIO_Init+0x324>)
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff6:	4b25      	ldr	r3, [pc, #148]	; (800108c <HAL_GPIO_Init+0x324>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101a:	4a1c      	ldr	r2, [pc, #112]	; (800108c <HAL_GPIO_Init+0x324>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <HAL_GPIO_Init+0x324>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001044:	4a11      	ldr	r2, [pc, #68]	; (800108c <HAL_GPIO_Init+0x324>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3301      	adds	r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	2b0f      	cmp	r3, #15
 8001054:	f67f ae96 	bls.w	8000d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40013800 	.word	0x40013800
 8001070:	40020000 	.word	0x40020000
 8001074:	40020400 	.word	0x40020400
 8001078:	40020800 	.word	0x40020800
 800107c:	40020c00 	.word	0x40020c00
 8001080:	40021000 	.word	0x40021000
 8001084:	40021400 	.word	0x40021400
 8001088:	40021800 	.word	0x40021800
 800108c:	40013c00 	.word	0x40013c00

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	4613      	mov	r3, r2
 800109e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010ac:	e003      	b.n	80010b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	041a      	lsls	r2, r3, #16
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	619a      	str	r2, [r3, #24]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d4:	887a      	ldrh	r2, [r7, #2]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4013      	ands	r3, r2
 80010da:	041a      	lsls	r2, r3, #16
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43d9      	mvns	r1, r3
 80010e0:	887b      	ldrh	r3, [r7, #2]
 80010e2:	400b      	ands	r3, r1
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	619a      	str	r2, [r3, #24]
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e0cc      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800110c:	4b68      	ldr	r3, [pc, #416]	; (80012b0 <HAL_RCC_ClockConfig+0x1b8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 030f 	and.w	r3, r3, #15
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d90c      	bls.n	8001134 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111a:	4b65      	ldr	r3, [pc, #404]	; (80012b0 <HAL_RCC_ClockConfig+0x1b8>)
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001122:	4b63      	ldr	r3, [pc, #396]	; (80012b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	429a      	cmp	r2, r3
 800112e:	d001      	beq.n	8001134 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e0b8      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d020      	beq.n	8001182 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800114c:	4b59      	ldr	r3, [pc, #356]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	4a58      	ldr	r2, [pc, #352]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001156:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001164:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	4a52      	ldr	r2, [pc, #328]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800116e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001170:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	494d      	ldr	r1, [pc, #308]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	4313      	orrs	r3, r2
 8001180:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b00      	cmp	r3, #0
 800118c:	d044      	beq.n	8001218 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	4b47      	ldr	r3, [pc, #284]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d119      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e07f      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d003      	beq.n	80011b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d107      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b6:	4b3f      	ldr	r3, [pc, #252]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d109      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e06f      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e067      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011d6:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f023 0203 	bic.w	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4934      	ldr	r1, [pc, #208]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011e8:	f7ff fcac 	bl	8000b44 <HAL_GetTick>
 80011ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ee:	e00a      	b.n	8001206 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f0:	f7ff fca8 	bl	8000b44 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fe:	4293      	cmp	r3, r2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e04f      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001206:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 020c 	and.w	r2, r3, #12
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	429a      	cmp	r2, r3
 8001216:	d1eb      	bne.n	80011f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001218:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <HAL_RCC_ClockConfig+0x1b8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 030f 	and.w	r3, r3, #15
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d20c      	bcs.n	8001240 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001226:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e032      	b.n	80012a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d008      	beq.n	800125e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4916      	ldr	r1, [pc, #88]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	4313      	orrs	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	2b00      	cmp	r3, #0
 8001268:	d009      	beq.n	800127e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	490e      	ldr	r1, [pc, #56]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	4313      	orrs	r3, r2
 800127c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800127e:	f000 f873 	bl	8001368 <HAL_RCC_GetSysClockFreq>
 8001282:	4602      	mov	r2, r0
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	490a      	ldr	r1, [pc, #40]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001290:	5ccb      	ldrb	r3, [r1, r3]
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	4a09      	ldr	r2, [pc, #36]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_RCC_ClockConfig+0x1c8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fb64 	bl	800096c <HAL_InitTick>

  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023c00 	.word	0x40023c00
 80012b4:	40023800 	.word	0x40023800
 80012b8:	08004ab0 	.word	0x08004ab0
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000000 	.word	0x20000000

080012dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012e0:	f7ff fff0 	bl	80012c4 <HAL_RCC_GetHCLKFreq>
 80012e4:	4602      	mov	r2, r0
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	0a9b      	lsrs	r3, r3, #10
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	4903      	ldr	r1, [pc, #12]	; (8001300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012f2:	5ccb      	ldrb	r3, [r1, r3]
 80012f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	08004ac0 	.word	0x08004ac0

08001304 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	220f      	movs	r2, #15
 8001312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_RCC_GetClockConfig+0x5c>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 0203 	and.w	r2, r3, #3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_RCC_GetClockConfig+0x5c>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_RCC_GetClockConfig+0x5c>)
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_RCC_GetClockConfig+0x5c>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	08db      	lsrs	r3, r3, #3
 800133e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <HAL_RCC_GetClockConfig+0x60>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 020f 	and.w	r2, r3, #15
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	601a      	str	r2, [r3, #0]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40023c00 	.word	0x40023c00

08001368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800136c:	b088      	sub	sp, #32
 800136e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001384:	4bce      	ldr	r3, [pc, #824]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b0c      	cmp	r3, #12
 800138e:	f200 818d 	bhi.w	80016ac <HAL_RCC_GetSysClockFreq+0x344>
 8001392:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <HAL_RCC_GetSysClockFreq+0x30>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	080013cd 	.word	0x080013cd
 800139c:	080016ad 	.word	0x080016ad
 80013a0:	080016ad 	.word	0x080016ad
 80013a4:	080016ad 	.word	0x080016ad
 80013a8:	080013d3 	.word	0x080013d3
 80013ac:	080016ad 	.word	0x080016ad
 80013b0:	080016ad 	.word	0x080016ad
 80013b4:	080016ad 	.word	0x080016ad
 80013b8:	080013d9 	.word	0x080013d9
 80013bc:	080016ad 	.word	0x080016ad
 80013c0:	080016ad 	.word	0x080016ad
 80013c4:	080016ad 	.word	0x080016ad
 80013c8:	0800154d 	.word	0x0800154d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013cc:	4bbd      	ldr	r3, [pc, #756]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013ce:	61bb      	str	r3, [r7, #24]
       break;
 80013d0:	e16f      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013d2:	4bbd      	ldr	r3, [pc, #756]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x360>)
 80013d4:	61bb      	str	r3, [r7, #24]
      break;
 80013d6:	e16c      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013d8:	4bb9      	ldr	r3, [pc, #740]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013e0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013e2:	4bb7      	ldr	r3, [pc, #732]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d053      	beq.n	8001496 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ee:	4bb4      	ldr	r3, [pc, #720]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	099b      	lsrs	r3, r3, #6
 80013f4:	461a      	mov	r2, r3
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80013fe:	f04f 0100 	mov.w	r1, #0
 8001402:	ea02 0400 	and.w	r4, r2, r0
 8001406:	603c      	str	r4, [r7, #0]
 8001408:	400b      	ands	r3, r1
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001410:	4620      	mov	r0, r4
 8001412:	4629      	mov	r1, r5
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	014b      	lsls	r3, r1, #5
 800141e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001422:	0142      	lsls	r2, r0, #5
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	4623      	mov	r3, r4
 800142a:	1ac0      	subs	r0, r0, r3
 800142c:	462b      	mov	r3, r5
 800142e:	eb61 0103 	sbc.w	r1, r1, r3
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	018b      	lsls	r3, r1, #6
 800143c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001440:	0182      	lsls	r2, r0, #6
 8001442:	1a12      	subs	r2, r2, r0
 8001444:	eb63 0301 	sbc.w	r3, r3, r1
 8001448:	f04f 0000 	mov.w	r0, #0
 800144c:	f04f 0100 	mov.w	r1, #0
 8001450:	00d9      	lsls	r1, r3, #3
 8001452:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001456:	00d0      	lsls	r0, r2, #3
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4621      	mov	r1, r4
 800145e:	1852      	adds	r2, r2, r1
 8001460:	4629      	mov	r1, r5
 8001462:	eb43 0101 	adc.w	r1, r3, r1
 8001466:	460b      	mov	r3, r1
 8001468:	f04f 0000 	mov.w	r0, #0
 800146c:	f04f 0100 	mov.w	r1, #0
 8001470:	0259      	lsls	r1, r3, #9
 8001472:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001476:	0250      	lsls	r0, r2, #9
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	461a      	mov	r2, r3
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	f7fe ff0c 	bl	80002a4 <__aeabi_uldivmod>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4613      	mov	r3, r2
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	e04c      	b.n	8001530 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001496:	4b8a      	ldr	r3, [pc, #552]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	099b      	lsrs	r3, r3, #6
 800149c:	461a      	mov	r2, r3
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80014a6:	f04f 0100 	mov.w	r1, #0
 80014aa:	ea02 0a00 	and.w	sl, r2, r0
 80014ae:	ea03 0b01 	and.w	fp, r3, r1
 80014b2:	4650      	mov	r0, sl
 80014b4:	4659      	mov	r1, fp
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	014b      	lsls	r3, r1, #5
 80014c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014c4:	0142      	lsls	r2, r0, #5
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	ebb0 000a 	subs.w	r0, r0, sl
 80014ce:	eb61 010b 	sbc.w	r1, r1, fp
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	018b      	lsls	r3, r1, #6
 80014dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80014e0:	0182      	lsls	r2, r0, #6
 80014e2:	1a12      	subs	r2, r2, r0
 80014e4:	eb63 0301 	sbc.w	r3, r3, r1
 80014e8:	f04f 0000 	mov.w	r0, #0
 80014ec:	f04f 0100 	mov.w	r1, #0
 80014f0:	00d9      	lsls	r1, r3, #3
 80014f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014f6:	00d0      	lsls	r0, r2, #3
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	eb12 020a 	adds.w	r2, r2, sl
 8001500:	eb43 030b 	adc.w	r3, r3, fp
 8001504:	f04f 0000 	mov.w	r0, #0
 8001508:	f04f 0100 	mov.w	r1, #0
 800150c:	0299      	lsls	r1, r3, #10
 800150e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001512:	0290      	lsls	r0, r2, #10
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	461a      	mov	r2, r3
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	f7fe febe 	bl	80002a4 <__aeabi_uldivmod>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4613      	mov	r3, r2
 800152e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001530:	4b63      	ldr	r3, [pc, #396]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	3301      	adds	r3, #1
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001540:	69fa      	ldr	r2, [r7, #28]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	fbb2 f3f3 	udiv	r3, r2, r3
 8001548:	61bb      	str	r3, [r7, #24]
      break;
 800154a:	e0b2      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800154c:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x358>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001554:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001556:	4b5a      	ldr	r3, [pc, #360]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d04d      	beq.n	80015fe <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001562:	4b57      	ldr	r3, [pc, #348]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	099b      	lsrs	r3, r3, #6
 8001568:	461a      	mov	r2, r3
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001572:	f04f 0100 	mov.w	r1, #0
 8001576:	ea02 0800 	and.w	r8, r2, r0
 800157a:	ea03 0901 	and.w	r9, r3, r1
 800157e:	4640      	mov	r0, r8
 8001580:	4649      	mov	r1, r9
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	f04f 0300 	mov.w	r3, #0
 800158a:	014b      	lsls	r3, r1, #5
 800158c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001590:	0142      	lsls	r2, r0, #5
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	ebb0 0008 	subs.w	r0, r0, r8
 800159a:	eb61 0109 	sbc.w	r1, r1, r9
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	018b      	lsls	r3, r1, #6
 80015a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015ac:	0182      	lsls	r2, r0, #6
 80015ae:	1a12      	subs	r2, r2, r0
 80015b0:	eb63 0301 	sbc.w	r3, r3, r1
 80015b4:	f04f 0000 	mov.w	r0, #0
 80015b8:	f04f 0100 	mov.w	r1, #0
 80015bc:	00d9      	lsls	r1, r3, #3
 80015be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015c2:	00d0      	lsls	r0, r2, #3
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	eb12 0208 	adds.w	r2, r2, r8
 80015cc:	eb43 0309 	adc.w	r3, r3, r9
 80015d0:	f04f 0000 	mov.w	r0, #0
 80015d4:	f04f 0100 	mov.w	r1, #0
 80015d8:	0259      	lsls	r1, r3, #9
 80015da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80015de:	0250      	lsls	r0, r2, #9
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	461a      	mov	r2, r3
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	f7fe fe58 	bl	80002a4 <__aeabi_uldivmod>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4613      	mov	r3, r2
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	e04a      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015fe:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	099b      	lsrs	r3, r3, #6
 8001604:	461a      	mov	r2, r3
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800160e:	f04f 0100 	mov.w	r1, #0
 8001612:	ea02 0400 	and.w	r4, r2, r0
 8001616:	ea03 0501 	and.w	r5, r3, r1
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	f04f 0300 	mov.w	r3, #0
 8001626:	014b      	lsls	r3, r1, #5
 8001628:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800162c:	0142      	lsls	r2, r0, #5
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	1b00      	subs	r0, r0, r4
 8001634:	eb61 0105 	sbc.w	r1, r1, r5
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	018b      	lsls	r3, r1, #6
 8001642:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001646:	0182      	lsls	r2, r0, #6
 8001648:	1a12      	subs	r2, r2, r0
 800164a:	eb63 0301 	sbc.w	r3, r3, r1
 800164e:	f04f 0000 	mov.w	r0, #0
 8001652:	f04f 0100 	mov.w	r1, #0
 8001656:	00d9      	lsls	r1, r3, #3
 8001658:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800165c:	00d0      	lsls	r0, r2, #3
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	1912      	adds	r2, r2, r4
 8001664:	eb45 0303 	adc.w	r3, r5, r3
 8001668:	f04f 0000 	mov.w	r0, #0
 800166c:	f04f 0100 	mov.w	r1, #0
 8001670:	0299      	lsls	r1, r3, #10
 8001672:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001676:	0290      	lsls	r0, r2, #10
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	461a      	mov	r2, r3
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	f7fe fe0c 	bl	80002a4 <__aeabi_uldivmod>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4613      	mov	r3, r2
 8001692:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	0f1b      	lsrs	r3, r3, #28
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a8:	61bb      	str	r3, [r7, #24]
      break;
 80016aa:	e002      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80016ae:	61bb      	str	r3, [r7, #24]
      break;
 80016b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016b2:	69bb      	ldr	r3, [r7, #24]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3720      	adds	r7, #32
 80016b8:	46bd      	mov	sp, r7
 80016ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	00f42400 	.word	0x00f42400
 80016c8:	007a1200 	.word	0x007a1200

080016cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e28d      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8083 	beq.w	80017f2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016ec:	4b94      	ldr	r3, [pc, #592]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d019      	beq.n	800172c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016f8:	4b91      	ldr	r3, [pc, #580]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001700:	2b08      	cmp	r3, #8
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001704:	4b8e      	ldr	r3, [pc, #568]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001710:	d00c      	beq.n	800172c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001712:	4b8b      	ldr	r3, [pc, #556]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800171a:	2b0c      	cmp	r3, #12
 800171c:	d112      	bne.n	8001744 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800171e:	4b88      	ldr	r3, [pc, #544]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800172a:	d10b      	bne.n	8001744 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	4b84      	ldr	r3, [pc, #528]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d05b      	beq.n	80017f0 <HAL_RCC_OscConfig+0x124>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d157      	bne.n	80017f0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e25a      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174c:	d106      	bne.n	800175c <HAL_RCC_OscConfig+0x90>
 800174e:	4b7c      	ldr	r3, [pc, #496]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a7b      	ldr	r2, [pc, #492]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	e01d      	b.n	8001798 <HAL_RCC_OscConfig+0xcc>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0xb4>
 8001766:	4b76      	ldr	r3, [pc, #472]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a75      	ldr	r2, [pc, #468]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 800176c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	4b73      	ldr	r3, [pc, #460]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a72      	ldr	r2, [pc, #456]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e00b      	b.n	8001798 <HAL_RCC_OscConfig+0xcc>
 8001780:	4b6f      	ldr	r3, [pc, #444]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a6e      	ldr	r2, [pc, #440]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b6c      	ldr	r3, [pc, #432]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a6b      	ldr	r2, [pc, #428]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d013      	beq.n	80017c8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a0:	f7ff f9d0 	bl	8000b44 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017a8:	f7ff f9cc 	bl	8000b44 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b64      	cmp	r3, #100	; 0x64
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e21f      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	4b61      	ldr	r3, [pc, #388]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0xdc>
 80017c6:	e014      	b.n	80017f2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff f9bc 	bl	8000b44 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff f9b8 	bl	8000b44 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	; 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e20b      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	4b57      	ldr	r3, [pc, #348]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x104>
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d06f      	beq.n	80018de <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017fe:	4b50      	ldr	r3, [pc, #320]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b00      	cmp	r3, #0
 8001808:	d017      	beq.n	800183a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800180a:	4b4d      	ldr	r3, [pc, #308]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001812:	2b08      	cmp	r3, #8
 8001814:	d105      	bne.n	8001822 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001816:	4b4a      	ldr	r3, [pc, #296]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00b      	beq.n	800183a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001822:	4b47      	ldr	r3, [pc, #284]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800182a:	2b0c      	cmp	r3, #12
 800182c:	d11c      	bne.n	8001868 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182e:	4b44      	ldr	r3, [pc, #272]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d116      	bne.n	8001868 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800183a:	4b41      	ldr	r3, [pc, #260]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_RCC_OscConfig+0x186>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	2b01      	cmp	r3, #1
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e1d3      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001852:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4937      	ldr	r1, [pc, #220]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	e03a      	b.n	80018de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001870:	4b34      	ldr	r3, [pc, #208]	; (8001944 <HAL_RCC_OscConfig+0x278>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001876:	f7ff f965 	bl	8000b44 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187c:	e008      	b.n	8001890 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187e:	f7ff f961 	bl	8000b44 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e1b4      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001890:	4b2b      	ldr	r3, [pc, #172]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b28      	ldr	r3, [pc, #160]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4925      	ldr	r1, [pc, #148]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	600b      	str	r3, [r1, #0]
 80018b0:	e015      	b.n	80018de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b2:	4b24      	ldr	r3, [pc, #144]	; (8001944 <HAL_RCC_OscConfig+0x278>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff f944 	bl	8000b44 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff f940 	bl	8000b44 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e193      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d2:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d036      	beq.n	8001958 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d016      	beq.n	8001920 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff f924 	bl	8000b44 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff f920 	bl	8000b44 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e173      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x234>
 800191e:	e01b      	b.n	8001958 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_OscConfig+0x27c>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001926:	f7ff f90d 	bl	8000b44 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192c:	e00e      	b.n	800194c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192e:	f7ff f909 	bl	8000b44 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d907      	bls.n	800194c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e15c      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
 8001940:	40023800 	.word	0x40023800
 8001944:	42470000 	.word	0x42470000
 8001948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	4b8a      	ldr	r3, [pc, #552]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 800194e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1ea      	bne.n	800192e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 8097 	beq.w	8001a94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196a:	4b83      	ldr	r3, [pc, #524]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d10f      	bne.n	8001996 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b7f      	ldr	r3, [pc, #508]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a7e      	ldr	r2, [pc, #504]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b7c      	ldr	r3, [pc, #496]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001992:	2301      	movs	r3, #1
 8001994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	4b79      	ldr	r3, [pc, #484]	; (8001b7c <HAL_RCC_OscConfig+0x4b0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d118      	bne.n	80019d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a2:	4b76      	ldr	r3, [pc, #472]	; (8001b7c <HAL_RCC_OscConfig+0x4b0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a75      	ldr	r2, [pc, #468]	; (8001b7c <HAL_RCC_OscConfig+0x4b0>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ae:	f7ff f8c9 	bl	8000b44 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b6:	f7ff f8c5 	bl	8000b44 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e118      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	4b6c      	ldr	r3, [pc, #432]	; (8001b7c <HAL_RCC_OscConfig+0x4b0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x31e>
 80019dc:	4b66      	ldr	r3, [pc, #408]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	4a65      	ldr	r2, [pc, #404]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6713      	str	r3, [r2, #112]	; 0x70
 80019e8:	e01c      	b.n	8001a24 <HAL_RCC_OscConfig+0x358>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x340>
 80019f2:	4b61      	ldr	r3, [pc, #388]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f6:	4a60      	ldr	r2, [pc, #384]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6713      	str	r3, [r2, #112]	; 0x70
 80019fe:	4b5e      	ldr	r3, [pc, #376]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a02:	4a5d      	ldr	r2, [pc, #372]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0x358>
 8001a0c:	4b5a      	ldr	r3, [pc, #360]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a10:	4a59      	ldr	r2, [pc, #356]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	6713      	str	r3, [r2, #112]	; 0x70
 8001a18:	4b57      	ldr	r3, [pc, #348]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1c:	4a56      	ldr	r2, [pc, #344]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001a1e:	f023 0304 	bic.w	r3, r3, #4
 8001a22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d015      	beq.n	8001a58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f88a 	bl	8000b44 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a32:	e00a      	b.n	8001a4a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a34:	f7ff f886 	bl	8000b44 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e0d7      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4a:	4b4b      	ldr	r3, [pc, #300]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0ee      	beq.n	8001a34 <HAL_RCC_OscConfig+0x368>
 8001a56:	e014      	b.n	8001a82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a58:	f7ff f874 	bl	8000b44 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a60:	f7ff f870 	bl	8000b44 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e0c1      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a76:	4b40      	ldr	r3, [pc, #256]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ee      	bne.n	8001a60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d105      	bne.n	8001a94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a88:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	4a3a      	ldr	r2, [pc, #232]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80ad 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a9e:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d060      	beq.n	8001b6c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d145      	bne.n	8001b3e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab2:	4b33      	ldr	r3, [pc, #204]	; (8001b80 <HAL_RCC_OscConfig+0x4b4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f844 	bl	8000b44 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff f840 	bl	8000b44 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e093      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad2:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69da      	ldr	r2, [r3, #28]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	019b      	lsls	r3, r3, #6
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	3b01      	subs	r3, #1
 8001af8:	041b      	lsls	r3, r3, #16
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	061b      	lsls	r3, r3, #24
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	071b      	lsls	r3, r3, #28
 8001b0a:	491b      	ldr	r1, [pc, #108]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b10:	4b1b      	ldr	r3, [pc, #108]	; (8001b80 <HAL_RCC_OscConfig+0x4b4>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7ff f815 	bl	8000b44 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff f811 	bl	8000b44 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e064      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x452>
 8001b3c:	e05c      	b.n	8001bf8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_RCC_OscConfig+0x4b4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f7fe fffe 	bl	8000b44 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4c:	f7fe fffa 	bl	8000b44 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e04d      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f0      	bne.n	8001b4c <HAL_RCC_OscConfig+0x480>
 8001b6a:	e045      	b.n	8001bf8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e040      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <HAL_RCC_OscConfig+0x538>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d030      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d129      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d122      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d119      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	085b      	lsrs	r3, r3, #1
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d10f      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d107      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800

08001c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e041      	b.n	8001c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d106      	bne.n	8001c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f839 	bl	8001ca6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3304      	adds	r3, #4
 8001c44:	4619      	mov	r1, r3
 8001c46:	4610      	mov	r0, r2
 8001c48:	f000 f9d8 	bl	8001ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d001      	beq.n	8001cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e04e      	b.n	8001d72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a23      	ldr	r2, [pc, #140]	; (8001d80 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d022      	beq.n	8001d3c <HAL_TIM_Base_Start_IT+0x80>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfe:	d01d      	beq.n	8001d3c <HAL_TIM_Base_Start_IT+0x80>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d018      	beq.n	8001d3c <HAL_TIM_Base_Start_IT+0x80>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1e      	ldr	r2, [pc, #120]	; (8001d88 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d013      	beq.n	8001d3c <HAL_TIM_Base_Start_IT+0x80>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <HAL_TIM_Base_Start_IT+0xd0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00e      	beq.n	8001d3c <HAL_TIM_Base_Start_IT+0x80>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d009      	beq.n	8001d3c <HAL_TIM_Base_Start_IT+0x80>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d004      	beq.n	8001d3c <HAL_TIM_Base_Start_IT+0x80>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d111      	bne.n	8001d60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b06      	cmp	r3, #6
 8001d4c:	d010      	beq.n	8001d70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0201 	orr.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d5e:	e007      	b.n	8001d70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40010000 	.word	0x40010000
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40000800 	.word	0x40000800
 8001d8c:	40000c00 	.word	0x40000c00
 8001d90:	40010400 	.word	0x40010400
 8001d94:	40014000 	.word	0x40014000
 8001d98:	40001800 	.word	0x40001800

08001d9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d122      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d11b      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0202 	mvn.w	r2, #2
 8001dc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8ee 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8e0 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f8f1 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d122      	bne.n	8001e4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d11b      	bne.n	8001e4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0204 	mvn.w	r2, #4
 8001e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2202      	movs	r2, #2
 8001e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8c4 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001e38:	e005      	b.n	8001e46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f8b6 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f8c7 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d122      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d11b      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0208 	mvn.w	r2, #8
 8001e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2204      	movs	r2, #4
 8001e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f89a 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001e8c:	e005      	b.n	8001e9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f88c 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f000 f89d 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d122      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b10      	cmp	r3, #16
 8001eba:	d11b      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0210 	mvn.w	r2, #16
 8001ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f870 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001ee0:	e005      	b.n	8001eee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f862 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f873 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d10e      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d107      	bne.n	8001f20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0201 	mvn.w	r2, #1
 8001f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe fce6 	bl	80008ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2a:	2b80      	cmp	r3, #128	; 0x80
 8001f2c:	d10e      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f38:	2b80      	cmp	r3, #128	; 0x80
 8001f3a:	d107      	bne.n	8001f4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f902 	bl	8002150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f56:	2b40      	cmp	r3, #64	; 0x40
 8001f58:	d10e      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f64:	2b40      	cmp	r3, #64	; 0x40
 8001f66:	d107      	bne.n	8001f78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f838 	bl	8001fe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	d10e      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0320 	and.w	r3, r3, #32
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d107      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0220 	mvn.w	r2, #32
 8001f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f8cc 	bl	800213c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a40      	ldr	r2, [pc, #256]	; (8002110 <TIM_Base_SetConfig+0x114>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d013      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201a:	d00f      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3d      	ldr	r2, [pc, #244]	; (8002114 <TIM_Base_SetConfig+0x118>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00b      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3c      	ldr	r2, [pc, #240]	; (8002118 <TIM_Base_SetConfig+0x11c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d007      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3b      	ldr	r2, [pc, #236]	; (800211c <TIM_Base_SetConfig+0x120>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d003      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3a      	ldr	r2, [pc, #232]	; (8002120 <TIM_Base_SetConfig+0x124>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d108      	bne.n	800204e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2f      	ldr	r2, [pc, #188]	; (8002110 <TIM_Base_SetConfig+0x114>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d02b      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205c:	d027      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2c      	ldr	r2, [pc, #176]	; (8002114 <TIM_Base_SetConfig+0x118>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d023      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2b      	ldr	r2, [pc, #172]	; (8002118 <TIM_Base_SetConfig+0x11c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01f      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2a      	ldr	r2, [pc, #168]	; (800211c <TIM_Base_SetConfig+0x120>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01b      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a29      	ldr	r2, [pc, #164]	; (8002120 <TIM_Base_SetConfig+0x124>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d017      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a28      	ldr	r2, [pc, #160]	; (8002124 <TIM_Base_SetConfig+0x128>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a27      	ldr	r2, [pc, #156]	; (8002128 <TIM_Base_SetConfig+0x12c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00f      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a26      	ldr	r2, [pc, #152]	; (800212c <TIM_Base_SetConfig+0x130>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00b      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a25      	ldr	r2, [pc, #148]	; (8002130 <TIM_Base_SetConfig+0x134>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a24      	ldr	r2, [pc, #144]	; (8002134 <TIM_Base_SetConfig+0x138>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d003      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a23      	ldr	r2, [pc, #140]	; (8002138 <TIM_Base_SetConfig+0x13c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d108      	bne.n	80020c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <TIM_Base_SetConfig+0x114>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d003      	beq.n	80020f4 <TIM_Base_SetConfig+0xf8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <TIM_Base_SetConfig+0x124>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d103      	bne.n	80020fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	615a      	str	r2, [r3, #20]
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40010000 	.word	0x40010000
 8002114:	40000400 	.word	0x40000400
 8002118:	40000800 	.word	0x40000800
 800211c:	40000c00 	.word	0x40000c00
 8002120:	40010400 	.word	0x40010400
 8002124:	40014000 	.word	0x40014000
 8002128:	40014400 	.word	0x40014400
 800212c:	40014800 	.word	0x40014800
 8002130:	40001800 	.word	0x40001800
 8002134:	40001c00 	.word	0x40001c00
 8002138:	40002000 	.word	0x40002000

0800213c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f103 0208 	add.w	r2, r3, #8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f04f 32ff 	mov.w	r2, #4294967295
 800217c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f103 0208 	add.w	r2, r3, #8
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f103 0208 	add.w	r2, r3, #8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6892      	ldr	r2, [r2, #8]
 80021d4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6852      	ldr	r2, [r2, #4]
 80021de:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d103      	bne.n	80021f2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	1e5a      	subs	r2, r3, #1
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002212:	b580      	push	{r7, lr}
 8002214:	b08c      	sub	sp, #48	; 0x30
 8002216:	af04      	add	r7, sp, #16
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	603b      	str	r3, [r7, #0]
 800221e:	4613      	mov	r3, r2
 8002220:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4618      	mov	r0, r3
 8002228:	f000 ffc8 	bl	80031bc <pvPortMalloc>
 800222c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00e      	beq.n	8002252 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002234:	2058      	movs	r0, #88	; 0x58
 8002236:	f000 ffc1 	bl	80031bc <pvPortMalloc>
 800223a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
 8002248:	e005      	b.n	8002256 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f001 f896 	bl	800337c <vPortFree>
 8002250:	e001      	b.n	8002256 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800225c:	88fa      	ldrh	r2, [r7, #6]
 800225e:	2300      	movs	r3, #0
 8002260:	9303      	str	r3, [sp, #12]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	9302      	str	r3, [sp, #8]
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f80e 	bl	8002294 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002278:	69f8      	ldr	r0, [r7, #28]
 800227a:	f000 f8af 	bl	80023dc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800227e:	2301      	movs	r3, #1
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	e002      	b.n	800228a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
 8002288:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800228a:	69bb      	ldr	r3, [r7, #24]
    }
 800228c:	4618      	mov	r0, r3
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80022a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	461a      	mov	r2, r3
 80022ac:	21a5      	movs	r1, #165	; 0xa5
 80022ae:	f002 fb9d 	bl	80049ec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022bc:	3b01      	subs	r3, #1
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f023 0307 	bic.w	r3, r3, #7
 80022ca:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <prvInitialiseNewTask+0x58>
        __asm volatile
 80022d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022da:	f383 8811 	msr	BASEPRI, r3
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	f3bf 8f4f 	dsb	sy
 80022e6:	617b      	str	r3, [r7, #20]
    }
 80022e8:	bf00      	nop
 80022ea:	e7fe      	b.n	80022ea <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d01f      	beq.n	8002332 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	e012      	b.n	800231e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	4413      	add	r3, r2
 80022fe:	7819      	ldrb	r1, [r3, #0]
 8002300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	4413      	add	r3, r2
 8002306:	3334      	adds	r3, #52	; 0x34
 8002308:	460a      	mov	r2, r1
 800230a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	4413      	add	r3, r2
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	3301      	adds	r3, #1
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	2b09      	cmp	r3, #9
 8002322:	d9e9      	bls.n	80022f8 <prvInitialiseNewTask+0x64>
 8002324:	e000      	b.n	8002328 <prvInitialiseNewTask+0x94>
            {
                break;
 8002326:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002330:	e003      	b.n	800233a <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233c:	2b04      	cmp	r3, #4
 800233e:	d90a      	bls.n	8002356 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	613b      	str	r3, [r7, #16]
    }
 8002352:	bf00      	nop
 8002354:	e7fe      	b.n	8002354 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	2b04      	cmp	r3, #4
 800235a:	d901      	bls.n	8002360 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800235c:	2304      	movs	r3, #4
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800236a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800236c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236e:	2200      	movs	r2, #0
 8002370:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002374:	3304      	adds	r3, #4
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff14 	bl	80021a4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237e:	3318      	adds	r3, #24
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff0f 	bl	80021a4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800238a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	f1c3 0205 	rsb	r2, r3, #5
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800239a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239e:	3350      	adds	r3, #80	; 0x50
 80023a0:	2204      	movs	r2, #4
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f002 fb21 	bl	80049ec <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80023aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ac:	3354      	adds	r3, #84	; 0x54
 80023ae:	2201      	movs	r2, #1
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f002 fb1a 	bl	80049ec <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	69b8      	ldr	r0, [r7, #24]
 80023be:	f000 fc61 	bl	8002c84 <pxPortInitialiseStack>
 80023c2:	4602      	mov	r2, r0
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80023c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023d2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023d4:	bf00      	nop
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80023e4:	f000 fdfe 	bl	8002fe4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80023e8:	4b4f      	ldr	r3, [pc, #316]	; (8002528 <prvAddNewTaskToReadyList+0x14c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	4a4e      	ldr	r2, [pc, #312]	; (8002528 <prvAddNewTaskToReadyList+0x14c>)
 80023f0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80023f2:	4b4e      	ldr	r3, [pc, #312]	; (800252c <prvAddNewTaskToReadyList+0x150>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80023fa:	4a4c      	ldr	r2, [pc, #304]	; (800252c <prvAddNewTaskToReadyList+0x150>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002400:	4b49      	ldr	r3, [pc, #292]	; (8002528 <prvAddNewTaskToReadyList+0x14c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d110      	bne.n	800242a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002408:	f000 fba2 	bl	8002b50 <prvInitialiseTaskLists>
 800240c:	e00d      	b.n	800242a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800240e:	4b48      	ldr	r3, [pc, #288]	; (8002530 <prvAddNewTaskToReadyList+0x154>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002416:	4b45      	ldr	r3, [pc, #276]	; (800252c <prvAddNewTaskToReadyList+0x150>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	429a      	cmp	r2, r3
 8002422:	d802      	bhi.n	800242a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002424:	4a41      	ldr	r2, [pc, #260]	; (800252c <prvAddNewTaskToReadyList+0x150>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800242a:	4b42      	ldr	r3, [pc, #264]	; (8002534 <prvAddNewTaskToReadyList+0x158>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3301      	adds	r3, #1
 8002430:	4a40      	ldr	r2, [pc, #256]	; (8002534 <prvAddNewTaskToReadyList+0x158>)
 8002432:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002434:	4b3f      	ldr	r3, [pc, #252]	; (8002534 <prvAddNewTaskToReadyList+0x158>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d016      	beq.n	8002470 <prvAddNewTaskToReadyList+0x94>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4618      	mov	r0, r3
 8002446:	f002 f893 	bl	8004570 <SEGGER_SYSVIEW_OnTaskCreate>
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	461d      	mov	r5, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	461c      	mov	r4, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	1ae3      	subs	r3, r4, r3
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	462b      	mov	r3, r5
 800246c:	f001 f8a4 	bl	80035b8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4618      	mov	r0, r3
 8002474:	f002 f900 	bl	8004678 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247c:	2201      	movs	r2, #1
 800247e:	409a      	lsls	r2, r3
 8002480:	4b2d      	ldr	r3, [pc, #180]	; (8002538 <prvAddNewTaskToReadyList+0x15c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4313      	orrs	r3, r2
 8002486:	4a2c      	ldr	r2, [pc, #176]	; (8002538 <prvAddNewTaskToReadyList+0x15c>)
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248e:	492b      	ldr	r1, [pc, #172]	; (800253c <prvAddNewTaskToReadyList+0x160>)
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	3304      	adds	r3, #4
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	609a      	str	r2, [r3, #8]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	3204      	adds	r2, #4
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	1d1a      	adds	r2, r3, #4
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c4:	4613      	mov	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4a1b      	ldr	r2, [pc, #108]	; (800253c <prvAddNewTaskToReadyList+0x160>)
 80024ce:	441a      	add	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	615a      	str	r2, [r3, #20]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d8:	4918      	ldr	r1, [pc, #96]	; (800253c <prvAddNewTaskToReadyList+0x160>)
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1c59      	adds	r1, r3, #1
 80024e8:	4814      	ldr	r0, [pc, #80]	; (800253c <prvAddNewTaskToReadyList+0x160>)
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4403      	add	r3, r0
 80024f4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80024f6:	f000 fda5 	bl	8003044 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <prvAddNewTaskToReadyList+0x154>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00e      	beq.n	8002520 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <prvAddNewTaskToReadyList+0x150>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	429a      	cmp	r2, r3
 800250e:	d207      	bcs.n	8002520 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <prvAddNewTaskToReadyList+0x164>)
 8002512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002520:	bf00      	nop
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bdb0      	pop	{r4, r5, r7, pc}
 8002528:	20000108 	.word	0x20000108
 800252c:	20000030 	.word	0x20000030
 8002530:	20000114 	.word	0x20000114
 8002534:	20000124 	.word	0x20000124
 8002538:	20000110 	.word	0x20000110
 800253c:	20000034 	.word	0x20000034
 8002540:	e000ed04 	.word	0xe000ed04

08002544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800254a:	4b24      	ldr	r3, [pc, #144]	; (80025dc <vTaskStartScheduler+0x98>)
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	2300      	movs	r3, #0
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2300      	movs	r3, #0
 8002554:	2282      	movs	r2, #130	; 0x82
 8002556:	4922      	ldr	r1, [pc, #136]	; (80025e0 <vTaskStartScheduler+0x9c>)
 8002558:	4822      	ldr	r0, [pc, #136]	; (80025e4 <vTaskStartScheduler+0xa0>)
 800255a:	f7ff fe5a 	bl	8002212 <xTaskCreate>
 800255e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d124      	bne.n	80025b0 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256a:	f383 8811 	msr	BASEPRI, r3
 800256e:	f3bf 8f6f 	isb	sy
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	60bb      	str	r3, [r7, #8]
    }
 8002578:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <vTaskStartScheduler+0xa4>)
 800257c:	f04f 32ff 	mov.w	r2, #4294967295
 8002580:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002582:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <vTaskStartScheduler+0xa8>)
 8002584:	2201      	movs	r2, #1
 8002586:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <vTaskStartScheduler+0xac>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800258e:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <vTaskStartScheduler+0xb0>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	4b12      	ldr	r3, [pc, #72]	; (80025dc <vTaskStartScheduler+0x98>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d102      	bne.n	80025a0 <vTaskStartScheduler+0x5c>
 800259a:	f001 ffcd 	bl	8004538 <SEGGER_SYSVIEW_OnIdle>
 800259e:	e004      	b.n	80025aa <vTaskStartScheduler+0x66>
 80025a0:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <vTaskStartScheduler+0xb0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 f825 	bl	80045f4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80025aa:	f000 fbfb 	bl	8002da4 <xPortStartScheduler>
 80025ae:	e00e      	b.n	80025ce <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b6:	d10a      	bne.n	80025ce <vTaskStartScheduler+0x8a>
        __asm volatile
 80025b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025bc:	f383 8811 	msr	BASEPRI, r3
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	607b      	str	r3, [r7, #4]
    }
 80025ca:	bf00      	nop
 80025cc:	e7fe      	b.n	80025cc <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <vTaskStartScheduler+0xb4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000012c 	.word	0x2000012c
 80025e0:	08004a38 	.word	0x08004a38
 80025e4:	08002b21 	.word	0x08002b21
 80025e8:	20000128 	.word	0x20000128
 80025ec:	20000114 	.word	0x20000114
 80025f0:	2000010c 	.word	0x2000010c
 80025f4:	20000030 	.word	0x20000030
 80025f8:	2000000c 	.word	0x2000000c

080025fc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <vTaskSuspendAll+0x18>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3301      	adds	r3, #1
 8002606:	4a03      	ldr	r2, [pc, #12]	; (8002614 <vTaskSuspendAll+0x18>)
 8002608:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	20000130 	.word	0x20000130

08002618 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002626:	4b73      	ldr	r3, [pc, #460]	; (80027f4 <xTaskResumeAll+0x1dc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10a      	bne.n	8002644 <xTaskResumeAll+0x2c>
        __asm volatile
 800262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002632:	f383 8811 	msr	BASEPRI, r3
 8002636:	f3bf 8f6f 	isb	sy
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	607b      	str	r3, [r7, #4]
    }
 8002640:	bf00      	nop
 8002642:	e7fe      	b.n	8002642 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002644:	f000 fcce 	bl	8002fe4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002648:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <xTaskResumeAll+0x1dc>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3b01      	subs	r3, #1
 800264e:	4a69      	ldr	r2, [pc, #420]	; (80027f4 <xTaskResumeAll+0x1dc>)
 8002650:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002652:	4b68      	ldr	r3, [pc, #416]	; (80027f4 <xTaskResumeAll+0x1dc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 80c4 	bne.w	80027e4 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800265c:	4b66      	ldr	r3, [pc, #408]	; (80027f8 <xTaskResumeAll+0x1e0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80bf 	beq.w	80027e4 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002666:	e08e      	b.n	8002786 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002668:	4b64      	ldr	r3, [pc, #400]	; (80027fc <xTaskResumeAll+0x1e4>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	6a12      	ldr	r2, [r2, #32]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	69d2      	ldr	r2, [r2, #28]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3318      	adds	r3, #24
 8002692:	429a      	cmp	r2, r3
 8002694:	d103      	bne.n	800269e <xTaskResumeAll+0x86>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	6a1a      	ldr	r2, [r3, #32]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	2200      	movs	r2, #0
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	1e5a      	subs	r2, r3, #1
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	68d2      	ldr	r2, [r2, #12]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	6892      	ldr	r2, [r2, #8]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	3304      	adds	r3, #4
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d103      	bne.n	80026dc <xTaskResumeAll+0xc4>
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	1e5a      	subs	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 ffc2 	bl	8004678 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	2201      	movs	r2, #1
 80026fa:	409a      	lsls	r2, r3
 80026fc:	4b40      	ldr	r3, [pc, #256]	; (8002800 <xTaskResumeAll+0x1e8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4313      	orrs	r3, r2
 8002702:	4a3f      	ldr	r2, [pc, #252]	; (8002800 <xTaskResumeAll+0x1e8>)
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270a:	493e      	ldr	r1, [pc, #248]	; (8002804 <xTaskResumeAll+0x1ec>)
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	3304      	adds	r3, #4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	3204      	adds	r2, #4
 8002732:	605a      	str	r2, [r3, #4]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	1d1a      	adds	r2, r3, #4
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4a2e      	ldr	r2, [pc, #184]	; (8002804 <xTaskResumeAll+0x1ec>)
 800274a:	441a      	add	r2, r3
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	615a      	str	r2, [r3, #20]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002754:	492b      	ldr	r1, [pc, #172]	; (8002804 <xTaskResumeAll+0x1ec>)
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	1c59      	adds	r1, r3, #1
 8002764:	4827      	ldr	r0, [pc, #156]	; (8002804 <xTaskResumeAll+0x1ec>)
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4403      	add	r3, r0
 8002770:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <xTaskResumeAll+0x1f0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	429a      	cmp	r2, r3
 800277e:	d302      	bcc.n	8002786 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <xTaskResumeAll+0x1f4>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <xTaskResumeAll+0x1e4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f47f af6c 	bne.w	8002668 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002796:	f000 fa59 	bl	8002c4c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <xTaskResumeAll+0x1f8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d010      	beq.n	80027c8 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80027a6:	f000 f837 	bl	8002818 <xTaskIncrementTick>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <xTaskResumeAll+0x1f4>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f1      	bne.n	80027a6 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80027c2:	4b13      	ldr	r3, [pc, #76]	; (8002810 <xTaskResumeAll+0x1f8>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <xTaskResumeAll+0x1f4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d009      	beq.n	80027e4 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80027d0:	2301      	movs	r3, #1
 80027d2:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <xTaskResumeAll+0x1fc>)
 80027d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	f3bf 8f4f 	dsb	sy
 80027e0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80027e4:	f000 fc2e 	bl	8003044 <vPortExitCritical>

    return xAlreadyYielded;
 80027e8:	69bb      	ldr	r3, [r7, #24]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000130 	.word	0x20000130
 80027f8:	20000108 	.word	0x20000108
 80027fc:	200000c8 	.word	0x200000c8
 8002800:	20000110 	.word	0x20000110
 8002804:	20000034 	.word	0x20000034
 8002808:	20000030 	.word	0x20000030
 800280c:	2000011c 	.word	0x2000011c
 8002810:	20000118 	.word	0x20000118
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800281e:	2300      	movs	r3, #0
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002822:	4b7f      	ldr	r3, [pc, #508]	; (8002a20 <xTaskIncrementTick+0x208>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 80f0 	bne.w	8002a0c <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800282c:	4b7d      	ldr	r3, [pc, #500]	; (8002a24 <xTaskIncrementTick+0x20c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002834:	4a7b      	ldr	r2, [pc, #492]	; (8002a24 <xTaskIncrementTick+0x20c>)
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d120      	bne.n	8002882 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002840:	4b79      	ldr	r3, [pc, #484]	; (8002a28 <xTaskIncrementTick+0x210>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <xTaskIncrementTick+0x48>
        __asm volatile
 800284a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	607b      	str	r3, [r7, #4]
    }
 800285c:	bf00      	nop
 800285e:	e7fe      	b.n	800285e <xTaskIncrementTick+0x46>
 8002860:	4b71      	ldr	r3, [pc, #452]	; (8002a28 <xTaskIncrementTick+0x210>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	4b71      	ldr	r3, [pc, #452]	; (8002a2c <xTaskIncrementTick+0x214>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a6f      	ldr	r2, [pc, #444]	; (8002a28 <xTaskIncrementTick+0x210>)
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4a6f      	ldr	r2, [pc, #444]	; (8002a2c <xTaskIncrementTick+0x214>)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4b6e      	ldr	r3, [pc, #440]	; (8002a30 <xTaskIncrementTick+0x218>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3301      	adds	r3, #1
 800287a:	4a6d      	ldr	r2, [pc, #436]	; (8002a30 <xTaskIncrementTick+0x218>)
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	f000 f9e5 	bl	8002c4c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002882:	4b6c      	ldr	r3, [pc, #432]	; (8002a34 <xTaskIncrementTick+0x21c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6a3a      	ldr	r2, [r7, #32]
 8002888:	429a      	cmp	r2, r3
 800288a:	f0c0 80aa 	bcc.w	80029e2 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800288e:	4b66      	ldr	r3, [pc, #408]	; (8002a28 <xTaskIncrementTick+0x210>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d104      	bne.n	80028a2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002898:	4b66      	ldr	r3, [pc, #408]	; (8002a34 <xTaskIncrementTick+0x21c>)
 800289a:	f04f 32ff 	mov.w	r2, #4294967295
 800289e:	601a      	str	r2, [r3, #0]
                    break;
 80028a0:	e09f      	b.n	80029e2 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028a2:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <xTaskIncrementTick+0x210>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80028b2:	6a3a      	ldr	r2, [r7, #32]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d203      	bcs.n	80028c2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80028ba:	4a5e      	ldr	r2, [pc, #376]	; (8002a34 <xTaskIncrementTick+0x21c>)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80028c0:	e08f      	b.n	80029e2 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	68d2      	ldr	r2, [r2, #12]
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	6892      	ldr	r2, [r2, #8]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	3304      	adds	r3, #4
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d103      	bne.n	80028f0 <xTaskIncrementTick+0xd8>
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	2200      	movs	r2, #0
 80028f4:	615a      	str	r2, [r3, #20]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	1e5a      	subs	r2, r3, #1
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01e      	beq.n	8002946 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	6a12      	ldr	r2, [r2, #32]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	69d2      	ldr	r2, [r2, #28]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	3318      	adds	r3, #24
 800292a:	429a      	cmp	r2, r3
 800292c:	d103      	bne.n	8002936 <xTaskIncrementTick+0x11e>
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	6a1a      	ldr	r2, [r3, #32]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2200      	movs	r2, #0
 800293a:	629a      	str	r2, [r3, #40]	; 0x28
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	1e5a      	subs	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4618      	mov	r0, r3
 800294a:	f001 fe95 	bl	8004678 <SEGGER_SYSVIEW_OnTaskStartReady>
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	2201      	movs	r2, #1
 8002954:	409a      	lsls	r2, r3
 8002956:	4b38      	ldr	r3, [pc, #224]	; (8002a38 <xTaskIncrementTick+0x220>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4313      	orrs	r3, r2
 800295c:	4a36      	ldr	r2, [pc, #216]	; (8002a38 <xTaskIncrementTick+0x220>)
 800295e:	6013      	str	r3, [r2, #0]
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002964:	4935      	ldr	r1, [pc, #212]	; (8002a3c <xTaskIncrementTick+0x224>)
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	3304      	adds	r3, #4
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	3204      	adds	r2, #4
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	1d1a      	adds	r2, r3, #4
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4a26      	ldr	r2, [pc, #152]	; (8002a3c <xTaskIncrementTick+0x224>)
 80029a4:	441a      	add	r2, r3
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	615a      	str	r2, [r3, #20]
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ae:	4923      	ldr	r1, [pc, #140]	; (8002a3c <xTaskIncrementTick+0x224>)
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	1c59      	adds	r1, r3, #1
 80029be:	481f      	ldr	r0, [pc, #124]	; (8002a3c <xTaskIncrementTick+0x224>)
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4403      	add	r3, r0
 80029ca:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <xTaskIncrementTick+0x228>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	429a      	cmp	r2, r3
 80029d8:	f4ff af59 	bcc.w	800288e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80029dc:	2301      	movs	r3, #1
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029e0:	e755      	b.n	800288e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80029e2:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <xTaskIncrementTick+0x228>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e8:	4914      	ldr	r1, [pc, #80]	; (8002a3c <xTaskIncrementTick+0x224>)
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d901      	bls.n	80029fe <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 80029fa:	2301      	movs	r3, #1
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <xTaskIncrementTick+0x22c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002a06:	2301      	movs	r3, #1
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0a:	e004      	b.n	8002a16 <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <xTaskIncrementTick+0x230>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	4a0d      	ldr	r2, [pc, #52]	; (8002a48 <xTaskIncrementTick+0x230>)
 8002a14:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3728      	adds	r7, #40	; 0x28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000130 	.word	0x20000130
 8002a24:	2000010c 	.word	0x2000010c
 8002a28:	200000c0 	.word	0x200000c0
 8002a2c:	200000c4 	.word	0x200000c4
 8002a30:	20000120 	.word	0x20000120
 8002a34:	20000128 	.word	0x20000128
 8002a38:	20000110 	.word	0x20000110
 8002a3c:	20000034 	.word	0x20000034
 8002a40:	20000030 	.word	0x20000030
 8002a44:	2000011c 	.word	0x2000011c
 8002a48:	20000118 	.word	0x20000118

08002a4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a52:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <vTaskSwitchContext+0xbc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <vTaskSwitchContext+0xc0>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002a60:	e04d      	b.n	8002afe <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002a62:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <vTaskSwitchContext+0xc0>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a68:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <vTaskSwitchContext+0xc4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002a76:	7afb      	ldrb	r3, [r7, #11]
 8002a78:	f1c3 031f 	rsb	r3, r3, #31
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	4925      	ldr	r1, [pc, #148]	; (8002b14 <vTaskSwitchContext+0xc8>)
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10a      	bne.n	8002aa8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	607b      	str	r3, [r7, #4]
    }
 8002aa4:	bf00      	nop
 8002aa6:	e7fe      	b.n	8002aa6 <vTaskSwitchContext+0x5a>
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4a18      	ldr	r2, [pc, #96]	; (8002b14 <vTaskSwitchContext+0xc8>)
 8002ab4:	4413      	add	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	3308      	adds	r3, #8
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d104      	bne.n	8002ad8 <vTaskSwitchContext+0x8c>
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <vTaskSwitchContext+0xcc>)
 8002ae0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <vTaskSwitchContext+0xcc>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <vTaskSwitchContext+0xd0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d102      	bne.n	8002af4 <vTaskSwitchContext+0xa8>
 8002aee:	f001 fd23 	bl	8004538 <SEGGER_SYSVIEW_OnIdle>
}
 8002af2:	e004      	b.n	8002afe <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <vTaskSwitchContext+0xcc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 fd7b 	bl	80045f4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002afe:	bf00      	nop
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000130 	.word	0x20000130
 8002b0c:	2000011c 	.word	0x2000011c
 8002b10:	20000110 	.word	0x20000110
 8002b14:	20000034 	.word	0x20000034
 8002b18:	20000030 	.word	0x20000030
 8002b1c:	2000012c 	.word	0x2000012c

08002b20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002b28:	f000 f852 	bl	8002bd0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <prvIdleTask+0x28>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d9f9      	bls.n	8002b28 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <prvIdleTask+0x2c>)
 8002b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	f3bf 8f4f 	dsb	sy
 8002b40:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002b44:	e7f0      	b.n	8002b28 <prvIdleTask+0x8>
 8002b46:	bf00      	nop
 8002b48:	20000034 	.word	0x20000034
 8002b4c:	e000ed04 	.word	0xe000ed04

08002b50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	e00c      	b.n	8002b76 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <prvInitialiseTaskLists+0x60>)
 8002b68:	4413      	add	r3, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff fafa 	bl	8002164 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3301      	adds	r3, #1
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d9ef      	bls.n	8002b5c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002b7c:	480d      	ldr	r0, [pc, #52]	; (8002bb4 <prvInitialiseTaskLists+0x64>)
 8002b7e:	f7ff faf1 	bl	8002164 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002b82:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <prvInitialiseTaskLists+0x68>)
 8002b84:	f7ff faee 	bl	8002164 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <prvInitialiseTaskLists+0x6c>)
 8002b8a:	f7ff faeb 	bl	8002164 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002b8e:	480c      	ldr	r0, [pc, #48]	; (8002bc0 <prvInitialiseTaskLists+0x70>)
 8002b90:	f7ff fae8 	bl	8002164 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002b94:	480b      	ldr	r0, [pc, #44]	; (8002bc4 <prvInitialiseTaskLists+0x74>)
 8002b96:	f7ff fae5 	bl	8002164 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <prvInitialiseTaskLists+0x78>)
 8002b9c:	4a05      	ldr	r2, [pc, #20]	; (8002bb4 <prvInitialiseTaskLists+0x64>)
 8002b9e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <prvInitialiseTaskLists+0x7c>)
 8002ba2:	4a05      	ldr	r2, [pc, #20]	; (8002bb8 <prvInitialiseTaskLists+0x68>)
 8002ba4:	601a      	str	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000034 	.word	0x20000034
 8002bb4:	20000098 	.word	0x20000098
 8002bb8:	200000ac 	.word	0x200000ac
 8002bbc:	200000c8 	.word	0x200000c8
 8002bc0:	200000dc 	.word	0x200000dc
 8002bc4:	200000f4 	.word	0x200000f4
 8002bc8:	200000c0 	.word	0x200000c0
 8002bcc:	200000c4 	.word	0x200000c4

08002bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bd6:	e019      	b.n	8002c0c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002bd8:	f000 fa04 	bl	8002fe4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bdc:	4b10      	ldr	r3, [pc, #64]	; (8002c20 <prvCheckTasksWaitingTermination+0x50>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3304      	adds	r3, #4
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fae8 	bl	80021be <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <prvCheckTasksWaitingTermination+0x54>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <prvCheckTasksWaitingTermination+0x54>)
 8002bf6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <prvCheckTasksWaitingTermination+0x58>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <prvCheckTasksWaitingTermination+0x58>)
 8002c00:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002c02:	f000 fa1f 	bl	8003044 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f810 	bl	8002c2c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <prvCheckTasksWaitingTermination+0x58>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e1      	bne.n	8002bd8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200000dc 	.word	0x200000dc
 8002c24:	20000108 	.word	0x20000108
 8002c28:	200000f0 	.word	0x200000f0

08002c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fb9f 	bl	800337c <vPortFree>
                vPortFree( pxTCB );
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fb9c 	bl	800337c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <prvResetNextTaskUnblockTime+0x30>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d104      	bne.n	8002c64 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <prvResetNextTaskUnblockTime+0x34>)
 8002c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c60:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002c62:	e005      	b.n	8002c70 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <prvResetNextTaskUnblockTime+0x30>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <prvResetNextTaskUnblockTime+0x34>)
 8002c6e:	6013      	str	r3, [r2, #0]
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	200000c0 	.word	0x200000c0
 8002c80:	20000128 	.word	0x20000128

08002c84 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3b04      	subs	r3, #4
 8002c94:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3b04      	subs	r3, #4
 8002ca2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f023 0201 	bic.w	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	3b04      	subs	r3, #4
 8002cb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002cb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ce8 <pxPortInitialiseStack+0x64>)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	3b14      	subs	r3, #20
 8002cbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3b04      	subs	r3, #4
 8002cca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f06f 0202 	mvn.w	r2, #2
 8002cd2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3b20      	subs	r3, #32
 8002cd8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002cda:	68fb      	ldr	r3, [r7, #12]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	08002ced 	.word	0x08002ced

08002cec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <prvTaskExitError+0x54>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfe:	d00a      	beq.n	8002d16 <prvTaskExitError+0x2a>
        __asm volatile
 8002d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	60fb      	str	r3, [r7, #12]
    }
 8002d12:	bf00      	nop
 8002d14:	e7fe      	b.n	8002d14 <prvTaskExitError+0x28>
        __asm volatile
 8002d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1a:	f383 8811 	msr	BASEPRI, r3
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	60bb      	str	r3, [r7, #8]
    }
 8002d28:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d2a:	bf00      	nop
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d0fc      	beq.n	8002d2c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d32:	bf00      	nop
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	20000010 	.word	0x20000010
	...

08002d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <pxCurrentTCBConst2>)
 8002d52:	6819      	ldr	r1, [r3, #0]
 8002d54:	6808      	ldr	r0, [r1, #0]
 8002d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d5a:	f380 8809 	msr	PSP, r0
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f04f 0000 	mov.w	r0, #0
 8002d66:	f380 8811 	msr	BASEPRI, r0
 8002d6a:	4770      	bx	lr
 8002d6c:	f3af 8000 	nop.w

08002d70 <pxCurrentTCBConst2>:
 8002d70:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop

08002d78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002d78:	4808      	ldr	r0, [pc, #32]	; (8002d9c <prvPortStartFirstTask+0x24>)
 8002d7a:	6800      	ldr	r0, [r0, #0]
 8002d7c:	6800      	ldr	r0, [r0, #0]
 8002d7e:	f380 8808 	msr	MSP, r0
 8002d82:	f04f 0000 	mov.w	r0, #0
 8002d86:	f380 8814 	msr	CONTROL, r0
 8002d8a:	b662      	cpsie	i
 8002d8c:	b661      	cpsie	f
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	df00      	svc	0
 8002d98:	bf00      	nop
 8002d9a:	0000      	.short	0x0000
 8002d9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop

08002da4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002daa:	4b46      	ldr	r3, [pc, #280]	; (8002ec4 <xPortStartScheduler+0x120>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a46      	ldr	r2, [pc, #280]	; (8002ec8 <xPortStartScheduler+0x124>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d10a      	bne.n	8002dca <xPortStartScheduler+0x26>
        __asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	613b      	str	r3, [r7, #16]
    }
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002dca:	4b3e      	ldr	r3, [pc, #248]	; (8002ec4 <xPortStartScheduler+0x120>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a3f      	ldr	r2, [pc, #252]	; (8002ecc <xPortStartScheduler+0x128>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10a      	bne.n	8002dea <xPortStartScheduler+0x46>
        __asm volatile
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	60fb      	str	r3, [r7, #12]
    }
 8002de6:	bf00      	nop
 8002de8:	e7fe      	b.n	8002de8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002dea:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <xPortStartScheduler+0x12c>)
 8002dec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	22ff      	movs	r2, #255	; 0xff
 8002dfa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <xPortStartScheduler+0x130>)
 8002e10:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e12:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e14:	2207      	movs	r2, #7
 8002e16:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e18:	e009      	b.n	8002e2e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	4a2d      	ldr	r2, [pc, #180]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e22:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e2e:	78fb      	ldrb	r3, [r7, #3]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e36:	2b80      	cmp	r3, #128	; 0x80
 8002e38:	d0ef      	beq.n	8002e1a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e3a:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f1c3 0307 	rsb	r3, r3, #7
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d00a      	beq.n	8002e5c <xPortStartScheduler+0xb8>
        __asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	60bb      	str	r3, [r7, #8]
    }
 8002e58:	bf00      	nop
 8002e5a:	e7fe      	b.n	8002e5a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e64:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e66:	4b1c      	ldr	r3, [pc, #112]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e6e:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <xPortStartScheduler+0x134>)
 8002e70:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e7a:	4b18      	ldr	r3, [pc, #96]	; (8002edc <xPortStartScheduler+0x138>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a17      	ldr	r2, [pc, #92]	; (8002edc <xPortStartScheduler+0x138>)
 8002e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <xPortStartScheduler+0x138>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a14      	ldr	r2, [pc, #80]	; (8002edc <xPortStartScheduler+0x138>)
 8002e8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e92:	f000 f963 	bl	800315c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e96:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <xPortStartScheduler+0x13c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002e9c:	f000 f982 	bl	80031a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002ea0:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <xPortStartScheduler+0x140>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a0f      	ldr	r2, [pc, #60]	; (8002ee4 <xPortStartScheduler+0x140>)
 8002ea6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002eaa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002eac:	f7ff ff64 	bl	8002d78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002eb0:	f7ff fdcc 	bl	8002a4c <vTaskSwitchContext>
    prvTaskExitError();
 8002eb4:	f7ff ff1a 	bl	8002cec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	e000ed00 	.word	0xe000ed00
 8002ec8:	410fc271 	.word	0x410fc271
 8002ecc:	410fc270 	.word	0x410fc270
 8002ed0:	e000e400 	.word	0xe000e400
 8002ed4:	20000134 	.word	0x20000134
 8002ed8:	20000138 	.word	0x20000138
 8002edc:	e000ed20 	.word	0xe000ed20
 8002ee0:	20000010 	.word	0x20000010
 8002ee4:	e000ef34 	.word	0xe000ef34

08002ee8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002eee:	4b37      	ldr	r3, [pc, #220]	; (8002fcc <vInitPrioGroupValue+0xe4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a37      	ldr	r2, [pc, #220]	; (8002fd0 <vInitPrioGroupValue+0xe8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d10a      	bne.n	8002f0e <vInitPrioGroupValue+0x26>
        __asm volatile
 8002ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efc:	f383 8811 	msr	BASEPRI, r3
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	613b      	str	r3, [r7, #16]
    }
 8002f0a:	bf00      	nop
 8002f0c:	e7fe      	b.n	8002f0c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f0e:	4b2f      	ldr	r3, [pc, #188]	; (8002fcc <vInitPrioGroupValue+0xe4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a30      	ldr	r2, [pc, #192]	; (8002fd4 <vInitPrioGroupValue+0xec>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d10a      	bne.n	8002f2e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	60fb      	str	r3, [r7, #12]
    }
 8002f2a:	bf00      	nop
 8002f2c:	e7fe      	b.n	8002f2c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <vInitPrioGroupValue+0xf0>)
 8002f30:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	22ff      	movs	r2, #255	; 0xff
 8002f3e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <vInitPrioGroupValue+0xf4>)
 8002f54:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f56:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002f58:	2207      	movs	r2, #7
 8002f5a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f5c:	e009      	b.n	8002f72 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002f5e:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	4a1e      	ldr	r2, [pc, #120]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002f66:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7a:	2b80      	cmp	r3, #128	; 0x80
 8002f7c:	d0ef      	beq.n	8002f5e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f7e:	4b18      	ldr	r3, [pc, #96]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f1c3 0307 	rsb	r3, r3, #7
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d00a      	beq.n	8002fa0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	60bb      	str	r3, [r7, #8]
    }
 8002f9c:	bf00      	nop
 8002f9e:	e7fe      	b.n	8002f9e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002fa8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002faa:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fb2:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <vInitPrioGroupValue+0xf8>)
 8002fb4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002fbe:	bf00      	nop
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000ed00 	.word	0xe000ed00
 8002fd0:	410fc271 	.word	0x410fc271
 8002fd4:	410fc270 	.word	0x410fc270
 8002fd8:	e000e400 	.word	0xe000e400
 8002fdc:	20000134 	.word	0x20000134
 8002fe0:	20000138 	.word	0x20000138

08002fe4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
        __asm volatile
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	607b      	str	r3, [r7, #4]
    }
 8002ffc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <vPortEnterCritical+0x58>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3301      	adds	r3, #1
 8003004:	4a0d      	ldr	r2, [pc, #52]	; (800303c <vPortEnterCritical+0x58>)
 8003006:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <vPortEnterCritical+0x58>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d10f      	bne.n	8003030 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <vPortEnterCritical+0x5c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <vPortEnterCritical+0x4c>
        __asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	603b      	str	r3, [r7, #0]
    }
 800302c:	bf00      	nop
 800302e:	e7fe      	b.n	800302e <vPortEnterCritical+0x4a>
    }
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	20000010 	.word	0x20000010
 8003040:	e000ed04 	.word	0xe000ed04

08003044 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <vPortExitCritical+0x50>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <vPortExitCritical+0x24>
        __asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	607b      	str	r3, [r7, #4]
    }
 8003064:	bf00      	nop
 8003066:	e7fe      	b.n	8003066 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003068:	4b0a      	ldr	r3, [pc, #40]	; (8003094 <vPortExitCritical+0x50>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3b01      	subs	r3, #1
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <vPortExitCritical+0x50>)
 8003070:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <vPortExitCritical+0x50>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d105      	bne.n	8003086 <vPortExitCritical+0x42>
 800307a:	2300      	movs	r3, #0
 800307c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003084:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000010 	.word	0x20000010
	...

080030a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80030a0:	f3ef 8009 	mrs	r0, PSP
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	4b15      	ldr	r3, [pc, #84]	; (8003100 <pxCurrentTCBConst>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	f01e 0f10 	tst.w	lr, #16
 80030b0:	bf08      	it	eq
 80030b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80030b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ba:	6010      	str	r0, [r2, #0]
 80030bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80030c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80030c4:	f380 8811 	msr	BASEPRI, r0
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f7ff fcbc 	bl	8002a4c <vTaskSwitchContext>
 80030d4:	f04f 0000 	mov.w	r0, #0
 80030d8:	f380 8811 	msr	BASEPRI, r0
 80030dc:	bc09      	pop	{r0, r3}
 80030de:	6819      	ldr	r1, [r3, #0]
 80030e0:	6808      	ldr	r0, [r1, #0]
 80030e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e6:	f01e 0f10 	tst.w	lr, #16
 80030ea:	bf08      	it	eq
 80030ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80030f0:	f380 8809 	msr	PSP, r0
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	f3af 8000 	nop.w

08003100 <pxCurrentTCBConst>:
 8003100:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop

08003108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
        __asm volatile
 800310e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003112:	f383 8811 	msr	BASEPRI, r3
 8003116:	f3bf 8f6f 	isb	sy
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	607b      	str	r3, [r7, #4]
    }
 8003120:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003122:	f001 f98f 	bl	8004444 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003126:	f7ff fb77 	bl	8002818 <xTaskIncrementTick>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d006      	beq.n	800313e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003130:	f001 f9e6 	bl	8004500 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <SysTick_Handler+0x50>)
 8003136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e001      	b.n	8003142 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800313e:	f001 f9c3 	bl	80044c8 <SEGGER_SYSVIEW_RecordExitISR>
 8003142:	2300      	movs	r3, #0
 8003144:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f383 8811 	msr	BASEPRI, r3
    }
 800314c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	e000ed04 	.word	0xe000ed04

0800315c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <vPortSetupTimerInterrupt+0x34>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003166:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <vPortSetupTimerInterrupt+0x38>)
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800316c:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <vPortSetupTimerInterrupt+0x3c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0a      	ldr	r2, [pc, #40]	; (800319c <vPortSetupTimerInterrupt+0x40>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	099b      	lsrs	r3, r3, #6
 8003178:	4a09      	ldr	r2, [pc, #36]	; (80031a0 <vPortSetupTimerInterrupt+0x44>)
 800317a:	3b01      	subs	r3, #1
 800317c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <vPortSetupTimerInterrupt+0x34>)
 8003180:	2207      	movs	r2, #7
 8003182:	601a      	str	r2, [r3, #0]
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000e010 	.word	0xe000e010
 8003194:	e000e018 	.word	0xe000e018
 8003198:	20000000 	.word	0x20000000
 800319c:	10624dd3 	.word	0x10624dd3
 80031a0:	e000e014 	.word	0xe000e014

080031a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80031a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80031b4 <vPortEnableVFP+0x10>
 80031a8:	6801      	ldr	r1, [r0, #0]
 80031aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80031ae:	6001      	str	r1, [r0, #0]
 80031b0:	4770      	bx	lr
 80031b2:	0000      	.short	0x0000
 80031b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop

080031bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08a      	sub	sp, #40	; 0x28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80031c8:	f7ff fa18 	bl	80025fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80031cc:	4b65      	ldr	r3, [pc, #404]	; (8003364 <pvPortMalloc+0x1a8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80031d4:	f000 f934 	bl	8003440 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80031d8:	4b63      	ldr	r3, [pc, #396]	; (8003368 <pvPortMalloc+0x1ac>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f040 80a7 	bne.w	8003334 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d02d      	beq.n	8003248 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80031ec:	2208      	movs	r2, #8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d227      	bcs.n	8003248 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80031f8:	2208      	movs	r2, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	2b00      	cmp	r3, #0
 8003208:	d021      	beq.n	800324e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f023 0307 	bic.w	r3, r3, #7
 8003210:	3308      	adds	r3, #8
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	429a      	cmp	r2, r3
 8003216:	d214      	bcs.n	8003242 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f023 0307 	bic.w	r3, r3, #7
 800321e:	3308      	adds	r3, #8
 8003220:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	2b00      	cmp	r3, #0
 800322a:	d010      	beq.n	800324e <pvPortMalloc+0x92>
        __asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	617b      	str	r3, [r7, #20]
    }
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003246:	e002      	b.n	800324e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	607b      	str	r3, [r7, #4]
 800324c:	e000      	b.n	8003250 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800324e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d06e      	beq.n	8003334 <pvPortMalloc+0x178>
 8003256:	4b45      	ldr	r3, [pc, #276]	; (800336c <pvPortMalloc+0x1b0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	429a      	cmp	r2, r3
 800325e:	d869      	bhi.n	8003334 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003260:	4b43      	ldr	r3, [pc, #268]	; (8003370 <pvPortMalloc+0x1b4>)
 8003262:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003264:	4b42      	ldr	r3, [pc, #264]	; (8003370 <pvPortMalloc+0x1b4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800326a:	e004      	b.n	8003276 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	d903      	bls.n	8003288 <pvPortMalloc+0xcc>
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f1      	bne.n	800326c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003288:	4b36      	ldr	r3, [pc, #216]	; (8003364 <pvPortMalloc+0x1a8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328e:	429a      	cmp	r2, r3
 8003290:	d050      	beq.n	8003334 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2208      	movs	r2, #8
 8003298:	4413      	add	r3, r2
 800329a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	1ad2      	subs	r2, r2, r3
 80032ac:	2308      	movs	r3, #8
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d91f      	bls.n	80032f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80032b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <pvPortMalloc+0x120>
        __asm volatile
 80032c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	613b      	str	r3, [r7, #16]
    }
 80032d8:	bf00      	nop
 80032da:	e7fe      	b.n	80032da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1ad2      	subs	r2, r2, r3
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80032ee:	69b8      	ldr	r0, [r7, #24]
 80032f0:	f000 f908 	bl	8003504 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <pvPortMalloc+0x1b0>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	4a1b      	ldr	r2, [pc, #108]	; (800336c <pvPortMalloc+0x1b0>)
 8003300:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003302:	4b1a      	ldr	r3, [pc, #104]	; (800336c <pvPortMalloc+0x1b0>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <pvPortMalloc+0x1b8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d203      	bcs.n	8003316 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800330e:	4b17      	ldr	r3, [pc, #92]	; (800336c <pvPortMalloc+0x1b0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a18      	ldr	r2, [pc, #96]	; (8003374 <pvPortMalloc+0x1b8>)
 8003314:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <pvPortMalloc+0x1ac>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	431a      	orrs	r2, r3
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	2200      	movs	r2, #0
 8003328:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800332a:	4b13      	ldr	r3, [pc, #76]	; (8003378 <pvPortMalloc+0x1bc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3301      	adds	r3, #1
 8003330:	4a11      	ldr	r2, [pc, #68]	; (8003378 <pvPortMalloc+0x1bc>)
 8003332:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003334:	f7ff f970 	bl	8002618 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <pvPortMalloc+0x19c>
        __asm volatile
 8003342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	60fb      	str	r3, [r7, #12]
    }
 8003354:	bf00      	nop
 8003356:	e7fe      	b.n	8003356 <pvPortMalloc+0x19a>
    return pvReturn;
 8003358:	69fb      	ldr	r3, [r7, #28]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3728      	adds	r7, #40	; 0x28
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20012d44 	.word	0x20012d44
 8003368:	20012d58 	.word	0x20012d58
 800336c:	20012d48 	.word	0x20012d48
 8003370:	20012d3c 	.word	0x20012d3c
 8003374:	20012d4c 	.word	0x20012d4c
 8003378:	20012d50 	.word	0x20012d50

0800337c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d04d      	beq.n	800342a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800338e:	2308      	movs	r3, #8
 8003390:	425b      	negs	r3, r3
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4413      	add	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	4b24      	ldr	r3, [pc, #144]	; (8003434 <vPortFree+0xb8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10a      	bne.n	80033c0 <vPortFree+0x44>
        __asm volatile
 80033aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	60fb      	str	r3, [r7, #12]
    }
 80033bc:	bf00      	nop
 80033be:	e7fe      	b.n	80033be <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <vPortFree+0x62>
        __asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	60bb      	str	r3, [r7, #8]
    }
 80033da:	bf00      	nop
 80033dc:	e7fe      	b.n	80033dc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	4b14      	ldr	r3, [pc, #80]	; (8003434 <vPortFree+0xb8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d01e      	beq.n	800342a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d11a      	bne.n	800342a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4b0e      	ldr	r3, [pc, #56]	; (8003434 <vPortFree+0xb8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	401a      	ands	r2, r3
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003404:	f7ff f8fa 	bl	80025fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <vPortFree+0xbc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4413      	add	r3, r2
 8003412:	4a09      	ldr	r2, [pc, #36]	; (8003438 <vPortFree+0xbc>)
 8003414:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003416:	6938      	ldr	r0, [r7, #16]
 8003418:	f000 f874 	bl	8003504 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800341c:	4b07      	ldr	r3, [pc, #28]	; (800343c <vPortFree+0xc0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3301      	adds	r3, #1
 8003422:	4a06      	ldr	r2, [pc, #24]	; (800343c <vPortFree+0xc0>)
 8003424:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003426:	f7ff f8f7 	bl	8002618 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800342a:	bf00      	nop
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20012d58 	.word	0x20012d58
 8003438:	20012d48 	.word	0x20012d48
 800343c:	20012d54 	.word	0x20012d54

08003440 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003446:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800344a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800344c:	4b27      	ldr	r3, [pc, #156]	; (80034ec <prvHeapInit+0xac>)
 800344e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00c      	beq.n	8003474 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3307      	adds	r3, #7
 800345e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0307 	bic.w	r3, r3, #7
 8003466:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	4a1f      	ldr	r2, [pc, #124]	; (80034ec <prvHeapInit+0xac>)
 8003470:	4413      	add	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003478:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <prvHeapInit+0xb0>)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800347e:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <prvHeapInit+0xb0>)
 8003480:	2200      	movs	r2, #0
 8003482:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	4413      	add	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800348c:	2208      	movs	r2, #8
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0307 	bic.w	r3, r3, #7
 800349a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <prvHeapInit+0xb4>)
 80034a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <prvHeapInit+0xb4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <prvHeapInit+0xb4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	1ad2      	subs	r2, r2, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <prvHeapInit+0xb4>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <prvHeapInit+0xb8>)
 80034ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a09      	ldr	r2, [pc, #36]	; (80034fc <prvHeapInit+0xbc>)
 80034d6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <prvHeapInit+0xc0>)
 80034da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80034de:	601a      	str	r2, [r3, #0]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	2000013c 	.word	0x2000013c
 80034f0:	20012d3c 	.word	0x20012d3c
 80034f4:	20012d44 	.word	0x20012d44
 80034f8:	20012d4c 	.word	0x20012d4c
 80034fc:	20012d48 	.word	0x20012d48
 8003500:	20012d58 	.word	0x20012d58

08003504 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800350c:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <prvInsertBlockIntoFreeList+0xac>)
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	e002      	b.n	8003518 <prvInsertBlockIntoFreeList+0x14>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	d8f7      	bhi.n	8003512 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	4413      	add	r3, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	d108      	bne.n	8003546 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	441a      	add	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	441a      	add	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d118      	bne.n	800358c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <prvInsertBlockIntoFreeList+0xb0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d00d      	beq.n	8003582 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	441a      	add	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e008      	b.n	8003594 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <prvInsertBlockIntoFreeList+0xb0>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	e003      	b.n	8003594 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	429a      	cmp	r2, r3
 800359a:	d002      	beq.n	80035a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	20012d3c 	.word	0x20012d3c
 80035b4:	20012d44 	.word	0x20012d44

080035b8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80035c6:	2205      	movs	r2, #5
 80035c8:	492b      	ldr	r1, [pc, #172]	; (8003678 <SYSVIEW_AddTask+0xc0>)
 80035ca:	68b8      	ldr	r0, [r7, #8]
 80035cc:	f001 f9f2 	bl	80049b4 <memcmp>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d04b      	beq.n	800366e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80035d6:	4b29      	ldr	r3, [pc, #164]	; (800367c <SYSVIEW_AddTask+0xc4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b07      	cmp	r3, #7
 80035dc:	d903      	bls.n	80035e6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80035de:	4828      	ldr	r0, [pc, #160]	; (8003680 <SYSVIEW_AddTask+0xc8>)
 80035e0:	f001 f968 	bl	80048b4 <SEGGER_SYSVIEW_Warn>
    return;
 80035e4:	e044      	b.n	8003670 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80035e6:	4b25      	ldr	r3, [pc, #148]	; (800367c <SYSVIEW_AddTask+0xc4>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	4926      	ldr	r1, [pc, #152]	; (8003684 <SYSVIEW_AddTask+0xcc>)
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80035fa:	4b20      	ldr	r3, [pc, #128]	; (800367c <SYSVIEW_AddTask+0xc4>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4921      	ldr	r1, [pc, #132]	; (8003684 <SYSVIEW_AddTask+0xcc>)
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	3304      	adds	r3, #4
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003610:	4b1a      	ldr	r3, [pc, #104]	; (800367c <SYSVIEW_AddTask+0xc4>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	491b      	ldr	r1, [pc, #108]	; (8003684 <SYSVIEW_AddTask+0xcc>)
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	3308      	adds	r3, #8
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003626:	4b15      	ldr	r3, [pc, #84]	; (800367c <SYSVIEW_AddTask+0xc4>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4916      	ldr	r1, [pc, #88]	; (8003684 <SYSVIEW_AddTask+0xcc>)
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	330c      	adds	r3, #12
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800363c:	4b0f      	ldr	r3, [pc, #60]	; (800367c <SYSVIEW_AddTask+0xc4>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	4910      	ldr	r1, [pc, #64]	; (8003684 <SYSVIEW_AddTask+0xcc>)
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	3310      	adds	r3, #16
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <SYSVIEW_AddTask+0xc4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3301      	adds	r3, #1
 8003658:	4a08      	ldr	r2, [pc, #32]	; (800367c <SYSVIEW_AddTask+0xc4>)
 800365a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f80e 	bl	8003688 <SYSVIEW_SendTaskInfo>
 800366c:	e000      	b.n	8003670 <SYSVIEW_AddTask+0xb8>
    return;
 800366e:	bf00      	nop

}
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	08004a40 	.word	0x08004a40
 800367c:	20012dfc 	.word	0x20012dfc
 8003680:	08004a48 	.word	0x08004a48
 8003684:	20012d5c 	.word	0x20012d5c

08003688 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003696:	f107 0314 	add.w	r3, r7, #20
 800369a:	2214      	movs	r2, #20
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f001 f9a4 	bl	80049ec <memset>
  TaskInfo.TaskID     = TaskID;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80036b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80036b8:	f107 0314 	add.w	r3, r7, #20
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 fd97 	bl	80041f0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80036c2:	bf00      	nop
 80036c4:	3728      	adds	r7, #40	; 0x28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80036d2:	4b1e      	ldr	r3, [pc, #120]	; (800374c <USART2_IRQHandler+0x80>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d011      	beq.n	8003706 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <USART2_IRQHandler+0x84>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f003 030b 	and.w	r3, r3, #11
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d108      	bne.n	8003706 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80036f4:	4b17      	ldr	r3, [pc, #92]	; (8003754 <USART2_IRQHandler+0x88>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d004      	beq.n	8003706 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80036fc:	4b15      	ldr	r3, [pc, #84]	; (8003754 <USART2_IRQHandler+0x88>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	79fa      	ldrb	r2, [r7, #7]
 8003702:	4610      	mov	r0, r2
 8003704:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01a      	beq.n	8003746 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003710:	4b11      	ldr	r3, [pc, #68]	; (8003758 <USART2_IRQHandler+0x8c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d015      	beq.n	8003744 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003718:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <USART2_IRQHandler+0x8c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	1dfa      	adds	r2, r7, #7
 800371e:	4610      	mov	r0, r2
 8003720:	4798      	blx	r3
 8003722:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <USART2_IRQHandler+0x90>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a0b      	ldr	r2, [pc, #44]	; (800375c <USART2_IRQHandler+0x90>)
 8003730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e006      	b.n	8003746 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <USART2_IRQHandler+0x80>)
 800373a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 800373c:	79fa      	ldrb	r2, [r7, #7]
 800373e:	4b04      	ldr	r3, [pc, #16]	; (8003750 <USART2_IRQHandler+0x84>)
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e000      	b.n	8003746 <USART2_IRQHandler+0x7a>
      return;
 8003744:	bf00      	nop
    }
  }
}
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40004400 	.word	0x40004400
 8003750:	40004404 	.word	0x40004404
 8003754:	20012e00 	.word	0x20012e00
 8003758:	20012e04 	.word	0x20012e04
 800375c:	4000440c 	.word	0x4000440c

08003760 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <HIF_UART_EnableTXEInterrupt+0x1c>)
 800376a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376e:	6013      	str	r3, [r2, #0]
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	4000440c 	.word	0x4000440c

08003780 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003786:	4b24      	ldr	r3, [pc, #144]	; (8003818 <_DoInit+0x98>)
 8003788:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2203      	movs	r2, #3
 800378e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2203      	movs	r2, #3
 8003794:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a20      	ldr	r2, [pc, #128]	; (800381c <_DoInit+0x9c>)
 800379a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a20      	ldr	r2, [pc, #128]	; (8003820 <_DoInit+0xa0>)
 80037a0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037a8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a17      	ldr	r2, [pc, #92]	; (800381c <_DoInit+0x9c>)
 80037c0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a17      	ldr	r2, [pc, #92]	; (8003824 <_DoInit+0xa4>)
 80037c6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2210      	movs	r2, #16
 80037cc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3307      	adds	r3, #7
 80037e4:	4a10      	ldr	r2, [pc, #64]	; (8003828 <_DoInit+0xa8>)
 80037e6:	6810      	ldr	r0, [r2, #0]
 80037e8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80037ea:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a0e      	ldr	r2, [pc, #56]	; (800382c <_DoInit+0xac>)
 80037f2:	6810      	ldr	r0, [r2, #0]
 80037f4:	6018      	str	r0, [r3, #0]
 80037f6:	8891      	ldrh	r1, [r2, #4]
 80037f8:	7992      	ldrb	r2, [r2, #6]
 80037fa:	8099      	strh	r1, [r3, #4]
 80037fc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80037fe:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003808:	f3bf 8f5f 	dmb	sy
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	20013378 	.word	0x20013378
 800381c:	08004a98 	.word	0x08004a98
 8003820:	20012e08 	.word	0x20012e08
 8003824:	20013208 	.word	0x20013208
 8003828:	08004aa4 	.word	0x08004aa4
 800382c:	08004aa8 	.word	0x08004aa8

08003830 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b08c      	sub	sp, #48	; 0x30
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800383c:	4b3e      	ldr	r3, [pc, #248]	; (8003938 <SEGGER_RTT_ReadNoLock+0x108>)
 800383e:	623b      	str	r3, [r7, #32]
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <SEGGER_RTT_ReadNoLock+0x1e>
 800384a:	f7ff ff99 	bl	8003780 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4613      	mov	r3, r2
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	3360      	adds	r3, #96	; 0x60
 800385a:	4a37      	ldr	r2, [pc, #220]	; (8003938 <SEGGER_RTT_ReadNoLock+0x108>)
 800385c:	4413      	add	r3, r2
 800385e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003870:	2300      	movs	r3, #0
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	429a      	cmp	r2, r3
 800387a:	d92b      	bls.n	80038d4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4293      	cmp	r3, r2
 800388c:	bf28      	it	cs
 800388e:	4613      	movcs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	4413      	add	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	6939      	ldr	r1, [r7, #16]
 80038a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038a2:	f001 f895 	bl	80049d0 <memcpy>
    NumBytesRead += NumBytesRem;
 80038a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	4413      	add	r3, r2
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80038ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	4413      	add	r3, r2
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80038be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	4413      	add	r3, r2
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d101      	bne.n	80038d4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4293      	cmp	r3, r2
 80038e2:	bf28      	it	cs
 80038e4:	4613      	movcs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d019      	beq.n	8003922 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	4413      	add	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	6939      	ldr	r1, [r7, #16]
 80038fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038fe:	f001 f867 	bl	80049d0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	4413      	add	r3, r2
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800390a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	4413      	add	r3, r2
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800391a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	4413      	add	r3, r2
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800392c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800392e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003930:	4618      	mov	r0, r3
 8003932:	3730      	adds	r7, #48	; 0x30
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20013378 	.word	0x20013378

0800393c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00f      	beq.n	8003972 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8003952:	e002      	b.n	800395a <_EncodeStr+0x1e>
      Len++;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	3301      	adds	r3, #1
 8003958:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4413      	add	r3, r2
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f6      	bne.n	8003954 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	429a      	cmp	r2, r3
 800396c:	d901      	bls.n	8003972 <_EncodeStr+0x36>
      Len = Limit;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2bfe      	cmp	r3, #254	; 0xfe
 8003976:	d806      	bhi.n	8003986 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	60fa      	str	r2, [r7, #12]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	701a      	strb	r2, [r3, #0]
 8003984:	e011      	b.n	80039aa <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	60fa      	str	r2, [r7, #12]
 800398c:	22ff      	movs	r2, #255	; 0xff
 800398e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	60fa      	str	r2, [r7, #12]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	0a19      	lsrs	r1, r3, #8
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	60fa      	str	r2, [r7, #12]
 80039a6:	b2ca      	uxtb	r2, r1
 80039a8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80039ae:	e00a      	b.n	80039c6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	1c53      	adds	r3, r2, #1
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1c59      	adds	r1, r3, #1
 80039ba:	60f9      	str	r1, [r7, #12]
 80039bc:	7812      	ldrb	r2, [r2, #0]
 80039be:	701a      	strb	r2, [r3, #0]
    n++;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	3301      	adds	r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d3f0      	bcc.n	80039b0 <_EncodeStr+0x74>
  }
  return pPayload;
 80039ce:	68fb      	ldr	r3, [r7, #12]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3304      	adds	r3, #4
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80039fa:	4b36      	ldr	r3, [pc, #216]	; (8003ad4 <_HandleIncomingPacket+0xe0>)
 80039fc:	7e1b      	ldrb	r3, [r3, #24]
 80039fe:	4618      	mov	r0, r3
 8003a00:	1cfb      	adds	r3, r7, #3
 8003a02:	2201      	movs	r2, #1
 8003a04:	4619      	mov	r1, r3
 8003a06:	f7ff ff13 	bl	8003830 <SEGGER_RTT_ReadNoLock>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	dd54      	ble.n	8003abe <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	2b80      	cmp	r3, #128	; 0x80
 8003a18:	d032      	beq.n	8003a80 <_HandleIncomingPacket+0x8c>
 8003a1a:	2b80      	cmp	r3, #128	; 0x80
 8003a1c:	dc42      	bgt.n	8003aa4 <_HandleIncomingPacket+0xb0>
 8003a1e:	2b07      	cmp	r3, #7
 8003a20:	dc16      	bgt.n	8003a50 <_HandleIncomingPacket+0x5c>
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	dd3e      	ble.n	8003aa4 <_HandleIncomingPacket+0xb0>
 8003a26:	3b01      	subs	r3, #1
 8003a28:	2b06      	cmp	r3, #6
 8003a2a:	d83b      	bhi.n	8003aa4 <_HandleIncomingPacket+0xb0>
 8003a2c:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <_HandleIncomingPacket+0x40>)
 8003a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003a57 	.word	0x08003a57
 8003a38:	08003a5d 	.word	0x08003a5d
 8003a3c:	08003a63 	.word	0x08003a63
 8003a40:	08003a69 	.word	0x08003a69
 8003a44:	08003a6f 	.word	0x08003a6f
 8003a48:	08003a75 	.word	0x08003a75
 8003a4c:	08003a7b 	.word	0x08003a7b
 8003a50:	2b7f      	cmp	r3, #127	; 0x7f
 8003a52:	d036      	beq.n	8003ac2 <_HandleIncomingPacket+0xce>
 8003a54:	e026      	b.n	8003aa4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003a56:	f000 fa4f 	bl	8003ef8 <SEGGER_SYSVIEW_Start>
      break;
 8003a5a:	e037      	b.n	8003acc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003a5c:	f000 fb08 	bl	8004070 <SEGGER_SYSVIEW_Stop>
      break;
 8003a60:	e034      	b.n	8003acc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003a62:	f000 fcbd 	bl	80043e0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003a66:	e031      	b.n	8003acc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003a68:	f000 fca6 	bl	80043b8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003a6c:	e02e      	b.n	8003acc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003a6e:	f000 fb25 	bl	80040bc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003a72:	e02b      	b.n	8003acc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003a74:	f000 fee0 	bl	8004838 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003a78:	e028      	b.n	8003acc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003a7a:	f000 febf 	bl	80047fc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003a7e:	e025      	b.n	8003acc <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003a80:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <_HandleIncomingPacket+0xe0>)
 8003a82:	7e1b      	ldrb	r3, [r3, #24]
 8003a84:	4618      	mov	r0, r3
 8003a86:	1cfb      	adds	r3, r7, #3
 8003a88:	2201      	movs	r2, #1
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	f7ff fed0 	bl	8003830 <SEGGER_RTT_ReadNoLock>
 8003a90:	4603      	mov	r3, r0
 8003a92:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	dd15      	ble.n	8003ac6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fe2d 	bl	80046fc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003aa2:	e010      	b.n	8003ac6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	b25b      	sxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	da0e      	bge.n	8003aca <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <_HandleIncomingPacket+0xe0>)
 8003aae:	7e1b      	ldrb	r3, [r3, #24]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	1cfb      	adds	r3, r7, #3
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f7ff feba 	bl	8003830 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003abc:	e005      	b.n	8003aca <_HandleIncomingPacket+0xd6>
    }
  }
 8003abe:	bf00      	nop
 8003ac0:	e004      	b.n	8003acc <_HandleIncomingPacket+0xd8>
      break;
 8003ac2:	bf00      	nop
 8003ac4:	e002      	b.n	8003acc <_HandleIncomingPacket+0xd8>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e000      	b.n	8003acc <_HandleIncomingPacket+0xd8>
      break;
 8003aca:	bf00      	nop
}
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20013218 	.word	0x20013218

08003ad8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08c      	sub	sp, #48	; 0x30
 8003adc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003ade:	2301      	movs	r3, #1
 8003ae0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aec:	4b32      	ldr	r3, [pc, #200]	; (8003bb8 <_TrySendOverflowPacket+0xe0>)
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af2:	e00b      	b.n	8003b0c <_TrySendOverflowPacket+0x34>
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afa:	1c59      	adds	r1, r3, #1
 8003afc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	09db      	lsrs	r3, r3, #7
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b10:	d8f0      	bhi.n	8003af4 <_TrySendOverflowPacket+0x1c>
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003b22:	4b26      	ldr	r3, [pc, #152]	; (8003bbc <_TrySendOverflowPacket+0xe4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003b28:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <_TrySendOverflowPacket+0xe0>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	623b      	str	r3, [r7, #32]
 8003b3a:	e00b      	b.n	8003b54 <_TrySendOverflowPacket+0x7c>
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	1c59      	adds	r1, r3, #1
 8003b44:	6279      	str	r1, [r7, #36]	; 0x24
 8003b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	09db      	lsrs	r3, r3, #7
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	6a3b      	ldr	r3, [r7, #32]
 8003b56:	2b7f      	cmp	r3, #127	; 0x7f
 8003b58:	d8f0      	bhi.n	8003b3c <_TrySendOverflowPacket+0x64>
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	627a      	str	r2, [r7, #36]	; 0x24
 8003b60:	6a3a      	ldr	r2, [r7, #32]
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <_TrySendOverflowPacket+0xe0>)
 8003b6c:	785b      	ldrb	r3, [r3, #1]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	1d3b      	adds	r3, r7, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f7fc fb48 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003b80:	4603      	mov	r3, r0
 8003b82:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003b84:	f7ff fdec 	bl	8003760 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003b8e:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <_TrySendOverflowPacket+0xe0>)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003b94:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <_TrySendOverflowPacket+0xe0>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <_TrySendOverflowPacket+0xe0>)
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	e004      	b.n	8003bac <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003ba2:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <_TrySendOverflowPacket+0xe0>)
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	4a03      	ldr	r2, [pc, #12]	; (8003bb8 <_TrySendOverflowPacket+0xe0>)
 8003baa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003bac:	693b      	ldr	r3, [r7, #16]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3730      	adds	r7, #48	; 0x30
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20013218 	.word	0x20013218
 8003bbc:	e0001004 	.word	0xe0001004

08003bc0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003bcc:	4b6d      	ldr	r3, [pc, #436]	; (8003d84 <_SendPacket+0x1c4>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d010      	beq.n	8003bf6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003bd4:	4b6b      	ldr	r3, [pc, #428]	; (8003d84 <_SendPacket+0x1c4>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a5 	beq.w	8003d28 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003bde:	4b69      	ldr	r3, [pc, #420]	; (8003d84 <_SendPacket+0x1c4>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d109      	bne.n	8003bfa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003be6:	f7ff ff77 	bl	8003ad8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003bea:	4b66      	ldr	r3, [pc, #408]	; (8003d84 <_SendPacket+0x1c4>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	f040 809c 	bne.w	8003d2c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8003bf4:	e001      	b.n	8003bfa <_SendPacket+0x3a>
    goto Send;
 8003bf6:	bf00      	nop
 8003bf8:	e000      	b.n	8003bfc <_SendPacket+0x3c>
Send:
 8003bfa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b1f      	cmp	r3, #31
 8003c00:	d809      	bhi.n	8003c16 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003c02:	4b60      	ldr	r3, [pc, #384]	; (8003d84 <_SendPacket+0x1c4>)
 8003c04:	69da      	ldr	r2, [r3, #28]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f040 808d 	bne.w	8003d30 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b17      	cmp	r3, #23
 8003c1a:	d807      	bhi.n	8003c2c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	e03d      	b.n	8003ca8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	2b7f      	cmp	r3, #127	; 0x7f
 8003c38:	d912      	bls.n	8003c60 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	09da      	lsrs	r2, r3, #7
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3b01      	subs	r3, #1
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	3a01      	subs	r2, #1
 8003c52:	60fa      	str	r2, [r7, #12]
 8003c54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e006      	b.n	8003c6e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b7f      	cmp	r3, #127	; 0x7f
 8003c72:	d912      	bls.n	8003c9a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	09da      	lsrs	r2, r3, #7
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	3a01      	subs	r2, #1
 8003c8c:	60fa      	str	r2, [r7, #12]
 8003c8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	e006      	b.n	8003ca8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003ca8:	4b37      	ldr	r3, [pc, #220]	; (8003d88 <_SendPacket+0x1c8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003cae:	4b35      	ldr	r3, [pc, #212]	; (8003d84 <_SendPacket+0x1c4>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	623b      	str	r3, [r7, #32]
 8003cc0:	e00b      	b.n	8003cda <_SendPacket+0x11a>
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	1c59      	adds	r1, r3, #1
 8003cca:	6279      	str	r1, [r7, #36]	; 0x24
 8003ccc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	09db      	lsrs	r3, r3, #7
 8003cd8:	623b      	str	r3, [r7, #32]
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	2b7f      	cmp	r3, #127	; 0x7f
 8003cde:	d8f0      	bhi.n	8003cc2 <_SendPacket+0x102>
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ce6:	6a3a      	ldr	r2, [r7, #32]
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003cf0:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <_SendPacket+0x1c4>)
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68f9      	ldr	r1, [r7, #12]
 8003d00:	f7fc fa86 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003d04:	4603      	mov	r3, r0
 8003d06:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003d08:	f7ff fd2a 	bl	8003760 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003d12:	4a1c      	ldr	r2, [pc, #112]	; (8003d84 <_SendPacket+0x1c4>)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	60d3      	str	r3, [r2, #12]
 8003d18:	e00b      	b.n	8003d32 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003d1a:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <_SendPacket+0x1c4>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4b18      	ldr	r3, [pc, #96]	; (8003d84 <_SendPacket+0x1c4>)
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	e004      	b.n	8003d32 <_SendPacket+0x172>
    goto SendDone;
 8003d28:	bf00      	nop
 8003d2a:	e002      	b.n	8003d32 <_SendPacket+0x172>
      goto SendDone;
 8003d2c:	bf00      	nop
 8003d2e:	e000      	b.n	8003d32 <_SendPacket+0x172>
      goto SendDone;
 8003d30:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003d32:	4b14      	ldr	r3, [pc, #80]	; (8003d84 <_SendPacket+0x1c4>)
 8003d34:	7e1b      	ldrb	r3, [r3, #24]
 8003d36:	4619      	mov	r1, r3
 8003d38:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <_SendPacket+0x1cc>)
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	440b      	add	r3, r1
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	336c      	adds	r3, #108	; 0x6c
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <_SendPacket+0x1c4>)
 8003d4a:	7e1b      	ldrb	r3, [r3, #24]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	490f      	ldr	r1, [pc, #60]	; (8003d8c <_SendPacket+0x1cc>)
 8003d50:	4603      	mov	r3, r0
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4403      	add	r3, r0
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	440b      	add	r3, r1
 8003d5a:	3370      	adds	r3, #112	; 0x70
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d00b      	beq.n	8003d7a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003d62:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <_SendPacket+0x1c4>)
 8003d64:	789b      	ldrb	r3, [r3, #2]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d107      	bne.n	8003d7a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003d6a:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <_SendPacket+0x1c4>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003d70:	f7ff fe40 	bl	80039f4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003d74:	4b03      	ldr	r3, [pc, #12]	; (8003d84 <_SendPacket+0x1c4>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003d7a:	bf00      	nop
 8003d7c:	3728      	adds	r7, #40	; 0x28
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20013218 	.word	0x20013218
 8003d88:	e0001004 	.word	0xe0001004
 8003d8c:	20013378 	.word	0x20013378

08003d90 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003d98:	f3ef 8311 	mrs	r3, BASEPRI
 8003d9c:	f04f 0120 	mov.w	r1, #32
 8003da0:	f381 8811 	msr	BASEPRI, r1
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	4808      	ldr	r0, [pc, #32]	; (8003dc8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003da8:	f7ff fe18 	bl	80039dc <_PreparePacket>
 8003dac:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	68b8      	ldr	r0, [r7, #8]
 8003db4:	f7ff ff04 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f383 8811 	msr	BASEPRI, r3
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20013248 	.word	0x20013248

08003dcc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8003dda:	f04f 0120 	mov.w	r1, #32
 8003dde:	f381 8811 	msr	BASEPRI, r1
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	4816      	ldr	r0, [pc, #88]	; (8003e40 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003de6:	f7ff fdf9 	bl	80039dc <_PreparePacket>
 8003dea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	61bb      	str	r3, [r7, #24]
 8003df8:	e00b      	b.n	8003e12 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	1c59      	adds	r1, r3, #1
 8003e02:	61f9      	str	r1, [r7, #28]
 8003e04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	701a      	strb	r2, [r3, #0]
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	09db      	lsrs	r3, r3, #7
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b7f      	cmp	r3, #127	; 0x7f
 8003e16:	d8f0      	bhi.n	8003dfa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	1c5a      	adds	r2, r3, #1
 8003e1c:	61fa      	str	r2, [r7, #28]
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68f9      	ldr	r1, [r7, #12]
 8003e2c:	6938      	ldr	r0, [r7, #16]
 8003e2e:	f7ff fec7 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f383 8811 	msr	BASEPRI, r3
}
 8003e38:	bf00      	nop
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	20013248 	.word	0x20013248

08003e44 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08c      	sub	sp, #48	; 0x30
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e50:	f3ef 8311 	mrs	r3, BASEPRI
 8003e54:	f04f 0120 	mov.w	r1, #32
 8003e58:	f381 8811 	msr	BASEPRI, r1
 8003e5c:	61fb      	str	r3, [r7, #28]
 8003e5e:	4825      	ldr	r0, [pc, #148]	; (8003ef4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003e60:	f7ff fdbc 	bl	80039dc <_PreparePacket>
 8003e64:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e72:	e00b      	b.n	8003e8c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	1c59      	adds	r1, r3, #1
 8003e7c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003e7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	09db      	lsrs	r3, r3, #7
 8003e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8003e90:	d8f0      	bhi.n	8003e74 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	623b      	str	r3, [r7, #32]
 8003eaa:	e00b      	b.n	8003ec4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	1c59      	adds	r1, r3, #1
 8003eb4:	6279      	str	r1, [r7, #36]	; 0x24
 8003eb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	09db      	lsrs	r3, r3, #7
 8003ec2:	623b      	str	r3, [r7, #32]
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8003ec8:	d8f0      	bhi.n	8003eac <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	627a      	str	r2, [r7, #36]	; 0x24
 8003ed0:	6a3a      	ldr	r2, [r7, #32]
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	6979      	ldr	r1, [r7, #20]
 8003ede:	69b8      	ldr	r0, [r7, #24]
 8003ee0:	f7ff fe6e 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	f383 8811 	msr	BASEPRI, r3
}
 8003eea:	bf00      	nop
 8003eec:	3730      	adds	r7, #48	; 0x30
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20013248 	.word	0x20013248

08003ef8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08c      	sub	sp, #48	; 0x30
 8003efc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003efe:	4b59      	ldr	r3, [pc, #356]	; (8004064 <SEGGER_SYSVIEW_Start+0x16c>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003f04:	f3ef 8311 	mrs	r3, BASEPRI
 8003f08:	f04f 0120 	mov.w	r1, #32
 8003f0c:	f381 8811 	msr	BASEPRI, r1
 8003f10:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003f12:	4b54      	ldr	r3, [pc, #336]	; (8004064 <SEGGER_SYSVIEW_Start+0x16c>)
 8003f14:	785b      	ldrb	r3, [r3, #1]
 8003f16:	220a      	movs	r2, #10
 8003f18:	4953      	ldr	r1, [pc, #332]	; (8004068 <SEGGER_SYSVIEW_Start+0x170>)
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fc f978 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003f26:	f7ff fc1b 	bl	8003760 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003f2a:	200a      	movs	r0, #10
 8003f2c:	f7ff ff30 	bl	8003d90 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003f30:	f3ef 8311 	mrs	r3, BASEPRI
 8003f34:	f04f 0120 	mov.w	r1, #32
 8003f38:	f381 8811 	msr	BASEPRI, r1
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	484b      	ldr	r0, [pc, #300]	; (800406c <SEGGER_SYSVIEW_Start+0x174>)
 8003f40:	f7ff fd4c 	bl	80039dc <_PreparePacket>
 8003f44:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4e:	4b45      	ldr	r3, [pc, #276]	; (8004064 <SEGGER_SYSVIEW_Start+0x16c>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f54:	e00b      	b.n	8003f6e <SEGGER_SYSVIEW_Start+0x76>
 8003f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f5c:	1c59      	adds	r1, r3, #1
 8003f5e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	701a      	strb	r2, [r3, #0]
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	09db      	lsrs	r3, r3, #7
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	2b7f      	cmp	r3, #127	; 0x7f
 8003f72:	d8f0      	bhi.n	8003f56 <SEGGER_SYSVIEW_Start+0x5e>
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f82:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	627b      	str	r3, [r7, #36]	; 0x24
 8003f88:	4b36      	ldr	r3, [pc, #216]	; (8004064 <SEGGER_SYSVIEW_Start+0x16c>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	623b      	str	r3, [r7, #32]
 8003f8e:	e00b      	b.n	8003fa8 <SEGGER_SYSVIEW_Start+0xb0>
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	b2da      	uxtb	r2, r3
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	1c59      	adds	r1, r3, #1
 8003f98:	6279      	str	r1, [r7, #36]	; 0x24
 8003f9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	09db      	lsrs	r3, r3, #7
 8003fa6:	623b      	str	r3, [r7, #32]
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	2b7f      	cmp	r3, #127	; 0x7f
 8003fac:	d8f0      	bhi.n	8003f90 <SEGGER_SYSVIEW_Start+0x98>
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	627a      	str	r2, [r7, #36]	; 0x24
 8003fb4:	6a3a      	ldr	r2, [r7, #32]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	61fb      	str	r3, [r7, #28]
 8003fc2:	4b28      	ldr	r3, [pc, #160]	; (8004064 <SEGGER_SYSVIEW_Start+0x16c>)
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	61bb      	str	r3, [r7, #24]
 8003fc8:	e00b      	b.n	8003fe2 <SEGGER_SYSVIEW_Start+0xea>
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	1c59      	adds	r1, r3, #1
 8003fd2:	61f9      	str	r1, [r7, #28]
 8003fd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	701a      	strb	r2, [r3, #0]
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	09db      	lsrs	r3, r3, #7
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8003fe6:	d8f0      	bhi.n	8003fca <SEGGER_SYSVIEW_Start+0xd2>
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	61fa      	str	r2, [r7, #28]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	701a      	strb	r2, [r3, #0]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	e00b      	b.n	800401a <SEGGER_SYSVIEW_Start+0x122>
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	b2da      	uxtb	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	1c59      	adds	r1, r3, #1
 800400a:	6179      	str	r1, [r7, #20]
 800400c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	09db      	lsrs	r3, r3, #7
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b7f      	cmp	r3, #127	; 0x7f
 800401e:	d8f0      	bhi.n	8004002 <SEGGER_SYSVIEW_Start+0x10a>
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	617a      	str	r2, [r7, #20]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	701a      	strb	r2, [r3, #0]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004030:	2218      	movs	r2, #24
 8004032:	6839      	ldr	r1, [r7, #0]
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f7ff fdc3 	bl	8003bc0 <_SendPacket>
      RECORD_END();
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004040:	4b08      	ldr	r3, [pc, #32]	; (8004064 <SEGGER_SYSVIEW_Start+0x16c>)
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <SEGGER_SYSVIEW_Start+0x16c>)
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800404e:	f000 f9c7 	bl	80043e0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004052:	f000 f9b1 	bl	80043b8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004056:	f000 fbef 	bl	8004838 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800405a:	bf00      	nop
 800405c:	3730      	adds	r7, #48	; 0x30
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20013218 	.word	0x20013218
 8004068:	08004ac8 	.word	0x08004ac8
 800406c:	20013248 	.word	0x20013248

08004070 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004076:	f3ef 8311 	mrs	r3, BASEPRI
 800407a:	f04f 0120 	mov.w	r1, #32
 800407e:	f381 8811 	msr	BASEPRI, r1
 8004082:	607b      	str	r3, [r7, #4]
 8004084:	480b      	ldr	r0, [pc, #44]	; (80040b4 <SEGGER_SYSVIEW_Stop+0x44>)
 8004086:	f7ff fca9 	bl	80039dc <_PreparePacket>
 800408a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <SEGGER_SYSVIEW_Stop+0x48>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004094:	220b      	movs	r2, #11
 8004096:	6839      	ldr	r1, [r7, #0]
 8004098:	6838      	ldr	r0, [r7, #0]
 800409a:	f7ff fd91 	bl	8003bc0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800409e:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <SEGGER_SYSVIEW_Stop+0x48>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f383 8811 	msr	BASEPRI, r3
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	20013248 	.word	0x20013248
 80040b8:	20013218 	.word	0x20013218

080040bc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08c      	sub	sp, #48	; 0x30
 80040c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80040c2:	f3ef 8311 	mrs	r3, BASEPRI
 80040c6:	f04f 0120 	mov.w	r1, #32
 80040ca:	f381 8811 	msr	BASEPRI, r1
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	4845      	ldr	r0, [pc, #276]	; (80041e8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80040d2:	f7ff fc83 	bl	80039dc <_PreparePacket>
 80040d6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e0:	4b42      	ldr	r3, [pc, #264]	; (80041ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80040e6:	e00b      	b.n	8004100 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	1c59      	adds	r1, r3, #1
 80040f0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80040f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	09db      	lsrs	r3, r3, #7
 80040fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004102:	2b7f      	cmp	r3, #127	; 0x7f
 8004104:	d8f0      	bhi.n	80040e8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800410c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
 800411a:	4b34      	ldr	r3, [pc, #208]	; (80041ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	623b      	str	r3, [r7, #32]
 8004120:	e00b      	b.n	800413a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	b2da      	uxtb	r2, r3
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	1c59      	adds	r1, r3, #1
 800412a:	6279      	str	r1, [r7, #36]	; 0x24
 800412c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	09db      	lsrs	r3, r3, #7
 8004138:	623b      	str	r3, [r7, #32]
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	2b7f      	cmp	r3, #127	; 0x7f
 800413e:	d8f0      	bhi.n	8004122 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	627a      	str	r2, [r7, #36]	; 0x24
 8004146:	6a3a      	ldr	r2, [r7, #32]
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	61fb      	str	r3, [r7, #28]
 8004154:	4b25      	ldr	r3, [pc, #148]	; (80041ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	e00b      	b.n	8004174 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	1c59      	adds	r1, r3, #1
 8004164:	61f9      	str	r1, [r7, #28]
 8004166:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	09db      	lsrs	r3, r3, #7
 8004172:	61bb      	str	r3, [r7, #24]
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b7f      	cmp	r3, #127	; 0x7f
 8004178:	d8f0      	bhi.n	800415c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	61fa      	str	r2, [r7, #28]
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	2300      	movs	r3, #0
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	e00b      	b.n	80041ac <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	b2da      	uxtb	r2, r3
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	1c59      	adds	r1, r3, #1
 800419c:	6179      	str	r1, [r7, #20]
 800419e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	09db      	lsrs	r3, r3, #7
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2b7f      	cmp	r3, #127	; 0x7f
 80041b0:	d8f0      	bhi.n	8004194 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	617a      	str	r2, [r7, #20]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80041c2:	2218      	movs	r2, #24
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	68b8      	ldr	r0, [r7, #8]
 80041c8:	f7ff fcfa 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80041da:	4b04      	ldr	r3, [pc, #16]	; (80041ec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	4798      	blx	r3
  }
}
 80041e0:	bf00      	nop
 80041e2:	3730      	adds	r7, #48	; 0x30
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20013248 	.word	0x20013248
 80041ec:	20013218 	.word	0x20013218

080041f0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b092      	sub	sp, #72	; 0x48
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80041f8:	f3ef 8311 	mrs	r3, BASEPRI
 80041fc:	f04f 0120 	mov.w	r1, #32
 8004200:	f381 8811 	msr	BASEPRI, r1
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	486a      	ldr	r0, [pc, #424]	; (80043b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004208:	f7ff fbe8 	bl	80039dc <_PreparePacket>
 800420c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	647b      	str	r3, [r7, #68]	; 0x44
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b66      	ldr	r3, [pc, #408]	; (80043b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	643b      	str	r3, [r7, #64]	; 0x40
 8004222:	e00b      	b.n	800423c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004226:	b2da      	uxtb	r2, r3
 8004228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422a:	1c59      	adds	r1, r3, #1
 800422c:	6479      	str	r1, [r7, #68]	; 0x44
 800422e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004238:	09db      	lsrs	r3, r3, #7
 800423a:	643b      	str	r3, [r7, #64]	; 0x40
 800423c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423e:	2b7f      	cmp	r3, #127	; 0x7f
 8004240:	d8f0      	bhi.n	8004224 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	647a      	str	r2, [r7, #68]	; 0x44
 8004248:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004250:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	63bb      	str	r3, [r7, #56]	; 0x38
 800425c:	e00b      	b.n	8004276 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	b2da      	uxtb	r2, r3
 8004262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004264:	1c59      	adds	r1, r3, #1
 8004266:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004268:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	09db      	lsrs	r3, r3, #7
 8004274:	63bb      	str	r3, [r7, #56]	; 0x38
 8004276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004278:	2b7f      	cmp	r3, #127	; 0x7f
 800427a:	d8f0      	bhi.n	800425e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800427c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	4619      	mov	r1, r3
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f7ff fb51 	bl	800393c <_EncodeStr>
 800429a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800429c:	2209      	movs	r2, #9
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	6938      	ldr	r0, [r7, #16]
 80042a2:	f7ff fc8d 	bl	8003bc0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b40      	ldr	r3, [pc, #256]	; (80043b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	633b      	str	r3, [r7, #48]	; 0x30
 80042ba:	e00b      	b.n	80042d4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c2:	1c59      	adds	r1, r3, #1
 80042c4:	6379      	str	r1, [r7, #52]	; 0x34
 80042c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d0:	09db      	lsrs	r3, r3, #7
 80042d2:	633b      	str	r3, [r7, #48]	; 0x30
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	2b7f      	cmp	r3, #127	; 0x7f
 80042d8:	d8f0      	bhi.n	80042bc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80042da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	637a      	str	r2, [r7, #52]	; 0x34
 80042e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]
 80042e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f4:	e00b      	b.n	800430e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	1c59      	adds	r1, r3, #1
 80042fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004300:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	09db      	lsrs	r3, r3, #7
 800430c:	62bb      	str	r3, [r7, #40]	; 0x28
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	2b7f      	cmp	r3, #127	; 0x7f
 8004312:	d8f0      	bhi.n	80042f6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	62fa      	str	r2, [r7, #44]	; 0x2c
 800431a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	623b      	str	r3, [r7, #32]
 800432e:	e00b      	b.n	8004348 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	b2da      	uxtb	r2, r3
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	1c59      	adds	r1, r3, #1
 8004338:	6279      	str	r1, [r7, #36]	; 0x24
 800433a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	09db      	lsrs	r3, r3, #7
 8004346:	623b      	str	r3, [r7, #32]
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	2b7f      	cmp	r3, #127	; 0x7f
 800434c:	d8f0      	bhi.n	8004330 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	627a      	str	r2, [r7, #36]	; 0x24
 8004354:	6a3a      	ldr	r2, [r7, #32]
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	e00b      	b.n	8004380 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	1c59      	adds	r1, r3, #1
 8004370:	61f9      	str	r1, [r7, #28]
 8004372:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	09db      	lsrs	r3, r3, #7
 800437e:	61bb      	str	r3, [r7, #24]
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b7f      	cmp	r3, #127	; 0x7f
 8004384:	d8f0      	bhi.n	8004368 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	61fa      	str	r2, [r7, #28]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004396:	2215      	movs	r2, #21
 8004398:	68f9      	ldr	r1, [r7, #12]
 800439a:	6938      	ldr	r0, [r7, #16]
 800439c:	f7ff fc10 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f383 8811 	msr	BASEPRI, r3
}
 80043a6:	bf00      	nop
 80043a8:	3748      	adds	r7, #72	; 0x48
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20013248 	.word	0x20013248
 80043b4:	20013218 	.word	0x20013218

080043b8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80043bc:	4b07      	ldr	r3, [pc, #28]	; (80043dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80043ce:	4b03      	ldr	r3, [pc, #12]	; (80043dc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4798      	blx	r3
  }
}
 80043d6:	bf00      	nop
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20013218 	.word	0x20013218

080043e0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01a      	beq.n	8004424 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80043ee:	4b13      	ldr	r3, [pc, #76]	; (800443c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d015      	beq.n	8004424 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80043f8:	4b10      	ldr	r3, [pc, #64]	; (800443c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4798      	blx	r3
 8004400:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004404:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004406:	e9d7 0100 	ldrd	r0, r1, [r7]
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	000a      	movs	r2, r1
 8004414:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004416:	4613      	mov	r3, r2
 8004418:	461a      	mov	r2, r3
 800441a:	4621      	mov	r1, r4
 800441c:	200d      	movs	r0, #13
 800441e:	f7ff fd11 	bl	8003e44 <SEGGER_SYSVIEW_RecordU32x2>
 8004422:	e006      	b.n	8004432 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004424:	4b06      	ldr	r3, [pc, #24]	; (8004440 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4619      	mov	r1, r3
 800442a:	200c      	movs	r0, #12
 800442c:	f7ff fcce 	bl	8003dcc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bd90      	pop	{r4, r7, pc}
 800443a:	bf00      	nop
 800443c:	20013218 	.word	0x20013218
 8004440:	e0001004 	.word	0xe0001004

08004444 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800444a:	f3ef 8311 	mrs	r3, BASEPRI
 800444e:	f04f 0120 	mov.w	r1, #32
 8004452:	f381 8811 	msr	BASEPRI, r1
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	4819      	ldr	r0, [pc, #100]	; (80044c0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800445a:	f7ff fabf 	bl	80039dc <_PreparePacket>
 800445e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004464:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	e00b      	b.n	8004490 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	b2da      	uxtb	r2, r3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	1c59      	adds	r1, r3, #1
 8004480:	6179      	str	r1, [r7, #20]
 8004482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	09db      	lsrs	r3, r3, #7
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b7f      	cmp	r3, #127	; 0x7f
 8004494:	d8f0      	bhi.n	8004478 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	617a      	str	r2, [r7, #20]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80044a6:	2202      	movs	r2, #2
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	68b8      	ldr	r0, [r7, #8]
 80044ac:	f7ff fb88 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f383 8811 	msr	BASEPRI, r3
}
 80044b6:	bf00      	nop
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20013248 	.word	0x20013248
 80044c4:	e000ed04 	.word	0xe000ed04

080044c8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80044ce:	f3ef 8311 	mrs	r3, BASEPRI
 80044d2:	f04f 0120 	mov.w	r1, #32
 80044d6:	f381 8811 	msr	BASEPRI, r1
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	4807      	ldr	r0, [pc, #28]	; (80044fc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80044de:	f7ff fa7d 	bl	80039dc <_PreparePacket>
 80044e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80044e4:	2203      	movs	r2, #3
 80044e6:	6839      	ldr	r1, [r7, #0]
 80044e8:	6838      	ldr	r0, [r7, #0]
 80044ea:	f7ff fb69 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f383 8811 	msr	BASEPRI, r3
}
 80044f4:	bf00      	nop
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20013248 	.word	0x20013248

08004500 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004506:	f3ef 8311 	mrs	r3, BASEPRI
 800450a:	f04f 0120 	mov.w	r1, #32
 800450e:	f381 8811 	msr	BASEPRI, r1
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	4807      	ldr	r0, [pc, #28]	; (8004534 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004516:	f7ff fa61 	bl	80039dc <_PreparePacket>
 800451a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800451c:	2212      	movs	r2, #18
 800451e:	6839      	ldr	r1, [r7, #0]
 8004520:	6838      	ldr	r0, [r7, #0]
 8004522:	f7ff fb4d 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f383 8811 	msr	BASEPRI, r3
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20013248 	.word	0x20013248

08004538 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800453e:	f3ef 8311 	mrs	r3, BASEPRI
 8004542:	f04f 0120 	mov.w	r1, #32
 8004546:	f381 8811 	msr	BASEPRI, r1
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	4807      	ldr	r0, [pc, #28]	; (800456c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800454e:	f7ff fa45 	bl	80039dc <_PreparePacket>
 8004552:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004554:	2211      	movs	r2, #17
 8004556:	6839      	ldr	r1, [r7, #0]
 8004558:	6838      	ldr	r0, [r7, #0]
 800455a:	f7ff fb31 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f383 8811 	msr	BASEPRI, r3
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20013248 	.word	0x20013248

08004570 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004578:	f3ef 8311 	mrs	r3, BASEPRI
 800457c:	f04f 0120 	mov.w	r1, #32
 8004580:	f381 8811 	msr	BASEPRI, r1
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	4819      	ldr	r0, [pc, #100]	; (80045ec <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004588:	f7ff fa28 	bl	80039dc <_PreparePacket>
 800458c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004592:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	e00b      	b.n	80045be <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	1c59      	adds	r1, r3, #1
 80045ae:	61f9      	str	r1, [r7, #28]
 80045b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045b4:	b2d2      	uxtb	r2, r2
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	09db      	lsrs	r3, r3, #7
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b7f      	cmp	r3, #127	; 0x7f
 80045c2:	d8f0      	bhi.n	80045a6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	61fa      	str	r2, [r7, #28]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80045d4:	2208      	movs	r2, #8
 80045d6:	68f9      	ldr	r1, [r7, #12]
 80045d8:	6938      	ldr	r0, [r7, #16]
 80045da:	f7ff faf1 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f383 8811 	msr	BASEPRI, r3
}
 80045e4:	bf00      	nop
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20013248 	.word	0x20013248
 80045f0:	20013218 	.word	0x20013218

080045f4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80045fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004600:	f04f 0120 	mov.w	r1, #32
 8004604:	f381 8811 	msr	BASEPRI, r1
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	4819      	ldr	r0, [pc, #100]	; (8004670 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800460c:	f7ff f9e6 	bl	80039dc <_PreparePacket>
 8004610:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004616:	4b17      	ldr	r3, [pc, #92]	; (8004674 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	61fb      	str	r3, [r7, #28]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	61bb      	str	r3, [r7, #24]
 8004628:	e00b      	b.n	8004642 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	b2da      	uxtb	r2, r3
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	1c59      	adds	r1, r3, #1
 8004632:	61f9      	str	r1, [r7, #28]
 8004634:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	09db      	lsrs	r3, r3, #7
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	2b7f      	cmp	r3, #127	; 0x7f
 8004646:	d8f0      	bhi.n	800462a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	61fa      	str	r2, [r7, #28]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004658:	2204      	movs	r2, #4
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	6938      	ldr	r0, [r7, #16]
 800465e:	f7ff faaf 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f383 8811 	msr	BASEPRI, r3
}
 8004668:	bf00      	nop
 800466a:	3720      	adds	r7, #32
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20013248 	.word	0x20013248
 8004674:	20013218 	.word	0x20013218

08004678 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004680:	f3ef 8311 	mrs	r3, BASEPRI
 8004684:	f04f 0120 	mov.w	r1, #32
 8004688:	f381 8811 	msr	BASEPRI, r1
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	4819      	ldr	r0, [pc, #100]	; (80046f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004690:	f7ff f9a4 	bl	80039dc <_PreparePacket>
 8004694:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800469a:	4b17      	ldr	r3, [pc, #92]	; (80046f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	61bb      	str	r3, [r7, #24]
 80046ac:	e00b      	b.n	80046c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	1c59      	adds	r1, r3, #1
 80046b6:	61f9      	str	r1, [r7, #28]
 80046b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046bc:	b2d2      	uxtb	r2, r2
 80046be:	701a      	strb	r2, [r3, #0]
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	09db      	lsrs	r3, r3, #7
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	2b7f      	cmp	r3, #127	; 0x7f
 80046ca:	d8f0      	bhi.n	80046ae <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	61fa      	str	r2, [r7, #28]
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80046dc:	2206      	movs	r2, #6
 80046de:	68f9      	ldr	r1, [r7, #12]
 80046e0:	6938      	ldr	r0, [r7, #16]
 80046e2:	f7ff fa6d 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f383 8811 	msr	BASEPRI, r3
}
 80046ec:	bf00      	nop
 80046ee:	3720      	adds	r7, #32
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20013248 	.word	0x20013248
 80046f8:	20013218 	.word	0x20013218

080046fc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08c      	sub	sp, #48	; 0x30
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004706:	4b3b      	ldr	r3, [pc, #236]	; (80047f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d06d      	beq.n	80047ea <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800470e:	4b39      	ldr	r3, [pc, #228]	; (80047f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004714:	2300      	movs	r3, #0
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28
 8004718:	e008      	b.n	800472c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	3301      	adds	r3, #1
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004730:	429a      	cmp	r2, r3
 8004732:	d3f2      	bcc.n	800471a <SEGGER_SYSVIEW_SendModule+0x1e>
 8004734:	e000      	b.n	8004738 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004736:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d055      	beq.n	80047ea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800473e:	f3ef 8311 	mrs	r3, BASEPRI
 8004742:	f04f 0120 	mov.w	r1, #32
 8004746:	f381 8811 	msr	BASEPRI, r1
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	482a      	ldr	r0, [pc, #168]	; (80047f8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800474e:	f7ff f945 	bl	80039dc <_PreparePacket>
 8004752:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	623b      	str	r3, [r7, #32]
 8004760:	e00b      	b.n	800477a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	1c59      	adds	r1, r3, #1
 800476a:	6279      	str	r1, [r7, #36]	; 0x24
 800476c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	09db      	lsrs	r3, r3, #7
 8004778:	623b      	str	r3, [r7, #32]
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	2b7f      	cmp	r3, #127	; 0x7f
 800477e:	d8f0      	bhi.n	8004762 <SEGGER_SYSVIEW_SendModule+0x66>
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	627a      	str	r2, [r7, #36]	; 0x24
 8004786:	6a3a      	ldr	r2, [r7, #32]
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	e00b      	b.n	80047b4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	1c59      	adds	r1, r3, #1
 80047a4:	61f9      	str	r1, [r7, #28]
 80047a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047aa:	b2d2      	uxtb	r2, r2
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	09db      	lsrs	r3, r3, #7
 80047b2:	61bb      	str	r3, [r7, #24]
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	2b7f      	cmp	r3, #127	; 0x7f
 80047b8:	d8f0      	bhi.n	800479c <SEGGER_SYSVIEW_SendModule+0xa0>
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	61fa      	str	r2, [r7, #28]
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2280      	movs	r2, #128	; 0x80
 80047d0:	4619      	mov	r1, r3
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f7ff f8b2 	bl	800393c <_EncodeStr>
 80047d8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80047da:	2216      	movs	r2, #22
 80047dc:	68f9      	ldr	r1, [r7, #12]
 80047de:	6938      	ldr	r0, [r7, #16]
 80047e0:	f7ff f9ee 	bl	8003bc0 <_SendPacket>
      RECORD_END();
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80047ea:	bf00      	nop
 80047ec:	3730      	adds	r7, #48	; 0x30
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20013240 	.word	0x20013240
 80047f8:	20013248 	.word	0x20013248

080047fc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004802:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00f      	beq.n	800482a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800480a:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f2      	bne.n	8004810 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20013240 	.word	0x20013240

08004838 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800483e:	f3ef 8311 	mrs	r3, BASEPRI
 8004842:	f04f 0120 	mov.w	r1, #32
 8004846:	f381 8811 	msr	BASEPRI, r1
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	4817      	ldr	r0, [pc, #92]	; (80048ac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800484e:	f7ff f8c5 	bl	80039dc <_PreparePacket>
 8004852:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	e00b      	b.n	800487c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	b2da      	uxtb	r2, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	1c59      	adds	r1, r3, #1
 800486c:	6179      	str	r1, [r7, #20]
 800486e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004872:	b2d2      	uxtb	r2, r2
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	09db      	lsrs	r3, r3, #7
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b7f      	cmp	r3, #127	; 0x7f
 8004880:	d8f0      	bhi.n	8004864 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	617a      	str	r2, [r7, #20]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004892:	221b      	movs	r2, #27
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	68b8      	ldr	r0, [r7, #8]
 8004898:	f7ff f992 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f383 8811 	msr	BASEPRI, r3
}
 80048a2:	bf00      	nop
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20013248 	.word	0x20013248
 80048b0:	20013244 	.word	0x20013244

080048b4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	; 0x28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80048bc:	f3ef 8311 	mrs	r3, BASEPRI
 80048c0:	f04f 0120 	mov.w	r1, #32
 80048c4:	f381 8811 	msr	BASEPRI, r1
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	4827      	ldr	r0, [pc, #156]	; (8004968 <SEGGER_SYSVIEW_Warn+0xb4>)
 80048cc:	f7ff f886 	bl	80039dc <_PreparePacket>
 80048d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80048d2:	2280      	movs	r2, #128	; 0x80
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	6938      	ldr	r0, [r7, #16]
 80048d8:	f7ff f830 	bl	800393c <_EncodeStr>
 80048dc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
 80048e2:	2301      	movs	r3, #1
 80048e4:	623b      	str	r3, [r7, #32]
 80048e6:	e00b      	b.n	8004900 <SEGGER_SYSVIEW_Warn+0x4c>
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	1c59      	adds	r1, r3, #1
 80048f0:	6279      	str	r1, [r7, #36]	; 0x24
 80048f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	09db      	lsrs	r3, r3, #7
 80048fe:	623b      	str	r3, [r7, #32]
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	2b7f      	cmp	r3, #127	; 0x7f
 8004904:	d8f0      	bhi.n	80048e8 <SEGGER_SYSVIEW_Warn+0x34>
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	627a      	str	r2, [r7, #36]	; 0x24
 800490c:	6a3a      	ldr	r2, [r7, #32]
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	61fb      	str	r3, [r7, #28]
 800491a:	2300      	movs	r3, #0
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	e00b      	b.n	8004938 <SEGGER_SYSVIEW_Warn+0x84>
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	b2da      	uxtb	r2, r3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	1c59      	adds	r1, r3, #1
 8004928:	61f9      	str	r1, [r7, #28]
 800492a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	09db      	lsrs	r3, r3, #7
 8004936:	61bb      	str	r3, [r7, #24]
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2b7f      	cmp	r3, #127	; 0x7f
 800493c:	d8f0      	bhi.n	8004920 <SEGGER_SYSVIEW_Warn+0x6c>
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	61fa      	str	r2, [r7, #28]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800494e:	221a      	movs	r2, #26
 8004950:	68f9      	ldr	r1, [r7, #12]
 8004952:	6938      	ldr	r0, [r7, #16]
 8004954:	f7ff f934 	bl	8003bc0 <_SendPacket>
  RECORD_END();
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f383 8811 	msr	BASEPRI, r3
}
 800495e:	bf00      	nop
 8004960:	3728      	adds	r7, #40	; 0x28
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20013248 	.word	0x20013248

0800496c <__libc_init_array>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	4d0d      	ldr	r5, [pc, #52]	; (80049a4 <__libc_init_array+0x38>)
 8004970:	4c0d      	ldr	r4, [pc, #52]	; (80049a8 <__libc_init_array+0x3c>)
 8004972:	1b64      	subs	r4, r4, r5
 8004974:	10a4      	asrs	r4, r4, #2
 8004976:	2600      	movs	r6, #0
 8004978:	42a6      	cmp	r6, r4
 800497a:	d109      	bne.n	8004990 <__libc_init_array+0x24>
 800497c:	4d0b      	ldr	r5, [pc, #44]	; (80049ac <__libc_init_array+0x40>)
 800497e:	4c0c      	ldr	r4, [pc, #48]	; (80049b0 <__libc_init_array+0x44>)
 8004980:	f000 f83c 	bl	80049fc <_init>
 8004984:	1b64      	subs	r4, r4, r5
 8004986:	10a4      	asrs	r4, r4, #2
 8004988:	2600      	movs	r6, #0
 800498a:	42a6      	cmp	r6, r4
 800498c:	d105      	bne.n	800499a <__libc_init_array+0x2e>
 800498e:	bd70      	pop	{r4, r5, r6, pc}
 8004990:	f855 3b04 	ldr.w	r3, [r5], #4
 8004994:	4798      	blx	r3
 8004996:	3601      	adds	r6, #1
 8004998:	e7ee      	b.n	8004978 <__libc_init_array+0xc>
 800499a:	f855 3b04 	ldr.w	r3, [r5], #4
 800499e:	4798      	blx	r3
 80049a0:	3601      	adds	r6, #1
 80049a2:	e7f2      	b.n	800498a <__libc_init_array+0x1e>
 80049a4:	08004adc 	.word	0x08004adc
 80049a8:	08004adc 	.word	0x08004adc
 80049ac:	08004adc 	.word	0x08004adc
 80049b0:	08004ae0 	.word	0x08004ae0

080049b4 <memcmp>:
 80049b4:	b530      	push	{r4, r5, lr}
 80049b6:	3901      	subs	r1, #1
 80049b8:	2400      	movs	r4, #0
 80049ba:	42a2      	cmp	r2, r4
 80049bc:	d101      	bne.n	80049c2 <memcmp+0xe>
 80049be:	2000      	movs	r0, #0
 80049c0:	e005      	b.n	80049ce <memcmp+0x1a>
 80049c2:	5d03      	ldrb	r3, [r0, r4]
 80049c4:	3401      	adds	r4, #1
 80049c6:	5d0d      	ldrb	r5, [r1, r4]
 80049c8:	42ab      	cmp	r3, r5
 80049ca:	d0f6      	beq.n	80049ba <memcmp+0x6>
 80049cc:	1b58      	subs	r0, r3, r5
 80049ce:	bd30      	pop	{r4, r5, pc}

080049d0 <memcpy>:
 80049d0:	440a      	add	r2, r1
 80049d2:	4291      	cmp	r1, r2
 80049d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049d8:	d100      	bne.n	80049dc <memcpy+0xc>
 80049da:	4770      	bx	lr
 80049dc:	b510      	push	{r4, lr}
 80049de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049e6:	4291      	cmp	r1, r2
 80049e8:	d1f9      	bne.n	80049de <memcpy+0xe>
 80049ea:	bd10      	pop	{r4, pc}

080049ec <memset>:
 80049ec:	4402      	add	r2, r0
 80049ee:	4603      	mov	r3, r0
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d100      	bne.n	80049f6 <memset+0xa>
 80049f4:	4770      	bx	lr
 80049f6:	f803 1b01 	strb.w	r1, [r3], #1
 80049fa:	e7f9      	b.n	80049f0 <memset+0x4>

080049fc <_init>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr

08004a08 <_fini>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	bf00      	nop
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr
