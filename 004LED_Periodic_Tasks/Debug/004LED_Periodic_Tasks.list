
004LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005200  08005200  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005200  08005200  00015200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005208  08005208  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005208  08005208  00015208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800520c  0800520c  0001520c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014414  20000014  08005224  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014428  08005224  00024428  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017070  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f47  00000000  00000000  000370b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  0003a000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  0003b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023994  00000000  00000000  0003c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f0a  00000000  00000000  0005fb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbb72  00000000  00000000  00074a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001505e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004940  00000000  00000000  0015063c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080050cc 	.word	0x080050cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	080050cc 	.word	0x080050cc

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20014380 	.word	0x20014380

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
static void led1_handler(void* parameters);
static void led2_handler(void* parameters);
static void led3_handler(void* parameters);

int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af02      	add	r7, sp, #8
	TaskHandle_t led1_handle;
	TaskHandle_t led2_handle;
	TaskHandle_t led3_handle;
	BaseType_t status;

	HAL_Init();
 80005a2:	f000 faad 	bl	8000b00 <HAL_Init>

	SystemClock_Config();
 80005a6:	f000 f869 	bl	800067c <SystemClock_Config>

	MX_GPIO_Init();
 80005aa:	f000 f8d5 	bl	8000758 <MX_GPIO_Init>

	/* Enable the CYCCNT counter */
	DWT_CTRL |= ( 1 << 0);
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <main+0xc4>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <main+0xc4>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 80005ba:	f003 f923 	bl	8003804 <SEGGER_SYSVIEW_Conf>

	/* Task 1 creation */
	status = xTaskCreate(led1_handler, "LED1_task", 200, NULL, 2, &led1_handle);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	2302      	movs	r3, #2
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2300      	movs	r3, #0
 80005ca:	22c8      	movs	r2, #200	; 0xc8
 80005cc:	4925      	ldr	r1, [pc, #148]	; (8000664 <main+0xc8>)
 80005ce:	4826      	ldr	r0, [pc, #152]	; (8000668 <main+0xcc>)
 80005d0:	f001 fe48 	bl	8002264 <xTaskCreate>
 80005d4:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 80005d6:	69fb      	ldr	r3, [r7, #28]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d00a      	beq.n	80005f2 <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e0:	f383 8811 	msr	BASEPRI, r3
 80005e4:	f3bf 8f6f 	isb	sy
 80005e8:	f3bf 8f4f 	dsb	sy
 80005ec:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ee:	bf00      	nop
 80005f0:	e7fe      	b.n	80005f0 <main+0x54>

	/* Task 2 creation */
	status = xTaskCreate(led2_handler, "LED2_task", 200, NULL, 2, &led2_handle);
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2302      	movs	r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	22c8      	movs	r2, #200	; 0xc8
 8000600:	491a      	ldr	r1, [pc, #104]	; (800066c <main+0xd0>)
 8000602:	481b      	ldr	r0, [pc, #108]	; (8000670 <main+0xd4>)
 8000604:	f001 fe2e 	bl	8002264 <xTaskCreate>
 8000608:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00a      	beq.n	8000626 <main+0x8a>
        __asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	617b      	str	r3, [r7, #20]
    }
 8000622:	bf00      	nop
 8000624:	e7fe      	b.n	8000624 <main+0x88>

	/* Task 3 creation */
	status = xTaskCreate(led3_handler, "LED3_task", 200, NULL, 2, &led3_handle);
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2302      	movs	r3, #2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	22c8      	movs	r2, #200	; 0xc8
 8000632:	4910      	ldr	r1, [pc, #64]	; (8000674 <main+0xd8>)
 8000634:	4810      	ldr	r0, [pc, #64]	; (8000678 <main+0xdc>)
 8000636:	f001 fe15 	bl	8002264 <xTaskCreate>
 800063a:	61f8      	str	r0, [r7, #28]
	configASSERT(status == pdPASS);
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d00a      	beq.n	8000658 <main+0xbc>
        __asm volatile
 8000642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000646:	f383 8811 	msr	BASEPRI, r3
 800064a:	f3bf 8f6f 	isb	sy
 800064e:	f3bf 8f4f 	dsb	sy
 8000652:	613b      	str	r3, [r7, #16]
    }
 8000654:	bf00      	nop
 8000656:	e7fe      	b.n	8000656 <main+0xba>

	/* Start the scheduler */
	vTaskStartScheduler();
 8000658:	f002 f820 	bl	800269c <vTaskStartScheduler>

	while (1)
 800065c:	e7fe      	b.n	800065c <main+0xc0>
 800065e:	bf00      	nop
 8000660:	e0001000 	.word	0xe0001000
 8000664:	080050e4 	.word	0x080050e4
 8000668:	08000891 	.word	0x08000891
 800066c:	080050f0 	.word	0x080050f0
 8000670:	080008bd 	.word	0x080008bd
 8000674:	080050fc 	.word	0x080050fc
 8000678:	080008e9 	.word	0x080008e9

0800067c <SystemClock_Config>:
	}

}

void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	2234      	movs	r2, #52	; 0x34
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fd16 	bl	80050bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <SystemClock_Config+0xd4>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a29      	ldr	r2, [pc, #164]	; (8000750 <SystemClock_Config+0xd4>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b27      	ldr	r3, [pc, #156]	; (8000750 <SystemClock_Config+0xd4>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006bc:	2300      	movs	r3, #0
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4b24      	ldr	r3, [pc, #144]	; (8000754 <SystemClock_Config+0xd8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c8:	4a22      	ldr	r2, [pc, #136]	; (8000754 <SystemClock_Config+0xd8>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b20      	ldr	r3, [pc, #128]	; (8000754 <SystemClock_Config+0xd8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006f0:	2310      	movs	r3, #16
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000702:	2302      	movs	r3, #2
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	4618      	mov	r0, r3
 800070c:	f000 ffce 	bl	80016ac <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000716:	f000 f90f 	bl	8000938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2102      	movs	r1, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fcce 	bl	80010d8 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000742:	f000 f8f9 	bl	8000938 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	; 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b44      	ldr	r3, [pc, #272]	; (8000884 <MX_GPIO_Init+0x12c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a43      	ldr	r2, [pc, #268]	; (8000884 <MX_GPIO_Init+0x12c>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b41      	ldr	r3, [pc, #260]	; (8000884 <MX_GPIO_Init+0x12c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b3d      	ldr	r3, [pc, #244]	; (8000884 <MX_GPIO_Init+0x12c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a3c      	ldr	r2, [pc, #240]	; (8000884 <MX_GPIO_Init+0x12c>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <MX_GPIO_Init+0x12c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b36      	ldr	r3, [pc, #216]	; (8000884 <MX_GPIO_Init+0x12c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a35      	ldr	r2, [pc, #212]	; (8000884 <MX_GPIO_Init+0x12c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b33      	ldr	r3, [pc, #204]	; (8000884 <MX_GPIO_Init+0x12c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b2f      	ldr	r3, [pc, #188]	; (8000884 <MX_GPIO_Init+0x12c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a2e      	ldr	r2, [pc, #184]	; (8000884 <MX_GPIO_Init+0x12c>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <MX_GPIO_Init+0x12c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2120      	movs	r1, #32
 80007e2:	4829      	ldr	r0, [pc, #164]	; (8000888 <MX_GPIO_Init+0x130>)
 80007e4:	f000 fc44 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	4823      	ldr	r0, [pc, #140]	; (800088c <MX_GPIO_Init+0x134>)
 8000800:	f000 faa2 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000804:	230c      	movs	r3, #12
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000808:	2302      	movs	r3, #2
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000810:	2303      	movs	r3, #3
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000814:	2307      	movs	r3, #7
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	481a      	ldr	r0, [pc, #104]	; (8000888 <MX_GPIO_Init+0x130>)
 8000820:	f000 fa92 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000824:	2320      	movs	r3, #32
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4619      	mov	r1, r3
 800083a:	4813      	ldr	r0, [pc, #76]	; (8000888 <MX_GPIO_Init+0x130>)
 800083c:	f000 fa84 	bl	8000d48 <HAL_GPIO_Init>

  /* Configure LED Tasks GPIO Pins */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000840:	2301      	movs	r3, #1
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	480c      	ldr	r0, [pc, #48]	; (8000888 <MX_GPIO_Init+0x130>)
 8000858:	f000 fa76 	bl	8000d48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800085c:	2302      	movs	r3, #2
 800085e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4808      	ldr	r0, [pc, #32]	; (8000888 <MX_GPIO_Init+0x130>)
 8000868:	f000 fa6e 	bl	8000d48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800086c:	2310      	movs	r3, #16
 800086e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_GPIO_Init+0x130>)
 8000878:	f000 fa66 	bl	8000d48 <HAL_GPIO_Init>

}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40020000 	.word	0x40020000
 800088c:	40020800 	.word	0x40020800

08000890 <led1_handler>:

static void led1_handler(void* parameters)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000898:	f002 f86a 	bl	8002970 <xTaskGetTickCount>
 800089c:	4603      	mov	r3, r0
 800089e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80008a0:	2101      	movs	r1, #1
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <led1_handler+0x28>)
 80008a4:	f000 fbfd 	bl	80010a2 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000));
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 fe71 	bl	8002598 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80008b6:	e7f3      	b.n	80008a0 <led1_handler+0x10>
 80008b8:	40020000 	.word	0x40020000

080008bc <led2_handler>:
	}
}

static void led2_handler(void* parameters)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80008c4:	f002 f854 	bl	8002970 <xTaskGetTickCount>
 80008c8:	4603      	mov	r3, r0
 80008ca:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80008cc:	2102      	movs	r1, #2
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <led2_handler+0x28>)
 80008d0:	f000 fbe7 	bl	80010a2 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(800));
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 fe5b 	bl	8002598 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80008e2:	e7f3      	b.n	80008cc <led2_handler+0x10>
 80008e4:	40020000 	.word	0x40020000

080008e8 <led3_handler>:
	}
}

static void led3_handler(void* parameters)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80008f0:	f002 f83e 	bl	8002970 <xTaskGetTickCount>
 80008f4:	4603      	mov	r3, r0
 80008f6:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80008f8:	2110      	movs	r1, #16
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <led3_handler+0x28>)
 80008fc:	f000 fbd1 	bl	80010a2 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(400));
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000908:	4618      	mov	r0, r3
 800090a:	f001 fe45 	bl	8002598 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 800090e:	e7f3      	b.n	80008f8 <led3_handler+0x10>
 8000910:	40020000 	.word	0x40020000

08000914 <HAL_TIM_PeriodElapsedCallback>:
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000926:	f000 f90d 	bl	8000b44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40001000 	.word	0x40001000

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x8>
	...

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000958:	6453      	str	r3, [r2, #68]	; 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	; (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	; 0x30
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	2036      	movs	r0, #54	; 0x36
 80009aa:	f000 f9a3 	bl	8000cf4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009ae:	2036      	movs	r0, #54	; 0x36
 80009b0:	f000 f9bc 	bl	8000d2c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <HAL_InitTick+0xa4>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <HAL_InitTick+0xa4>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6413      	str	r3, [r2, #64]	; 0x40
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <HAL_InitTick+0xa4>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	f003 0310 	and.w	r3, r3, #16
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009d0:	f107 0210 	add.w	r2, r7, #16
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4611      	mov	r1, r2
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fc82 	bl	80012e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009e0:	f000 fc6c 	bl	80012bc <HAL_RCC_GetPCLK1Freq>
 80009e4:	4603      	mov	r3, r0
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <HAL_InitTick+0xa8>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	0c9b      	lsrs	r3, r3, #18
 80009f4:	3b01      	subs	r3, #1
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_InitTick+0xac>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <HAL_InitTick+0xb0>)
 80009fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <HAL_InitTick+0xac>)
 8000a00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a04:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_InitTick+0xac>)
 8000a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_InitTick+0xac>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_InitTick+0xac>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a18:	4809      	ldr	r0, [pc, #36]	; (8000a40 <HAL_InitTick+0xac>)
 8000a1a:	f001 f8e5 	bl	8001be8 <HAL_TIM_Base_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d104      	bne.n	8000a2e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <HAL_InitTick+0xac>)
 8000a26:	f001 f939 	bl	8001c9c <HAL_TIM_Base_Start_IT>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3730      	adds	r7, #48	; 0x30
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	431bde83 	.word	0x431bde83
 8000a40:	20014334 	.word	0x20014334
 8000a44:	40001000 	.word	0x40001000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <TIM6_DAC_IRQHandler+0x10>)
 8000a7a:	f001 f97f 	bl	8001d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20014334 	.word	0x20014334

08000a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ab2:	490e      	ldr	r1, [pc, #56]	; (8000aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ac8:	4c0b      	ldr	r4, [pc, #44]	; (8000af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ad6:	f7ff ffd7 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f004 faaf 	bl	800503c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f7ff fd5d 	bl	800059c <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000af0:	08005210 	.word	0x08005210
  ldr r2, =_sbss
 8000af4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000af8:	20014428 	.word	0x20014428

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_Init+0x40>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_Init+0x40>)
 8000b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x40>)
 8000b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f8d8 	bl	8000cde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff ff30 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff ff06 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023c00 	.word	0x40023c00

08000b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x20>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x24>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_IncTick+0x24>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008
 8000b68:	2001437c 	.word	0x2001437c

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <HAL_GetTick+0x14>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	2001437c 	.word	0x2001437c

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db0b      	blt.n	8000c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f003 021f 	and.w	r2, r3, #31
 8000c00:	4907      	ldr	r1, [pc, #28]	; (8000c20 <__NVIC_EnableIRQ+0x38>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	095b      	lsrs	r3, r3, #5
 8000c08:	2001      	movs	r0, #1
 8000c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	; (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff4c 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d06:	f7ff ff61 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	68b9      	ldr	r1, [r7, #8]
 8000d10:	6978      	ldr	r0, [r7, #20]
 8000d12:	f7ff ffb1 	bl	8000c78 <NVIC_EncodePriority>
 8000d16:	4602      	mov	r2, r0
 8000d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff80 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff54 	bl	8000be8 <__NVIC_EnableIRQ>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	e165      	b.n	8001030 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d64:	2201      	movs	r2, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f040 8154 	bne.w	800102a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d005      	beq.n	8000d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d130      	bne.n	8000dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	f003 0201 	and.w	r2, r3, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d017      	beq.n	8000e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d123      	bne.n	8000e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	69b9      	ldr	r1, [r7, #24]
 8000e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0203 	and.w	r2, r3, #3
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80ae 	beq.w	800102a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b5d      	ldr	r3, [pc, #372]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a5c      	ldr	r2, [pc, #368]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b5a      	ldr	r3, [pc, #360]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eea:	4a58      	ldr	r2, [pc, #352]	; (800104c <HAL_GPIO_Init+0x304>)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <HAL_GPIO_Init+0x308>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d025      	beq.n	8000f62 <HAL_GPIO_Init+0x21a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4e      	ldr	r2, [pc, #312]	; (8001054 <HAL_GPIO_Init+0x30c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d01f      	beq.n	8000f5e <HAL_GPIO_Init+0x216>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4d      	ldr	r2, [pc, #308]	; (8001058 <HAL_GPIO_Init+0x310>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d019      	beq.n	8000f5a <HAL_GPIO_Init+0x212>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4c      	ldr	r2, [pc, #304]	; (800105c <HAL_GPIO_Init+0x314>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d013      	beq.n	8000f56 <HAL_GPIO_Init+0x20e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4b      	ldr	r2, [pc, #300]	; (8001060 <HAL_GPIO_Init+0x318>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00d      	beq.n	8000f52 <HAL_GPIO_Init+0x20a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4a      	ldr	r2, [pc, #296]	; (8001064 <HAL_GPIO_Init+0x31c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d007      	beq.n	8000f4e <HAL_GPIO_Init+0x206>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a49      	ldr	r2, [pc, #292]	; (8001068 <HAL_GPIO_Init+0x320>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_GPIO_Init+0x202>
 8000f46:	2306      	movs	r3, #6
 8000f48:	e00c      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	e00a      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f4e:	2305      	movs	r3, #5
 8000f50:	e008      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f52:	2304      	movs	r3, #4
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f56:	2303      	movs	r3, #3
 8000f58:	e004      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f62:	2300      	movs	r3, #0
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	f002 0203 	and.w	r2, r2, #3
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	4093      	lsls	r3, r2
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f74:	4935      	ldr	r1, [pc, #212]	; (800104c <HAL_GPIO_Init+0x304>)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f82:	4b3a      	ldr	r3, [pc, #232]	; (800106c <HAL_GPIO_Init+0x324>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fa6:	4a31      	ldr	r2, [pc, #196]	; (800106c <HAL_GPIO_Init+0x324>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fac:	4b2f      	ldr	r3, [pc, #188]	; (800106c <HAL_GPIO_Init+0x324>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fd0:	4a26      	ldr	r2, [pc, #152]	; (800106c <HAL_GPIO_Init+0x324>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <HAL_GPIO_Init+0x324>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	; (800106c <HAL_GPIO_Init+0x324>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <HAL_GPIO_Init+0x324>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001024:	4a11      	ldr	r2, [pc, #68]	; (800106c <HAL_GPIO_Init+0x324>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3301      	adds	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	f67f ae96 	bls.w	8000d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40013800 	.word	0x40013800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	40020800 	.word	0x40020800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40021000 	.word	0x40021000
 8001064:	40021400 	.word	0x40021400
 8001068:	40021800 	.word	0x40021800
 800106c:	40013c00 	.word	0x40013c00

08001070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800108c:	e003      	b.n	8001096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	619a      	str	r2, [r3, #24]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b085      	sub	sp, #20
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b4:	887a      	ldrh	r2, [r7, #2]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4013      	ands	r3, r2
 80010ba:	041a      	lsls	r2, r3, #16
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43d9      	mvns	r1, r3
 80010c0:	887b      	ldrh	r3, [r7, #2]
 80010c2:	400b      	ands	r3, r1
 80010c4:	431a      	orrs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	619a      	str	r2, [r3, #24]
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0cc      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010ec:	4b68      	ldr	r3, [pc, #416]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d90c      	bls.n	8001114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	4b65      	ldr	r3, [pc, #404]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001102:	4b63      	ldr	r3, [pc, #396]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d001      	beq.n	8001114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0b8      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d020      	beq.n	8001162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800112c:	4b59      	ldr	r3, [pc, #356]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4a58      	ldr	r2, [pc, #352]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001144:	4b53      	ldr	r3, [pc, #332]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4a52      	ldr	r2, [pc, #328]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800114e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001150:	4b50      	ldr	r3, [pc, #320]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	494d      	ldr	r1, [pc, #308]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	4313      	orrs	r3, r2
 8001160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d044      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d107      	bne.n	8001186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d119      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e07f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d003      	beq.n	8001196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001192:	2b03      	cmp	r3, #3
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001196:	4b3f      	ldr	r3, [pc, #252]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e06f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e067      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011b6:	4b37      	ldr	r3, [pc, #220]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f023 0203 	bic.w	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4934      	ldr	r1, [pc, #208]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c8:	f7ff fcd0 	bl	8000b6c <HAL_GetTick>
 80011cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d0:	f7ff fccc 	bl	8000b6c <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f241 3288 	movw	r2, #5000	; 0x1388
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e04f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e6:	4b2b      	ldr	r3, [pc, #172]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 020c 	and.w	r2, r3, #12
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d1eb      	bne.n	80011d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d20c      	bcs.n	8001220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d001      	beq.n	8001220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e032      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4916      	ldr	r1, [pc, #88]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	4313      	orrs	r3, r2
 800123c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800124a:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	490e      	ldr	r1, [pc, #56]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	4313      	orrs	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800125e:	f000 f873 	bl	8001348 <HAL_RCC_GetSysClockFreq>
 8001262:	4602      	mov	r2, r0
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	091b      	lsrs	r3, r3, #4
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	490a      	ldr	r1, [pc, #40]	; (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	5ccb      	ldrb	r3, [r1, r3]
 8001272:	fa22 f303 	lsr.w	r3, r2, r3
 8001276:	4a09      	ldr	r2, [pc, #36]	; (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_RCC_ClockConfig+0x1c8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fb88 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00
 8001294:	40023800 	.word	0x40023800
 8001298:	080051d4 	.word	0x080051d4
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000000 	.word	0x20000000

080012bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012c0:	f7ff fff0 	bl	80012a4 <HAL_RCC_GetHCLKFreq>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	0a9b      	lsrs	r3, r3, #10
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	4903      	ldr	r1, [pc, #12]	; (80012e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012d2:	5ccb      	ldrb	r3, [r1, r3]
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012d8:	4618      	mov	r0, r3
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	080051e4 	.word	0x080051e4

080012e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	220f      	movs	r2, #15
 80012f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_RCC_GetClockConfig+0x5c>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_RCC_GetClockConfig+0x5c>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_RCC_GetClockConfig+0x5c>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_RCC_GetClockConfig+0x5c>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001326:	4b07      	ldr	r3, [pc, #28]	; (8001344 <HAL_RCC_GetClockConfig+0x60>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 020f 	and.w	r2, r3, #15
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	601a      	str	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40023c00 	.word	0x40023c00

08001348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800134c:	b088      	sub	sp, #32
 800134e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001364:	4bce      	ldr	r3, [pc, #824]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b0c      	cmp	r3, #12
 800136e:	f200 818d 	bhi.w	800168c <HAL_RCC_GetSysClockFreq+0x344>
 8001372:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <HAL_RCC_GetSysClockFreq+0x30>)
 8001374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001378:	080013ad 	.word	0x080013ad
 800137c:	0800168d 	.word	0x0800168d
 8001380:	0800168d 	.word	0x0800168d
 8001384:	0800168d 	.word	0x0800168d
 8001388:	080013b3 	.word	0x080013b3
 800138c:	0800168d 	.word	0x0800168d
 8001390:	0800168d 	.word	0x0800168d
 8001394:	0800168d 	.word	0x0800168d
 8001398:	080013b9 	.word	0x080013b9
 800139c:	0800168d 	.word	0x0800168d
 80013a0:	0800168d 	.word	0x0800168d
 80013a4:	0800168d 	.word	0x0800168d
 80013a8:	0800152d 	.word	0x0800152d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013ac:	4bbd      	ldr	r3, [pc, #756]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013ae:	61bb      	str	r3, [r7, #24]
       break;
 80013b0:	e16f      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013b2:	4bbd      	ldr	r3, [pc, #756]	; (80016a8 <HAL_RCC_GetSysClockFreq+0x360>)
 80013b4:	61bb      	str	r3, [r7, #24]
      break;
 80013b6:	e16c      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013b8:	4bb9      	ldr	r3, [pc, #740]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013c0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013c2:	4bb7      	ldr	r3, [pc, #732]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d053      	beq.n	8001476 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ce:	4bb4      	ldr	r3, [pc, #720]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	099b      	lsrs	r3, r3, #6
 80013d4:	461a      	mov	r2, r3
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80013de:	f04f 0100 	mov.w	r1, #0
 80013e2:	ea02 0400 	and.w	r4, r2, r0
 80013e6:	603c      	str	r4, [r7, #0]
 80013e8:	400b      	ands	r3, r1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013f0:	4620      	mov	r0, r4
 80013f2:	4629      	mov	r1, r5
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	014b      	lsls	r3, r1, #5
 80013fe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001402:	0142      	lsls	r2, r0, #5
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	4623      	mov	r3, r4
 800140a:	1ac0      	subs	r0, r0, r3
 800140c:	462b      	mov	r3, r5
 800140e:	eb61 0103 	sbc.w	r1, r1, r3
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	018b      	lsls	r3, r1, #6
 800141c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001420:	0182      	lsls	r2, r0, #6
 8001422:	1a12      	subs	r2, r2, r0
 8001424:	eb63 0301 	sbc.w	r3, r3, r1
 8001428:	f04f 0000 	mov.w	r0, #0
 800142c:	f04f 0100 	mov.w	r1, #0
 8001430:	00d9      	lsls	r1, r3, #3
 8001432:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001436:	00d0      	lsls	r0, r2, #3
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4621      	mov	r1, r4
 800143e:	1852      	adds	r2, r2, r1
 8001440:	4629      	mov	r1, r5
 8001442:	eb43 0101 	adc.w	r1, r3, r1
 8001446:	460b      	mov	r3, r1
 8001448:	f04f 0000 	mov.w	r0, #0
 800144c:	f04f 0100 	mov.w	r1, #0
 8001450:	0259      	lsls	r1, r3, #9
 8001452:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001456:	0250      	lsls	r0, r2, #9
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	461a      	mov	r2, r3
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	f7fe ff1c 	bl	80002a4 <__aeabi_uldivmod>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4613      	mov	r3, r2
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	e04c      	b.n	8001510 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001476:	4b8a      	ldr	r3, [pc, #552]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	099b      	lsrs	r3, r3, #6
 800147c:	461a      	mov	r2, r3
 800147e:	f04f 0300 	mov.w	r3, #0
 8001482:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001486:	f04f 0100 	mov.w	r1, #0
 800148a:	ea02 0a00 	and.w	sl, r2, r0
 800148e:	ea03 0b01 	and.w	fp, r3, r1
 8001492:	4650      	mov	r0, sl
 8001494:	4659      	mov	r1, fp
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	014b      	lsls	r3, r1, #5
 80014a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80014a4:	0142      	lsls	r2, r0, #5
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	ebb0 000a 	subs.w	r0, r0, sl
 80014ae:	eb61 010b 	sbc.w	r1, r1, fp
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	018b      	lsls	r3, r1, #6
 80014bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80014c0:	0182      	lsls	r2, r0, #6
 80014c2:	1a12      	subs	r2, r2, r0
 80014c4:	eb63 0301 	sbc.w	r3, r3, r1
 80014c8:	f04f 0000 	mov.w	r0, #0
 80014cc:	f04f 0100 	mov.w	r1, #0
 80014d0:	00d9      	lsls	r1, r3, #3
 80014d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80014d6:	00d0      	lsls	r0, r2, #3
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	eb12 020a 	adds.w	r2, r2, sl
 80014e0:	eb43 030b 	adc.w	r3, r3, fp
 80014e4:	f04f 0000 	mov.w	r0, #0
 80014e8:	f04f 0100 	mov.w	r1, #0
 80014ec:	0299      	lsls	r1, r3, #10
 80014ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80014f2:	0290      	lsls	r0, r2, #10
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	461a      	mov	r2, r3
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	f7fe fece 	bl	80002a4 <__aeabi_uldivmod>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4613      	mov	r3, r2
 800150e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001510:	4b63      	ldr	r3, [pc, #396]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	0c1b      	lsrs	r3, r3, #16
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	3301      	adds	r3, #1
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	61bb      	str	r3, [r7, #24]
      break;
 800152a:	e0b2      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800152c:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001534:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001536:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d04d      	beq.n	80015de <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001542:	4b57      	ldr	r3, [pc, #348]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	099b      	lsrs	r3, r3, #6
 8001548:	461a      	mov	r2, r3
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001552:	f04f 0100 	mov.w	r1, #0
 8001556:	ea02 0800 	and.w	r8, r2, r0
 800155a:	ea03 0901 	and.w	r9, r3, r1
 800155e:	4640      	mov	r0, r8
 8001560:	4649      	mov	r1, r9
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	014b      	lsls	r3, r1, #5
 800156c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001570:	0142      	lsls	r2, r0, #5
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	ebb0 0008 	subs.w	r0, r0, r8
 800157a:	eb61 0109 	sbc.w	r1, r1, r9
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	018b      	lsls	r3, r1, #6
 8001588:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800158c:	0182      	lsls	r2, r0, #6
 800158e:	1a12      	subs	r2, r2, r0
 8001590:	eb63 0301 	sbc.w	r3, r3, r1
 8001594:	f04f 0000 	mov.w	r0, #0
 8001598:	f04f 0100 	mov.w	r1, #0
 800159c:	00d9      	lsls	r1, r3, #3
 800159e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015a2:	00d0      	lsls	r0, r2, #3
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	eb12 0208 	adds.w	r2, r2, r8
 80015ac:	eb43 0309 	adc.w	r3, r3, r9
 80015b0:	f04f 0000 	mov.w	r0, #0
 80015b4:	f04f 0100 	mov.w	r1, #0
 80015b8:	0259      	lsls	r1, r3, #9
 80015ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80015be:	0250      	lsls	r0, r2, #9
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	461a      	mov	r2, r3
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	f7fe fe68 	bl	80002a4 <__aeabi_uldivmod>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4613      	mov	r3, r2
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	e04a      	b.n	8001674 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	099b      	lsrs	r3, r3, #6
 80015e4:	461a      	mov	r2, r3
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015ee:	f04f 0100 	mov.w	r1, #0
 80015f2:	ea02 0400 	and.w	r4, r2, r0
 80015f6:	ea03 0501 	and.w	r5, r3, r1
 80015fa:	4620      	mov	r0, r4
 80015fc:	4629      	mov	r1, r5
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	f04f 0300 	mov.w	r3, #0
 8001606:	014b      	lsls	r3, r1, #5
 8001608:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800160c:	0142      	lsls	r2, r0, #5
 800160e:	4610      	mov	r0, r2
 8001610:	4619      	mov	r1, r3
 8001612:	1b00      	subs	r0, r0, r4
 8001614:	eb61 0105 	sbc.w	r1, r1, r5
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	018b      	lsls	r3, r1, #6
 8001622:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001626:	0182      	lsls	r2, r0, #6
 8001628:	1a12      	subs	r2, r2, r0
 800162a:	eb63 0301 	sbc.w	r3, r3, r1
 800162e:	f04f 0000 	mov.w	r0, #0
 8001632:	f04f 0100 	mov.w	r1, #0
 8001636:	00d9      	lsls	r1, r3, #3
 8001638:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800163c:	00d0      	lsls	r0, r2, #3
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	1912      	adds	r2, r2, r4
 8001644:	eb45 0303 	adc.w	r3, r5, r3
 8001648:	f04f 0000 	mov.w	r0, #0
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	0299      	lsls	r1, r3, #10
 8001652:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001656:	0290      	lsls	r0, r2, #10
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	461a      	mov	r2, r3
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	f7fe fe1c 	bl	80002a4 <__aeabi_uldivmod>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4613      	mov	r3, r2
 8001672:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	0f1b      	lsrs	r3, r3, #28
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	fbb2 f3f3 	udiv	r3, r2, r3
 8001688:	61bb      	str	r3, [r7, #24]
      break;
 800168a:	e002      	b.n	8001692 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800168e:	61bb      	str	r3, [r7, #24]
      break;
 8001690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001692:	69bb      	ldr	r3, [r7, #24]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800
 80016a4:	00f42400 	.word	0x00f42400
 80016a8:	007a1200 	.word	0x007a1200

080016ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e28d      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8083 	beq.w	80017d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016cc:	4b94      	ldr	r3, [pc, #592]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 030c 	and.w	r3, r3, #12
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d019      	beq.n	800170c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016d8:	4b91      	ldr	r3, [pc, #580]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d106      	bne.n	80016f2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016e4:	4b8e      	ldr	r3, [pc, #568]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016f0:	d00c      	beq.n	800170c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f2:	4b8b      	ldr	r3, [pc, #556]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d112      	bne.n	8001724 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fe:	4b88      	ldr	r3, [pc, #544]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001706:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800170a:	d10b      	bne.n	8001724 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	4b84      	ldr	r3, [pc, #528]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d05b      	beq.n	80017d0 <HAL_RCC_OscConfig+0x124>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d157      	bne.n	80017d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e25a      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172c:	d106      	bne.n	800173c <HAL_RCC_OscConfig+0x90>
 800172e:	4b7c      	ldr	r3, [pc, #496]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a7b      	ldr	r2, [pc, #492]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001738:	6013      	str	r3, [r2, #0]
 800173a:	e01d      	b.n	8001778 <HAL_RCC_OscConfig+0xcc>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0xb4>
 8001746:	4b76      	ldr	r3, [pc, #472]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a75      	ldr	r2, [pc, #468]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800174c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b73      	ldr	r3, [pc, #460]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a72      	ldr	r2, [pc, #456]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0xcc>
 8001760:	4b6f      	ldr	r3, [pc, #444]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a6e      	ldr	r2, [pc, #440]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b6c      	ldr	r3, [pc, #432]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6b      	ldr	r2, [pc, #428]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d013      	beq.n	80017a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001780:	f7ff f9f4 	bl	8000b6c <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff f9f0 	bl	8000b6c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e21f      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	4b61      	ldr	r3, [pc, #388]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0f0      	beq.n	8001788 <HAL_RCC_OscConfig+0xdc>
 80017a6:	e014      	b.n	80017d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff f9e0 	bl	8000b6c <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff f9dc 	bl	8000b6c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e20b      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c2:	4b57      	ldr	r3, [pc, #348]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x104>
 80017ce:	e000      	b.n	80017d2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d06f      	beq.n	80018be <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017de:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d017      	beq.n	800181a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017ea:	4b4d      	ldr	r3, [pc, #308]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d105      	bne.n	8001802 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017f6:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001802:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d11c      	bne.n	8001848 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180e:	4b44      	ldr	r3, [pc, #272]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d116      	bne.n	8001848 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d005      	beq.n	8001832 <HAL_RCC_OscConfig+0x186>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d001      	beq.n	8001832 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e1d3      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4937      	ldr	r1, [pc, #220]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	e03a      	b.n	80018be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d020      	beq.n	8001892 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001850:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_RCC_OscConfig+0x278>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff f989 	bl	8000b6c <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800185e:	f7ff f985 	bl	8000b6c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e1b4      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001870:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187c:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4925      	ldr	r1, [pc, #148]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 800188c:	4313      	orrs	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
 8001890:	e015      	b.n	80018be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x278>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff f968 	bl	8000b6c <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff f964 	bl	8000b6c <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e193      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d036      	beq.n	8001938 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d016      	beq.n	8001900 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_RCC_OscConfig+0x27c>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff f948 	bl	8000b6c <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff f944 	bl	8000b6c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e173      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_OscConfig+0x274>)
 80018f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x234>
 80018fe:	e01b      	b.n	8001938 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_RCC_OscConfig+0x27c>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001906:	f7ff f931 	bl	8000b6c <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190c:	e00e      	b.n	800192c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190e:	f7ff f92d 	bl	8000b6c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d907      	bls.n	800192c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e15c      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
 8001920:	40023800 	.word	0x40023800
 8001924:	42470000 	.word	0x42470000
 8001928:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192c:	4b8a      	ldr	r3, [pc, #552]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 800192e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1ea      	bne.n	800190e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 8097 	beq.w	8001a74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194a:	4b83      	ldr	r3, [pc, #524]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10f      	bne.n	8001976 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	4b7f      	ldr	r3, [pc, #508]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a7e      	ldr	r2, [pc, #504]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b7c      	ldr	r3, [pc, #496]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001972:	2301      	movs	r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	4b79      	ldr	r3, [pc, #484]	; (8001b5c <HAL_RCC_OscConfig+0x4b0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d118      	bne.n	80019b4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001982:	4b76      	ldr	r3, [pc, #472]	; (8001b5c <HAL_RCC_OscConfig+0x4b0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a75      	ldr	r2, [pc, #468]	; (8001b5c <HAL_RCC_OscConfig+0x4b0>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198e:	f7ff f8ed 	bl	8000b6c <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001996:	f7ff f8e9 	bl	8000b6c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e118      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4b6c      	ldr	r3, [pc, #432]	; (8001b5c <HAL_RCC_OscConfig+0x4b0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x31e>
 80019bc:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a65      	ldr	r2, [pc, #404]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
 80019c8:	e01c      	b.n	8001a04 <HAL_RCC_OscConfig+0x358>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x340>
 80019d2:	4b61      	ldr	r3, [pc, #388]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d6:	4a60      	ldr	r2, [pc, #384]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	6713      	str	r3, [r2, #112]	; 0x70
 80019de:	4b5e      	ldr	r3, [pc, #376]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	4a5d      	ldr	r2, [pc, #372]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ea:	e00b      	b.n	8001a04 <HAL_RCC_OscConfig+0x358>
 80019ec:	4b5a      	ldr	r3, [pc, #360]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f0:	4a59      	ldr	r2, [pc, #356]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	6713      	str	r3, [r2, #112]	; 0x70
 80019f8:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fc:	4a56      	ldr	r2, [pc, #344]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 80019fe:	f023 0304 	bic.w	r3, r3, #4
 8001a02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d015      	beq.n	8001a38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f7ff f8ae 	bl	8000b6c <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a14:	f7ff f8aa 	bl	8000b6c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e0d7      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2a:	4b4b      	ldr	r3, [pc, #300]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0ee      	beq.n	8001a14 <HAL_RCC_OscConfig+0x368>
 8001a36:	e014      	b.n	8001a62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff f898 	bl	8000b6c <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a40:	f7ff f894 	bl	8000b6c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0c1      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a56:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1ee      	bne.n	8001a40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d105      	bne.n	8001a74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a68:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	4a3a      	ldr	r2, [pc, #232]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80ad 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a7e:	4b36      	ldr	r3, [pc, #216]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d060      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d145      	bne.n	8001b1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <HAL_RCC_OscConfig+0x4b4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f868 	bl	8000b6c <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff f864 	bl	8000b6c <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e093      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab2:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69da      	ldr	r2, [r3, #28]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	019b      	lsls	r3, r3, #6
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	085b      	lsrs	r3, r3, #1
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	041b      	lsls	r3, r3, #16
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	061b      	lsls	r3, r3, #24
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	071b      	lsls	r3, r3, #28
 8001aea:	491b      	ldr	r1, [pc, #108]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <HAL_RCC_OscConfig+0x4b4>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f839 	bl	8000b6c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff f835 	bl	8000b6c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e064      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b10:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x452>
 8001b1c:	e05c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_RCC_OscConfig+0x4b4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f822 	bl	8000b6c <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7ff f81e 	bl	8000b6c <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e04d      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_OscConfig+0x4ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x480>
 8001b4a:	e045      	b.n	8001bd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e040      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <HAL_RCC_OscConfig+0x538>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d030      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d129      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d122      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b94:	4013      	ands	r3, r2
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d119      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	085b      	lsrs	r3, r3, #1
 8001bac:	3b01      	subs	r3, #1
 8001bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800

08001be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e041      	b.n	8001c7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f839 	bl	8001c86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 f9d8 	bl	8001fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d001      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e04e      	b.n	8001d52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a23      	ldr	r2, [pc, #140]	; (8001d60 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d022      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cde:	d01d      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1f      	ldr	r2, [pc, #124]	; (8001d64 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d018      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a1e      	ldr	r2, [pc, #120]	; (8001d68 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1c      	ldr	r2, [pc, #112]	; (8001d6c <HAL_TIM_Base_Start_IT+0xd0>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00e      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d009      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d004      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d111      	bne.n	8001d40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d010      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3e:	e007      	b.n	8001d50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40010000 	.word	0x40010000
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40000800 	.word	0x40000800
 8001d6c:	40000c00 	.word	0x40000c00
 8001d70:	40010400 	.word	0x40010400
 8001d74:	40014000 	.word	0x40014000
 8001d78:	40001800 	.word	0x40001800

08001d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d122      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d11b      	bne.n	8001dd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0202 	mvn.w	r2, #2
 8001da8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8ee 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001dc4:	e005      	b.n	8001dd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f8e0 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f8f1 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d122      	bne.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11b      	bne.n	8001e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f06f 0204 	mvn.w	r2, #4
 8001dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2202      	movs	r2, #2
 8001e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f8c4 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001e18:	e005      	b.n	8001e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f8b6 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f8c7 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d122      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d11b      	bne.n	8001e80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0208 	mvn.w	r2, #8
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2204      	movs	r2, #4
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f89a 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f88c 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f89d 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d122      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0210 	mvn.w	r2, #16
 8001ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f870 	bl	8001fa0 <HAL_TIM_IC_CaptureCallback>
 8001ec0:	e005      	b.n	8001ece <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f862 	bl	8001f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f873 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d10e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d107      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0201 	mvn.w	r2, #1
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fd0a 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0a:	2b80      	cmp	r3, #128	; 0x80
 8001f0c:	d10e      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	2b80      	cmp	r3, #128	; 0x80
 8001f1a:	d107      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f902 	bl	8002130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f36:	2b40      	cmp	r3, #64	; 0x40
 8001f38:	d10e      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f44:	2b40      	cmp	r3, #64	; 0x40
 8001f46:	d107      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f838 	bl	8001fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b20      	cmp	r3, #32
 8001f64:	d10e      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d107      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0220 	mvn.w	r2, #32
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8cc 	bl	800211c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a40      	ldr	r2, [pc, #256]	; (80020f0 <TIM_Base_SetConfig+0x114>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffa:	d00f      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a3d      	ldr	r2, [pc, #244]	; (80020f4 <TIM_Base_SetConfig+0x118>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00b      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a3c      	ldr	r2, [pc, #240]	; (80020f8 <TIM_Base_SetConfig+0x11c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d007      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3b      	ldr	r2, [pc, #236]	; (80020fc <TIM_Base_SetConfig+0x120>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d003      	beq.n	800201c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3a      	ldr	r2, [pc, #232]	; (8002100 <TIM_Base_SetConfig+0x124>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d108      	bne.n	800202e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a2f      	ldr	r2, [pc, #188]	; (80020f0 <TIM_Base_SetConfig+0x114>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800203c:	d027      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a2c      	ldr	r2, [pc, #176]	; (80020f4 <TIM_Base_SetConfig+0x118>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d023      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a2b      	ldr	r2, [pc, #172]	; (80020f8 <TIM_Base_SetConfig+0x11c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01f      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2a      	ldr	r2, [pc, #168]	; (80020fc <TIM_Base_SetConfig+0x120>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a29      	ldr	r2, [pc, #164]	; (8002100 <TIM_Base_SetConfig+0x124>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d017      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a28      	ldr	r2, [pc, #160]	; (8002104 <TIM_Base_SetConfig+0x128>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a27      	ldr	r2, [pc, #156]	; (8002108 <TIM_Base_SetConfig+0x12c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00f      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a26      	ldr	r2, [pc, #152]	; (800210c <TIM_Base_SetConfig+0x130>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00b      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a25      	ldr	r2, [pc, #148]	; (8002110 <TIM_Base_SetConfig+0x134>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d007      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a24      	ldr	r2, [pc, #144]	; (8002114 <TIM_Base_SetConfig+0x138>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d003      	beq.n	800208e <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a23      	ldr	r2, [pc, #140]	; (8002118 <TIM_Base_SetConfig+0x13c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d108      	bne.n	80020a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <TIM_Base_SetConfig+0x114>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d003      	beq.n	80020d4 <TIM_Base_SetConfig+0xf8>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a0c      	ldr	r2, [pc, #48]	; (8002100 <TIM_Base_SetConfig+0x124>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d103      	bne.n	80020dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	615a      	str	r2, [r3, #20]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40010000 	.word	0x40010000
 80020f4:	40000400 	.word	0x40000400
 80020f8:	40000800 	.word	0x40000800
 80020fc:	40000c00 	.word	0x40000c00
 8002100:	40010400 	.word	0x40010400
 8002104:	40014000 	.word	0x40014000
 8002108:	40014400 	.word	0x40014400
 800210c:	40014800 	.word	0x40014800
 8002110:	40001800 	.word	0x40001800
 8002114:	40001c00 	.word	0x40001c00
 8002118:	40002000 	.word	0x40002000

0800211c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f103 0208 	add.w	r2, r3, #8
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f103 0208 	add.w	r2, r3, #8
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f103 0208 	add.w	r2, r3, #8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800219e:	b480      	push	{r7}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d103      	bne.n	80021be <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e00c      	b.n	80021d8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3308      	adds	r3, #8
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e002      	b.n	80021cc <vListInsert+0x2e>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d2f6      	bcs.n	80021c6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	601a      	str	r2, [r3, #0]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6892      	ldr	r2, [r2, #8]
 8002226:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6852      	ldr	r2, [r2, #4]
 8002230:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	d103      	bne.n	8002244 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	1e5a      	subs	r2, r3, #1
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002264:	b580      	push	{r7, lr}
 8002266:	b08c      	sub	sp, #48	; 0x30
 8002268:	af04      	add	r7, sp, #16
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	4613      	mov	r3, r2
 8002272:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4618      	mov	r0, r3
 800227a:	f001 f8b7 	bl	80033ec <pvPortMalloc>
 800227e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00e      	beq.n	80022a4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002286:	2058      	movs	r0, #88	; 0x58
 8002288:	f001 f8b0 	bl	80033ec <pvPortMalloc>
 800228c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	631a      	str	r2, [r3, #48]	; 0x30
 800229a:	e005      	b.n	80022a8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800229c:	6978      	ldr	r0, [r7, #20]
 800229e:	f001 f985 	bl	80035ac <vPortFree>
 80022a2:	e001      	b.n	80022a8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d013      	beq.n	80022d6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022ae:	88fa      	ldrh	r2, [r7, #6]
 80022b0:	2300      	movs	r3, #0
 80022b2:	9303      	str	r3, [sp, #12]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	9302      	str	r3, [sp, #8]
 80022b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f80e 	bl	80022e6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80022ca:	69f8      	ldr	r0, [r7, #28]
 80022cc:	f000 f8b0 	bl	8002430 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80022d0:	2301      	movs	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	e002      	b.n	80022dc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
 80022da:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80022dc:	69bb      	ldr	r3, [r7, #24]
    }
 80022de:	4618      	mov	r0, r3
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b088      	sub	sp, #32
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80022f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	461a      	mov	r2, r3
 80022fe:	21a5      	movs	r1, #165	; 0xa5
 8002300:	f002 fedc 	bl	80050bc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002306:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800230e:	3b01      	subs	r3, #1
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	f023 0307 	bic.w	r3, r3, #7
 800231c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	f3bf 8f6f 	isb	sy
 8002334:	f3bf 8f4f 	dsb	sy
 8002338:	617b      	str	r3, [r7, #20]
    }
 800233a:	bf00      	nop
 800233c:	e7fe      	b.n	800233c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01f      	beq.n	8002384 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	e012      	b.n	8002370 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	4413      	add	r3, r2
 8002350:	7819      	ldrb	r1, [r3, #0]
 8002352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	4413      	add	r3, r2
 8002358:	3334      	adds	r3, #52	; 0x34
 800235a:	460a      	mov	r2, r1
 800235c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	4413      	add	r3, r2
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3301      	adds	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b09      	cmp	r3, #9
 8002374:	d9e9      	bls.n	800234a <prvInitialiseNewTask+0x64>
 8002376:	e000      	b.n	800237a <prvInitialiseNewTask+0x94>
            {
                break;
 8002378:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002382:	e003      	b.n	800238c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	2b04      	cmp	r3, #4
 8002390:	d90a      	bls.n	80023a8 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002396:	f383 8811 	msr	BASEPRI, r3
 800239a:	f3bf 8f6f 	isb	sy
 800239e:	f3bf 8f4f 	dsb	sy
 80023a2:	613b      	str	r3, [r7, #16]
    }
 80023a4:	bf00      	nop
 80023a6:	e7fe      	b.n	80023a6 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d901      	bls.n	80023b2 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023ae:	2304      	movs	r3, #4
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80023b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023bc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	2200      	movs	r2, #0
 80023c2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	3304      	adds	r3, #4
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fedb 	bl	8002184 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	3318      	adds	r3, #24
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fed6 	bl	8002184 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023dc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	f1c3 0205 	rsb	r2, r3, #5
 80023e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80023ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f0:	3350      	adds	r3, #80	; 0x50
 80023f2:	2204      	movs	r2, #4
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f002 fe60 	bl	80050bc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80023fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fe:	3354      	adds	r3, #84	; 0x54
 8002400:	2201      	movs	r2, #1
 8002402:	2100      	movs	r1, #0
 8002404:	4618      	mov	r0, r3
 8002406:	f002 fe59 	bl	80050bc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	68f9      	ldr	r1, [r7, #12]
 800240e:	69b8      	ldr	r0, [r7, #24]
 8002410:	f000 fd92 	bl	8002f38 <pxPortInitialiseStack>
 8002414:	4602      	mov	r2, r0
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002418:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002424:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002426:	bf00      	nop
 8002428:	3720      	adds	r7, #32
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af02      	add	r7, sp, #8
 8002436:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002438:	f000 feae 	bl	8003198 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800243c:	4b4f      	ldr	r3, [pc, #316]	; (800257c <prvAddNewTaskToReadyList+0x14c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3301      	adds	r3, #1
 8002442:	4a4e      	ldr	r2, [pc, #312]	; (800257c <prvAddNewTaskToReadyList+0x14c>)
 8002444:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002446:	4b4e      	ldr	r3, [pc, #312]	; (8002580 <prvAddNewTaskToReadyList+0x150>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d109      	bne.n	8002462 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800244e:	4a4c      	ldr	r2, [pc, #304]	; (8002580 <prvAddNewTaskToReadyList+0x150>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002454:	4b49      	ldr	r3, [pc, #292]	; (800257c <prvAddNewTaskToReadyList+0x14c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d110      	bne.n	800247e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800245c:	f000 fc46 	bl	8002cec <prvInitialiseTaskLists>
 8002460:	e00d      	b.n	800247e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002462:	4b48      	ldr	r3, [pc, #288]	; (8002584 <prvAddNewTaskToReadyList+0x154>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800246a:	4b45      	ldr	r3, [pc, #276]	; (8002580 <prvAddNewTaskToReadyList+0x150>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	429a      	cmp	r2, r3
 8002476:	d802      	bhi.n	800247e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002478:	4a41      	ldr	r2, [pc, #260]	; (8002580 <prvAddNewTaskToReadyList+0x150>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800247e:	4b42      	ldr	r3, [pc, #264]	; (8002588 <prvAddNewTaskToReadyList+0x158>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	3301      	adds	r3, #1
 8002484:	4a40      	ldr	r2, [pc, #256]	; (8002588 <prvAddNewTaskToReadyList+0x158>)
 8002486:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002488:	4b3f      	ldr	r3, [pc, #252]	; (8002588 <prvAddNewTaskToReadyList+0x158>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d016      	beq.n	80024c4 <prvAddNewTaskToReadyList+0x94>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4618      	mov	r0, r3
 800249a:	f002 fb71 	bl	8004b80 <SEGGER_SYSVIEW_OnTaskCreate>
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	461d      	mov	r5, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461c      	mov	r4, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	1ae3      	subs	r3, r4, r3
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	462b      	mov	r3, r5
 80024c0:	f001 fa3a 	bl	8003938 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f002 fbde 	bl	8004c88 <SEGGER_SYSVIEW_OnTaskStartReady>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	2201      	movs	r2, #1
 80024d2:	409a      	lsls	r2, r3
 80024d4:	4b2d      	ldr	r3, [pc, #180]	; (800258c <prvAddNewTaskToReadyList+0x15c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4313      	orrs	r3, r2
 80024da:	4a2c      	ldr	r2, [pc, #176]	; (800258c <prvAddNewTaskToReadyList+0x15c>)
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e2:	492b      	ldr	r1, [pc, #172]	; (8002590 <prvAddNewTaskToReadyList+0x160>)
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	3304      	adds	r3, #4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	609a      	str	r2, [r3, #8]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	3204      	adds	r2, #4
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	1d1a      	adds	r2, r3, #4
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002518:	4613      	mov	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4a1b      	ldr	r2, [pc, #108]	; (8002590 <prvAddNewTaskToReadyList+0x160>)
 8002522:	441a      	add	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	615a      	str	r2, [r3, #20]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252c:	4918      	ldr	r1, [pc, #96]	; (8002590 <prvAddNewTaskToReadyList+0x160>)
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	1c59      	adds	r1, r3, #1
 800253c:	4814      	ldr	r0, [pc, #80]	; (8002590 <prvAddNewTaskToReadyList+0x160>)
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4403      	add	r3, r0
 8002548:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800254a:	f000 fe55 	bl	80031f8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <prvAddNewTaskToReadyList+0x154>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00e      	beq.n	8002574 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <prvAddNewTaskToReadyList+0x150>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	429a      	cmp	r2, r3
 8002562:	d207      	bcs.n	8002574 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <prvAddNewTaskToReadyList+0x164>)
 8002566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002574:	bf00      	nop
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bdb0      	pop	{r4, r5, r7, pc}
 800257c:	20000108 	.word	0x20000108
 8002580:	20000030 	.word	0x20000030
 8002584:	20000114 	.word	0x20000114
 8002588:	20000124 	.word	0x20000124
 800258c:	20000110 	.word	0x20000110
 8002590:	20000034 	.word	0x20000034
 8002594:	e000ed04 	.word	0xe000ed04

08002598 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	; 0x28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <xTaskDelayUntil+0x2a>
        __asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	617b      	str	r3, [r7, #20]
    }
 80025be:	bf00      	nop
 80025c0:	e7fe      	b.n	80025c0 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <xTaskDelayUntil+0x46>
        __asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	613b      	str	r3, [r7, #16]
    }
 80025da:	bf00      	nop
 80025dc:	e7fe      	b.n	80025dc <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80025de:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <xTaskDelayUntil+0xf8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <xTaskDelayUntil+0x64>
        __asm volatile
 80025e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	60fb      	str	r3, [r7, #12]
    }
 80025f8:	bf00      	nop
 80025fa:	e7fe      	b.n	80025fa <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80025fc:	f000 f8aa 	bl	8002754 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002600:	4b24      	ldr	r3, [pc, #144]	; (8002694 <xTaskDelayUntil+0xfc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	4413      	add	r3, r2
 800260e:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6a3a      	ldr	r2, [r7, #32]
 8002616:	429a      	cmp	r2, r3
 8002618:	d20b      	bcs.n	8002632 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	429a      	cmp	r2, r3
 8002622:	d211      	bcs.n	8002648 <xTaskDelayUntil+0xb0>
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	429a      	cmp	r2, r3
 800262a:	d90d      	bls.n	8002648 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 800262c:	2301      	movs	r3, #1
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
 8002630:	e00a      	b.n	8002648 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	429a      	cmp	r2, r3
 800263a:	d303      	bcc.n	8002644 <xTaskDelayUntil+0xac>
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	429a      	cmp	r2, r3
 8002642:	d901      	bls.n	8002648 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002644:	2301      	movs	r3, #1
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002654:	2024      	movs	r0, #36	; 0x24
 8002656:	f001 fe7f 	bl	8004358 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fbdc 	bl	8002e20 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002668:	f000 f882 	bl	8002770 <xTaskResumeAll>
 800266c:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d107      	bne.n	8002684 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <xTaskDelayUntil+0x100>)
 8002676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002686:	4618      	mov	r0, r3
 8002688:	3728      	adds	r7, #40	; 0x28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000130 	.word	0x20000130
 8002694:	2000010c 	.word	0x2000010c
 8002698:	e000ed04 	.word	0xe000ed04

0800269c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <vTaskStartScheduler+0x98>)
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	2300      	movs	r3, #0
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2300      	movs	r3, #0
 80026ac:	2282      	movs	r2, #130	; 0x82
 80026ae:	4922      	ldr	r1, [pc, #136]	; (8002738 <vTaskStartScheduler+0x9c>)
 80026b0:	4822      	ldr	r0, [pc, #136]	; (800273c <vTaskStartScheduler+0xa0>)
 80026b2:	f7ff fdd7 	bl	8002264 <xTaskCreate>
 80026b6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d124      	bne.n	8002708 <vTaskStartScheduler+0x6c>
        __asm volatile
 80026be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	60bb      	str	r3, [r7, #8]
    }
 80026d0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <vTaskStartScheduler+0xa4>)
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295
 80026d8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80026da:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <vTaskStartScheduler+0xa8>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <vTaskStartScheduler+0xac>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <vTaskStartScheduler+0xb0>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <vTaskStartScheduler+0x98>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d102      	bne.n	80026f8 <vTaskStartScheduler+0x5c>
 80026f2:	f002 fa29 	bl	8004b48 <SEGGER_SYSVIEW_OnIdle>
 80026f6:	e004      	b.n	8002702 <vTaskStartScheduler+0x66>
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <vTaskStartScheduler+0xb0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f002 fa81 	bl	8004c04 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002702:	f000 fca7 	bl	8003054 <xPortStartScheduler>
 8002706:	e00e      	b.n	8002726 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270e:	d10a      	bne.n	8002726 <vTaskStartScheduler+0x8a>
        __asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	607b      	str	r3, [r7, #4]
    }
 8002722:	bf00      	nop
 8002724:	e7fe      	b.n	8002724 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002726:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <vTaskStartScheduler+0xb4>)
 8002728:	681b      	ldr	r3, [r3, #0]
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000012c 	.word	0x2000012c
 8002738:	08005108 	.word	0x08005108
 800273c:	08002cbd 	.word	0x08002cbd
 8002740:	20000128 	.word	0x20000128
 8002744:	20000114 	.word	0x20000114
 8002748:	2000010c 	.word	0x2000010c
 800274c:	20000030 	.word	0x20000030
 8002750:	2000000c 	.word	0x2000000c

08002754 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <vTaskSuspendAll+0x18>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	4a03      	ldr	r2, [pc, #12]	; (800276c <vTaskSuspendAll+0x18>)
 8002760:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	20000130 	.word	0x20000130

08002770 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800277e:	4b73      	ldr	r3, [pc, #460]	; (800294c <xTaskResumeAll+0x1dc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10a      	bne.n	800279c <xTaskResumeAll+0x2c>
        __asm volatile
 8002786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278a:	f383 8811 	msr	BASEPRI, r3
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	f3bf 8f4f 	dsb	sy
 8002796:	607b      	str	r3, [r7, #4]
    }
 8002798:	bf00      	nop
 800279a:	e7fe      	b.n	800279a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800279c:	f000 fcfc 	bl	8003198 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80027a0:	4b6a      	ldr	r3, [pc, #424]	; (800294c <xTaskResumeAll+0x1dc>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	4a69      	ldr	r2, [pc, #420]	; (800294c <xTaskResumeAll+0x1dc>)
 80027a8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027aa:	4b68      	ldr	r3, [pc, #416]	; (800294c <xTaskResumeAll+0x1dc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 80c4 	bne.w	800293c <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027b4:	4b66      	ldr	r3, [pc, #408]	; (8002950 <xTaskResumeAll+0x1e0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80bf 	beq.w	800293c <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027be:	e08e      	b.n	80028de <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80027c0:	4b64      	ldr	r3, [pc, #400]	; (8002954 <xTaskResumeAll+0x1e4>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	6a12      	ldr	r2, [r2, #32]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	69d2      	ldr	r2, [r2, #28]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3318      	adds	r3, #24
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d103      	bne.n	80027f6 <xTaskResumeAll+0x86>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	6a1a      	ldr	r2, [r3, #32]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	2200      	movs	r2, #0
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	1e5a      	subs	r2, r3, #1
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	69fa      	ldr	r2, [r7, #28]
 8002812:	68d2      	ldr	r2, [r2, #12]
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	6892      	ldr	r2, [r2, #8]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	3304      	adds	r3, #4
 8002828:	429a      	cmp	r2, r3
 800282a:	d103      	bne.n	8002834 <xTaskResumeAll+0xc4>
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	68da      	ldr	r2, [r3, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2200      	movs	r2, #0
 8002838:	615a      	str	r2, [r3, #20]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	1e5a      	subs	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	4618      	mov	r0, r3
 8002848:	f002 fa1e 	bl	8004c88 <SEGGER_SYSVIEW_OnTaskStartReady>
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	2201      	movs	r2, #1
 8002852:	409a      	lsls	r2, r3
 8002854:	4b40      	ldr	r3, [pc, #256]	; (8002958 <xTaskResumeAll+0x1e8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4313      	orrs	r3, r2
 800285a:	4a3f      	ldr	r2, [pc, #252]	; (8002958 <xTaskResumeAll+0x1e8>)
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002862:	493e      	ldr	r1, [pc, #248]	; (800295c <xTaskResumeAll+0x1ec>)
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	3304      	adds	r3, #4
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	689a      	ldr	r2, [r3, #8]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	3204      	adds	r2, #4
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	1d1a      	adds	r2, r3, #4
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4a2e      	ldr	r2, [pc, #184]	; (800295c <xTaskResumeAll+0x1ec>)
 80028a2:	441a      	add	r2, r3
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	615a      	str	r2, [r3, #20]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ac:	492b      	ldr	r1, [pc, #172]	; (800295c <xTaskResumeAll+0x1ec>)
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	1c59      	adds	r1, r3, #1
 80028bc:	4827      	ldr	r0, [pc, #156]	; (800295c <xTaskResumeAll+0x1ec>)
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4403      	add	r3, r0
 80028c8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <xTaskResumeAll+0x1f0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d302      	bcc.n	80028de <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80028d8:	4b22      	ldr	r3, [pc, #136]	; (8002964 <xTaskResumeAll+0x1f4>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028de:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <xTaskResumeAll+0x1e4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f47f af6c 	bne.w	80027c0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80028ee:	f000 fa7b 	bl	8002de8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <xTaskResumeAll+0x1f8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80028fe:	f000 f859 	bl	80029b4 <xTaskIncrementTick>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002908:	4b16      	ldr	r3, [pc, #88]	; (8002964 <xTaskResumeAll+0x1f4>)
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	3b01      	subs	r3, #1
 8002912:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f1      	bne.n	80028fe <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <xTaskResumeAll+0x1f8>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002920:	4b10      	ldr	r3, [pc, #64]	; (8002964 <xTaskResumeAll+0x1f4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d009      	beq.n	800293c <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002928:	2301      	movs	r3, #1
 800292a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <xTaskResumeAll+0x1fc>)
 800292e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800293c:	f000 fc5c 	bl	80031f8 <vPortExitCritical>

    return xAlreadyYielded;
 8002940:	69bb      	ldr	r3, [r7, #24]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000130 	.word	0x20000130
 8002950:	20000108 	.word	0x20000108
 8002954:	200000c8 	.word	0x200000c8
 8002958:	20000110 	.word	0x20000110
 800295c:	20000034 	.word	0x20000034
 8002960:	20000030 	.word	0x20000030
 8002964:	2000011c 	.word	0x2000011c
 8002968:	20000118 	.word	0x20000118
 800296c:	e000ed04 	.word	0xe000ed04

08002970 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <xTaskGetTickCount+0x1c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800297c:	687b      	ldr	r3, [r7, #4]
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	2000010c 	.word	0x2000010c

08002990 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002996:	f000 fce9 	bl	800336c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800299e:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <xTaskGetTickCountFromISR+0x20>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029a4:	683b      	ldr	r3, [r7, #0]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2000010c 	.word	0x2000010c

080029b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b08a      	sub	sp, #40	; 0x28
 80029b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029be:	4b7f      	ldr	r3, [pc, #508]	; (8002bbc <xTaskIncrementTick+0x208>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f040 80f0 	bne.w	8002ba8 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029c8:	4b7d      	ldr	r3, [pc, #500]	; (8002bc0 <xTaskIncrementTick+0x20c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3301      	adds	r3, #1
 80029ce:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80029d0:	4a7b      	ldr	r2, [pc, #492]	; (8002bc0 <xTaskIncrementTick+0x20c>)
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d120      	bne.n	8002a1e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80029dc:	4b79      	ldr	r3, [pc, #484]	; (8002bc4 <xTaskIncrementTick+0x210>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <xTaskIncrementTick+0x48>
        __asm volatile
 80029e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ea:	f383 8811 	msr	BASEPRI, r3
 80029ee:	f3bf 8f6f 	isb	sy
 80029f2:	f3bf 8f4f 	dsb	sy
 80029f6:	607b      	str	r3, [r7, #4]
    }
 80029f8:	bf00      	nop
 80029fa:	e7fe      	b.n	80029fa <xTaskIncrementTick+0x46>
 80029fc:	4b71      	ldr	r3, [pc, #452]	; (8002bc4 <xTaskIncrementTick+0x210>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	4b71      	ldr	r3, [pc, #452]	; (8002bc8 <xTaskIncrementTick+0x214>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a6f      	ldr	r2, [pc, #444]	; (8002bc4 <xTaskIncrementTick+0x210>)
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4a6f      	ldr	r2, [pc, #444]	; (8002bc8 <xTaskIncrementTick+0x214>)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b6e      	ldr	r3, [pc, #440]	; (8002bcc <xTaskIncrementTick+0x218>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	3301      	adds	r3, #1
 8002a16:	4a6d      	ldr	r2, [pc, #436]	; (8002bcc <xTaskIncrementTick+0x218>)
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	f000 f9e5 	bl	8002de8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002a1e:	4b6c      	ldr	r3, [pc, #432]	; (8002bd0 <xTaskIncrementTick+0x21c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6a3a      	ldr	r2, [r7, #32]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	f0c0 80aa 	bcc.w	8002b7e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a2a:	4b66      	ldr	r3, [pc, #408]	; (8002bc4 <xTaskIncrementTick+0x210>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d104      	bne.n	8002a3e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a34:	4b66      	ldr	r3, [pc, #408]	; (8002bd0 <xTaskIncrementTick+0x21c>)
 8002a36:	f04f 32ff 	mov.w	r2, #4294967295
 8002a3a:	601a      	str	r2, [r3, #0]
                    break;
 8002a3c:	e09f      	b.n	8002b7e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a3e:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <xTaskIncrementTick+0x210>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002a4e:	6a3a      	ldr	r2, [r7, #32]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d203      	bcs.n	8002a5e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002a56:	4a5e      	ldr	r2, [pc, #376]	; (8002bd0 <xTaskIncrementTick+0x21c>)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002a5c:	e08f      	b.n	8002b7e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	613b      	str	r3, [r7, #16]
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	68d2      	ldr	r2, [r2, #12]
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	6892      	ldr	r2, [r2, #8]
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d103      	bne.n	8002a8c <xTaskIncrementTick+0xd8>
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	615a      	str	r2, [r3, #20]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	1e5a      	subs	r2, r3, #1
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01e      	beq.n	8002ae2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	6a12      	ldr	r2, [r2, #32]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	69d2      	ldr	r2, [r2, #28]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	3318      	adds	r3, #24
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d103      	bne.n	8002ad2 <xTaskIncrementTick+0x11e>
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	6a1a      	ldr	r2, [r3, #32]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	1e5a      	subs	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f002 f8cf 	bl	8004c88 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	2201      	movs	r2, #1
 8002af0:	409a      	lsls	r2, r3
 8002af2:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <xTaskIncrementTick+0x220>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	4a36      	ldr	r2, [pc, #216]	; (8002bd4 <xTaskIncrementTick+0x220>)
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b00:	4935      	ldr	r1, [pc, #212]	; (8002bd8 <xTaskIncrementTick+0x224>)
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	60da      	str	r2, [r3, #12]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	3204      	adds	r2, #4
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	1d1a      	adds	r2, r3, #4
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4a26      	ldr	r2, [pc, #152]	; (8002bd8 <xTaskIncrementTick+0x224>)
 8002b40:	441a      	add	r2, r3
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	615a      	str	r2, [r3, #20]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b4a:	4923      	ldr	r1, [pc, #140]	; (8002bd8 <xTaskIncrementTick+0x224>)
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	1c59      	adds	r1, r3, #1
 8002b5a:	481f      	ldr	r0, [pc, #124]	; (8002bd8 <xTaskIncrementTick+0x224>)
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4403      	add	r3, r0
 8002b66:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <xTaskIncrementTick+0x228>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	429a      	cmp	r2, r3
 8002b74:	f4ff af59 	bcc.w	8002a2a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b7c:	e755      	b.n	8002a2a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <xTaskIncrementTick+0x228>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b84:	4914      	ldr	r1, [pc, #80]	; (8002bd8 <xTaskIncrementTick+0x224>)
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d901      	bls.n	8002b9a <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002b96:	2301      	movs	r3, #1
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <xTaskIncrementTick+0x22c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d007      	beq.n	8002bb2 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba6:	e004      	b.n	8002bb2 <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <xTaskIncrementTick+0x230>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3301      	adds	r3, #1
 8002bae:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <xTaskIncrementTick+0x230>)
 8002bb0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3728      	adds	r7, #40	; 0x28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000130 	.word	0x20000130
 8002bc0:	2000010c 	.word	0x2000010c
 8002bc4:	200000c0 	.word	0x200000c0
 8002bc8:	200000c4 	.word	0x200000c4
 8002bcc:	20000120 	.word	0x20000120
 8002bd0:	20000128 	.word	0x20000128
 8002bd4:	20000110 	.word	0x20000110
 8002bd8:	20000034 	.word	0x20000034
 8002bdc:	20000030 	.word	0x20000030
 8002be0:	2000011c 	.word	0x2000011c
 8002be4:	20000118 	.word	0x20000118

08002be8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002bee:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <vTaskSwitchContext+0xbc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002bf6:	4b2c      	ldr	r3, [pc, #176]	; (8002ca8 <vTaskSwitchContext+0xc0>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002bfc:	e04d      	b.n	8002c9a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002bfe:	4b2a      	ldr	r3, [pc, #168]	; (8002ca8 <vTaskSwitchContext+0xc0>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c04:	4b29      	ldr	r3, [pc, #164]	; (8002cac <vTaskSwitchContext+0xc4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002c12:	7afb      	ldrb	r3, [r7, #11]
 8002c14:	f1c3 031f 	rsb	r3, r3, #31
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	4925      	ldr	r1, [pc, #148]	; (8002cb0 <vTaskSwitchContext+0xc8>)
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10a      	bne.n	8002c44 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	607b      	str	r3, [r7, #4]
    }
 8002c40:	bf00      	nop
 8002c42:	e7fe      	b.n	8002c42 <vTaskSwitchContext+0x5a>
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <vTaskSwitchContext+0xc8>)
 8002c50:	4413      	add	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	3308      	adds	r3, #8
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d104      	bne.n	8002c74 <vTaskSwitchContext+0x8c>
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <vTaskSwitchContext+0xcc>)
 8002c7c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <vTaskSwitchContext+0xcc>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <vTaskSwitchContext+0xd0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d102      	bne.n	8002c90 <vTaskSwitchContext+0xa8>
 8002c8a:	f001 ff5d 	bl	8004b48 <SEGGER_SYSVIEW_OnIdle>
}
 8002c8e:	e004      	b.n	8002c9a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002c90:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <vTaskSwitchContext+0xcc>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f001 ffb5 	bl	8004c04 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000130 	.word	0x20000130
 8002ca8:	2000011c 	.word	0x2000011c
 8002cac:	20000110 	.word	0x20000110
 8002cb0:	20000034 	.word	0x20000034
 8002cb4:	20000030 	.word	0x20000030
 8002cb8:	2000012c 	.word	0x2000012c

08002cbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002cc4:	f000 f852 	bl	8002d6c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <prvIdleTask+0x28>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d9f9      	bls.n	8002cc4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <prvIdleTask+0x2c>)
 8002cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ce0:	e7f0      	b.n	8002cc4 <prvIdleTask+0x8>
 8002ce2:	bf00      	nop
 8002ce4:	20000034 	.word	0x20000034
 8002ce8:	e000ed04 	.word	0xe000ed04

08002cec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	e00c      	b.n	8002d12 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <prvInitialiseTaskLists+0x60>)
 8002d04:	4413      	add	r3, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fa1c 	bl	8002144 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	607b      	str	r3, [r7, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d9ef      	bls.n	8002cf8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002d18:	480d      	ldr	r0, [pc, #52]	; (8002d50 <prvInitialiseTaskLists+0x64>)
 8002d1a:	f7ff fa13 	bl	8002144 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002d1e:	480d      	ldr	r0, [pc, #52]	; (8002d54 <prvInitialiseTaskLists+0x68>)
 8002d20:	f7ff fa10 	bl	8002144 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d24:	480c      	ldr	r0, [pc, #48]	; (8002d58 <prvInitialiseTaskLists+0x6c>)
 8002d26:	f7ff fa0d 	bl	8002144 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002d2a:	480c      	ldr	r0, [pc, #48]	; (8002d5c <prvInitialiseTaskLists+0x70>)
 8002d2c:	f7ff fa0a 	bl	8002144 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002d30:	480b      	ldr	r0, [pc, #44]	; (8002d60 <prvInitialiseTaskLists+0x74>)
 8002d32:	f7ff fa07 	bl	8002144 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <prvInitialiseTaskLists+0x78>)
 8002d38:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <prvInitialiseTaskLists+0x64>)
 8002d3a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d3c:	4b0a      	ldr	r3, [pc, #40]	; (8002d68 <prvInitialiseTaskLists+0x7c>)
 8002d3e:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <prvInitialiseTaskLists+0x68>)
 8002d40:	601a      	str	r2, [r3, #0]
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000034 	.word	0x20000034
 8002d50:	20000098 	.word	0x20000098
 8002d54:	200000ac 	.word	0x200000ac
 8002d58:	200000c8 	.word	0x200000c8
 8002d5c:	200000dc 	.word	0x200000dc
 8002d60:	200000f4 	.word	0x200000f4
 8002d64:	200000c0 	.word	0x200000c0
 8002d68:	200000c4 	.word	0x200000c4

08002d6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d72:	e019      	b.n	8002da8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002d74:	f000 fa10 	bl	8003198 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <prvCheckTasksWaitingTermination+0x50>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3304      	adds	r3, #4
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fa43 	bl	8002210 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <prvCheckTasksWaitingTermination+0x54>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	4a0b      	ldr	r2, [pc, #44]	; (8002dc0 <prvCheckTasksWaitingTermination+0x54>)
 8002d92:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <prvCheckTasksWaitingTermination+0x58>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <prvCheckTasksWaitingTermination+0x58>)
 8002d9c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002d9e:	f000 fa2b 	bl	80031f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f810 	bl	8002dc8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <prvCheckTasksWaitingTermination+0x58>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e1      	bne.n	8002d74 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200000dc 	.word	0x200000dc
 8002dc0:	20000108 	.word	0x20000108
 8002dc4:	200000f0 	.word	0x200000f0

08002dc8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fbe9 	bl	80035ac <vPortFree>
                vPortFree( pxTCB );
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fbe6 	bl	80035ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <prvResetNextTaskUnblockTime+0x30>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d104      	bne.n	8002e00 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <prvResetNextTaskUnblockTime+0x34>)
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002dfe:	e005      	b.n	8002e0c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <prvResetNextTaskUnblockTime+0x30>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a04      	ldr	r2, [pc, #16]	; (8002e1c <prvResetNextTaskUnblockTime+0x34>)
 8002e0a:	6013      	str	r3, [r2, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	200000c0 	.word	0x200000c0
 8002e1c:	20000128 	.word	0x20000128

08002e20 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002e2a:	4b3c      	ldr	r3, [pc, #240]	; (8002f1c <prvAddCurrentTaskToDelayedList+0xfc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e30:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3304      	adds	r3, #4
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff f9ea 	bl	8002210 <uxListRemove>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10b      	bne.n	8002e5a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002e42:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	2201      	movs	r2, #1
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <prvAddCurrentTaskToDelayedList+0x104>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4013      	ands	r3, r2
 8002e56:	4a33      	ldr	r2, [pc, #204]	; (8002f24 <prvAddCurrentTaskToDelayedList+0x104>)
 8002e58:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d124      	bne.n	8002eac <prvAddCurrentTaskToDelayedList+0x8c>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d021      	beq.n	8002eac <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002e68:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <prvAddCurrentTaskToDelayedList+0x108>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	6892      	ldr	r2, [r2, #8]
 8002e7e:	60da      	str	r2, [r3, #12]
 8002e80:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	3204      	adds	r2, #4
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	1d1a      	adds	r2, r3, #4
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <prvAddCurrentTaskToDelayedList+0x100>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a23      	ldr	r2, [pc, #140]	; (8002f28 <prvAddCurrentTaskToDelayedList+0x108>)
 8002e9c:	615a      	str	r2, [r3, #20]
 8002e9e:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <prvAddCurrentTaskToDelayedList+0x108>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	4a20      	ldr	r2, [pc, #128]	; (8002f28 <prvAddCurrentTaskToDelayedList+0x108>)
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002eaa:	e032      	b.n	8002f12 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <prvAddCurrentTaskToDelayedList+0x100>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d20f      	bcs.n	8002ee4 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002ec4:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <prvAddCurrentTaskToDelayedList+0x100>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2104      	movs	r1, #4
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 ff1e 	bl	8004d0c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ed0:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <prvAddCurrentTaskToDelayedList+0x10c>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <prvAddCurrentTaskToDelayedList+0x100>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	4619      	mov	r1, r3
 8002edc:	4610      	mov	r0, r2
 8002ede:	f7ff f95e 	bl	800219e <vListInsert>
}
 8002ee2:	e016      	b.n	8002f12 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <prvAddCurrentTaskToDelayedList+0x100>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2104      	movs	r1, #4
 8002eea:	4618      	mov	r0, r3
 8002eec:	f001 ff0e 	bl	8004d0c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <prvAddCurrentTaskToDelayedList+0x110>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <prvAddCurrentTaskToDelayedList+0x100>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	4619      	mov	r1, r3
 8002efc:	4610      	mov	r0, r2
 8002efe:	f7ff f94e 	bl	800219e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <prvAddCurrentTaskToDelayedList+0x114>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d202      	bcs.n	8002f12 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8002f0c:	4a09      	ldr	r2, [pc, #36]	; (8002f34 <prvAddCurrentTaskToDelayedList+0x114>)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6013      	str	r3, [r2, #0]
}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	2000010c 	.word	0x2000010c
 8002f20:	20000030 	.word	0x20000030
 8002f24:	20000110 	.word	0x20000110
 8002f28:	200000f4 	.word	0x200000f4
 8002f2c:	200000c4 	.word	0x200000c4
 8002f30:	200000c0 	.word	0x200000c0
 8002f34:	20000128 	.word	0x20000128

08002f38 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3b04      	subs	r3, #4
 8002f48:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f50:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3b04      	subs	r3, #4
 8002f56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f023 0201 	bic.w	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3b04      	subs	r3, #4
 8002f66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f68:	4a0c      	ldr	r2, [pc, #48]	; (8002f9c <pxPortInitialiseStack+0x64>)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3b14      	subs	r3, #20
 8002f72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	3b04      	subs	r3, #4
 8002f7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f06f 0202 	mvn.w	r2, #2
 8002f86:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3b20      	subs	r3, #32
 8002f8c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	08002fa1 	.word	0x08002fa1

08002fa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <prvTaskExitError+0x54>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb2:	d00a      	beq.n	8002fca <prvTaskExitError+0x2a>
        __asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	60fb      	str	r3, [r7, #12]
    }
 8002fc6:	bf00      	nop
 8002fc8:	e7fe      	b.n	8002fc8 <prvTaskExitError+0x28>
        __asm volatile
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	60bb      	str	r3, [r7, #8]
    }
 8002fdc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002fde:	bf00      	nop
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0fc      	beq.n	8002fe0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002fe6:	bf00      	nop
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	20000010 	.word	0x20000010
	...

08003000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003000:	4b07      	ldr	r3, [pc, #28]	; (8003020 <pxCurrentTCBConst2>)
 8003002:	6819      	ldr	r1, [r3, #0]
 8003004:	6808      	ldr	r0, [r1, #0]
 8003006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800300a:	f380 8809 	msr	PSP, r0
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f04f 0000 	mov.w	r0, #0
 8003016:	f380 8811 	msr	BASEPRI, r0
 800301a:	4770      	bx	lr
 800301c:	f3af 8000 	nop.w

08003020 <pxCurrentTCBConst2>:
 8003020:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop

08003028 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003028:	4808      	ldr	r0, [pc, #32]	; (800304c <prvPortStartFirstTask+0x24>)
 800302a:	6800      	ldr	r0, [r0, #0]
 800302c:	6800      	ldr	r0, [r0, #0]
 800302e:	f380 8808 	msr	MSP, r0
 8003032:	f04f 0000 	mov.w	r0, #0
 8003036:	f380 8814 	msr	CONTROL, r0
 800303a:	b662      	cpsie	i
 800303c:	b661      	cpsie	f
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	df00      	svc	0
 8003048:	bf00      	nop
 800304a:	0000      	.short	0x0000
 800304c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003050:	bf00      	nop
 8003052:	bf00      	nop

08003054 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800305a:	4b46      	ldr	r3, [pc, #280]	; (8003174 <xPortStartScheduler+0x120>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a46      	ldr	r2, [pc, #280]	; (8003178 <xPortStartScheduler+0x124>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d10a      	bne.n	800307a <xPortStartScheduler+0x26>
        __asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	613b      	str	r3, [r7, #16]
    }
 8003076:	bf00      	nop
 8003078:	e7fe      	b.n	8003078 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800307a:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <xPortStartScheduler+0x120>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a3f      	ldr	r2, [pc, #252]	; (800317c <xPortStartScheduler+0x128>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d10a      	bne.n	800309a <xPortStartScheduler+0x46>
        __asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	60fb      	str	r3, [r7, #12]
    }
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800309a:	4b39      	ldr	r3, [pc, #228]	; (8003180 <xPortStartScheduler+0x12c>)
 800309c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	22ff      	movs	r2, #255	; 0xff
 80030aa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4b31      	ldr	r3, [pc, #196]	; (8003184 <xPortStartScheduler+0x130>)
 80030c0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80030c2:	4b31      	ldr	r3, [pc, #196]	; (8003188 <xPortStartScheduler+0x134>)
 80030c4:	2207      	movs	r2, #7
 80030c6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030c8:	e009      	b.n	80030de <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80030ca:	4b2f      	ldr	r3, [pc, #188]	; (8003188 <xPortStartScheduler+0x134>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	4a2d      	ldr	r2, [pc, #180]	; (8003188 <xPortStartScheduler+0x134>)
 80030d2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b80      	cmp	r3, #128	; 0x80
 80030e8:	d0ef      	beq.n	80030ca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80030ea:	4b27      	ldr	r3, [pc, #156]	; (8003188 <xPortStartScheduler+0x134>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f1c3 0307 	rsb	r3, r3, #7
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d00a      	beq.n	800310c <xPortStartScheduler+0xb8>
        __asm volatile
 80030f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	60bb      	str	r3, [r7, #8]
    }
 8003108:	bf00      	nop
 800310a:	e7fe      	b.n	800310a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800310c:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <xPortStartScheduler+0x134>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <xPortStartScheduler+0x134>)
 8003114:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003116:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <xPortStartScheduler+0x134>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800311e:	4a1a      	ldr	r2, [pc, #104]	; (8003188 <xPortStartScheduler+0x134>)
 8003120:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <xPortStartScheduler+0x138>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a17      	ldr	r2, [pc, #92]	; (800318c <xPortStartScheduler+0x138>)
 8003130:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003134:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <xPortStartScheduler+0x138>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a14      	ldr	r2, [pc, #80]	; (800318c <xPortStartScheduler+0x138>)
 800313c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003140:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003142:	f000 f8e3 	bl	800330c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003146:	4b12      	ldr	r3, [pc, #72]	; (8003190 <xPortStartScheduler+0x13c>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800314c:	f000 f902 	bl	8003354 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003150:	4b10      	ldr	r3, [pc, #64]	; (8003194 <xPortStartScheduler+0x140>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0f      	ldr	r2, [pc, #60]	; (8003194 <xPortStartScheduler+0x140>)
 8003156:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800315a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800315c:	f7ff ff64 	bl	8003028 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003160:	f7ff fd42 	bl	8002be8 <vTaskSwitchContext>
    prvTaskExitError();
 8003164:	f7ff ff1c 	bl	8002fa0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	e000ed00 	.word	0xe000ed00
 8003178:	410fc271 	.word	0x410fc271
 800317c:	410fc270 	.word	0x410fc270
 8003180:	e000e400 	.word	0xe000e400
 8003184:	20000134 	.word	0x20000134
 8003188:	20000138 	.word	0x20000138
 800318c:	e000ed20 	.word	0xe000ed20
 8003190:	20000010 	.word	0x20000010
 8003194:	e000ef34 	.word	0xe000ef34

08003198 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
        __asm volatile
 800319e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	607b      	str	r3, [r7, #4]
    }
 80031b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80031b2:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <vPortEnterCritical+0x58>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3301      	adds	r3, #1
 80031b8:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <vPortEnterCritical+0x58>)
 80031ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <vPortEnterCritical+0x58>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10f      	bne.n	80031e4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <vPortEnterCritical+0x5c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <vPortEnterCritical+0x4c>
        __asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	603b      	str	r3, [r7, #0]
    }
 80031e0:	bf00      	nop
 80031e2:	e7fe      	b.n	80031e2 <vPortEnterCritical+0x4a>
    }
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	20000010 	.word	0x20000010
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <vPortExitCritical+0x50>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <vPortExitCritical+0x24>
        __asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	607b      	str	r3, [r7, #4]
    }
 8003218:	bf00      	nop
 800321a:	e7fe      	b.n	800321a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <vPortExitCritical+0x50>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3b01      	subs	r3, #1
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <vPortExitCritical+0x50>)
 8003224:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003226:	4b08      	ldr	r3, [pc, #32]	; (8003248 <vPortExitCritical+0x50>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <vPortExitCritical+0x42>
 800322e:	2300      	movs	r3, #0
 8003230:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003238:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000010 	.word	0x20000010
 800324c:	00000000 	.word	0x00000000

08003250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003250:	f3ef 8009 	mrs	r0, PSP
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <pxCurrentTCBConst>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	f01e 0f10 	tst.w	lr, #16
 8003260:	bf08      	it	eq
 8003262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800326a:	6010      	str	r0, [r2, #0]
 800326c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003274:	f380 8811 	msr	BASEPRI, r0
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f7ff fcb2 	bl	8002be8 <vTaskSwitchContext>
 8003284:	f04f 0000 	mov.w	r0, #0
 8003288:	f380 8811 	msr	BASEPRI, r0
 800328c:	bc09      	pop	{r0, r3}
 800328e:	6819      	ldr	r1, [r3, #0]
 8003290:	6808      	ldr	r0, [r1, #0]
 8003292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003296:	f01e 0f10 	tst.w	lr, #16
 800329a:	bf08      	it	eq
 800329c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032a0:	f380 8809 	msr	PSP, r0
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	f3af 8000 	nop.w

080032b0 <pxCurrentTCBConst>:
 80032b0:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop

080032b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
        __asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	607b      	str	r3, [r7, #4]
    }
 80032d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80032d2:	f001 fbbf 	bl	8004a54 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80032d6:	f7ff fb6d 	bl	80029b4 <xTaskIncrementTick>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d006      	beq.n	80032ee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80032e0:	f001 fc16 	bl	8004b10 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <SysTick_Handler+0x50>)
 80032e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e001      	b.n	80032f2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80032ee:	f001 fbf3 	bl	8004ad8 <SEGGER_SYSVIEW_RecordExitISR>
 80032f2:	2300      	movs	r3, #0
 80032f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	f383 8811 	msr	BASEPRI, r3
    }
 80032fc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <vPortSetupTimerInterrupt+0x34>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <vPortSetupTimerInterrupt+0x38>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <vPortSetupTimerInterrupt+0x3c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0a      	ldr	r2, [pc, #40]	; (800334c <vPortSetupTimerInterrupt+0x40>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	099b      	lsrs	r3, r3, #6
 8003328:	4a09      	ldr	r2, [pc, #36]	; (8003350 <vPortSetupTimerInterrupt+0x44>)
 800332a:	3b01      	subs	r3, #1
 800332c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <vPortSetupTimerInterrupt+0x34>)
 8003330:	2207      	movs	r2, #7
 8003332:	601a      	str	r2, [r3, #0]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000e010 	.word	0xe000e010
 8003344:	e000e018 	.word	0xe000e018
 8003348:	20000000 	.word	0x20000000
 800334c:	10624dd3 	.word	0x10624dd3
 8003350:	e000e014 	.word	0xe000e014

08003354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003364 <vPortEnableVFP+0x10>
 8003358:	6801      	ldr	r1, [r0, #0]
 800335a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800335e:	6001      	str	r1, [r0, #0]
 8003360:	4770      	bx	lr
 8003362:	0000      	.short	0x0000
 8003364:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop

0800336c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003372:	f3ef 8305 	mrs	r3, IPSR
 8003376:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b0f      	cmp	r3, #15
 800337c:	d914      	bls.n	80033a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800337e:	4a17      	ldr	r2, [pc, #92]	; (80033dc <vPortValidateInterruptPriority+0x70>)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <vPortValidateInterruptPriority+0x74>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	7afa      	ldrb	r2, [r7, #11]
 800338e:	429a      	cmp	r2, r3
 8003390:	d20a      	bcs.n	80033a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	607b      	str	r3, [r7, #4]
    }
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80033a8:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <vPortValidateInterruptPriority+0x78>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033b0:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <vPortValidateInterruptPriority+0x7c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d90a      	bls.n	80033ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	603b      	str	r3, [r7, #0]
    }
 80033ca:	bf00      	nop
 80033cc:	e7fe      	b.n	80033cc <vPortValidateInterruptPriority+0x60>
    }
 80033ce:	bf00      	nop
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	e000e3f0 	.word	0xe000e3f0
 80033e0:	20000134 	.word	0x20000134
 80033e4:	e000ed0c 	.word	0xe000ed0c
 80033e8:	20000138 	.word	0x20000138

080033ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80033f8:	f7ff f9ac 	bl	8002754 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80033fc:	4b65      	ldr	r3, [pc, #404]	; (8003594 <pvPortMalloc+0x1a8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003404:	f000 f934 	bl	8003670 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003408:	4b63      	ldr	r3, [pc, #396]	; (8003598 <pvPortMalloc+0x1ac>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 80a7 	bne.w	8003564 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d02d      	beq.n	8003478 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800341c:	2208      	movs	r2, #8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	429a      	cmp	r2, r3
 8003426:	d227      	bcs.n	8003478 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003428:	2208      	movs	r2, #8
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4413      	add	r3, r2
 800342e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	2b00      	cmp	r3, #0
 8003438:	d021      	beq.n	800347e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f023 0307 	bic.w	r3, r3, #7
 8003440:	3308      	adds	r3, #8
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	429a      	cmp	r2, r3
 8003446:	d214      	bcs.n	8003472 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f023 0307 	bic.w	r3, r3, #7
 800344e:	3308      	adds	r3, #8
 8003450:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	2b00      	cmp	r3, #0
 800345a:	d010      	beq.n	800347e <pvPortMalloc+0x92>
        __asm volatile
 800345c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	617b      	str	r3, [r7, #20]
    }
 800346e:	bf00      	nop
 8003470:	e7fe      	b.n	8003470 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003476:	e002      	b.n	800347e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	e000      	b.n	8003480 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800347e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d06e      	beq.n	8003564 <pvPortMalloc+0x178>
 8003486:	4b45      	ldr	r3, [pc, #276]	; (800359c <pvPortMalloc+0x1b0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	429a      	cmp	r2, r3
 800348e:	d869      	bhi.n	8003564 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003490:	4b43      	ldr	r3, [pc, #268]	; (80035a0 <pvPortMalloc+0x1b4>)
 8003492:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003494:	4b42      	ldr	r3, [pc, #264]	; (80035a0 <pvPortMalloc+0x1b4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800349a:	e004      	b.n	80034a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d903      	bls.n	80034b8 <pvPortMalloc+0xcc>
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f1      	bne.n	800349c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80034b8:	4b36      	ldr	r3, [pc, #216]	; (8003594 <pvPortMalloc+0x1a8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034be:	429a      	cmp	r2, r3
 80034c0:	d050      	beq.n	8003564 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2208      	movs	r2, #8
 80034c8:	4413      	add	r3, r2
 80034ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	1ad2      	subs	r2, r2, r3
 80034dc:	2308      	movs	r3, #8
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d91f      	bls.n	8003524 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4413      	add	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <pvPortMalloc+0x120>
        __asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	613b      	str	r3, [r7, #16]
    }
 8003508:	bf00      	nop
 800350a:	e7fe      	b.n	800350a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	1ad2      	subs	r2, r2, r3
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800351e:	69b8      	ldr	r0, [r7, #24]
 8003520:	f000 f908 	bl	8003734 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003524:	4b1d      	ldr	r3, [pc, #116]	; (800359c <pvPortMalloc+0x1b0>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	4a1b      	ldr	r2, [pc, #108]	; (800359c <pvPortMalloc+0x1b0>)
 8003530:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003532:	4b1a      	ldr	r3, [pc, #104]	; (800359c <pvPortMalloc+0x1b0>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <pvPortMalloc+0x1b8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d203      	bcs.n	8003546 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800353e:	4b17      	ldr	r3, [pc, #92]	; (800359c <pvPortMalloc+0x1b0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <pvPortMalloc+0x1b8>)
 8003544:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4b13      	ldr	r3, [pc, #76]	; (8003598 <pvPortMalloc+0x1ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	431a      	orrs	r2, r3
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <pvPortMalloc+0x1bc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3301      	adds	r3, #1
 8003560:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <pvPortMalloc+0x1bc>)
 8003562:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003564:	f7ff f904 	bl	8002770 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <pvPortMalloc+0x19c>
        __asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	60fb      	str	r3, [r7, #12]
    }
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <pvPortMalloc+0x19a>
    return pvReturn;
 8003588:	69fb      	ldr	r3, [r7, #28]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3728      	adds	r7, #40	; 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20012d44 	.word	0x20012d44
 8003598:	20012d58 	.word	0x20012d58
 800359c:	20012d48 	.word	0x20012d48
 80035a0:	20012d3c 	.word	0x20012d3c
 80035a4:	20012d4c 	.word	0x20012d4c
 80035a8:	20012d50 	.word	0x20012d50

080035ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d04d      	beq.n	800365a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80035be:	2308      	movs	r3, #8
 80035c0:	425b      	negs	r3, r3
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4413      	add	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <vPortFree+0xb8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10a      	bne.n	80035f0 <vPortFree+0x44>
        __asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	60fb      	str	r3, [r7, #12]
    }
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <vPortFree+0x62>
        __asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	60bb      	str	r3, [r7, #8]
    }
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	4b14      	ldr	r3, [pc, #80]	; (8003664 <vPortFree+0xb8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01e      	beq.n	800365a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d11a      	bne.n	800365a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <vPortFree+0xb8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	43db      	mvns	r3, r3
 800362e:	401a      	ands	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003634:	f7ff f88e 	bl	8002754 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <vPortFree+0xbc>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4413      	add	r3, r2
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <vPortFree+0xbc>)
 8003644:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003646:	6938      	ldr	r0, [r7, #16]
 8003648:	f000 f874 	bl	8003734 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800364c:	4b07      	ldr	r3, [pc, #28]	; (800366c <vPortFree+0xc0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3301      	adds	r3, #1
 8003652:	4a06      	ldr	r2, [pc, #24]	; (800366c <vPortFree+0xc0>)
 8003654:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003656:	f7ff f88b 	bl	8002770 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800365a:	bf00      	nop
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20012d58 	.word	0x20012d58
 8003668:	20012d48 	.word	0x20012d48
 800366c:	20012d54 	.word	0x20012d54

08003670 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003676:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800367a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800367c:	4b27      	ldr	r3, [pc, #156]	; (800371c <prvHeapInit+0xac>)
 800367e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00c      	beq.n	80036a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3307      	adds	r3, #7
 800368e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0307 	bic.w	r3, r3, #7
 8003696:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	4a1f      	ldr	r2, [pc, #124]	; (800371c <prvHeapInit+0xac>)
 80036a0:	4413      	add	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80036a8:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <prvHeapInit+0xb0>)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80036ae:	4b1c      	ldr	r3, [pc, #112]	; (8003720 <prvHeapInit+0xb0>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4413      	add	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80036bc:	2208      	movs	r2, #8
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f023 0307 	bic.w	r3, r3, #7
 80036ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4a15      	ldr	r2, [pc, #84]	; (8003724 <prvHeapInit+0xb4>)
 80036d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80036d2:	4b14      	ldr	r3, [pc, #80]	; (8003724 <prvHeapInit+0xb4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2200      	movs	r2, #0
 80036d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <prvHeapInit+0xb4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	1ad2      	subs	r2, r2, r3
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <prvHeapInit+0xb4>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <prvHeapInit+0xb8>)
 80036fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4a09      	ldr	r2, [pc, #36]	; (800372c <prvHeapInit+0xbc>)
 8003706:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <prvHeapInit+0xc0>)
 800370a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800370e:	601a      	str	r2, [r3, #0]
}
 8003710:	bf00      	nop
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	2000013c 	.word	0x2000013c
 8003720:	20012d3c 	.word	0x20012d3c
 8003724:	20012d44 	.word	0x20012d44
 8003728:	20012d4c 	.word	0x20012d4c
 800372c:	20012d48 	.word	0x20012d48
 8003730:	20012d58 	.word	0x20012d58

08003734 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800373c:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <prvInsertBlockIntoFreeList+0xac>)
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e002      	b.n	8003748 <prvInsertBlockIntoFreeList+0x14>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	429a      	cmp	r2, r3
 8003750:	d8f7      	bhi.n	8003742 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	4413      	add	r3, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	429a      	cmp	r2, r3
 8003762:	d108      	bne.n	8003776 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	441a      	add	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	441a      	add	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d118      	bne.n	80037bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <prvInsertBlockIntoFreeList+0xb0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d00d      	beq.n	80037b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	441a      	add	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	e008      	b.n	80037c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <prvInsertBlockIntoFreeList+0xb0>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e003      	b.n	80037c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d002      	beq.n	80037d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20012d3c 	.word	0x20012d3c
 80037e4:	20012d44 	.word	0x20012d44

080037e8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80037ec:	4803      	ldr	r0, [pc, #12]	; (80037fc <_cbSendSystemDesc+0x14>)
 80037ee:	f001 f8db 	bl	80049a8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80037f2:	4803      	ldr	r0, [pc, #12]	; (8003800 <_cbSendSystemDesc+0x18>)
 80037f4:	f001 f8d8 	bl	80049a8 <SEGGER_SYSVIEW_SendSysDesc>
}
 80037f8:	bf00      	nop
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	08005110 	.word	0x08005110
 8003800:	0800514c 	.word	0x0800514c

08003804 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <SEGGER_SYSVIEW_Conf+0x20>)
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	4b05      	ldr	r3, [pc, #20]	; (8003824 <SEGGER_SYSVIEW_Conf+0x20>)
 800380e:	6819      	ldr	r1, [r3, #0]
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <SEGGER_SYSVIEW_Conf+0x24>)
 8003812:	4a06      	ldr	r2, [pc, #24]	; (800382c <SEGGER_SYSVIEW_Conf+0x28>)
 8003814:	f000 fd4c 	bl	80042b0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003818:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800381c:	f000 fd8c 	bl	8004338 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003820:	bf00      	nop
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000000 	.word	0x20000000
 8003828:	080037e9 	.word	0x080037e9
 800382c:	080051ec 	.word	0x080051ec

08003830 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003832:	b085      	sub	sp, #20
 8003834:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003836:	2300      	movs	r3, #0
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	e033      	b.n	80038a4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800383c:	491e      	ldr	r1, [pc, #120]	; (80038b8 <_cbSendTaskList+0x88>)
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	491a      	ldr	r1, [pc, #104]	; (80038b8 <_cbSendTaskList+0x88>)
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	3304      	adds	r3, #4
 800385c:	6819      	ldr	r1, [r3, #0]
 800385e:	4c16      	ldr	r4, [pc, #88]	; (80038b8 <_cbSendTaskList+0x88>)
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4423      	add	r3, r4
 800386c:	3308      	adds	r3, #8
 800386e:	681c      	ldr	r4, [r3, #0]
 8003870:	4d11      	ldr	r5, [pc, #68]	; (80038b8 <_cbSendTaskList+0x88>)
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	442b      	add	r3, r5
 800387e:	330c      	adds	r3, #12
 8003880:	681d      	ldr	r5, [r3, #0]
 8003882:	4e0d      	ldr	r6, [pc, #52]	; (80038b8 <_cbSendTaskList+0x88>)
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4433      	add	r3, r6
 8003890:	3310      	adds	r3, #16
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	462b      	mov	r3, r5
 8003898:	4622      	mov	r2, r4
 800389a:	f000 f8b5 	bl	8003a08 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3301      	adds	r3, #1
 80038a2:	607b      	str	r3, [r7, #4]
 80038a4:	4b05      	ldr	r3, [pc, #20]	; (80038bc <_cbSendTaskList+0x8c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d3c6      	bcc.n	800383c <_cbSendTaskList+0xc>
  }
}
 80038ae:	bf00      	nop
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b8:	20012d5c 	.word	0x20012d5c
 80038bc:	20012dfc 	.word	0x20012dfc

080038c0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80038c0:	b5b0      	push	{r4, r5, r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80038c6:	f7ff f863 	bl	8002990 <xTaskGetTickCountFromISR>
 80038ca:	4603      	mov	r3, r0
 80038cc:	461a      	mov	r2, r3
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80038d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	f04f 0400 	mov.w	r4, #0
 80038e2:	f04f 0500 	mov.w	r5, #0
 80038e6:	015d      	lsls	r5, r3, #5
 80038e8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80038ec:	0154      	lsls	r4, r2, #5
 80038ee:	4622      	mov	r2, r4
 80038f0:	462b      	mov	r3, r5
 80038f2:	1a12      	subs	r2, r2, r0
 80038f4:	eb63 0301 	sbc.w	r3, r3, r1
 80038f8:	f04f 0400 	mov.w	r4, #0
 80038fc:	f04f 0500 	mov.w	r5, #0
 8003900:	009d      	lsls	r5, r3, #2
 8003902:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8003906:	0094      	lsls	r4, r2, #2
 8003908:	4622      	mov	r2, r4
 800390a:	462b      	mov	r3, r5
 800390c:	1812      	adds	r2, r2, r0
 800390e:	eb41 0303 	adc.w	r3, r1, r3
 8003912:	f04f 0000 	mov.w	r0, #0
 8003916:	f04f 0100 	mov.w	r1, #0
 800391a:	00d9      	lsls	r1, r3, #3
 800391c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003920:	00d0      	lsls	r0, r2, #3
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800392a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bdb0      	pop	{r4, r5, r7, pc}

08003938 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af02      	add	r7, sp, #8
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
 8003944:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003946:	2205      	movs	r2, #5
 8003948:	492b      	ldr	r1, [pc, #172]	; (80039f8 <SYSVIEW_AddTask+0xc0>)
 800394a:	68b8      	ldr	r0, [r7, #8]
 800394c:	f001 fb9a 	bl	8005084 <memcmp>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d04b      	beq.n	80039ee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003956:	4b29      	ldr	r3, [pc, #164]	; (80039fc <SYSVIEW_AddTask+0xc4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b07      	cmp	r3, #7
 800395c:	d903      	bls.n	8003966 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800395e:	4828      	ldr	r0, [pc, #160]	; (8003a00 <SYSVIEW_AddTask+0xc8>)
 8003960:	f001 fb10 	bl	8004f84 <SEGGER_SYSVIEW_Warn>
    return;
 8003964:	e044      	b.n	80039f0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003966:	4b25      	ldr	r3, [pc, #148]	; (80039fc <SYSVIEW_AddTask+0xc4>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	4926      	ldr	r1, [pc, #152]	; (8003a04 <SYSVIEW_AddTask+0xcc>)
 800396c:	4613      	mov	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800397a:	4b20      	ldr	r3, [pc, #128]	; (80039fc <SYSVIEW_AddTask+0xc4>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4921      	ldr	r1, [pc, #132]	; (8003a04 <SYSVIEW_AddTask+0xcc>)
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	3304      	adds	r3, #4
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003990:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <SYSVIEW_AddTask+0xc4>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	491b      	ldr	r1, [pc, #108]	; (8003a04 <SYSVIEW_AddTask+0xcc>)
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	3308      	adds	r3, #8
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <SYSVIEW_AddTask+0xc4>)
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4916      	ldr	r1, [pc, #88]	; (8003a04 <SYSVIEW_AddTask+0xcc>)
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	330c      	adds	r3, #12
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <SYSVIEW_AddTask+0xc4>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4910      	ldr	r1, [pc, #64]	; (8003a04 <SYSVIEW_AddTask+0xcc>)
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	3310      	adds	r3, #16
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80039d2:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <SYSVIEW_AddTask+0xc4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3301      	adds	r3, #1
 80039d8:	4a08      	ldr	r2, [pc, #32]	; (80039fc <SYSVIEW_AddTask+0xc4>)
 80039da:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f80e 	bl	8003a08 <SYSVIEW_SendTaskInfo>
 80039ec:	e000      	b.n	80039f0 <SYSVIEW_AddTask+0xb8>
    return;
 80039ee:	bf00      	nop

}
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	0800515c 	.word	0x0800515c
 80039fc:	20012dfc 	.word	0x20012dfc
 8003a00:	08005164 	.word	0x08005164
 8003a04:	20012d5c 	.word	0x20012d5c

08003a08 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	; 0x28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003a16:	f107 0314 	add.w	r3, r7, #20
 8003a1a:	2214      	movs	r2, #20
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 fb4c 	bl	80050bc <memset>
  TaskInfo.TaskID     = TaskID;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 febb 	bl	80047b8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003a42:	bf00      	nop
 8003a44:	3728      	adds	r7, #40	; 0x28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003a52:	4b1e      	ldr	r3, [pc, #120]	; (8003acc <USART2_IRQHandler+0x80>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d011      	beq.n	8003a86 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003a62:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <USART2_IRQHandler+0x84>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 030b 	and.w	r3, r3, #11
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d108      	bne.n	8003a86 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003a74:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <USART2_IRQHandler+0x88>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003a7c:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <USART2_IRQHandler+0x88>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	79fa      	ldrb	r2, [r7, #7]
 8003a82:	4610      	mov	r0, r2
 8003a84:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01a      	beq.n	8003ac6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003a90:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <USART2_IRQHandler+0x8c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d015      	beq.n	8003ac4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003a98:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <USART2_IRQHandler+0x8c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	1dfa      	adds	r2, r7, #7
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	4798      	blx	r3
 8003aa2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <USART2_IRQHandler+0x90>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a0b      	ldr	r2, [pc, #44]	; (8003adc <USART2_IRQHandler+0x90>)
 8003ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	e006      	b.n	8003ac6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8003ab8:	4b04      	ldr	r3, [pc, #16]	; (8003acc <USART2_IRQHandler+0x80>)
 8003aba:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003abc:	79fa      	ldrb	r2, [r7, #7]
 8003abe:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <USART2_IRQHandler+0x84>)
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	e000      	b.n	8003ac6 <USART2_IRQHandler+0x7a>
      return;
 8003ac4:	bf00      	nop
    }
  }
}
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40004400 	.word	0x40004400
 8003ad0:	40004404 	.word	0x40004404
 8003ad4:	20012e00 	.word	0x20012e00
 8003ad8:	20012e04 	.word	0x20012e04
 8003adc:	4000440c 	.word	0x4000440c

08003ae0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a04      	ldr	r2, [pc, #16]	; (8003afc <HIF_UART_EnableTXEInterrupt+0x1c>)
 8003aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aee:	6013      	str	r3, [r2, #0]
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	4000440c 	.word	0x4000440c

08003b00 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003b06:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <_DoInit+0x98>)
 8003b08:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2203      	movs	r2, #3
 8003b14:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a20      	ldr	r2, [pc, #128]	; (8003b9c <_DoInit+0x9c>)
 8003b1a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a20      	ldr	r2, [pc, #128]	; (8003ba0 <_DoInit+0xa0>)
 8003b20:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b28:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <_DoInit+0x9c>)
 8003b40:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <_DoInit+0xa4>)
 8003b46:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2210      	movs	r2, #16
 8003b4c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3307      	adds	r3, #7
 8003b64:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <_DoInit+0xa8>)
 8003b66:	6810      	ldr	r0, [r2, #0]
 8003b68:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b6a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a0e      	ldr	r2, [pc, #56]	; (8003bac <_DoInit+0xac>)
 8003b72:	6810      	ldr	r0, [r2, #0]
 8003b74:	6018      	str	r0, [r3, #0]
 8003b76:	8891      	ldrh	r1, [r2, #4]
 8003b78:	7992      	ldrb	r2, [r2, #6]
 8003b7a:	8099      	strh	r1, [r3, #4]
 8003b7c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b7e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003b88:	f3bf 8f5f 	dmb	sy
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	20014380 	.word	0x20014380
 8003b9c:	080051b4 	.word	0x080051b4
 8003ba0:	20012e08 	.word	0x20012e08
 8003ba4:	20013208 	.word	0x20013208
 8003ba8:	080051c0 	.word	0x080051c0
 8003bac:	080051c4 	.word	0x080051c4

08003bb0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08c      	sub	sp, #48	; 0x30
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003bbc:	4b3e      	ldr	r3, [pc, #248]	; (8003cb8 <SEGGER_RTT_ReadNoLock+0x108>)
 8003bbe:	623b      	str	r3, [r7, #32]
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <SEGGER_RTT_ReadNoLock+0x1e>
 8003bca:	f7ff ff99 	bl	8003b00 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4413      	add	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	3360      	adds	r3, #96	; 0x60
 8003bda:	4a37      	ldr	r2, [pc, #220]	; (8003cb8 <SEGGER_RTT_ReadNoLock+0x108>)
 8003bdc:	4413      	add	r3, r2
 8003bde:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d92b      	bls.n	8003c54 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	bf28      	it	cs
 8003c0e:	4613      	movcs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	4413      	add	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	6939      	ldr	r1, [r7, #16]
 8003c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c22:	f001 fa3d 	bl	80050a0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	4413      	add	r3, r2
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	4413      	add	r3, r2
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d101      	bne.n	8003c54 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003c50:	2300      	movs	r3, #0
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4293      	cmp	r3, r2
 8003c62:	bf28      	it	cs
 8003c64:	4613      	movcs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d019      	beq.n	8003ca2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c74:	4413      	add	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	6939      	ldr	r1, [r7, #16]
 8003c7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c7e:	f001 fa0f 	bl	80050a0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	4413      	add	r3, r2
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	4413      	add	r3, r2
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cac:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3730      	adds	r7, #48	; 0x30
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20014380 	.word	0x20014380

08003cbc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003cca:	4b3d      	ldr	r3, [pc, #244]	; (8003dc0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <SEGGER_RTT_AllocUpBuffer+0x20>
 8003cd8:	f7ff ff12 	bl	8003b00 <_DoInit>
  SEGGER_RTT_LOCK();
 8003cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8003ce0:	f04f 0120 	mov.w	r1, #32
 8003ce4:	f381 8811 	msr	BASEPRI, r1
 8003ce8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003cea:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003cec:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003cf2:	6939      	ldr	r1, [r7, #16]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4413      	add	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	440b      	add	r3, r1
 8003d02:	3304      	adds	r3, #4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	dbeb      	blt.n	8003cf2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003d1a:	e000      	b.n	8003d1e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003d1c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	da3f      	bge.n	8003da8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003d28:	6939      	ldr	r1, [r7, #16]
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	1c5a      	adds	r2, r3, #1
 8003d2e:	4613      	mov	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	440b      	add	r3, r1
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003d3c:	6939      	ldr	r1, [r7, #16]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	4613      	mov	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4413      	add	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003d52:	6939      	ldr	r1, [r7, #16]
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	440b      	add	r3, r1
 8003d60:	3320      	adds	r3, #32
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003d66:	6939      	ldr	r1, [r7, #16]
 8003d68:	69fa      	ldr	r2, [r7, #28]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	4413      	add	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	440b      	add	r3, r1
 8003d74:	3328      	adds	r3, #40	; 0x28
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003d7a:	6939      	ldr	r1, [r7, #16]
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	4413      	add	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	440b      	add	r3, r1
 8003d88:	3324      	adds	r3, #36	; 0x24
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003d8e:	6939      	ldr	r1, [r7, #16]
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	4613      	mov	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4413      	add	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	440b      	add	r3, r1
 8003d9c:	332c      	adds	r3, #44	; 0x2c
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003da2:	f3bf 8f5f 	dmb	sy
 8003da6:	e002      	b.n	8003dae <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003da8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dac:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003db4:	69fb      	ldr	r3, [r7, #28]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20014380 	.word	0x20014380

08003dc4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003dd2:	4b21      	ldr	r3, [pc, #132]	; (8003e58 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003dd4:	623b      	str	r3, [r7, #32]
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003de0:	f7ff fe8e 	bl	8003b00 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003de4:	4b1c      	ldr	r3, [pc, #112]	; (8003e58 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003de6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d82c      	bhi.n	8003e48 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003dee:	f3ef 8311 	mrs	r3, BASEPRI
 8003df2:	f04f 0120 	mov.w	r1, #32
 8003df6:	f381 8811 	msr	BASEPRI, r1
 8003dfa:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003dfc:	68fa      	ldr	r2, [r7, #12]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	3360      	adds	r3, #96	; 0x60
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00e      	beq.n	8003e32 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e36:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003e38:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003e42:	2300      	movs	r3, #0
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
 8003e46:	e002      	b.n	8003e4e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003e48:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3728      	adds	r7, #40	; 0x28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	20014380 	.word	0x20014380

08003e5c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00f      	beq.n	8003e92 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8003e72:	e002      	b.n	8003e7a <_EncodeStr+0x1e>
      Len++;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	3301      	adds	r3, #1
 8003e78:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4413      	add	r3, r2
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f6      	bne.n	8003e74 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d901      	bls.n	8003e92 <_EncodeStr+0x36>
      Len = Limit;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2bfe      	cmp	r3, #254	; 0xfe
 8003e96:	d806      	bhi.n	8003ea6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	60fa      	str	r2, [r7, #12]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]
 8003ea4:	e011      	b.n	8003eca <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	60fa      	str	r2, [r7, #12]
 8003eac:	22ff      	movs	r2, #255	; 0xff
 8003eae:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	60fa      	str	r2, [r7, #12]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	0a19      	lsrs	r1, r3, #8
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	60fa      	str	r2, [r7, #12]
 8003ec6:	b2ca      	uxtb	r2, r1
 8003ec8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003ece:	e00a      	b.n	8003ee6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	1c53      	adds	r3, r2, #1
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1c59      	adds	r1, r3, #1
 8003eda:	60f9      	str	r1, [r7, #12]
 8003edc:	7812      	ldrb	r2, [r2, #0]
 8003ede:	701a      	strb	r2, [r3, #0]
    n++;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d3f0      	bcc.n	8003ed0 <_EncodeStr+0x74>
  }
  return pPayload;
 8003eee:	68fb      	ldr	r3, [r7, #12]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f1a:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <_HandleIncomingPacket+0xe0>)
 8003f1c:	7e1b      	ldrb	r3, [r3, #24]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	1cfb      	adds	r3, r7, #3
 8003f22:	2201      	movs	r2, #1
 8003f24:	4619      	mov	r1, r3
 8003f26:	f7ff fe43 	bl	8003bb0 <SEGGER_RTT_ReadNoLock>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	dd54      	ble.n	8003fde <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003f34:	78fb      	ldrb	r3, [r7, #3]
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d032      	beq.n	8003fa0 <_HandleIncomingPacket+0x8c>
 8003f3a:	2b80      	cmp	r3, #128	; 0x80
 8003f3c:	dc42      	bgt.n	8003fc4 <_HandleIncomingPacket+0xb0>
 8003f3e:	2b07      	cmp	r3, #7
 8003f40:	dc16      	bgt.n	8003f70 <_HandleIncomingPacket+0x5c>
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	dd3e      	ble.n	8003fc4 <_HandleIncomingPacket+0xb0>
 8003f46:	3b01      	subs	r3, #1
 8003f48:	2b06      	cmp	r3, #6
 8003f4a:	d83b      	bhi.n	8003fc4 <_HandleIncomingPacket+0xb0>
 8003f4c:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <_HandleIncomingPacket+0x40>)
 8003f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f52:	bf00      	nop
 8003f54:	08003f77 	.word	0x08003f77
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	08003f83 	.word	0x08003f83
 8003f60:	08003f89 	.word	0x08003f89
 8003f64:	08003f8f 	.word	0x08003f8f
 8003f68:	08003f95 	.word	0x08003f95
 8003f6c:	08003f9b 	.word	0x08003f9b
 8003f70:	2b7f      	cmp	r3, #127	; 0x7f
 8003f72:	d036      	beq.n	8003fe2 <_HandleIncomingPacket+0xce>
 8003f74:	e026      	b.n	8003fc4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003f76:	f000 faa3 	bl	80044c0 <SEGGER_SYSVIEW_Start>
      break;
 8003f7a:	e037      	b.n	8003fec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003f7c:	f000 fb5c 	bl	8004638 <SEGGER_SYSVIEW_Stop>
      break;
 8003f80:	e034      	b.n	8003fec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003f82:	f000 fd35 	bl	80049f0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003f86:	e031      	b.n	8003fec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003f88:	f000 fcfa 	bl	8004980 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003f8c:	e02e      	b.n	8003fec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003f8e:	f000 fb79 	bl	8004684 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003f92:	e02b      	b.n	8003fec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003f94:	f000 ffb8 	bl	8004f08 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003f98:	e028      	b.n	8003fec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003f9a:	f000 ff97 	bl	8004ecc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003f9e:	e025      	b.n	8003fec <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fa0:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <_HandleIncomingPacket+0xe0>)
 8003fa2:	7e1b      	ldrb	r3, [r3, #24]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	1cfb      	adds	r3, r7, #3
 8003fa8:	2201      	movs	r2, #1
 8003faa:	4619      	mov	r1, r3
 8003fac:	f7ff fe00 	bl	8003bb0 <SEGGER_RTT_ReadNoLock>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	dd15      	ble.n	8003fe6 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 ff05 	bl	8004dcc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003fc2:	e010      	b.n	8003fe6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	b25b      	sxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	da0e      	bge.n	8003fea <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003fcc:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <_HandleIncomingPacket+0xe0>)
 8003fce:	7e1b      	ldrb	r3, [r3, #24]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	1cfb      	adds	r3, r7, #3
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f7ff fdea 	bl	8003bb0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003fdc:	e005      	b.n	8003fea <_HandleIncomingPacket+0xd6>
    }
  }
 8003fde:	bf00      	nop
 8003fe0:	e004      	b.n	8003fec <_HandleIncomingPacket+0xd8>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <_HandleIncomingPacket+0xd8>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <_HandleIncomingPacket+0xd8>
      break;
 8003fea:	bf00      	nop
}
 8003fec:	bf00      	nop
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20014220 	.word	0x20014220

08003ff8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08c      	sub	sp, #48	; 0x30
 8003ffc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003ffe:	2301      	movs	r3, #1
 8004000:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004002:	1d3b      	adds	r3, r7, #4
 8004004:	3301      	adds	r3, #1
 8004006:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400c:	4b32      	ldr	r3, [pc, #200]	; (80040d8 <_TrySendOverflowPacket+0xe0>)
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	62bb      	str	r3, [r7, #40]	; 0x28
 8004012:	e00b      	b.n	800402c <_TrySendOverflowPacket+0x34>
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	b2da      	uxtb	r2, r3
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401a:	1c59      	adds	r1, r3, #1
 800401c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800401e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	09db      	lsrs	r3, r3, #7
 800402a:	62bb      	str	r3, [r7, #40]	; 0x28
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	2b7f      	cmp	r3, #127	; 0x7f
 8004030:	d8f0      	bhi.n	8004014 <_TrySendOverflowPacket+0x1c>
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004038:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004042:	4b26      	ldr	r3, [pc, #152]	; (80040dc <_TrySendOverflowPacket+0xe4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004048:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <_TrySendOverflowPacket+0xe0>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	623b      	str	r3, [r7, #32]
 800405a:	e00b      	b.n	8004074 <_TrySendOverflowPacket+0x7c>
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	b2da      	uxtb	r2, r3
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	1c59      	adds	r1, r3, #1
 8004064:	6279      	str	r1, [r7, #36]	; 0x24
 8004066:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800406a:	b2d2      	uxtb	r2, r2
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	09db      	lsrs	r3, r3, #7
 8004072:	623b      	str	r3, [r7, #32]
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	2b7f      	cmp	r3, #127	; 0x7f
 8004078:	d8f0      	bhi.n	800405c <_TrySendOverflowPacket+0x64>
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	627a      	str	r2, [r7, #36]	; 0x24
 8004080:	6a3a      	ldr	r2, [r7, #32]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800408a:	4b13      	ldr	r3, [pc, #76]	; (80040d8 <_TrySendOverflowPacket+0xe0>)
 800408c:	785b      	ldrb	r3, [r3, #1]
 800408e:	4618      	mov	r0, r3
 8004090:	1d3b      	adds	r3, r7, #4
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	461a      	mov	r2, r3
 8004098:	1d3b      	adds	r3, r7, #4
 800409a:	4619      	mov	r1, r3
 800409c:	f7fc f8b8 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80040a0:	4603      	mov	r3, r0
 80040a2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80040a4:	f7ff fd1c 	bl	8003ae0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80040ae:	4a0a      	ldr	r2, [pc, #40]	; (80040d8 <_TrySendOverflowPacket+0xe0>)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <_TrySendOverflowPacket+0xe0>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <_TrySendOverflowPacket+0xe0>)
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	e004      	b.n	80040cc <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <_TrySendOverflowPacket+0xe0>)
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	3301      	adds	r3, #1
 80040c8:	4a03      	ldr	r2, [pc, #12]	; (80040d8 <_TrySendOverflowPacket+0xe0>)
 80040ca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80040cc:	693b      	ldr	r3, [r7, #16]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3730      	adds	r7, #48	; 0x30
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20014220 	.word	0x20014220
 80040dc:	e0001004 	.word	0xe0001004

080040e0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	; 0x28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80040ec:	4b6d      	ldr	r3, [pc, #436]	; (80042a4 <_SendPacket+0x1c4>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d010      	beq.n	8004116 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80040f4:	4b6b      	ldr	r3, [pc, #428]	; (80042a4 <_SendPacket+0x1c4>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 80a5 	beq.w	8004248 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80040fe:	4b69      	ldr	r3, [pc, #420]	; (80042a4 <_SendPacket+0x1c4>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d109      	bne.n	800411a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004106:	f7ff ff77 	bl	8003ff8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800410a:	4b66      	ldr	r3, [pc, #408]	; (80042a4 <_SendPacket+0x1c4>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b01      	cmp	r3, #1
 8004110:	f040 809c 	bne.w	800424c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004114:	e001      	b.n	800411a <_SendPacket+0x3a>
    goto Send;
 8004116:	bf00      	nop
 8004118:	e000      	b.n	800411c <_SendPacket+0x3c>
Send:
 800411a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b1f      	cmp	r3, #31
 8004120:	d809      	bhi.n	8004136 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004122:	4b60      	ldr	r3, [pc, #384]	; (80042a4 <_SendPacket+0x1c4>)
 8004124:	69da      	ldr	r2, [r3, #28]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	2b00      	cmp	r3, #0
 8004132:	f040 808d 	bne.w	8004250 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b17      	cmp	r3, #23
 800413a:	d807      	bhi.n	800414c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3b01      	subs	r3, #1
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	e03d      	b.n	80041c8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	2b7f      	cmp	r3, #127	; 0x7f
 8004158:	d912      	bls.n	8004180 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	09da      	lsrs	r2, r3, #7
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3b01      	subs	r3, #1
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	3a01      	subs	r2, #1
 8004172:	60fa      	str	r2, [r7, #12]
 8004174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004178:	b2da      	uxtb	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	e006      	b.n	800418e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3b01      	subs	r3, #1
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b7f      	cmp	r3, #127	; 0x7f
 8004192:	d912      	bls.n	80041ba <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	09da      	lsrs	r2, r3, #7
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3b01      	subs	r3, #1
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	3a01      	subs	r2, #1
 80041ac:	60fa      	str	r2, [r7, #12]
 80041ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	e006      	b.n	80041c8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3b01      	subs	r3, #1
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80041c8:	4b37      	ldr	r3, [pc, #220]	; (80042a8 <_SendPacket+0x1c8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80041ce:	4b35      	ldr	r3, [pc, #212]	; (80042a4 <_SendPacket+0x1c4>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	623b      	str	r3, [r7, #32]
 80041e0:	e00b      	b.n	80041fa <_SendPacket+0x11a>
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	1c59      	adds	r1, r3, #1
 80041ea:	6279      	str	r1, [r7, #36]	; 0x24
 80041ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	09db      	lsrs	r3, r3, #7
 80041f8:	623b      	str	r3, [r7, #32]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	2b7f      	cmp	r3, #127	; 0x7f
 80041fe:	d8f0      	bhi.n	80041e2 <_SendPacket+0x102>
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	627a      	str	r2, [r7, #36]	; 0x24
 8004206:	6a3a      	ldr	r2, [r7, #32]
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004210:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <_SendPacket+0x1c4>)
 8004212:	785b      	ldrb	r3, [r3, #1]
 8004214:	4618      	mov	r0, r3
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	461a      	mov	r2, r3
 800421e:	68f9      	ldr	r1, [r7, #12]
 8004220:	f7fb fff6 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004224:	4603      	mov	r3, r0
 8004226:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004228:	f7ff fc5a 	bl	8003ae0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004232:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <_SendPacket+0x1c4>)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	60d3      	str	r3, [r2, #12]
 8004238:	e00b      	b.n	8004252 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800423a:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <_SendPacket+0x1c4>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	3301      	adds	r3, #1
 8004240:	b2da      	uxtb	r2, r3
 8004242:	4b18      	ldr	r3, [pc, #96]	; (80042a4 <_SendPacket+0x1c4>)
 8004244:	701a      	strb	r2, [r3, #0]
 8004246:	e004      	b.n	8004252 <_SendPacket+0x172>
    goto SendDone;
 8004248:	bf00      	nop
 800424a:	e002      	b.n	8004252 <_SendPacket+0x172>
      goto SendDone;
 800424c:	bf00      	nop
 800424e:	e000      	b.n	8004252 <_SendPacket+0x172>
      goto SendDone;
 8004250:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004252:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <_SendPacket+0x1c4>)
 8004254:	7e1b      	ldrb	r3, [r3, #24]
 8004256:	4619      	mov	r1, r3
 8004258:	4a14      	ldr	r2, [pc, #80]	; (80042ac <_SendPacket+0x1cc>)
 800425a:	460b      	mov	r3, r1
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	440b      	add	r3, r1
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	336c      	adds	r3, #108	; 0x6c
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b0e      	ldr	r3, [pc, #56]	; (80042a4 <_SendPacket+0x1c4>)
 800426a:	7e1b      	ldrb	r3, [r3, #24]
 800426c:	4618      	mov	r0, r3
 800426e:	490f      	ldr	r1, [pc, #60]	; (80042ac <_SendPacket+0x1cc>)
 8004270:	4603      	mov	r3, r0
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	4403      	add	r3, r0
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	440b      	add	r3, r1
 800427a:	3370      	adds	r3, #112	; 0x70
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d00b      	beq.n	800429a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004282:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <_SendPacket+0x1c4>)
 8004284:	789b      	ldrb	r3, [r3, #2]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d107      	bne.n	800429a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800428a:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <_SendPacket+0x1c4>)
 800428c:	2201      	movs	r2, #1
 800428e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004290:	f7ff fe40 	bl	8003f14 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004294:	4b03      	ldr	r3, [pc, #12]	; (80042a4 <_SendPacket+0x1c4>)
 8004296:	2200      	movs	r2, #0
 8004298:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800429a:	bf00      	nop
 800429c:	3728      	adds	r7, #40	; 0x28
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20014220 	.word	0x20014220
 80042a8:	e0001004 	.word	0xe0001004
 80042ac:	20014380 	.word	0x20014380

080042b0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80042be:	2300      	movs	r3, #0
 80042c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042c4:	4917      	ldr	r1, [pc, #92]	; (8004324 <SEGGER_SYSVIEW_Init+0x74>)
 80042c6:	4818      	ldr	r0, [pc, #96]	; (8004328 <SEGGER_SYSVIEW_Init+0x78>)
 80042c8:	f7ff fcf8 	bl	8003cbc <SEGGER_RTT_AllocUpBuffer>
 80042cc:	4603      	mov	r3, r0
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	4b16      	ldr	r3, [pc, #88]	; (800432c <SEGGER_SYSVIEW_Init+0x7c>)
 80042d2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80042d4:	4b15      	ldr	r3, [pc, #84]	; (800432c <SEGGER_SYSVIEW_Init+0x7c>)
 80042d6:	785a      	ldrb	r2, [r3, #1]
 80042d8:	4b14      	ldr	r3, [pc, #80]	; (800432c <SEGGER_SYSVIEW_Init+0x7c>)
 80042da:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80042dc:	4b13      	ldr	r3, [pc, #76]	; (800432c <SEGGER_SYSVIEW_Init+0x7c>)
 80042de:	7e1b      	ldrb	r3, [r3, #24]
 80042e0:	4618      	mov	r0, r3
 80042e2:	2300      	movs	r3, #0
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	2308      	movs	r3, #8
 80042e8:	4a11      	ldr	r2, [pc, #68]	; (8004330 <SEGGER_SYSVIEW_Init+0x80>)
 80042ea:	490f      	ldr	r1, [pc, #60]	; (8004328 <SEGGER_SYSVIEW_Init+0x78>)
 80042ec:	f7ff fd6a 	bl	8003dc4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80042f0:	4b0e      	ldr	r3, [pc, #56]	; (800432c <SEGGER_SYSVIEW_Init+0x7c>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80042f6:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <SEGGER_SYSVIEW_Init+0x84>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a0c      	ldr	r2, [pc, #48]	; (800432c <SEGGER_SYSVIEW_Init+0x7c>)
 80042fc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80042fe:	4a0b      	ldr	r2, [pc, #44]	; (800432c <SEGGER_SYSVIEW_Init+0x7c>)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004304:	4a09      	ldr	r2, [pc, #36]	; (800432c <SEGGER_SYSVIEW_Init+0x7c>)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800430a:	4a08      	ldr	r2, [pc, #32]	; (800432c <SEGGER_SYSVIEW_Init+0x7c>)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004310:	4a06      	ldr	r2, [pc, #24]	; (800432c <SEGGER_SYSVIEW_Init+0x7c>)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <SEGGER_SYSVIEW_Init+0x7c>)
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20013218 	.word	0x20013218
 8004328:	080051cc 	.word	0x080051cc
 800432c:	20014220 	.word	0x20014220
 8004330:	20014218 	.word	0x20014218
 8004334:	e0001004 	.word	0xe0001004

08004338 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004340:	4a04      	ldr	r2, [pc, #16]	; (8004354 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6113      	str	r3, [r2, #16]
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	20014220 	.word	0x20014220

08004358 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004360:	f3ef 8311 	mrs	r3, BASEPRI
 8004364:	f04f 0120 	mov.w	r1, #32
 8004368:	f381 8811 	msr	BASEPRI, r1
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	4808      	ldr	r0, [pc, #32]	; (8004390 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004370:	f7ff fdc4 	bl	8003efc <_PreparePacket>
 8004374:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68b9      	ldr	r1, [r7, #8]
 800437a:	68b8      	ldr	r0, [r7, #8]
 800437c:	f7ff feb0 	bl	80040e0 <_SendPacket>
  RECORD_END();
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f383 8811 	msr	BASEPRI, r3
}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20014250 	.word	0x20014250

08004394 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800439e:	f3ef 8311 	mrs	r3, BASEPRI
 80043a2:	f04f 0120 	mov.w	r1, #32
 80043a6:	f381 8811 	msr	BASEPRI, r1
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	4816      	ldr	r0, [pc, #88]	; (8004408 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80043ae:	f7ff fda5 	bl	8003efc <_PreparePacket>
 80043b2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	e00b      	b.n	80043da <SEGGER_SYSVIEW_RecordU32+0x46>
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	1c59      	adds	r1, r3, #1
 80043ca:	61f9      	str	r1, [r7, #28]
 80043cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	09db      	lsrs	r3, r3, #7
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b7f      	cmp	r3, #127	; 0x7f
 80043de:	d8f0      	bhi.n	80043c2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	61fa      	str	r2, [r7, #28]
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	6938      	ldr	r0, [r7, #16]
 80043f6:	f7ff fe73 	bl	80040e0 <_SendPacket>
  RECORD_END();
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f383 8811 	msr	BASEPRI, r3
}
 8004400:	bf00      	nop
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20014250 	.word	0x20014250

0800440c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b08c      	sub	sp, #48	; 0x30
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004418:	f3ef 8311 	mrs	r3, BASEPRI
 800441c:	f04f 0120 	mov.w	r1, #32
 8004420:	f381 8811 	msr	BASEPRI, r1
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	4825      	ldr	r0, [pc, #148]	; (80044bc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004428:	f7ff fd68 	bl	8003efc <_PreparePacket>
 800442c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28
 800443a:	e00b      	b.n	8004454 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443e:	b2da      	uxtb	r2, r3
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	1c59      	adds	r1, r3, #1
 8004444:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	09db      	lsrs	r3, r3, #7
 8004452:	62bb      	str	r3, [r7, #40]	; 0x28
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	2b7f      	cmp	r3, #127	; 0x7f
 8004458:	d8f0      	bhi.n	800443c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445c:	1c5a      	adds	r2, r3, #1
 800445e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	623b      	str	r3, [r7, #32]
 8004472:	e00b      	b.n	800448c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	b2da      	uxtb	r2, r3
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	1c59      	adds	r1, r3, #1
 800447c:	6279      	str	r1, [r7, #36]	; 0x24
 800447e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	09db      	lsrs	r3, r3, #7
 800448a:	623b      	str	r3, [r7, #32]
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	2b7f      	cmp	r3, #127	; 0x7f
 8004490:	d8f0      	bhi.n	8004474 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	627a      	str	r2, [r7, #36]	; 0x24
 8004498:	6a3a      	ldr	r2, [r7, #32]
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	6979      	ldr	r1, [r7, #20]
 80044a6:	69b8      	ldr	r0, [r7, #24]
 80044a8:	f7ff fe1a 	bl	80040e0 <_SendPacket>
  RECORD_END();
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f383 8811 	msr	BASEPRI, r3
}
 80044b2:	bf00      	nop
 80044b4:	3730      	adds	r7, #48	; 0x30
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20014250 	.word	0x20014250

080044c0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08c      	sub	sp, #48	; 0x30
 80044c4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80044c6:	4b59      	ldr	r3, [pc, #356]	; (800462c <SEGGER_SYSVIEW_Start+0x16c>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80044cc:	f3ef 8311 	mrs	r3, BASEPRI
 80044d0:	f04f 0120 	mov.w	r1, #32
 80044d4:	f381 8811 	msr	BASEPRI, r1
 80044d8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80044da:	4b54      	ldr	r3, [pc, #336]	; (800462c <SEGGER_SYSVIEW_Start+0x16c>)
 80044dc:	785b      	ldrb	r3, [r3, #1]
 80044de:	220a      	movs	r2, #10
 80044e0:	4953      	ldr	r1, [pc, #332]	; (8004630 <SEGGER_SYSVIEW_Start+0x170>)
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fb fe94 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80044ee:	f7ff faf7 	bl	8003ae0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80044f2:	200a      	movs	r0, #10
 80044f4:	f7ff ff30 	bl	8004358 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80044f8:	f3ef 8311 	mrs	r3, BASEPRI
 80044fc:	f04f 0120 	mov.w	r1, #32
 8004500:	f381 8811 	msr	BASEPRI, r1
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	484b      	ldr	r0, [pc, #300]	; (8004634 <SEGGER_SYSVIEW_Start+0x174>)
 8004508:	f7ff fcf8 	bl	8003efc <_PreparePacket>
 800450c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004516:	4b45      	ldr	r3, [pc, #276]	; (800462c <SEGGER_SYSVIEW_Start+0x16c>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
 800451c:	e00b      	b.n	8004536 <SEGGER_SYSVIEW_Start+0x76>
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	b2da      	uxtb	r2, r3
 8004522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004524:	1c59      	adds	r1, r3, #1
 8004526:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004528:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	09db      	lsrs	r3, r3, #7
 8004534:	62bb      	str	r3, [r7, #40]	; 0x28
 8004536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004538:	2b7f      	cmp	r3, #127	; 0x7f
 800453a:	d8f0      	bhi.n	800451e <SEGGER_SYSVIEW_Start+0x5e>
 800453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
 8004550:	4b36      	ldr	r3, [pc, #216]	; (800462c <SEGGER_SYSVIEW_Start+0x16c>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	623b      	str	r3, [r7, #32]
 8004556:	e00b      	b.n	8004570 <SEGGER_SYSVIEW_Start+0xb0>
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	1c59      	adds	r1, r3, #1
 8004560:	6279      	str	r1, [r7, #36]	; 0x24
 8004562:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	09db      	lsrs	r3, r3, #7
 800456e:	623b      	str	r3, [r7, #32]
 8004570:	6a3b      	ldr	r3, [r7, #32]
 8004572:	2b7f      	cmp	r3, #127	; 0x7f
 8004574:	d8f0      	bhi.n	8004558 <SEGGER_SYSVIEW_Start+0x98>
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	627a      	str	r2, [r7, #36]	; 0x24
 800457c:	6a3a      	ldr	r2, [r7, #32]
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	61fb      	str	r3, [r7, #28]
 800458a:	4b28      	ldr	r3, [pc, #160]	; (800462c <SEGGER_SYSVIEW_Start+0x16c>)
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	61bb      	str	r3, [r7, #24]
 8004590:	e00b      	b.n	80045aa <SEGGER_SYSVIEW_Start+0xea>
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	1c59      	adds	r1, r3, #1
 800459a:	61f9      	str	r1, [r7, #28]
 800459c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	701a      	strb	r2, [r3, #0]
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	09db      	lsrs	r3, r3, #7
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b7f      	cmp	r3, #127	; 0x7f
 80045ae:	d8f0      	bhi.n	8004592 <SEGGER_SYSVIEW_Start+0xd2>
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	61fa      	str	r2, [r7, #28]
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	e00b      	b.n	80045e2 <SEGGER_SYSVIEW_Start+0x122>
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	1c59      	adds	r1, r3, #1
 80045d2:	6179      	str	r1, [r7, #20]
 80045d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	09db      	lsrs	r3, r3, #7
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b7f      	cmp	r3, #127	; 0x7f
 80045e6:	d8f0      	bhi.n	80045ca <SEGGER_SYSVIEW_Start+0x10a>
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	617a      	str	r2, [r7, #20]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80045f8:	2218      	movs	r2, #24
 80045fa:	6839      	ldr	r1, [r7, #0]
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff fd6f 	bl	80040e0 <_SendPacket>
      RECORD_END();
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004608:	4b08      	ldr	r3, [pc, #32]	; (800462c <SEGGER_SYSVIEW_Start+0x16c>)
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <SEGGER_SYSVIEW_Start+0x16c>)
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004616:	f000 f9eb 	bl	80049f0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800461a:	f000 f9b1 	bl	8004980 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800461e:	f000 fc73 	bl	8004f08 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004622:	bf00      	nop
 8004624:	3730      	adds	r7, #48	; 0x30
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20014220 	.word	0x20014220
 8004630:	080051f4 	.word	0x080051f4
 8004634:	20014250 	.word	0x20014250

08004638 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800463e:	f3ef 8311 	mrs	r3, BASEPRI
 8004642:	f04f 0120 	mov.w	r1, #32
 8004646:	f381 8811 	msr	BASEPRI, r1
 800464a:	607b      	str	r3, [r7, #4]
 800464c:	480b      	ldr	r0, [pc, #44]	; (800467c <SEGGER_SYSVIEW_Stop+0x44>)
 800464e:	f7ff fc55 	bl	8003efc <_PreparePacket>
 8004652:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004654:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <SEGGER_SYSVIEW_Stop+0x48>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d007      	beq.n	800466c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800465c:	220b      	movs	r2, #11
 800465e:	6839      	ldr	r1, [r7, #0]
 8004660:	6838      	ldr	r0, [r7, #0]
 8004662:	f7ff fd3d 	bl	80040e0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004666:	4b06      	ldr	r3, [pc, #24]	; (8004680 <SEGGER_SYSVIEW_Stop+0x48>)
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f383 8811 	msr	BASEPRI, r3
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20014250 	.word	0x20014250
 8004680:	20014220 	.word	0x20014220

08004684 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004684:	b580      	push	{r7, lr}
 8004686:	b08c      	sub	sp, #48	; 0x30
 8004688:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800468a:	f3ef 8311 	mrs	r3, BASEPRI
 800468e:	f04f 0120 	mov.w	r1, #32
 8004692:	f381 8811 	msr	BASEPRI, r1
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	4845      	ldr	r0, [pc, #276]	; (80047b0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800469a:	f7ff fc2f 	bl	8003efc <_PreparePacket>
 800469e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046a8:	4b42      	ldr	r3, [pc, #264]	; (80047b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ae:	e00b      	b.n	80046c8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b6:	1c59      	adds	r1, r3, #1
 80046b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	09db      	lsrs	r3, r3, #7
 80046c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	2b7f      	cmp	r3, #127	; 0x7f
 80046cc:	d8f0      	bhi.n	80046b0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80046ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
 80046e2:	4b34      	ldr	r3, [pc, #208]	; (80047b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	623b      	str	r3, [r7, #32]
 80046e8:	e00b      	b.n	8004702 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	1c59      	adds	r1, r3, #1
 80046f2:	6279      	str	r1, [r7, #36]	; 0x24
 80046f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046f8:	b2d2      	uxtb	r2, r2
 80046fa:	701a      	strb	r2, [r3, #0]
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	09db      	lsrs	r3, r3, #7
 8004700:	623b      	str	r3, [r7, #32]
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	2b7f      	cmp	r3, #127	; 0x7f
 8004706:	d8f0      	bhi.n	80046ea <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	627a      	str	r2, [r7, #36]	; 0x24
 800470e:	6a3a      	ldr	r2, [r7, #32]
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	4b25      	ldr	r3, [pc, #148]	; (80047b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	e00b      	b.n	800473c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	b2da      	uxtb	r2, r3
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	1c59      	adds	r1, r3, #1
 800472c:	61f9      	str	r1, [r7, #28]
 800472e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	09db      	lsrs	r3, r3, #7
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b7f      	cmp	r3, #127	; 0x7f
 8004740:	d8f0      	bhi.n	8004724 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	61fa      	str	r2, [r7, #28]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	e00b      	b.n	8004774 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	b2da      	uxtb	r2, r3
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	1c59      	adds	r1, r3, #1
 8004764:	6179      	str	r1, [r7, #20]
 8004766:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	09db      	lsrs	r3, r3, #7
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2b7f      	cmp	r3, #127	; 0x7f
 8004778:	d8f0      	bhi.n	800475c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	617a      	str	r2, [r7, #20]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800478a:	2218      	movs	r2, #24
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	68b8      	ldr	r0, [r7, #8]
 8004790:	f7ff fca6 	bl	80040e0 <_SendPacket>
  RECORD_END();
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800479a:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80047a2:	4b04      	ldr	r3, [pc, #16]	; (80047b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	4798      	blx	r3
  }
}
 80047a8:	bf00      	nop
 80047aa:	3730      	adds	r7, #48	; 0x30
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20014250 	.word	0x20014250
 80047b4:	20014220 	.word	0x20014220

080047b8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b092      	sub	sp, #72	; 0x48
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80047c0:	f3ef 8311 	mrs	r3, BASEPRI
 80047c4:	f04f 0120 	mov.w	r1, #32
 80047c8:	f381 8811 	msr	BASEPRI, r1
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	486a      	ldr	r0, [pc, #424]	; (8004978 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80047d0:	f7ff fb94 	bl	8003efc <_PreparePacket>
 80047d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	647b      	str	r3, [r7, #68]	; 0x44
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	4b66      	ldr	r3, [pc, #408]	; (800497c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	643b      	str	r3, [r7, #64]	; 0x40
 80047ea:	e00b      	b.n	8004804 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80047ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f2:	1c59      	adds	r1, r3, #1
 80047f4:	6479      	str	r1, [r7, #68]	; 0x44
 80047f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004800:	09db      	lsrs	r3, r3, #7
 8004802:	643b      	str	r3, [r7, #64]	; 0x40
 8004804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004806:	2b7f      	cmp	r3, #127	; 0x7f
 8004808:	d8f0      	bhi.n	80047ec <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800480a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800480c:	1c5a      	adds	r2, r3, #1
 800480e:	647a      	str	r2, [r7, #68]	; 0x44
 8004810:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004818:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	63bb      	str	r3, [r7, #56]	; 0x38
 8004824:	e00b      	b.n	800483e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004828:	b2da      	uxtb	r2, r3
 800482a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482c:	1c59      	adds	r1, r3, #1
 800482e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004830:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483a:	09db      	lsrs	r3, r3, #7
 800483c:	63bb      	str	r3, [r7, #56]	; 0x38
 800483e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004840:	2b7f      	cmp	r3, #127	; 0x7f
 8004842:	d8f0      	bhi.n	8004826 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	63fa      	str	r2, [r7, #60]	; 0x3c
 800484a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800484c:	b2d2      	uxtb	r2, r2
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004852:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	4619      	mov	r1, r3
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f7ff fafd 	bl	8003e5c <_EncodeStr>
 8004862:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004864:	2209      	movs	r2, #9
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	6938      	ldr	r0, [r7, #16]
 800486a:	f7ff fc39 	bl	80040e0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4b40      	ldr	r3, [pc, #256]	; (800497c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	633b      	str	r3, [r7, #48]	; 0x30
 8004882:	e00b      	b.n	800489c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	b2da      	uxtb	r2, r3
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	1c59      	adds	r1, r3, #1
 800488c:	6379      	str	r1, [r7, #52]	; 0x34
 800488e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	09db      	lsrs	r3, r3, #7
 800489a:	633b      	str	r3, [r7, #48]	; 0x30
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	2b7f      	cmp	r3, #127	; 0x7f
 80048a0:	d8f0      	bhi.n	8004884 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80048a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	637a      	str	r2, [r7, #52]	; 0x34
 80048a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80048bc:	e00b      	b.n	80048d6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	1c59      	adds	r1, r3, #1
 80048c6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	09db      	lsrs	r3, r3, #7
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	2b7f      	cmp	r3, #127	; 0x7f
 80048da:	d8f0      	bhi.n	80048be <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	623b      	str	r3, [r7, #32]
 80048f6:	e00b      	b.n	8004910 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	1c59      	adds	r1, r3, #1
 8004900:	6279      	str	r1, [r7, #36]	; 0x24
 8004902:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	09db      	lsrs	r3, r3, #7
 800490e:	623b      	str	r3, [r7, #32]
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	2b7f      	cmp	r3, #127	; 0x7f
 8004914:	d8f0      	bhi.n	80048f8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	627a      	str	r2, [r7, #36]	; 0x24
 800491c:	6a3a      	ldr	r2, [r7, #32]
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	2300      	movs	r3, #0
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	e00b      	b.n	8004948 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	b2da      	uxtb	r2, r3
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	1c59      	adds	r1, r3, #1
 8004938:	61f9      	str	r1, [r7, #28]
 800493a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	09db      	lsrs	r3, r3, #7
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b7f      	cmp	r3, #127	; 0x7f
 800494c:	d8f0      	bhi.n	8004930 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	61fa      	str	r2, [r7, #28]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800495e:	2215      	movs	r2, #21
 8004960:	68f9      	ldr	r1, [r7, #12]
 8004962:	6938      	ldr	r0, [r7, #16]
 8004964:	f7ff fbbc 	bl	80040e0 <_SendPacket>
  RECORD_END();
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f383 8811 	msr	BASEPRI, r3
}
 800496e:	bf00      	nop
 8004970:	3748      	adds	r7, #72	; 0x48
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20014250 	.word	0x20014250
 800497c:	20014220 	.word	0x20014220

08004980 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004984:	4b07      	ldr	r3, [pc, #28]	; (80049a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d008      	beq.n	800499e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800498c:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004996:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	4798      	blx	r3
  }
}
 800499e:	bf00      	nop
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20014220 	.word	0x20014220

080049a8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80049b0:	f3ef 8311 	mrs	r3, BASEPRI
 80049b4:	f04f 0120 	mov.w	r1, #32
 80049b8:	f381 8811 	msr	BASEPRI, r1
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	480b      	ldr	r0, [pc, #44]	; (80049ec <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80049c0:	f7ff fa9c 	bl	8003efc <_PreparePacket>
 80049c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80049c6:	2280      	movs	r2, #128	; 0x80
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	6938      	ldr	r0, [r7, #16]
 80049cc:	f7ff fa46 	bl	8003e5c <_EncodeStr>
 80049d0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80049d2:	220e      	movs	r2, #14
 80049d4:	68f9      	ldr	r1, [r7, #12]
 80049d6:	6938      	ldr	r0, [r7, #16]
 80049d8:	f7ff fb82 	bl	80040e0 <_SendPacket>
  RECORD_END();
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	f383 8811 	msr	BASEPRI, r3
}
 80049e2:	bf00      	nop
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20014250 	.word	0x20014250

080049f0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80049f0:	b590      	push	{r4, r7, lr}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01a      	beq.n	8004a34 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80049fe:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d015      	beq.n	8004a34 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004a08:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4798      	blx	r3
 8004a10:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004a14:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004a16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	f04f 0300 	mov.w	r3, #0
 8004a22:	000a      	movs	r2, r1
 8004a24:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004a26:	4613      	mov	r3, r2
 8004a28:	461a      	mov	r2, r3
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	200d      	movs	r0, #13
 8004a2e:	f7ff fced 	bl	800440c <SEGGER_SYSVIEW_RecordU32x2>
 8004a32:	e006      	b.n	8004a42 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	200c      	movs	r0, #12
 8004a3c:	f7ff fcaa 	bl	8004394 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd90      	pop	{r4, r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20014220 	.word	0x20014220
 8004a50:	e0001004 	.word	0xe0001004

08004a54 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a5e:	f04f 0120 	mov.w	r1, #32
 8004a62:	f381 8811 	msr	BASEPRI, r1
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	4819      	ldr	r0, [pc, #100]	; (8004ad0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004a6a:	f7ff fa47 	bl	8003efc <_PreparePacket>
 8004a6e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004a74:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	613b      	str	r3, [r7, #16]
 8004a86:	e00b      	b.n	8004aa0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	1c59      	adds	r1, r3, #1
 8004a90:	6179      	str	r1, [r7, #20]
 8004a92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	09db      	lsrs	r3, r3, #7
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8004aa4:	d8f0      	bhi.n	8004a88 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	617a      	str	r2, [r7, #20]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	68b8      	ldr	r0, [r7, #8]
 8004abc:	f7ff fb10 	bl	80040e0 <_SendPacket>
  RECORD_END();
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f383 8811 	msr	BASEPRI, r3
}
 8004ac6:	bf00      	nop
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20014250 	.word	0x20014250
 8004ad4:	e000ed04 	.word	0xe000ed04

08004ad8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ade:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae2:	f04f 0120 	mov.w	r1, #32
 8004ae6:	f381 8811 	msr	BASEPRI, r1
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	4807      	ldr	r0, [pc, #28]	; (8004b0c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004aee:	f7ff fa05 	bl	8003efc <_PreparePacket>
 8004af2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004af4:	2203      	movs	r2, #3
 8004af6:	6839      	ldr	r1, [r7, #0]
 8004af8:	6838      	ldr	r0, [r7, #0]
 8004afa:	f7ff faf1 	bl	80040e0 <_SendPacket>
  RECORD_END();
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f383 8811 	msr	BASEPRI, r3
}
 8004b04:	bf00      	nop
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20014250 	.word	0x20014250

08004b10 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b16:	f3ef 8311 	mrs	r3, BASEPRI
 8004b1a:	f04f 0120 	mov.w	r1, #32
 8004b1e:	f381 8811 	msr	BASEPRI, r1
 8004b22:	607b      	str	r3, [r7, #4]
 8004b24:	4807      	ldr	r0, [pc, #28]	; (8004b44 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004b26:	f7ff f9e9 	bl	8003efc <_PreparePacket>
 8004b2a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004b2c:	2212      	movs	r2, #18
 8004b2e:	6839      	ldr	r1, [r7, #0]
 8004b30:	6838      	ldr	r0, [r7, #0]
 8004b32:	f7ff fad5 	bl	80040e0 <_SendPacket>
  RECORD_END();
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f383 8811 	msr	BASEPRI, r3
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20014250 	.word	0x20014250

08004b48 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b52:	f04f 0120 	mov.w	r1, #32
 8004b56:	f381 8811 	msr	BASEPRI, r1
 8004b5a:	607b      	str	r3, [r7, #4]
 8004b5c:	4807      	ldr	r0, [pc, #28]	; (8004b7c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004b5e:	f7ff f9cd 	bl	8003efc <_PreparePacket>
 8004b62:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004b64:	2211      	movs	r2, #17
 8004b66:	6839      	ldr	r1, [r7, #0]
 8004b68:	6838      	ldr	r0, [r7, #0]
 8004b6a:	f7ff fab9 	bl	80040e0 <_SendPacket>
  RECORD_END();
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f383 8811 	msr	BASEPRI, r3
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20014250 	.word	0x20014250

08004b80 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b88:	f3ef 8311 	mrs	r3, BASEPRI
 8004b8c:	f04f 0120 	mov.w	r1, #32
 8004b90:	f381 8811 	msr	BASEPRI, r1
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	4819      	ldr	r0, [pc, #100]	; (8004bfc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004b98:	f7ff f9b0 	bl	8003efc <_PreparePacket>
 8004b9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004ba2:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	61bb      	str	r3, [r7, #24]
 8004bb4:	e00b      	b.n	8004bce <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	1c59      	adds	r1, r3, #1
 8004bbe:	61f9      	str	r1, [r7, #28]
 8004bc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	09db      	lsrs	r3, r3, #7
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8004bd2:	d8f0      	bhi.n	8004bb6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	61fa      	str	r2, [r7, #28]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004be4:	2208      	movs	r2, #8
 8004be6:	68f9      	ldr	r1, [r7, #12]
 8004be8:	6938      	ldr	r0, [r7, #16]
 8004bea:	f7ff fa79 	bl	80040e0 <_SendPacket>
  RECORD_END();
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f383 8811 	msr	BASEPRI, r3
}
 8004bf4:	bf00      	nop
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20014250 	.word	0x20014250
 8004c00:	20014220 	.word	0x20014220

08004c04 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c10:	f04f 0120 	mov.w	r1, #32
 8004c14:	f381 8811 	msr	BASEPRI, r1
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	4819      	ldr	r0, [pc, #100]	; (8004c80 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004c1c:	f7ff f96e 	bl	8003efc <_PreparePacket>
 8004c20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004c26:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	61bb      	str	r3, [r7, #24]
 8004c38:	e00b      	b.n	8004c52 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	1c59      	adds	r1, r3, #1
 8004c42:	61f9      	str	r1, [r7, #28]
 8004c44:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	09db      	lsrs	r3, r3, #7
 8004c50:	61bb      	str	r3, [r7, #24]
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b7f      	cmp	r3, #127	; 0x7f
 8004c56:	d8f0      	bhi.n	8004c3a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	61fa      	str	r2, [r7, #28]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004c68:	2204      	movs	r2, #4
 8004c6a:	68f9      	ldr	r1, [r7, #12]
 8004c6c:	6938      	ldr	r0, [r7, #16]
 8004c6e:	f7ff fa37 	bl	80040e0 <_SendPacket>
  RECORD_END();
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f383 8811 	msr	BASEPRI, r3
}
 8004c78:	bf00      	nop
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20014250 	.word	0x20014250
 8004c84:	20014220 	.word	0x20014220

08004c88 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c90:	f3ef 8311 	mrs	r3, BASEPRI
 8004c94:	f04f 0120 	mov.w	r1, #32
 8004c98:	f381 8811 	msr	BASEPRI, r1
 8004c9c:	617b      	str	r3, [r7, #20]
 8004c9e:	4819      	ldr	r0, [pc, #100]	; (8004d04 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004ca0:	f7ff f92c 	bl	8003efc <_PreparePacket>
 8004ca4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004caa:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	61fb      	str	r3, [r7, #28]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	e00b      	b.n	8004cd6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	1c59      	adds	r1, r3, #1
 8004cc6:	61f9      	str	r1, [r7, #28]
 8004cc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	09db      	lsrs	r3, r3, #7
 8004cd4:	61bb      	str	r3, [r7, #24]
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cda:	d8f0      	bhi.n	8004cbe <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	61fa      	str	r2, [r7, #28]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	b2d2      	uxtb	r2, r2
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004cec:	2206      	movs	r2, #6
 8004cee:	68f9      	ldr	r1, [r7, #12]
 8004cf0:	6938      	ldr	r0, [r7, #16]
 8004cf2:	f7ff f9f5 	bl	80040e0 <_SendPacket>
  RECORD_END();
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f383 8811 	msr	BASEPRI, r3
}
 8004cfc:	bf00      	nop
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20014250 	.word	0x20014250
 8004d08:	20014220 	.word	0x20014220

08004d0c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	; 0x28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d16:	f3ef 8311 	mrs	r3, BASEPRI
 8004d1a:	f04f 0120 	mov.w	r1, #32
 8004d1e:	f381 8811 	msr	BASEPRI, r1
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	4827      	ldr	r0, [pc, #156]	; (8004dc4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8004d26:	f7ff f8e9 	bl	8003efc <_PreparePacket>
 8004d2a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004d30:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	623b      	str	r3, [r7, #32]
 8004d42:	e00b      	b.n	8004d5c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004d44:	6a3b      	ldr	r3, [r7, #32]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	1c59      	adds	r1, r3, #1
 8004d4c:	6279      	str	r1, [r7, #36]	; 0x24
 8004d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	09db      	lsrs	r3, r3, #7
 8004d5a:	623b      	str	r3, [r7, #32]
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d60:	d8f0      	bhi.n	8004d44 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	627a      	str	r2, [r7, #36]	; 0x24
 8004d68:	6a3a      	ldr	r2, [r7, #32]
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	e00b      	b.n	8004d94 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	1c59      	adds	r1, r3, #1
 8004d84:	61f9      	str	r1, [r7, #28]
 8004d86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	09db      	lsrs	r3, r3, #7
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b7f      	cmp	r3, #127	; 0x7f
 8004d98:	d8f0      	bhi.n	8004d7c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	61fa      	str	r2, [r7, #28]
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004daa:	2207      	movs	r2, #7
 8004dac:	68f9      	ldr	r1, [r7, #12]
 8004dae:	6938      	ldr	r0, [r7, #16]
 8004db0:	f7ff f996 	bl	80040e0 <_SendPacket>
  RECORD_END();
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f383 8811 	msr	BASEPRI, r3
}
 8004dba:	bf00      	nop
 8004dbc:	3728      	adds	r7, #40	; 0x28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20014250 	.word	0x20014250
 8004dc8:	20014220 	.word	0x20014220

08004dcc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08c      	sub	sp, #48	; 0x30
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004dd6:	4b3b      	ldr	r3, [pc, #236]	; (8004ec4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d06d      	beq.n	8004eba <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004dde:	4b39      	ldr	r3, [pc, #228]	; (8004ec4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004de4:	2300      	movs	r3, #0
 8004de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004de8:	e008      	b.n	8004dfc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d007      	beq.n	8004e06 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	3301      	adds	r3, #1
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d3f2      	bcc.n	8004dea <SEGGER_SYSVIEW_SendModule+0x1e>
 8004e04:	e000      	b.n	8004e08 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004e06:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d055      	beq.n	8004eba <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e12:	f04f 0120 	mov.w	r1, #32
 8004e16:	f381 8811 	msr	BASEPRI, r1
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	482a      	ldr	r0, [pc, #168]	; (8004ec8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004e1e:	f7ff f86d 	bl	8003efc <_PreparePacket>
 8004e22:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	623b      	str	r3, [r7, #32]
 8004e30:	e00b      	b.n	8004e4a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	1c59      	adds	r1, r3, #1
 8004e3a:	6279      	str	r1, [r7, #36]	; 0x24
 8004e3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	09db      	lsrs	r3, r3, #7
 8004e48:	623b      	str	r3, [r7, #32]
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e4e:	d8f0      	bhi.n	8004e32 <SEGGER_SYSVIEW_SendModule+0x66>
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	627a      	str	r2, [r7, #36]	; 0x24
 8004e56:	6a3a      	ldr	r2, [r7, #32]
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	e00b      	b.n	8004e84 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	1c59      	adds	r1, r3, #1
 8004e74:	61f9      	str	r1, [r7, #28]
 8004e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	09db      	lsrs	r3, r3, #7
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2b7f      	cmp	r3, #127	; 0x7f
 8004e88:	d8f0      	bhi.n	8004e6c <SEGGER_SYSVIEW_SendModule+0xa0>
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	61fa      	str	r2, [r7, #28]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2280      	movs	r2, #128	; 0x80
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f7fe ffda 	bl	8003e5c <_EncodeStr>
 8004ea8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004eaa:	2216      	movs	r2, #22
 8004eac:	68f9      	ldr	r1, [r7, #12]
 8004eae:	6938      	ldr	r0, [r7, #16]
 8004eb0:	f7ff f916 	bl	80040e0 <_SendPacket>
      RECORD_END();
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004eba:	bf00      	nop
 8004ebc:	3730      	adds	r7, #48	; 0x30
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20014248 	.word	0x20014248
 8004ec8:	20014250 	.word	0x20014250

08004ecc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004ed2:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00f      	beq.n	8004efa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004eda:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f2      	bne.n	8004ee0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004efa:	bf00      	nop
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	20014248 	.word	0x20014248

08004f08 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b086      	sub	sp, #24
 8004f0c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004f0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f12:	f04f 0120 	mov.w	r1, #32
 8004f16:	f381 8811 	msr	BASEPRI, r1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	4817      	ldr	r0, [pc, #92]	; (8004f7c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004f1e:	f7fe ffed 	bl	8003efc <_PreparePacket>
 8004f22:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	613b      	str	r3, [r7, #16]
 8004f32:	e00b      	b.n	8004f4c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	1c59      	adds	r1, r3, #1
 8004f3c:	6179      	str	r1, [r7, #20]
 8004f3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	09db      	lsrs	r3, r3, #7
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f50:	d8f0      	bhi.n	8004f34 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	617a      	str	r2, [r7, #20]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	b2d2      	uxtb	r2, r2
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004f62:	221b      	movs	r2, #27
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	68b8      	ldr	r0, [r7, #8]
 8004f68:	f7ff f8ba 	bl	80040e0 <_SendPacket>
  RECORD_END();
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f383 8811 	msr	BASEPRI, r3
}
 8004f72:	bf00      	nop
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	20014250 	.word	0x20014250
 8004f80:	2001424c 	.word	0x2001424c

08004f84 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08a      	sub	sp, #40	; 0x28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f90:	f04f 0120 	mov.w	r1, #32
 8004f94:	f381 8811 	msr	BASEPRI, r1
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	4827      	ldr	r0, [pc, #156]	; (8005038 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004f9c:	f7fe ffae 	bl	8003efc <_PreparePacket>
 8004fa0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fa2:	2280      	movs	r2, #128	; 0x80
 8004fa4:	6879      	ldr	r1, [r7, #4]
 8004fa6:	6938      	ldr	r0, [r7, #16]
 8004fa8:	f7fe ff58 	bl	8003e5c <_EncodeStr>
 8004fac:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	e00b      	b.n	8004fd0 <SEGGER_SYSVIEW_Warn+0x4c>
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	1c59      	adds	r1, r3, #1
 8004fc0:	6279      	str	r1, [r7, #36]	; 0x24
 8004fc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	09db      	lsrs	r3, r3, #7
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd4:	d8f0      	bhi.n	8004fb8 <SEGGER_SYSVIEW_Warn+0x34>
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	627a      	str	r2, [r7, #36]	; 0x24
 8004fdc:	6a3a      	ldr	r2, [r7, #32]
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	61fb      	str	r3, [r7, #28]
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	e00b      	b.n	8005008 <SEGGER_SYSVIEW_Warn+0x84>
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	1c59      	adds	r1, r3, #1
 8004ff8:	61f9      	str	r1, [r7, #28]
 8004ffa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	09db      	lsrs	r3, r3, #7
 8005006:	61bb      	str	r3, [r7, #24]
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b7f      	cmp	r3, #127	; 0x7f
 800500c:	d8f0      	bhi.n	8004ff0 <SEGGER_SYSVIEW_Warn+0x6c>
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	61fa      	str	r2, [r7, #28]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800501e:	221a      	movs	r2, #26
 8005020:	68f9      	ldr	r1, [r7, #12]
 8005022:	6938      	ldr	r0, [r7, #16]
 8005024:	f7ff f85c 	bl	80040e0 <_SendPacket>
  RECORD_END();
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f383 8811 	msr	BASEPRI, r3
}
 800502e:	bf00      	nop
 8005030:	3728      	adds	r7, #40	; 0x28
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20014250 	.word	0x20014250

0800503c <__libc_init_array>:
 800503c:	b570      	push	{r4, r5, r6, lr}
 800503e:	4d0d      	ldr	r5, [pc, #52]	; (8005074 <__libc_init_array+0x38>)
 8005040:	4c0d      	ldr	r4, [pc, #52]	; (8005078 <__libc_init_array+0x3c>)
 8005042:	1b64      	subs	r4, r4, r5
 8005044:	10a4      	asrs	r4, r4, #2
 8005046:	2600      	movs	r6, #0
 8005048:	42a6      	cmp	r6, r4
 800504a:	d109      	bne.n	8005060 <__libc_init_array+0x24>
 800504c:	4d0b      	ldr	r5, [pc, #44]	; (800507c <__libc_init_array+0x40>)
 800504e:	4c0c      	ldr	r4, [pc, #48]	; (8005080 <__libc_init_array+0x44>)
 8005050:	f000 f83c 	bl	80050cc <_init>
 8005054:	1b64      	subs	r4, r4, r5
 8005056:	10a4      	asrs	r4, r4, #2
 8005058:	2600      	movs	r6, #0
 800505a:	42a6      	cmp	r6, r4
 800505c:	d105      	bne.n	800506a <__libc_init_array+0x2e>
 800505e:	bd70      	pop	{r4, r5, r6, pc}
 8005060:	f855 3b04 	ldr.w	r3, [r5], #4
 8005064:	4798      	blx	r3
 8005066:	3601      	adds	r6, #1
 8005068:	e7ee      	b.n	8005048 <__libc_init_array+0xc>
 800506a:	f855 3b04 	ldr.w	r3, [r5], #4
 800506e:	4798      	blx	r3
 8005070:	3601      	adds	r6, #1
 8005072:	e7f2      	b.n	800505a <__libc_init_array+0x1e>
 8005074:	08005208 	.word	0x08005208
 8005078:	08005208 	.word	0x08005208
 800507c:	08005208 	.word	0x08005208
 8005080:	0800520c 	.word	0x0800520c

08005084 <memcmp>:
 8005084:	b530      	push	{r4, r5, lr}
 8005086:	3901      	subs	r1, #1
 8005088:	2400      	movs	r4, #0
 800508a:	42a2      	cmp	r2, r4
 800508c:	d101      	bne.n	8005092 <memcmp+0xe>
 800508e:	2000      	movs	r0, #0
 8005090:	e005      	b.n	800509e <memcmp+0x1a>
 8005092:	5d03      	ldrb	r3, [r0, r4]
 8005094:	3401      	adds	r4, #1
 8005096:	5d0d      	ldrb	r5, [r1, r4]
 8005098:	42ab      	cmp	r3, r5
 800509a:	d0f6      	beq.n	800508a <memcmp+0x6>
 800509c:	1b58      	subs	r0, r3, r5
 800509e:	bd30      	pop	{r4, r5, pc}

080050a0 <memcpy>:
 80050a0:	440a      	add	r2, r1
 80050a2:	4291      	cmp	r1, r2
 80050a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80050a8:	d100      	bne.n	80050ac <memcpy+0xc>
 80050aa:	4770      	bx	lr
 80050ac:	b510      	push	{r4, lr}
 80050ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050b6:	4291      	cmp	r1, r2
 80050b8:	d1f9      	bne.n	80050ae <memcpy+0xe>
 80050ba:	bd10      	pop	{r4, pc}

080050bc <memset>:
 80050bc:	4402      	add	r2, r0
 80050be:	4603      	mov	r3, r0
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d100      	bne.n	80050c6 <memset+0xa>
 80050c4:	4770      	bx	lr
 80050c6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ca:	e7f9      	b.n	80050c0 <memset+0x4>

080050cc <_init>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr

080050d8 <_fini>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	bf00      	nop
 80050dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050de:	bc08      	pop	{r3}
 80050e0:	469e      	mov	lr, r3
 80050e2:	4770      	bx	lr
