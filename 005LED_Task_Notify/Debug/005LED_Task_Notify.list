
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005310  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080054e0  080054e0  000154e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055ac  080055ac  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080055ac  080055ac  000155ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055b4  080055b4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055b4  080055b4  000155b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055b8  080055b8  000155b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080055bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013420  20000014  080055d0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013434  080055d0  00023434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fe0  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e99  00000000  00000000  00037024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  00039ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  0003b048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000237a4  00000000  00000000  0003c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014433  00000000  00000000  0005f80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dba0f  00000000  00000000  00073c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f64e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004918  00000000  00000000  0014f6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080054c8 	.word	0x080054c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	080054c8 	.word	0x080054c8

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	2001338c 	.word	0x2001338c

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
TaskHandle_t btn_handle;

TaskHandle_t volatile next_task_handle = NULL;

int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af02      	add	r7, sp, #8
	BaseType_t status;

	HAL_Init();
 80005a2:	f000 fb41 	bl	8000c28 <HAL_Init>

	SystemClock_Config();
 80005a6:	f000 f88f 	bl	80006c8 <SystemClock_Config>

	MX_GPIO_Init();
 80005aa:	f000 f8fb 	bl	80007a4 <MX_GPIO_Init>

	/* Enable the CYCCNT counter */
	DWT_CTRL |= ( 1 << 0);
 80005ae:	4b38      	ldr	r3, [pc, #224]	; (8000690 <main+0xf4>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a37      	ldr	r2, [pc, #220]	; (8000690 <main+0xf4>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6013      	str	r3, [r2, #0]

	/* Task 1 creation (LED 1) */
	status = xTaskCreate(led1_handler, "LED1_task", 200, NULL, 3, &led1_handle);
 80005ba:	4b36      	ldr	r3, [pc, #216]	; (8000694 <main+0xf8>)
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2303      	movs	r3, #3
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	22c8      	movs	r2, #200	; 0xc8
 80005c6:	4934      	ldr	r1, [pc, #208]	; (8000698 <main+0xfc>)
 80005c8:	4834      	ldr	r0, [pc, #208]	; (800069c <main+0x100>)
 80005ca:	f001 ff1b 	bl	8002404 <xTaskCreate>
 80005ce:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00a      	beq.n	80005ec <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005e8:	bf00      	nop
 80005ea:	e7fe      	b.n	80005ea <main+0x4e>

	next_task_handle = led1_handle;
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <main+0xf8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a2b      	ldr	r2, [pc, #172]	; (80006a0 <main+0x104>)
 80005f2:	6013      	str	r3, [r2, #0]

	/* Task 2 creation (LED 2) */
	status = xTaskCreate(led2_handler, "LED2_task", 200, NULL, 2, &led2_handle);
 80005f4:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <main+0x108>)
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2302      	movs	r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	22c8      	movs	r2, #200	; 0xc8
 8000600:	4929      	ldr	r1, [pc, #164]	; (80006a8 <main+0x10c>)
 8000602:	482a      	ldr	r0, [pc, #168]	; (80006ac <main+0x110>)
 8000604:	f001 fefe 	bl	8002404 <xTaskCreate>
 8000608:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00a      	beq.n	8000626 <main+0x8a>
        __asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	60fb      	str	r3, [r7, #12]
    }
 8000622:	bf00      	nop
 8000624:	e7fe      	b.n	8000624 <main+0x88>

	/* Task 3 creation (LED 3) */
	status = xTaskCreate(led3_handler, "LED3_task", 200, NULL, 1, &led3_handle);
 8000626:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <main+0x114>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	22c8      	movs	r2, #200	; 0xc8
 8000632:	4920      	ldr	r1, [pc, #128]	; (80006b4 <main+0x118>)
 8000634:	4820      	ldr	r0, [pc, #128]	; (80006b8 <main+0x11c>)
 8000636:	f001 fee5 	bl	8002404 <xTaskCreate>
 800063a:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d00a      	beq.n	8000658 <main+0xbc>
        __asm volatile
 8000642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000646:	f383 8811 	msr	BASEPRI, r3
 800064a:	f3bf 8f6f 	isb	sy
 800064e:	f3bf 8f4f 	dsb	sy
 8000652:	60bb      	str	r3, [r7, #8]
    }
 8000654:	bf00      	nop
 8000656:	e7fe      	b.n	8000656 <main+0xba>

	/* Task 4 creation (Button) */
	status = xTaskCreate(button_handler, "Button_task", 200, NULL, 4, &btn_handle);
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <main+0x120>)
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	2304      	movs	r3, #4
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2300      	movs	r3, #0
 8000662:	22c8      	movs	r2, #200	; 0xc8
 8000664:	4916      	ldr	r1, [pc, #88]	; (80006c0 <main+0x124>)
 8000666:	4817      	ldr	r0, [pc, #92]	; (80006c4 <main+0x128>)
 8000668:	f001 fecc 	bl	8002404 <xTaskCreate>
 800066c:	6178      	str	r0, [r7, #20]
	configASSERT(status == pdPASS);
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d00a      	beq.n	800068a <main+0xee>
        __asm volatile
 8000674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000678:	f383 8811 	msr	BASEPRI, r3
 800067c:	f3bf 8f6f 	isb	sy
 8000680:	f3bf 8f4f 	dsb	sy
 8000684:	607b      	str	r3, [r7, #4]
    }
 8000686:	bf00      	nop
 8000688:	e7fe      	b.n	8000688 <main+0xec>

	/* Start the scheduler */
	vTaskStartScheduler();
 800068a:	f002 f93b 	bl	8002904 <vTaskStartScheduler>

	while (1)
 800068e:	e7fe      	b.n	800068e <main+0xf2>
 8000690:	e0001000 	.word	0xe0001000
 8000694:	20013330 	.word	0x20013330
 8000698:	080054e0 	.word	0x080054e0
 800069c:	080008dd 	.word	0x080008dd
 80006a0:	20000030 	.word	0x20000030
 80006a4:	2001333c 	.word	0x2001333c
 80006a8:	080054ec 	.word	0x080054ec
 80006ac:	08000935 	.word	0x08000935
 80006b0:	20013334 	.word	0x20013334
 80006b4:	080054f8 	.word	0x080054f8
 80006b8:	0800098d 	.word	0x0800098d
 80006bc:	20013338 	.word	0x20013338
 80006c0:	08005504 	.word	0x08005504
 80006c4:	080009ed 	.word	0x080009ed

080006c8 <SystemClock_Config>:
	}

}

void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2234      	movs	r2, #52	; 0x34
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 feee 	bl	80054b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <SystemClock_Config+0xd4>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a29      	ldr	r2, [pc, #164]	; (800079c <SystemClock_Config+0xd4>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <SystemClock_Config+0xd4>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000708:	2300      	movs	r3, #0
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <SystemClock_Config+0xd8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000714:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <SystemClock_Config+0xd8>)
 8000716:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <SystemClock_Config+0xd8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800073c:	2310      	movs	r3, #16
 800073e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000740:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000744:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000746:	2304      	movs	r3, #4
 8000748:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074e:	2302      	movs	r3, #2
 8000750:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4618      	mov	r0, r3
 8000758:	f001 f854 	bl	8001804 <HAL_RCC_OscConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000762:	f000 f97d 	bl	8000a60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000766:	230f      	movs	r3, #15
 8000768:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	2302      	movs	r3, #2
 800076c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	2102      	movs	r1, #2
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fd54 	bl	8001230 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800078e:	f000 f967 	bl	8000a60 <Error_Handler>
  }
}
 8000792:	bf00      	nop
 8000794:	3750      	adds	r7, #80	; 0x50
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000

080007a4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b44      	ldr	r3, [pc, #272]	; (80008d0 <MX_GPIO_Init+0x12c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a43      	ldr	r2, [pc, #268]	; (80008d0 <MX_GPIO_Init+0x12c>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b41      	ldr	r3, [pc, #260]	; (80008d0 <MX_GPIO_Init+0x12c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	4b3d      	ldr	r3, [pc, #244]	; (80008d0 <MX_GPIO_Init+0x12c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a3c      	ldr	r2, [pc, #240]	; (80008d0 <MX_GPIO_Init+0x12c>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b3a      	ldr	r3, [pc, #232]	; (80008d0 <MX_GPIO_Init+0x12c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b36      	ldr	r3, [pc, #216]	; (80008d0 <MX_GPIO_Init+0x12c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a35      	ldr	r2, [pc, #212]	; (80008d0 <MX_GPIO_Init+0x12c>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b33      	ldr	r3, [pc, #204]	; (80008d0 <MX_GPIO_Init+0x12c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <MX_GPIO_Init+0x12c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a2e      	ldr	r2, [pc, #184]	; (80008d0 <MX_GPIO_Init+0x12c>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <MX_GPIO_Init+0x12c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2120      	movs	r1, #32
 800082e:	4829      	ldr	r0, [pc, #164]	; (80008d4 <MX_GPIO_Init+0x130>)
 8000830:	f000 fcca 	bl	80011c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800083a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	4823      	ldr	r0, [pc, #140]	; (80008d8 <MX_GPIO_Init+0x134>)
 800084c:	f000 fb10 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000850:	230c      	movs	r3, #12
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085c:	2303      	movs	r3, #3
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000860:	2307      	movs	r3, #7
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	481a      	ldr	r0, [pc, #104]	; (80008d4 <MX_GPIO_Init+0x130>)
 800086c:	f000 fb00 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000870:	2320      	movs	r3, #32
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4813      	ldr	r0, [pc, #76]	; (80008d4 <MX_GPIO_Init+0x130>)
 8000888:	f000 faf2 	bl	8000e70 <HAL_GPIO_Init>

  /* Configure LED tasks GPIO pins */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800088c:	2301      	movs	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_GPIO_Init+0x130>)
 80008a4:	f000 fae4 	bl	8000e70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008a8:	2302      	movs	r3, #2
 80008aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	4808      	ldr	r0, [pc, #32]	; (80008d4 <MX_GPIO_Init+0x130>)
 80008b4:	f000 fadc 	bl	8000e70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008b8:	2310      	movs	r3, #16
 80008ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_GPIO_Init+0x130>)
 80008c4:	f000 fad4 	bl	8000e70 <HAL_GPIO_Init>
}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	; 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40020800 	.word	0x40020800

080008dc <led1_handler>:

static void led1_handler(void *parameters)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80008e4:	2101      	movs	r1, #1
 80008e6:	4810      	ldr	r0, [pc, #64]	; (8000928 <led1_handler+0x4c>)
 80008e8:	f000 fc87 	bl	80011fa <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 80008ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	2300      	movs	r3, #0
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	2000      	movs	r0, #0
 80008fa:	f002 fba3 	bl	8003044 <xTaskGenericNotifyWait>
 80008fe:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d1ee      	bne.n	80008e4 <led1_handler+0x8>
		{
			vTaskSuspendAll();
 8000906:	f002 f859 	bl	80029bc <vTaskSuspendAll>
			next_task_handle = led2_handle;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <led1_handler+0x50>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a08      	ldr	r2, [pc, #32]	; (8000930 <led1_handler+0x54>)
 8000910:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000912:	f002 f861 	bl	80029d8 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2101      	movs	r1, #1
 800091a:	4803      	ldr	r0, [pc, #12]	; (8000928 <led1_handler+0x4c>)
 800091c:	f000 fc54 	bl	80011c8 <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 8000920:	2000      	movs	r0, #0
 8000922:	f001 ff09 	bl	8002738 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000926:	e7dd      	b.n	80008e4 <led1_handler+0x8>
 8000928:	40020000 	.word	0x40020000
 800092c:	2001333c 	.word	0x2001333c
 8000930:	20000030 	.word	0x20000030

08000934 <led2_handler>:
		}
	}
}

static void led2_handler(void *parameters)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af02      	add	r7, sp, #8
 800093a:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800093c:	2102      	movs	r1, #2
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <led2_handler+0x4c>)
 8000940:	f000 fc5b 	bl	80011fa <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000944:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2300      	movs	r3, #0
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	2000      	movs	r0, #0
 8000952:	f002 fb77 	bl	8003044 <xTaskGenericNotifyWait>
 8000956:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d1ee      	bne.n	800093c <led2_handler+0x8>
		{
			vTaskSuspendAll();
 800095e:	f002 f82d 	bl	80029bc <vTaskSuspendAll>
			next_task_handle = led3_handle;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <led2_handler+0x50>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <led2_handler+0x54>)
 8000968:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 800096a:	f002 f835 	bl	80029d8 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	2102      	movs	r1, #2
 8000972:	4803      	ldr	r0, [pc, #12]	; (8000980 <led2_handler+0x4c>)
 8000974:	f000 fc28 	bl	80011c8 <HAL_GPIO_WritePin>
			vTaskDelete(NULL);
 8000978:	2000      	movs	r0, #0
 800097a:	f001 fedd 	bl	8002738 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800097e:	e7dd      	b.n	800093c <led2_handler+0x8>
 8000980:	40020000 	.word	0x40020000
 8000984:	20013334 	.word	0x20013334
 8000988:	20000030 	.word	0x20000030

0800098c <led3_handler>:
		}
	}
}

static void led3_handler(void *parameters)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af02      	add	r7, sp, #8
 8000992:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000994:	2110      	movs	r1, #16
 8000996:	4812      	ldr	r0, [pc, #72]	; (80009e0 <led3_handler+0x54>)
 8000998:	f000 fc2f 	bl	80011fa <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 800099c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2000      	movs	r0, #0
 80009aa:	f002 fb4b 	bl	8003044 <xTaskGenericNotifyWait>
 80009ae:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d1ee      	bne.n	8000994 <led3_handler+0x8>
		{
			vTaskSuspendAll();
 80009b6:	f002 f801 	bl	80029bc <vTaskSuspendAll>
			next_task_handle = NULL;
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <led3_handler+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 80009c0:	f002 f80a 	bl	80029d8 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80009c4:	2201      	movs	r2, #1
 80009c6:	2110      	movs	r1, #16
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <led3_handler+0x54>)
 80009ca:	f000 fbfd 	bl	80011c8 <HAL_GPIO_WritePin>
			vTaskDelete(btn_handle);
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <led3_handler+0x5c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 feb0 	bl	8002738 <vTaskDelete>
			vTaskDelete(NULL);
 80009d8:	2000      	movs	r0, #0
 80009da:	f001 fead 	bl	8002738 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80009de:	e7d9      	b.n	8000994 <led3_handler+0x8>
 80009e0:	40020000 	.word	0x40020000
 80009e4:	20000030 	.word	0x20000030
 80009e8:	20013338 	.word	0x20013338

080009ec <button_handler>:
		}
	}
}

static void button_handler(void *parameters)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	6078      	str	r0, [r7, #4]
	uint8_t button_read = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		button_read = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80009fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <button_handler+0x48>)
 8000a02:	f000 fbc9 	bl	8001198 <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	73bb      	strb	r3, [r7, #14]
		if (!button_read)
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10b      	bne.n	8000a28 <button_handler+0x3c>
		{
			if (prev_read)
 8000a10:	7bfb      	ldrb	r3, [r7, #15]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d008      	beq.n	8000a28 <button_handler+0x3c>
				xTaskNotify(next_task_handle, 0, eNoAction);
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <button_handler+0x4c>)
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	9300      	str	r3, [sp, #0]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	f002 fb96 	bl	8003154 <xTaskGenericNotify>
		}
		prev_read = button_read;
 8000a28:	7bbb      	ldrb	r3, [r7, #14]
 8000a2a:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000a2c:	200a      	movs	r0, #10
 8000a2e:	f001 ff31 	bl	8002894 <vTaskDelay>
		button_read = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000a32:	e7e3      	b.n	80009fc <button_handler+0x10>
 8000a34:	40020800 	.word	0x40020800
 8000a38:	20000030 	.word	0x20000030

08000a3c <HAL_TIM_PeriodElapsedCallback>:
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a4e:	f000 f90d 	bl	8000c6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40001000 	.word	0x40001000

08000a60 <Error_Handler>:

void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08c      	sub	sp, #48	; 0x30
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	2036      	movs	r0, #54	; 0x36
 8000ad2:	f000 f9a3 	bl	8000e1c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ad6:	2036      	movs	r0, #54	; 0x36
 8000ad8:	f000 f9bc 	bl	8000e54 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <HAL_InitTick+0xa4>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a1e      	ldr	r2, [pc, #120]	; (8000b60 <HAL_InitTick+0xa4>)
 8000ae6:	f043 0310 	orr.w	r3, r3, #16
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <HAL_InitTick+0xa4>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f003 0310 	and.w	r3, r3, #16
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af8:	f107 0210 	add.w	r2, r7, #16
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fc9a 	bl	800143c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b08:	f000 fc84 	bl	8001414 <HAL_RCC_GetPCLK1Freq>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b14:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <HAL_InitTick+0xa8>)
 8000b16:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1a:	0c9b      	lsrs	r3, r3, #18
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_InitTick+0xac>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <HAL_InitTick+0xb0>)
 8000b24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_InitTick+0xac>)
 8000b28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b2c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <HAL_InitTick+0xac>)
 8000b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b32:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_InitTick+0xac>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_InitTick+0xac>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b40:	4809      	ldr	r0, [pc, #36]	; (8000b68 <HAL_InitTick+0xac>)
 8000b42:	f001 f8fd 	bl	8001d40 <HAL_TIM_Base_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d104      	bne.n	8000b56 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b4c:	4806      	ldr	r0, [pc, #24]	; (8000b68 <HAL_InitTick+0xac>)
 8000b4e:	f001 f951 	bl	8001df4 <HAL_TIM_Base_Start_IT>
 8000b52:	4603      	mov	r3, r0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3730      	adds	r7, #48	; 0x30
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	431bde83 	.word	0x431bde83
 8000b68:	20013340 	.word	0x20013340
 8000b6c:	40001000 	.word	0x40001000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <TIM6_DAC_IRQHandler+0x10>)
 8000ba2:	f001 f997 	bl	8001ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20013340 	.word	0x20013340

08000bb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <SystemInit+0x20>)
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bba:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <SystemInit+0x20>)
 8000bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd8:	480d      	ldr	r0, [pc, #52]	; (8000c10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bda:	490e      	ldr	r1, [pc, #56]	; (8000c14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bdc:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bf0:	4c0b      	ldr	r4, [pc, #44]	; (8000c20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bfe:	f7ff ffd7 	bl	8000bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c02:	f004 fc19 	bl	8005438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c06:	f7ff fcc9 	bl	800059c <main>
  bx  lr    
 8000c0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c14:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c18:	080055bc 	.word	0x080055bc
  ldr r2, =_sbss
 8000c1c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c20:	20013434 	.word	0x20013434

08000c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <HAL_Init+0x40>)
 8000c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_Init+0x40>)
 8000c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_Init+0x40>)
 8000c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f8d8 	bl	8000e06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c56:	200f      	movs	r0, #15
 8000c58:	f7ff ff30 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff ff06 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023c00 	.word	0x40023c00

08000c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x20>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x24>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_IncTick+0x24>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20013388 	.word	0x20013388

08000c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20013388 	.word	0x20013388

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	db0b      	blt.n	8000d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	4907      	ldr	r1, [pc, #28]	; (8000d48 <__NVIC_EnableIRQ+0x38>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	2001      	movs	r0, #1
 8000d32:	fa00 f202 	lsl.w	r2, r0, r2
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ff4c 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
 8000e28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2e:	f7ff ff61 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	68b9      	ldr	r1, [r7, #8]
 8000e38:	6978      	ldr	r0, [r7, #20]
 8000e3a:	f7ff ffb1 	bl	8000da0 <NVIC_EncodePriority>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e44:	4611      	mov	r1, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff80 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e4c:	bf00      	nop
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff ff54 	bl	8000d10 <__NVIC_EnableIRQ>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	; 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
 8000e8a:	e165      	b.n	8001158 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	f040 8154 	bne.w	8001152 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d005      	beq.n	8000ec2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d130      	bne.n	8000f24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	68da      	ldr	r2, [r3, #12]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ef8:	2201      	movs	r2, #1
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	f003 0201 	and.w	r2, r3, #1
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d017      	beq.n	8000f60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d123      	bne.n	8000fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	f003 0307 	and.w	r3, r3, #7
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	69b9      	ldr	r1, [r7, #24]
 8000fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0203 	and.w	r2, r3, #3
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	f000 80ae 	beq.w	8001152 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b5d      	ldr	r3, [pc, #372]	; (8001170 <HAL_GPIO_Init+0x300>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a5c      	ldr	r2, [pc, #368]	; (8001170 <HAL_GPIO_Init+0x300>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b5a      	ldr	r3, [pc, #360]	; (8001170 <HAL_GPIO_Init+0x300>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001012:	4a58      	ldr	r2, [pc, #352]	; (8001174 <HAL_GPIO_Init+0x304>)
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4f      	ldr	r2, [pc, #316]	; (8001178 <HAL_GPIO_Init+0x308>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d025      	beq.n	800108a <HAL_GPIO_Init+0x21a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4e      	ldr	r2, [pc, #312]	; (800117c <HAL_GPIO_Init+0x30c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d01f      	beq.n	8001086 <HAL_GPIO_Init+0x216>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4d      	ldr	r2, [pc, #308]	; (8001180 <HAL_GPIO_Init+0x310>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d019      	beq.n	8001082 <HAL_GPIO_Init+0x212>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4c      	ldr	r2, [pc, #304]	; (8001184 <HAL_GPIO_Init+0x314>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d013      	beq.n	800107e <HAL_GPIO_Init+0x20e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4b      	ldr	r2, [pc, #300]	; (8001188 <HAL_GPIO_Init+0x318>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d00d      	beq.n	800107a <HAL_GPIO_Init+0x20a>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4a      	ldr	r2, [pc, #296]	; (800118c <HAL_GPIO_Init+0x31c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d007      	beq.n	8001076 <HAL_GPIO_Init+0x206>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a49      	ldr	r2, [pc, #292]	; (8001190 <HAL_GPIO_Init+0x320>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d101      	bne.n	8001072 <HAL_GPIO_Init+0x202>
 800106e:	2306      	movs	r3, #6
 8001070:	e00c      	b.n	800108c <HAL_GPIO_Init+0x21c>
 8001072:	2307      	movs	r3, #7
 8001074:	e00a      	b.n	800108c <HAL_GPIO_Init+0x21c>
 8001076:	2305      	movs	r3, #5
 8001078:	e008      	b.n	800108c <HAL_GPIO_Init+0x21c>
 800107a:	2304      	movs	r3, #4
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x21c>
 800107e:	2303      	movs	r3, #3
 8001080:	e004      	b.n	800108c <HAL_GPIO_Init+0x21c>
 8001082:	2302      	movs	r3, #2
 8001084:	e002      	b.n	800108c <HAL_GPIO_Init+0x21c>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <HAL_GPIO_Init+0x21c>
 800108a:	2300      	movs	r3, #0
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	f002 0203 	and.w	r2, r2, #3
 8001092:	0092      	lsls	r2, r2, #2
 8001094:	4093      	lsls	r3, r2
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800109c:	4935      	ldr	r1, [pc, #212]	; (8001174 <HAL_GPIO_Init+0x304>)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010aa:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <HAL_GPIO_Init+0x324>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ce:	4a31      	ldr	r2, [pc, #196]	; (8001194 <HAL_GPIO_Init+0x324>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010d4:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <HAL_GPIO_Init+0x324>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f8:	4a26      	ldr	r2, [pc, #152]	; (8001194 <HAL_GPIO_Init+0x324>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010fe:	4b25      	ldr	r3, [pc, #148]	; (8001194 <HAL_GPIO_Init+0x324>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <HAL_GPIO_Init+0x324>)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_GPIO_Init+0x324>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <HAL_GPIO_Init+0x324>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3301      	adds	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	f67f ae96 	bls.w	8000e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001160:	bf00      	nop
 8001162:	bf00      	nop
 8001164:	3724      	adds	r7, #36	; 0x24
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40013800 	.word	0x40013800
 8001178:	40020000 	.word	0x40020000
 800117c:	40020400 	.word	0x40020400
 8001180:	40020800 	.word	0x40020800
 8001184:	40020c00 	.word	0x40020c00
 8001188:	40021000 	.word	0x40021000
 800118c:	40021400 	.word	0x40021400
 8001190:	40021800 	.word	0x40021800
 8001194:	40013c00 	.word	0x40013c00

08001198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	887b      	ldrh	r3, [r7, #2]
 80011aa:	4013      	ands	r3, r2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011b0:	2301      	movs	r3, #1
 80011b2:	73fb      	strb	r3, [r7, #15]
 80011b4:	e001      	b.n	80011ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
 80011d4:	4613      	mov	r3, r2
 80011d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d8:	787b      	ldrb	r3, [r7, #1]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011e4:	e003      	b.n	80011ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	041a      	lsls	r2, r3, #16
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	619a      	str	r2, [r3, #24]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b085      	sub	sp, #20
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800120c:	887a      	ldrh	r2, [r7, #2]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4013      	ands	r3, r2
 8001212:	041a      	lsls	r2, r3, #16
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43d9      	mvns	r1, r3
 8001218:	887b      	ldrh	r3, [r7, #2]
 800121a:	400b      	ands	r3, r1
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	619a      	str	r2, [r3, #24]
}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e0cc      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001244:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	429a      	cmp	r2, r3
 8001250:	d90c      	bls.n	800126c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001252:	4b65      	ldr	r3, [pc, #404]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800125a:	4b63      	ldr	r3, [pc, #396]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d001      	beq.n	800126c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0b8      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d020      	beq.n	80012ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001284:	4b59      	ldr	r3, [pc, #356]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4a58      	ldr	r2, [pc, #352]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800128e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	2b00      	cmp	r3, #0
 800129a:	d005      	beq.n	80012a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	4a52      	ldr	r2, [pc, #328]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012a8:	4b50      	ldr	r3, [pc, #320]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	494d      	ldr	r1, [pc, #308]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d044      	beq.n	8001350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d107      	bne.n	80012de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	4b47      	ldr	r3, [pc, #284]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d119      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e07f      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d003      	beq.n	80012ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d107      	bne.n	80012fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ee:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e06f      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e067      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800130e:	4b37      	ldr	r3, [pc, #220]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f023 0203 	bic.w	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4934      	ldr	r1, [pc, #208]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 800131c:	4313      	orrs	r3, r2
 800131e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001320:	f7ff fcb8 	bl	8000c94 <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001326:	e00a      	b.n	800133e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001328:	f7ff fcb4 	bl	8000c94 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f241 3288 	movw	r2, #5000	; 0x1388
 8001336:	4293      	cmp	r3, r2
 8001338:	d901      	bls.n	800133e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e04f      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133e:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f003 020c 	and.w	r2, r3, #12
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	429a      	cmp	r2, r3
 800134e:	d1eb      	bne.n	8001328 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001350:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 030f 	and.w	r3, r3, #15
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d20c      	bcs.n	8001378 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d001      	beq.n	8001378 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e032      	b.n	80013de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d008      	beq.n	8001396 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	4916      	ldr	r1, [pc, #88]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	4313      	orrs	r3, r2
 8001394:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	490e      	ldr	r1, [pc, #56]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013b6:	f000 f873 	bl	80014a0 <HAL_RCC_GetSysClockFreq>
 80013ba:	4602      	mov	r2, r0
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	490a      	ldr	r1, [pc, #40]	; (80013f0 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	5ccb      	ldrb	r3, [r1, r3]
 80013ca:	fa22 f303 	lsr.w	r3, r2, r3
 80013ce:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_RCC_ClockConfig+0x1c8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fb70 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023c00 	.word	0x40023c00
 80013ec:	40023800 	.word	0x40023800
 80013f0:	08005588 	.word	0x08005588
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000004 	.word	0x20000004

080013fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_RCC_GetHCLKFreq+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000000 	.word	0x20000000

08001414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001418:	f7ff fff0 	bl	80013fc <HAL_RCC_GetHCLKFreq>
 800141c:	4602      	mov	r2, r0
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	0a9b      	lsrs	r3, r3, #10
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	4903      	ldr	r1, [pc, #12]	; (8001438 <HAL_RCC_GetPCLK1Freq+0x24>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	08005598 	.word	0x08005598

0800143c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	220f      	movs	r2, #15
 800144a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 0203 	and.w	r2, r3, #3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001470:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_RCC_GetClockConfig+0x5c>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	08db      	lsrs	r3, r3, #3
 8001476:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800147e:	4b07      	ldr	r3, [pc, #28]	; (800149c <HAL_RCC_GetClockConfig+0x60>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 020f 	and.w	r2, r3, #15
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	601a      	str	r2, [r3, #0]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40023c00 	.word	0x40023c00

080014a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014a4:	b088      	sub	sp, #32
 80014a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014bc:	4bce      	ldr	r3, [pc, #824]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	f200 818d 	bhi.w	80017e4 <HAL_RCC_GetSysClockFreq+0x344>
 80014ca:	a201      	add	r2, pc, #4	; (adr r2, 80014d0 <HAL_RCC_GetSysClockFreq+0x30>)
 80014cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d0:	08001505 	.word	0x08001505
 80014d4:	080017e5 	.word	0x080017e5
 80014d8:	080017e5 	.word	0x080017e5
 80014dc:	080017e5 	.word	0x080017e5
 80014e0:	0800150b 	.word	0x0800150b
 80014e4:	080017e5 	.word	0x080017e5
 80014e8:	080017e5 	.word	0x080017e5
 80014ec:	080017e5 	.word	0x080017e5
 80014f0:	08001511 	.word	0x08001511
 80014f4:	080017e5 	.word	0x080017e5
 80014f8:	080017e5 	.word	0x080017e5
 80014fc:	080017e5 	.word	0x080017e5
 8001500:	08001685 	.word	0x08001685
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001504:	4bbd      	ldr	r3, [pc, #756]	; (80017fc <HAL_RCC_GetSysClockFreq+0x35c>)
 8001506:	61bb      	str	r3, [r7, #24]
       break;
 8001508:	e16f      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800150a:	4bbd      	ldr	r3, [pc, #756]	; (8001800 <HAL_RCC_GetSysClockFreq+0x360>)
 800150c:	61bb      	str	r3, [r7, #24]
      break;
 800150e:	e16c      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001510:	4bb9      	ldr	r3, [pc, #740]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001518:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800151a:	4bb7      	ldr	r3, [pc, #732]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d053      	beq.n	80015ce <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001526:	4bb4      	ldr	r3, [pc, #720]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	099b      	lsrs	r3, r3, #6
 800152c:	461a      	mov	r2, r3
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001536:	f04f 0100 	mov.w	r1, #0
 800153a:	ea02 0400 	and.w	r4, r2, r0
 800153e:	603c      	str	r4, [r7, #0]
 8001540:	400b      	ands	r3, r1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001548:	4620      	mov	r0, r4
 800154a:	4629      	mov	r1, r5
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	014b      	lsls	r3, r1, #5
 8001556:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800155a:	0142      	lsls	r2, r0, #5
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	4623      	mov	r3, r4
 8001562:	1ac0      	subs	r0, r0, r3
 8001564:	462b      	mov	r3, r5
 8001566:	eb61 0103 	sbc.w	r1, r1, r3
 800156a:	f04f 0200 	mov.w	r2, #0
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	018b      	lsls	r3, r1, #6
 8001574:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001578:	0182      	lsls	r2, r0, #6
 800157a:	1a12      	subs	r2, r2, r0
 800157c:	eb63 0301 	sbc.w	r3, r3, r1
 8001580:	f04f 0000 	mov.w	r0, #0
 8001584:	f04f 0100 	mov.w	r1, #0
 8001588:	00d9      	lsls	r1, r3, #3
 800158a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800158e:	00d0      	lsls	r0, r2, #3
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4621      	mov	r1, r4
 8001596:	1852      	adds	r2, r2, r1
 8001598:	4629      	mov	r1, r5
 800159a:	eb43 0101 	adc.w	r1, r3, r1
 800159e:	460b      	mov	r3, r1
 80015a0:	f04f 0000 	mov.w	r0, #0
 80015a4:	f04f 0100 	mov.w	r1, #0
 80015a8:	0259      	lsls	r1, r3, #9
 80015aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80015ae:	0250      	lsls	r0, r2, #9
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	461a      	mov	r2, r3
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	f7fe fe70 	bl	80002a4 <__aeabi_uldivmod>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4613      	mov	r3, r2
 80015ca:	61fb      	str	r3, [r7, #28]
 80015cc:	e04c      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ce:	4b8a      	ldr	r3, [pc, #552]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	099b      	lsrs	r3, r3, #6
 80015d4:	461a      	mov	r2, r3
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015de:	f04f 0100 	mov.w	r1, #0
 80015e2:	ea02 0a00 	and.w	sl, r2, r0
 80015e6:	ea03 0b01 	and.w	fp, r3, r1
 80015ea:	4650      	mov	r0, sl
 80015ec:	4659      	mov	r1, fp
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	014b      	lsls	r3, r1, #5
 80015f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015fc:	0142      	lsls	r2, r0, #5
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	ebb0 000a 	subs.w	r0, r0, sl
 8001606:	eb61 010b 	sbc.w	r1, r1, fp
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	018b      	lsls	r3, r1, #6
 8001614:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001618:	0182      	lsls	r2, r0, #6
 800161a:	1a12      	subs	r2, r2, r0
 800161c:	eb63 0301 	sbc.w	r3, r3, r1
 8001620:	f04f 0000 	mov.w	r0, #0
 8001624:	f04f 0100 	mov.w	r1, #0
 8001628:	00d9      	lsls	r1, r3, #3
 800162a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800162e:	00d0      	lsls	r0, r2, #3
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	eb12 020a 	adds.w	r2, r2, sl
 8001638:	eb43 030b 	adc.w	r3, r3, fp
 800163c:	f04f 0000 	mov.w	r0, #0
 8001640:	f04f 0100 	mov.w	r1, #0
 8001644:	0299      	lsls	r1, r3, #10
 8001646:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800164a:	0290      	lsls	r0, r2, #10
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	461a      	mov	r2, r3
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	f7fe fe22 	bl	80002a4 <__aeabi_uldivmod>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4613      	mov	r3, r2
 8001666:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001668:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	0c1b      	lsrs	r3, r3, #16
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	3301      	adds	r3, #1
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	61bb      	str	r3, [r7, #24]
      break;
 8001682:	e0b2      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001684:	4b5c      	ldr	r3, [pc, #368]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800168c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800168e:	4b5a      	ldr	r3, [pc, #360]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d04d      	beq.n	8001736 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800169a:	4b57      	ldr	r3, [pc, #348]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	099b      	lsrs	r3, r3, #6
 80016a0:	461a      	mov	r2, r3
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016aa:	f04f 0100 	mov.w	r1, #0
 80016ae:	ea02 0800 	and.w	r8, r2, r0
 80016b2:	ea03 0901 	and.w	r9, r3, r1
 80016b6:	4640      	mov	r0, r8
 80016b8:	4649      	mov	r1, r9
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	f04f 0300 	mov.w	r3, #0
 80016c2:	014b      	lsls	r3, r1, #5
 80016c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016c8:	0142      	lsls	r2, r0, #5
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	ebb0 0008 	subs.w	r0, r0, r8
 80016d2:	eb61 0109 	sbc.w	r1, r1, r9
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	018b      	lsls	r3, r1, #6
 80016e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016e4:	0182      	lsls	r2, r0, #6
 80016e6:	1a12      	subs	r2, r2, r0
 80016e8:	eb63 0301 	sbc.w	r3, r3, r1
 80016ec:	f04f 0000 	mov.w	r0, #0
 80016f0:	f04f 0100 	mov.w	r1, #0
 80016f4:	00d9      	lsls	r1, r3, #3
 80016f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016fa:	00d0      	lsls	r0, r2, #3
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	eb12 0208 	adds.w	r2, r2, r8
 8001704:	eb43 0309 	adc.w	r3, r3, r9
 8001708:	f04f 0000 	mov.w	r0, #0
 800170c:	f04f 0100 	mov.w	r1, #0
 8001710:	0259      	lsls	r1, r3, #9
 8001712:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001716:	0250      	lsls	r0, r2, #9
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4610      	mov	r0, r2
 800171e:	4619      	mov	r1, r3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	461a      	mov	r2, r3
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	f7fe fdbc 	bl	80002a4 <__aeabi_uldivmod>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4613      	mov	r3, r2
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	e04a      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001736:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	099b      	lsrs	r3, r3, #6
 800173c:	461a      	mov	r2, r3
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001746:	f04f 0100 	mov.w	r1, #0
 800174a:	ea02 0400 	and.w	r4, r2, r0
 800174e:	ea03 0501 	and.w	r5, r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	014b      	lsls	r3, r1, #5
 8001760:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001764:	0142      	lsls	r2, r0, #5
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	1b00      	subs	r0, r0, r4
 800176c:	eb61 0105 	sbc.w	r1, r1, r5
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	018b      	lsls	r3, r1, #6
 800177a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800177e:	0182      	lsls	r2, r0, #6
 8001780:	1a12      	subs	r2, r2, r0
 8001782:	eb63 0301 	sbc.w	r3, r3, r1
 8001786:	f04f 0000 	mov.w	r0, #0
 800178a:	f04f 0100 	mov.w	r1, #0
 800178e:	00d9      	lsls	r1, r3, #3
 8001790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001794:	00d0      	lsls	r0, r2, #3
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	1912      	adds	r2, r2, r4
 800179c:	eb45 0303 	adc.w	r3, r5, r3
 80017a0:	f04f 0000 	mov.w	r0, #0
 80017a4:	f04f 0100 	mov.w	r1, #0
 80017a8:	0299      	lsls	r1, r3, #10
 80017aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017ae:	0290      	lsls	r0, r2, #10
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	461a      	mov	r2, r3
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	f7fe fd70 	bl	80002a4 <__aeabi_uldivmod>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4613      	mov	r3, r2
 80017ca:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017cc:	4b0a      	ldr	r3, [pc, #40]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x358>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	0f1b      	lsrs	r3, r3, #28
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	61bb      	str	r3, [r7, #24]
      break;
 80017e2:	e002      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_RCC_GetSysClockFreq+0x35c>)
 80017e6:	61bb      	str	r3, [r7, #24]
      break;
 80017e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ea:	69bb      	ldr	r3, [r7, #24]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	00f42400 	.word	0x00f42400
 8001800:	007a1200 	.word	0x007a1200

08001804 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e28d      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8083 	beq.w	800192a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001824:	4b94      	ldr	r3, [pc, #592]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b04      	cmp	r3, #4
 800182e:	d019      	beq.n	8001864 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001830:	4b91      	ldr	r3, [pc, #580]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001838:	2b08      	cmp	r3, #8
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800183c:	4b8e      	ldr	r3, [pc, #568]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001848:	d00c      	beq.n	8001864 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800184a:	4b8b      	ldr	r3, [pc, #556]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001852:	2b0c      	cmp	r3, #12
 8001854:	d112      	bne.n	800187c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001856:	4b88      	ldr	r3, [pc, #544]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001862:	d10b      	bne.n	800187c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001864:	4b84      	ldr	r3, [pc, #528]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d05b      	beq.n	8001928 <HAL_RCC_OscConfig+0x124>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d157      	bne.n	8001928 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e25a      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001884:	d106      	bne.n	8001894 <HAL_RCC_OscConfig+0x90>
 8001886:	4b7c      	ldr	r3, [pc, #496]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a7b      	ldr	r2, [pc, #492]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 800188c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e01d      	b.n	80018d0 <HAL_RCC_OscConfig+0xcc>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0xb4>
 800189e:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a75      	ldr	r2, [pc, #468]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b73      	ldr	r3, [pc, #460]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a72      	ldr	r2, [pc, #456]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e00b      	b.n	80018d0 <HAL_RCC_OscConfig+0xcc>
 80018b8:	4b6f      	ldr	r3, [pc, #444]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a6e      	ldr	r2, [pc, #440]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b6c      	ldr	r3, [pc, #432]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a6b      	ldr	r2, [pc, #428]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d013      	beq.n	8001900 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff f9dc 	bl	8000c94 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff f9d8 	bl	8000c94 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e21f      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f2:	4b61      	ldr	r3, [pc, #388]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0xdc>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff f9c8 	bl	8000c94 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff f9c4 	bl	8000c94 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e20b      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191a:	4b57      	ldr	r3, [pc, #348]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x104>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d06f      	beq.n	8001a16 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001936:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b00      	cmp	r3, #0
 8001940:	d017      	beq.n	8001972 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001942:	4b4d      	ldr	r3, [pc, #308]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800194a:	2b08      	cmp	r3, #8
 800194c:	d105      	bne.n	800195a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800194e:	4b4a      	ldr	r3, [pc, #296]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00b      	beq.n	8001972 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d11c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001966:	4b44      	ldr	r3, [pc, #272]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d116      	bne.n	80019a0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	4b41      	ldr	r3, [pc, #260]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d005      	beq.n	800198a <HAL_RCC_OscConfig+0x186>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d001      	beq.n	800198a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e1d3      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4937      	ldr	r1, [pc, #220]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	e03a      	b.n	8001a16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d020      	beq.n	80019ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a8:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_RCC_OscConfig+0x278>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff f971 	bl	8000c94 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff f96d 	bl	8000c94 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e1b4      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c8:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4925      	ldr	r1, [pc, #148]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]
 80019e8:	e015      	b.n	8001a16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_RCC_OscConfig+0x278>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff f950 	bl	8000c94 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f8:	f7ff f94c 	bl	8000c94 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e193      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d036      	beq.n	8001a90 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d016      	beq.n	8001a58 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_RCC_OscConfig+0x27c>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7ff f930 	bl	8000c94 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a38:	f7ff f92c 	bl	8000c94 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e173      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x234>
 8001a56:	e01b      	b.n	8001a90 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <HAL_RCC_OscConfig+0x27c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5e:	f7ff f919 	bl	8000c94 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a64:	e00e      	b.n	8001a84 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a66:	f7ff f915 	bl	8000c94 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d907      	bls.n	8001a84 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e15c      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	42470000 	.word	0x42470000
 8001a80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a84:	4b8a      	ldr	r3, [pc, #552]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ea      	bne.n	8001a66 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 8097 	beq.w	8001bcc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa2:	4b83      	ldr	r3, [pc, #524]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10f      	bne.n	8001ace <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	4b7f      	ldr	r3, [pc, #508]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a7e      	ldr	r2, [pc, #504]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b7c      	ldr	r3, [pc, #496]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aca:	2301      	movs	r3, #1
 8001acc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ace:	4b79      	ldr	r3, [pc, #484]	; (8001cb4 <HAL_RCC_OscConfig+0x4b0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d118      	bne.n	8001b0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ada:	4b76      	ldr	r3, [pc, #472]	; (8001cb4 <HAL_RCC_OscConfig+0x4b0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a75      	ldr	r2, [pc, #468]	; (8001cb4 <HAL_RCC_OscConfig+0x4b0>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae6:	f7ff f8d5 	bl	8000c94 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aee:	f7ff f8d1 	bl	8000c94 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e118      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	4b6c      	ldr	r3, [pc, #432]	; (8001cb4 <HAL_RCC_OscConfig+0x4b0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x31e>
 8001b14:	4b66      	ldr	r3, [pc, #408]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b18:	4a65      	ldr	r2, [pc, #404]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b20:	e01c      	b.n	8001b5c <HAL_RCC_OscConfig+0x358>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	2b05      	cmp	r3, #5
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0x340>
 8001b2a:	4b61      	ldr	r3, [pc, #388]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2e:	4a60      	ldr	r2, [pc, #384]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	6713      	str	r3, [r2, #112]	; 0x70
 8001b36:	4b5e      	ldr	r3, [pc, #376]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	4a5d      	ldr	r2, [pc, #372]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6713      	str	r3, [r2, #112]	; 0x70
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0x358>
 8001b44:	4b5a      	ldr	r3, [pc, #360]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a59      	ldr	r2, [pc, #356]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b4a:	f023 0301 	bic.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	4b57      	ldr	r3, [pc, #348]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b54:	4a56      	ldr	r2, [pc, #344]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b56:	f023 0304 	bic.w	r3, r3, #4
 8001b5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d015      	beq.n	8001b90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff f896 	bl	8000c94 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f892 	bl	8000c94 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e0d7      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b82:	4b4b      	ldr	r3, [pc, #300]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0ee      	beq.n	8001b6c <HAL_RCC_OscConfig+0x368>
 8001b8e:	e014      	b.n	8001bba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b90:	f7ff f880 	bl	8000c94 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff f87c 	bl	8000c94 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e0c1      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bae:	4b40      	ldr	r3, [pc, #256]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1ee      	bne.n	8001b98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc0:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	4a3a      	ldr	r2, [pc, #232]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80ad 	beq.w	8001d30 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd6:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d060      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d145      	bne.n	8001c76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <HAL_RCC_OscConfig+0x4b4>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f850 	bl	8000c94 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff f84c 	bl	8000c94 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e093      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0a:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69da      	ldr	r2, [r3, #28]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	019b      	lsls	r3, r3, #6
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	085b      	lsrs	r3, r3, #1
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	041b      	lsls	r3, r3, #16
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c38:	061b      	lsls	r3, r3, #24
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	071b      	lsls	r3, r3, #28
 8001c42:	491b      	ldr	r1, [pc, #108]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_RCC_OscConfig+0x4b4>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7ff f821 	bl	8000c94 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c56:	f7ff f81d 	bl	8000c94 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e064      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x452>
 8001c74:	e05c      	b.n	8001d30 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <HAL_RCC_OscConfig+0x4b4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff f80a 	bl	8000c94 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff f806 	bl	8000c94 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e04d      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_OscConfig+0x4ac>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x480>
 8001ca2:	e045      	b.n	8001d30 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e040      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <HAL_RCC_OscConfig+0x538>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d030      	beq.n	8001d2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d129      	bne.n	8001d2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d122      	bne.n	8001d2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cec:	4013      	ands	r3, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d119      	bne.n	8001d2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	085b      	lsrs	r3, r3, #1
 8001d04:	3b01      	subs	r3, #1
 8001d06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d10f      	bne.n	8001d2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e041      	b.n	8001dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f839 	bl	8001dde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f000 f9d8 	bl	8002134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d001      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e04e      	b.n	8001eaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a23      	ldr	r2, [pc, #140]	; (8001eb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d022      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e36:	d01d      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1f      	ldr	r2, [pc, #124]	; (8001ebc <HAL_TIM_Base_Start_IT+0xc8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d018      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1e      	ldr	r2, [pc, #120]	; (8001ec0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00e      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <HAL_TIM_Base_Start_IT+0xd8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d004      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d111      	bne.n	8001e98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d010      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e96:	e007      	b.n	8001ea8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800
 8001ec4:	40000c00 	.word	0x40000c00
 8001ec8:	40010400 	.word	0x40010400
 8001ecc:	40014000 	.word	0x40014000
 8001ed0:	40001800 	.word	0x40001800

08001ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d122      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d11b      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0202 	mvn.w	r2, #2
 8001f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8ee 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001f1c:	e005      	b.n	8001f2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8e0 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f8f1 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d122      	bne.n	8001f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d11b      	bne.n	8001f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0204 	mvn.w	r2, #4
 8001f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8c4 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001f70:	e005      	b.n	8001f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8b6 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f8c7 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d122      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0208 	mvn.w	r2, #8
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2204      	movs	r2, #4
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f89a 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f88c 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f89d 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b10      	cmp	r3, #16
 8001fe4:	d122      	bne.n	800202c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0210 	mvn.w	r2, #16
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2208      	movs	r2, #8
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f870 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f862 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f873 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d107      	bne.n	8002058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0201 	mvn.w	r2, #1
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fcf2 	bl	8000a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b80      	cmp	r3, #128	; 0x80
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f902 	bl	8002288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208e:	2b40      	cmp	r3, #64	; 0x40
 8002090:	d10e      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209c:	2b40      	cmp	r3, #64	; 0x40
 800209e:	d107      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f838 	bl	8002120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0220 	mvn.w	r2, #32
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8cc 	bl	8002274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a40      	ldr	r2, [pc, #256]	; (8002248 <TIM_Base_SetConfig+0x114>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002152:	d00f      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3d      	ldr	r2, [pc, #244]	; (800224c <TIM_Base_SetConfig+0x118>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d00b      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3c      	ldr	r2, [pc, #240]	; (8002250 <TIM_Base_SetConfig+0x11c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d007      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3b      	ldr	r2, [pc, #236]	; (8002254 <TIM_Base_SetConfig+0x120>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d003      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a3a      	ldr	r2, [pc, #232]	; (8002258 <TIM_Base_SetConfig+0x124>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d108      	bne.n	8002186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2f      	ldr	r2, [pc, #188]	; (8002248 <TIM_Base_SetConfig+0x114>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d02b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002194:	d027      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2c      	ldr	r2, [pc, #176]	; (800224c <TIM_Base_SetConfig+0x118>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d023      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2b      	ldr	r2, [pc, #172]	; (8002250 <TIM_Base_SetConfig+0x11c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01f      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2a      	ldr	r2, [pc, #168]	; (8002254 <TIM_Base_SetConfig+0x120>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a29      	ldr	r2, [pc, #164]	; (8002258 <TIM_Base_SetConfig+0x124>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d017      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a28      	ldr	r2, [pc, #160]	; (800225c <TIM_Base_SetConfig+0x128>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a27      	ldr	r2, [pc, #156]	; (8002260 <TIM_Base_SetConfig+0x12c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00f      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a26      	ldr	r2, [pc, #152]	; (8002264 <TIM_Base_SetConfig+0x130>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a25      	ldr	r2, [pc, #148]	; (8002268 <TIM_Base_SetConfig+0x134>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a24      	ldr	r2, [pc, #144]	; (800226c <TIM_Base_SetConfig+0x138>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d003      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a23      	ldr	r2, [pc, #140]	; (8002270 <TIM_Base_SetConfig+0x13c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d108      	bne.n	80021f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <TIM_Base_SetConfig+0x114>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d003      	beq.n	800222c <TIM_Base_SetConfig+0xf8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <TIM_Base_SetConfig+0x124>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d103      	bne.n	8002234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	615a      	str	r2, [r3, #20]
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40010000 	.word	0x40010000
 800224c:	40000400 	.word	0x40000400
 8002250:	40000800 	.word	0x40000800
 8002254:	40000c00 	.word	0x40000c00
 8002258:	40010400 	.word	0x40010400
 800225c:	40014000 	.word	0x40014000
 8002260:	40014400 	.word	0x40014400
 8002264:	40014800 	.word	0x40014800
 8002268:	40001800 	.word	0x40001800
 800226c:	40001c00 	.word	0x40001c00
 8002270:	40002000 	.word	0x40002000

08002274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f103 0208 	add.w	r2, r3, #8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f103 0208 	add.w	r2, r3, #8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f103 0208 	add.w	r2, r3, #8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d103      	bne.n	800235e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e00c      	b.n	8002378 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3308      	adds	r3, #8
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e002      	b.n	800236c <vListInsert+0x2e>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	429a      	cmp	r2, r3
 8002376:	d2f6      	bcs.n	8002366 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	601a      	str	r2, [r3, #0]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6892      	ldr	r2, [r2, #8]
 80023c6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6852      	ldr	r2, [r2, #4]
 80023d0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d103      	bne.n	80023e4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	1e5a      	subs	r2, r3, #1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002404:	b580      	push	{r7, lr}
 8002406:	b08c      	sub	sp, #48	; 0x30
 8002408:	af04      	add	r7, sp, #16
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	4613      	mov	r3, r2
 8002412:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4618      	mov	r0, r3
 800241a:	f001 fa77 	bl	800390c <pvPortMalloc>
 800241e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d00e      	beq.n	8002444 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002426:	2058      	movs	r0, #88	; 0x58
 8002428:	f001 fa70 	bl	800390c <pvPortMalloc>
 800242c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	631a      	str	r2, [r3, #48]	; 0x30
 800243a:	e005      	b.n	8002448 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800243c:	6978      	ldr	r0, [r7, #20]
 800243e:	f001 fb45 	bl	8003acc <vPortFree>
 8002442:	e001      	b.n	8002448 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d013      	beq.n	8002476 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800244e:	88fa      	ldrh	r2, [r7, #6]
 8002450:	2300      	movs	r3, #0
 8002452:	9303      	str	r3, [sp, #12]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	9302      	str	r3, [sp, #8]
 8002458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f80e 	bl	8002486 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800246a:	69f8      	ldr	r0, [r7, #28]
 800246c:	f000 f8b0 	bl	80025d0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002470:	2301      	movs	r3, #1
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	e002      	b.n	800247c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
 800247a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800247c:	69bb      	ldr	r3, [r7, #24]
    }
 800247e:	4618      	mov	r0, r3
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b088      	sub	sp, #32
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	461a      	mov	r2, r3
 800249e:	21a5      	movs	r1, #165	; 0xa5
 80024a0:	f003 f80a 	bl	80054b8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80024a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024ae:	3b01      	subs	r3, #1
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	f023 0307 	bic.w	r3, r3, #7
 80024bc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <prvInitialiseNewTask+0x58>
        __asm volatile
 80024c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024cc:	f383 8811 	msr	BASEPRI, r3
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	f3bf 8f4f 	dsb	sy
 80024d8:	617b      	str	r3, [r7, #20]
    }
 80024da:	bf00      	nop
 80024dc:	e7fe      	b.n	80024dc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01f      	beq.n	8002524 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	e012      	b.n	8002510 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	4413      	add	r3, r2
 80024f0:	7819      	ldrb	r1, [r3, #0]
 80024f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	4413      	add	r3, r2
 80024f8:	3334      	adds	r3, #52	; 0x34
 80024fa:	460a      	mov	r2, r1
 80024fc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	4413      	add	r3, r2
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3301      	adds	r3, #1
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b09      	cmp	r3, #9
 8002514:	d9e9      	bls.n	80024ea <prvInitialiseNewTask+0x64>
 8002516:	e000      	b.n	800251a <prvInitialiseNewTask+0x94>
            {
                break;
 8002518:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800251a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002522:	e003      	b.n	800252c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252e:	2b04      	cmp	r3, #4
 8002530:	d90a      	bls.n	8002548 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002536:	f383 8811 	msr	BASEPRI, r3
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	613b      	str	r3, [r7, #16]
    }
 8002544:	bf00      	nop
 8002546:	e7fe      	b.n	8002546 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	2b04      	cmp	r3, #4
 800254c:	d901      	bls.n	8002552 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800254e:	2304      	movs	r3, #4
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800255c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002560:	2200      	movs	r2, #0
 8002562:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002566:	3304      	adds	r3, #4
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff feb7 	bl	80022dc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	3318      	adds	r3, #24
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff feb2 	bl	80022dc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800257c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002580:	f1c3 0205 	rsb	r2, r3, #5
 8002584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002586:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	3350      	adds	r3, #80	; 0x50
 8002592:	2204      	movs	r2, #4
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f002 ff8e 	bl	80054b8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	3354      	adds	r3, #84	; 0x54
 80025a0:	2201      	movs	r2, #1
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f002 ff87 	bl	80054b8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	68f9      	ldr	r1, [r7, #12]
 80025ae:	69b8      	ldr	r0, [r7, #24]
 80025b0:	f000 ff90 	bl	80034d4 <pxPortInitialiseStack>
 80025b4:	4602      	mov	r2, r0
 80025b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025c6:	bf00      	nop
 80025c8:	3720      	adds	r7, #32
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80025d0:	b5b0      	push	{r4, r5, r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af02      	add	r7, sp, #8
 80025d6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80025d8:	f001 f8ae 	bl	8003738 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80025dc:	4b4f      	ldr	r3, [pc, #316]	; (800271c <prvAddNewTaskToReadyList+0x14c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	3301      	adds	r3, #1
 80025e2:	4a4e      	ldr	r2, [pc, #312]	; (800271c <prvAddNewTaskToReadyList+0x14c>)
 80025e4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80025e6:	4b4e      	ldr	r3, [pc, #312]	; (8002720 <prvAddNewTaskToReadyList+0x150>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d109      	bne.n	8002602 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80025ee:	4a4c      	ldr	r2, [pc, #304]	; (8002720 <prvAddNewTaskToReadyList+0x150>)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025f4:	4b49      	ldr	r3, [pc, #292]	; (800271c <prvAddNewTaskToReadyList+0x14c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d110      	bne.n	800261e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80025fc:	f000 fc88 	bl	8002f10 <prvInitialiseTaskLists>
 8002600:	e00d      	b.n	800261e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002602:	4b48      	ldr	r3, [pc, #288]	; (8002724 <prvAddNewTaskToReadyList+0x154>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d109      	bne.n	800261e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800260a:	4b45      	ldr	r3, [pc, #276]	; (8002720 <prvAddNewTaskToReadyList+0x150>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	429a      	cmp	r2, r3
 8002616:	d802      	bhi.n	800261e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002618:	4a41      	ldr	r2, [pc, #260]	; (8002720 <prvAddNewTaskToReadyList+0x150>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800261e:	4b42      	ldr	r3, [pc, #264]	; (8002728 <prvAddNewTaskToReadyList+0x158>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	3301      	adds	r3, #1
 8002624:	4a40      	ldr	r2, [pc, #256]	; (8002728 <prvAddNewTaskToReadyList+0x158>)
 8002626:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002628:	4b3f      	ldr	r3, [pc, #252]	; (8002728 <prvAddNewTaskToReadyList+0x158>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d016      	beq.n	8002664 <prvAddNewTaskToReadyList+0x94>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4618      	mov	r0, r3
 800263a:	f002 fc8f 	bl	8004f5c <SEGGER_SYSVIEW_OnTaskCreate>
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	461d      	mov	r5, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	461c      	mov	r4, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	1ae3      	subs	r3, r4, r3
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	462b      	mov	r3, r5
 8002660:	f001 fb52 	bl	8003d08 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4618      	mov	r0, r3
 8002668:	f002 fcfc 	bl	8005064 <SEGGER_SYSVIEW_OnTaskStartReady>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	2201      	movs	r2, #1
 8002672:	409a      	lsls	r2, r3
 8002674:	4b2d      	ldr	r3, [pc, #180]	; (800272c <prvAddNewTaskToReadyList+0x15c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4313      	orrs	r3, r2
 800267a:	4a2c      	ldr	r2, [pc, #176]	; (800272c <prvAddNewTaskToReadyList+0x15c>)
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002682:	492b      	ldr	r1, [pc, #172]	; (8002730 <prvAddNewTaskToReadyList+0x160>)
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	3304      	adds	r3, #4
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	3204      	adds	r2, #4
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	1d1a      	adds	r2, r3, #4
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <prvAddNewTaskToReadyList+0x160>)
 80026c2:	441a      	add	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	615a      	str	r2, [r3, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026cc:	4918      	ldr	r1, [pc, #96]	; (8002730 <prvAddNewTaskToReadyList+0x160>)
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	1c59      	adds	r1, r3, #1
 80026dc:	4814      	ldr	r0, [pc, #80]	; (8002730 <prvAddNewTaskToReadyList+0x160>)
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4403      	add	r3, r0
 80026e8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80026ea:	f001 f855 	bl	8003798 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80026ee:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <prvAddNewTaskToReadyList+0x154>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00e      	beq.n	8002714 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <prvAddNewTaskToReadyList+0x150>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	429a      	cmp	r2, r3
 8002702:	d207      	bcs.n	8002714 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <prvAddNewTaskToReadyList+0x164>)
 8002706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bdb0      	pop	{r4, r5, r7, pc}
 800271c:	2000010c 	.word	0x2000010c
 8002720:	20000034 	.word	0x20000034
 8002724:	20000118 	.word	0x20000118
 8002728:	20000128 	.word	0x20000128
 800272c:	20000114 	.word	0x20000114
 8002730:	20000038 	.word	0x20000038
 8002734:	e000ed04 	.word	0xe000ed04

08002738 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002740:	f000 fffa 	bl	8003738 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <vTaskDelete+0x18>
 800274a:	4b48      	ldr	r3, [pc, #288]	; (800286c <vTaskDelete+0x134>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	e000      	b.n	8002752 <vTaskDelete+0x1a>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3304      	adds	r3, #4
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fe29 	bl	80023b0 <uxListRemove>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d115      	bne.n	8002790 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002768:	4941      	ldr	r1, [pc, #260]	; (8002870 <vTaskDelete+0x138>)
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <vTaskDelete+0x58>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	2201      	movs	r2, #1
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43da      	mvns	r2, r3
 8002786:	4b3b      	ldr	r3, [pc, #236]	; (8002874 <vTaskDelete+0x13c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4013      	ands	r3, r2
 800278c:	4a39      	ldr	r2, [pc, #228]	; (8002874 <vTaskDelete+0x13c>)
 800278e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3318      	adds	r3, #24
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fe07 	bl	80023b0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80027a2:	4b35      	ldr	r3, [pc, #212]	; (8002878 <vTaskDelete+0x140>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	3301      	adds	r3, #1
 80027a8:	4a33      	ldr	r2, [pc, #204]	; (8002878 <vTaskDelete+0x140>)
 80027aa:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80027ac:	4b2f      	ldr	r3, [pc, #188]	; (800286c <vTaskDelete+0x134>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d118      	bne.n	80027e8 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3304      	adds	r3, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	482f      	ldr	r0, [pc, #188]	; (800287c <vTaskDelete+0x144>)
 80027be:	f7ff fd9a 	bl	80022f6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 80027c2:	4b2f      	ldr	r3, [pc, #188]	; (8002880 <vTaskDelete+0x148>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	4a2d      	ldr	r2, [pc, #180]	; (8002880 <vTaskDelete+0x148>)
 80027ca:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 fcea 	bl	80051a8 <SEGGER_SYSVIEW_ShrinkId>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4619      	mov	r1, r3
 80027d8:	2022      	movs	r0, #34	; 0x22
 80027da:	f001 ff5b 	bl	8004694 <SEGGER_SYSVIEW_RecordU32>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 faf9 	bl	8003dd8 <SYSVIEW_DeleteTask>
 80027e6:	e013      	b.n	8002810 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80027e8:	4b26      	ldr	r3, [pc, #152]	; (8002884 <vTaskDelete+0x14c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	4a25      	ldr	r2, [pc, #148]	; (8002884 <vTaskDelete+0x14c>)
 80027f0:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 fcd7 	bl	80051a8 <SEGGER_SYSVIEW_ShrinkId>
 80027fa:	4603      	mov	r3, r0
 80027fc:	4619      	mov	r1, r3
 80027fe:	2022      	movs	r0, #34	; 0x22
 8002800:	f001 ff48 	bl	8004694 <SEGGER_SYSVIEW_RecordU32>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4618      	mov	r0, r3
 8002808:	f001 fae6 	bl	8003dd8 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800280c:	f000 fbfe 	bl	800300c <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002810:	f000 ffc2 	bl	8003798 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <vTaskDelete+0x134>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	429a      	cmp	r2, r3
 800281c:	d002      	beq.n	8002824 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fbe4 	bl	8002fec <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002824:	4b18      	ldr	r3, [pc, #96]	; (8002888 <vTaskDelete+0x150>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01b      	beq.n	8002864 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 800282c:	4b0f      	ldr	r3, [pc, #60]	; (800286c <vTaskDelete+0x134>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	429a      	cmp	r2, r3
 8002834:	d116      	bne.n	8002864 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <vTaskDelete+0x154>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <vTaskDelete+0x11c>
        __asm volatile
 800283e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002842:	f383 8811 	msr	BASEPRI, r3
 8002846:	f3bf 8f6f 	isb	sy
 800284a:	f3bf 8f4f 	dsb	sy
 800284e:	60bb      	str	r3, [r7, #8]
    }
 8002850:	bf00      	nop
 8002852:	e7fe      	b.n	8002852 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <vTaskDelete+0x158>)
 8002856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000034 	.word	0x20000034
 8002870:	20000038 	.word	0x20000038
 8002874:	20000114 	.word	0x20000114
 8002878:	20000128 	.word	0x20000128
 800287c:	200000e0 	.word	0x200000e0
 8002880:	200000f4 	.word	0x200000f4
 8002884:	2000010c 	.word	0x2000010c
 8002888:	20000118 	.word	0x20000118
 800288c:	20000134 	.word	0x20000134
 8002890:	e000ed04 	.word	0xe000ed04

08002894 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d01b      	beq.n	80028de <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <vTaskDelay+0x68>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <vTaskDelay+0x30>
        __asm volatile
 80028ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b2:	f383 8811 	msr	BASEPRI, r3
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	60bb      	str	r3, [r7, #8]
    }
 80028c0:	bf00      	nop
 80028c2:	e7fe      	b.n	80028c2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80028c4:	f000 f87a 	bl	80029bc <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	2023      	movs	r0, #35	; 0x23
 80028cc:	f001 fee2 	bl	8004694 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80028d0:	2100      	movs	r1, #0
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fd72 	bl	80033bc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80028d8:	f000 f87e 	bl	80029d8 <xTaskResumeAll>
 80028dc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d107      	bne.n	80028f4 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <vTaskDelay+0x6c>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000134 	.word	0x20000134
 8002900:	e000ed04 	.word	0xe000ed04

08002904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800290a:	4b24      	ldr	r3, [pc, #144]	; (800299c <vTaskStartScheduler+0x98>)
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	2300      	movs	r3, #0
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2300      	movs	r3, #0
 8002914:	2282      	movs	r2, #130	; 0x82
 8002916:	4922      	ldr	r1, [pc, #136]	; (80029a0 <vTaskStartScheduler+0x9c>)
 8002918:	4822      	ldr	r0, [pc, #136]	; (80029a4 <vTaskStartScheduler+0xa0>)
 800291a:	f7ff fd73 	bl	8002404 <xTaskCreate>
 800291e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d124      	bne.n	8002970 <vTaskStartScheduler+0x6c>
        __asm volatile
 8002926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292a:	f383 8811 	msr	BASEPRI, r3
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	60bb      	str	r3, [r7, #8]
    }
 8002938:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800293a:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <vTaskStartScheduler+0xa4>)
 800293c:	f04f 32ff 	mov.w	r2, #4294967295
 8002940:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <vTaskStartScheduler+0xa8>)
 8002944:	2201      	movs	r2, #1
 8002946:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002948:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <vTaskStartScheduler+0xac>)
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800294e:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <vTaskStartScheduler+0xb0>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <vTaskStartScheduler+0x98>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d102      	bne.n	8002960 <vTaskStartScheduler+0x5c>
 800295a:	f002 fae3 	bl	8004f24 <SEGGER_SYSVIEW_OnIdle>
 800295e:	e004      	b.n	800296a <vTaskStartScheduler+0x66>
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <vTaskStartScheduler+0xb0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f002 fb3b 	bl	8004fe0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800296a:	f000 fe43 	bl	80035f4 <xPortStartScheduler>
 800296e:	e00e      	b.n	800298e <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002976:	d10a      	bne.n	800298e <vTaskStartScheduler+0x8a>
        __asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	607b      	str	r3, [r7, #4]
    }
 800298a:	bf00      	nop
 800298c:	e7fe      	b.n	800298c <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <vTaskStartScheduler+0xb4>)
 8002990:	681b      	ldr	r3, [r3, #0]
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000130 	.word	0x20000130
 80029a0:	08005510 	.word	0x08005510
 80029a4:	08002ee1 	.word	0x08002ee1
 80029a8:	2000012c 	.word	0x2000012c
 80029ac:	20000118 	.word	0x20000118
 80029b0:	20000110 	.word	0x20000110
 80029b4:	20000034 	.word	0x20000034
 80029b8:	2000000c 	.word	0x2000000c

080029bc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80029c0:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <vTaskSuspendAll+0x18>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3301      	adds	r3, #1
 80029c6:	4a03      	ldr	r2, [pc, #12]	; (80029d4 <vTaskSuspendAll+0x18>)
 80029c8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	20000134 	.word	0x20000134

080029d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80029e6:	4b73      	ldr	r3, [pc, #460]	; (8002bb4 <xTaskResumeAll+0x1dc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10a      	bne.n	8002a04 <xTaskResumeAll+0x2c>
        __asm volatile
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	607b      	str	r3, [r7, #4]
    }
 8002a00:	bf00      	nop
 8002a02:	e7fe      	b.n	8002a02 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a04:	f000 fe98 	bl	8003738 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002a08:	4b6a      	ldr	r3, [pc, #424]	; (8002bb4 <xTaskResumeAll+0x1dc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	4a69      	ldr	r2, [pc, #420]	; (8002bb4 <xTaskResumeAll+0x1dc>)
 8002a10:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a12:	4b68      	ldr	r3, [pc, #416]	; (8002bb4 <xTaskResumeAll+0x1dc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f040 80c4 	bne.w	8002ba4 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a1c:	4b66      	ldr	r3, [pc, #408]	; (8002bb8 <xTaskResumeAll+0x1e0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80bf 	beq.w	8002ba4 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a26:	e08e      	b.n	8002b46 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a28:	4b64      	ldr	r3, [pc, #400]	; (8002bbc <xTaskResumeAll+0x1e4>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	6a12      	ldr	r2, [r2, #32]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	69d2      	ldr	r2, [r2, #28]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3318      	adds	r3, #24
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d103      	bne.n	8002a5e <xTaskResumeAll+0x86>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	6a1a      	ldr	r2, [r3, #32]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	2200      	movs	r2, #0
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	1e5a      	subs	r2, r3, #1
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	68d2      	ldr	r2, [r2, #12]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	6892      	ldr	r2, [r2, #8]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d103      	bne.n	8002a9c <xTaskResumeAll+0xc4>
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	615a      	str	r2, [r3, #20]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	1e5a      	subs	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 fad8 	bl	8005064 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	2201      	movs	r2, #1
 8002aba:	409a      	lsls	r2, r3
 8002abc:	4b40      	ldr	r3, [pc, #256]	; (8002bc0 <xTaskResumeAll+0x1e8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	4a3f      	ldr	r2, [pc, #252]	; (8002bc0 <xTaskResumeAll+0x1e8>)
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aca:	493e      	ldr	r1, [pc, #248]	; (8002bc4 <xTaskResumeAll+0x1ec>)
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	3204      	adds	r2, #4
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	1d1a      	adds	r2, r3, #4
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4a2e      	ldr	r2, [pc, #184]	; (8002bc4 <xTaskResumeAll+0x1ec>)
 8002b0a:	441a      	add	r2, r3
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	615a      	str	r2, [r3, #20]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b14:	492b      	ldr	r1, [pc, #172]	; (8002bc4 <xTaskResumeAll+0x1ec>)
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	1c59      	adds	r1, r3, #1
 8002b24:	4827      	ldr	r0, [pc, #156]	; (8002bc4 <xTaskResumeAll+0x1ec>)
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4403      	add	r3, r0
 8002b30:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b36:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <xTaskResumeAll+0x1f0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d302      	bcc.n	8002b46 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002b40:	4b22      	ldr	r3, [pc, #136]	; (8002bcc <xTaskResumeAll+0x1f4>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <xTaskResumeAll+0x1e4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f47f af6c 	bne.w	8002a28 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002b56:	f000 fa59 	bl	800300c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b5a:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <xTaskResumeAll+0x1f8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d010      	beq.n	8002b88 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002b66:	f000 f837 	bl	8002bd8 <xTaskIncrementTick>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002b70:	4b16      	ldr	r3, [pc, #88]	; (8002bcc <xTaskResumeAll+0x1f4>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f1      	bne.n	8002b66 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <xTaskResumeAll+0x1f8>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002b88:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <xTaskResumeAll+0x1f4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d009      	beq.n	8002ba4 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002b90:	2301      	movs	r3, #1
 8002b92:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002b94:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <xTaskResumeAll+0x1fc>)
 8002b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002ba4:	f000 fdf8 	bl	8003798 <vPortExitCritical>

    return xAlreadyYielded;
 8002ba8:	69bb      	ldr	r3, [r7, #24]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3720      	adds	r7, #32
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000134 	.word	0x20000134
 8002bb8:	2000010c 	.word	0x2000010c
 8002bbc:	200000cc 	.word	0x200000cc
 8002bc0:	20000114 	.word	0x20000114
 8002bc4:	20000038 	.word	0x20000038
 8002bc8:	20000034 	.word	0x20000034
 8002bcc:	20000120 	.word	0x20000120
 8002bd0:	2000011c 	.word	0x2000011c
 8002bd4:	e000ed04 	.word	0xe000ed04

08002bd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002bde:	2300      	movs	r3, #0
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002be2:	4b7f      	ldr	r3, [pc, #508]	; (8002de0 <xTaskIncrementTick+0x208>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 80f0 	bne.w	8002dcc <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002bec:	4b7d      	ldr	r3, [pc, #500]	; (8002de4 <xTaskIncrementTick+0x20c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002bf4:	4a7b      	ldr	r2, [pc, #492]	; (8002de4 <xTaskIncrementTick+0x20c>)
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d120      	bne.n	8002c42 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002c00:	4b79      	ldr	r3, [pc, #484]	; (8002de8 <xTaskIncrementTick+0x210>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <xTaskIncrementTick+0x48>
        __asm volatile
 8002c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0e:	f383 8811 	msr	BASEPRI, r3
 8002c12:	f3bf 8f6f 	isb	sy
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	607b      	str	r3, [r7, #4]
    }
 8002c1c:	bf00      	nop
 8002c1e:	e7fe      	b.n	8002c1e <xTaskIncrementTick+0x46>
 8002c20:	4b71      	ldr	r3, [pc, #452]	; (8002de8 <xTaskIncrementTick+0x210>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	4b71      	ldr	r3, [pc, #452]	; (8002dec <xTaskIncrementTick+0x214>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a6f      	ldr	r2, [pc, #444]	; (8002de8 <xTaskIncrementTick+0x210>)
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4a6f      	ldr	r2, [pc, #444]	; (8002dec <xTaskIncrementTick+0x214>)
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b6e      	ldr	r3, [pc, #440]	; (8002df0 <xTaskIncrementTick+0x218>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	4a6d      	ldr	r2, [pc, #436]	; (8002df0 <xTaskIncrementTick+0x218>)
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	f000 f9e5 	bl	800300c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002c42:	4b6c      	ldr	r3, [pc, #432]	; (8002df4 <xTaskIncrementTick+0x21c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6a3a      	ldr	r2, [r7, #32]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	f0c0 80aa 	bcc.w	8002da2 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c4e:	4b66      	ldr	r3, [pc, #408]	; (8002de8 <xTaskIncrementTick+0x210>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d104      	bne.n	8002c62 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c58:	4b66      	ldr	r3, [pc, #408]	; (8002df4 <xTaskIncrementTick+0x21c>)
 8002c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5e:	601a      	str	r2, [r3, #0]
                    break;
 8002c60:	e09f      	b.n	8002da2 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c62:	4b61      	ldr	r3, [pc, #388]	; (8002de8 <xTaskIncrementTick+0x210>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002c72:	6a3a      	ldr	r2, [r7, #32]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d203      	bcs.n	8002c82 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c7a:	4a5e      	ldr	r2, [pc, #376]	; (8002df4 <xTaskIncrementTick+0x21c>)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002c80:	e08f      	b.n	8002da2 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	68d2      	ldr	r2, [r2, #12]
 8002c90:	609a      	str	r2, [r3, #8]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	6892      	ldr	r2, [r2, #8]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d103      	bne.n	8002cb0 <xTaskIncrementTick+0xd8>
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	68da      	ldr	r2, [r3, #12]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	615a      	str	r2, [r3, #20]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	1e5a      	subs	r2, r3, #1
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d01e      	beq.n	8002d06 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	6a12      	ldr	r2, [r2, #32]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	69d2      	ldr	r2, [r2, #28]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	3318      	adds	r3, #24
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d103      	bne.n	8002cf6 <xTaskIncrementTick+0x11e>
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	6a1a      	ldr	r2, [r3, #32]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	629a      	str	r2, [r3, #40]	; 0x28
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	1e5a      	subs	r2, r3, #1
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f002 f9ab 	bl	8005064 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	2201      	movs	r2, #1
 8002d14:	409a      	lsls	r2, r3
 8002d16:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <xTaskIncrementTick+0x220>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	4a36      	ldr	r2, [pc, #216]	; (8002df8 <xTaskIncrementTick+0x220>)
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d24:	4935      	ldr	r1, [pc, #212]	; (8002dfc <xTaskIncrementTick+0x224>)
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3304      	adds	r3, #4
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	60da      	str	r2, [r3, #12]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	3204      	adds	r2, #4
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	1d1a      	adds	r2, r3, #4
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	609a      	str	r2, [r3, #8]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4a26      	ldr	r2, [pc, #152]	; (8002dfc <xTaskIncrementTick+0x224>)
 8002d64:	441a      	add	r2, r3
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	615a      	str	r2, [r3, #20]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6e:	4923      	ldr	r1, [pc, #140]	; (8002dfc <xTaskIncrementTick+0x224>)
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	1c59      	adds	r1, r3, #1
 8002d7e:	481f      	ldr	r0, [pc, #124]	; (8002dfc <xTaskIncrementTick+0x224>)
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4403      	add	r3, r0
 8002d8a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d90:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <xTaskIncrementTick+0x228>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	429a      	cmp	r2, r3
 8002d98:	f4ff af59 	bcc.w	8002c4e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002da0:	e755      	b.n	8002c4e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <xTaskIncrementTick+0x228>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da8:	4914      	ldr	r1, [pc, #80]	; (8002dfc <xTaskIncrementTick+0x224>)
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d901      	bls.n	8002dbe <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002dbe:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <xTaskIncrementTick+0x22c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d007      	beq.n	8002dd6 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dca:	e004      	b.n	8002dd6 <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <xTaskIncrementTick+0x230>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	4a0d      	ldr	r2, [pc, #52]	; (8002e08 <xTaskIncrementTick+0x230>)
 8002dd4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3728      	adds	r7, #40	; 0x28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20000134 	.word	0x20000134
 8002de4:	20000110 	.word	0x20000110
 8002de8:	200000c4 	.word	0x200000c4
 8002dec:	200000c8 	.word	0x200000c8
 8002df0:	20000124 	.word	0x20000124
 8002df4:	2000012c 	.word	0x2000012c
 8002df8:	20000114 	.word	0x20000114
 8002dfc:	20000038 	.word	0x20000038
 8002e00:	20000034 	.word	0x20000034
 8002e04:	20000120 	.word	0x20000120
 8002e08:	2000011c 	.word	0x2000011c

08002e0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <vTaskSwitchContext+0xbc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002e1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <vTaskSwitchContext+0xc0>)
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002e20:	e04d      	b.n	8002ebe <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <vTaskSwitchContext+0xc0>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e28:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <vTaskSwitchContext+0xc4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002e36:	7afb      	ldrb	r3, [r7, #11]
 8002e38:	f1c3 031f 	rsb	r3, r3, #31
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	4925      	ldr	r1, [pc, #148]	; (8002ed4 <vTaskSwitchContext+0xc8>)
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	607b      	str	r3, [r7, #4]
    }
 8002e64:	bf00      	nop
 8002e66:	e7fe      	b.n	8002e66 <vTaskSwitchContext+0x5a>
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <vTaskSwitchContext+0xc8>)
 8002e74:	4413      	add	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	3308      	adds	r3, #8
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d104      	bne.n	8002e98 <vTaskSwitchContext+0x8c>
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4a0e      	ldr	r2, [pc, #56]	; (8002ed8 <vTaskSwitchContext+0xcc>)
 8002ea0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <vTaskSwitchContext+0xcc>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <vTaskSwitchContext+0xd0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d102      	bne.n	8002eb4 <vTaskSwitchContext+0xa8>
 8002eae:	f002 f839 	bl	8004f24 <SEGGER_SYSVIEW_OnIdle>
}
 8002eb2:	e004      	b.n	8002ebe <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002eb4:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <vTaskSwitchContext+0xcc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f002 f891 	bl	8004fe0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002ebe:	bf00      	nop
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000134 	.word	0x20000134
 8002ecc:	20000120 	.word	0x20000120
 8002ed0:	20000114 	.word	0x20000114
 8002ed4:	20000038 	.word	0x20000038
 8002ed8:	20000034 	.word	0x20000034
 8002edc:	20000130 	.word	0x20000130

08002ee0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ee8:	f000 f852 	bl	8002f90 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <prvIdleTask+0x28>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d9f9      	bls.n	8002ee8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <prvIdleTask+0x2c>)
 8002ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002f04:	e7f0      	b.n	8002ee8 <prvIdleTask+0x8>
 8002f06:	bf00      	nop
 8002f08:	20000038 	.word	0x20000038
 8002f0c:	e000ed04 	.word	0xe000ed04

08002f10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	e00c      	b.n	8002f36 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4a12      	ldr	r2, [pc, #72]	; (8002f70 <prvInitialiseTaskLists+0x60>)
 8002f28:	4413      	add	r3, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff f9b6 	bl	800229c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3301      	adds	r3, #1
 8002f34:	607b      	str	r3, [r7, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d9ef      	bls.n	8002f1c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002f3c:	480d      	ldr	r0, [pc, #52]	; (8002f74 <prvInitialiseTaskLists+0x64>)
 8002f3e:	f7ff f9ad 	bl	800229c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002f42:	480d      	ldr	r0, [pc, #52]	; (8002f78 <prvInitialiseTaskLists+0x68>)
 8002f44:	f7ff f9aa 	bl	800229c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002f48:	480c      	ldr	r0, [pc, #48]	; (8002f7c <prvInitialiseTaskLists+0x6c>)
 8002f4a:	f7ff f9a7 	bl	800229c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002f4e:	480c      	ldr	r0, [pc, #48]	; (8002f80 <prvInitialiseTaskLists+0x70>)
 8002f50:	f7ff f9a4 	bl	800229c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002f54:	480b      	ldr	r0, [pc, #44]	; (8002f84 <prvInitialiseTaskLists+0x74>)
 8002f56:	f7ff f9a1 	bl	800229c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <prvInitialiseTaskLists+0x78>)
 8002f5c:	4a05      	ldr	r2, [pc, #20]	; (8002f74 <prvInitialiseTaskLists+0x64>)
 8002f5e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <prvInitialiseTaskLists+0x7c>)
 8002f62:	4a05      	ldr	r2, [pc, #20]	; (8002f78 <prvInitialiseTaskLists+0x68>)
 8002f64:	601a      	str	r2, [r3, #0]
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000038 	.word	0x20000038
 8002f74:	2000009c 	.word	0x2000009c
 8002f78:	200000b0 	.word	0x200000b0
 8002f7c:	200000cc 	.word	0x200000cc
 8002f80:	200000e0 	.word	0x200000e0
 8002f84:	200000f8 	.word	0x200000f8
 8002f88:	200000c4 	.word	0x200000c4
 8002f8c:	200000c8 	.word	0x200000c8

08002f90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f96:	e019      	b.n	8002fcc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002f98:	f000 fbce 	bl	8003738 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f9c:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <prvCheckTasksWaitingTermination+0x50>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fa01 	bl	80023b0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <prvCheckTasksWaitingTermination+0x54>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <prvCheckTasksWaitingTermination+0x54>)
 8002fb6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <prvCheckTasksWaitingTermination+0x58>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <prvCheckTasksWaitingTermination+0x58>)
 8002fc0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002fc2:	f000 fbe9 	bl	8003798 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f810 	bl	8002fec <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <prvCheckTasksWaitingTermination+0x58>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1e1      	bne.n	8002f98 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200000e0 	.word	0x200000e0
 8002fe4:	2000010c 	.word	0x2000010c
 8002fe8:	200000f4 	.word	0x200000f4

08002fec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fd67 	bl	8003acc <vPortFree>
                vPortFree( pxTCB );
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fd64 	bl	8003acc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003010:	4b0a      	ldr	r3, [pc, #40]	; (800303c <prvResetNextTaskUnblockTime+0x30>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d104      	bne.n	8003024 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800301a:	4b09      	ldr	r3, [pc, #36]	; (8003040 <prvResetNextTaskUnblockTime+0x34>)
 800301c:	f04f 32ff 	mov.w	r2, #4294967295
 8003020:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003022:	e005      	b.n	8003030 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <prvResetNextTaskUnblockTime+0x30>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a04      	ldr	r2, [pc, #16]	; (8003040 <prvResetNextTaskUnblockTime+0x34>)
 800302e:	6013      	str	r3, [r2, #0]
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	200000c4 	.word	0x200000c4
 8003040:	2000012c 	.word	0x2000012c

08003044 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af02      	add	r7, sp, #8
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	f383 8811 	msr	BASEPRI, r3
 8003060:	f3bf 8f6f 	isb	sy
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	613b      	str	r3, [r7, #16]
    }
 800306a:	bf00      	nop
 800306c:	e7fe      	b.n	800306c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800306e:	f000 fb63 	bl	8003738 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003072:	4b36      	ldr	r3, [pc, #216]	; (800314c <xTaskGenericNotifyWait+0x108>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4413      	add	r3, r2
 800307a:	3354      	adds	r3, #84	; 0x54
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d022      	beq.n	80030ca <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003084:	4b31      	ldr	r3, [pc, #196]	; (800314c <xTaskGenericNotifyWait+0x108>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	3214      	adds	r2, #20
 800308c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	43d2      	mvns	r2, r2
 8003094:	4011      	ands	r1, r2
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	3214      	adds	r2, #20
 800309a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800309e:	4b2b      	ldr	r3, [pc, #172]	; (800314c <xTaskGenericNotifyWait+0x108>)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	3354      	adds	r3, #84	; 0x54
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00b      	beq.n	80030ca <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030b2:	2101      	movs	r1, #1
 80030b4:	6a38      	ldr	r0, [r7, #32]
 80030b6:	f000 f981 	bl	80033bc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80030ba:	4b25      	ldr	r3, [pc, #148]	; (8003150 <xTaskGenericNotifyWait+0x10c>)
 80030bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80030ca:	f000 fb65 	bl	8003798 <vPortExitCritical>

        taskENTER_CRITICAL();
 80030ce:	f000 fb33 	bl	8003738 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	4613      	mov	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	2040      	movs	r0, #64	; 0x40
 80030e0:	f001 fb6e 	bl	80047c0 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d007      	beq.n	80030fa <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80030ea:	4b18      	ldr	r3, [pc, #96]	; (800314c <xTaskGenericNotifyWait+0x108>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	3214      	adds	r2, #20
 80030f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80030fa:	4b14      	ldr	r3, [pc, #80]	; (800314c <xTaskGenericNotifyWait+0x108>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4413      	add	r3, r2
 8003102:	3354      	adds	r3, #84	; 0x54
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d002      	beq.n	8003112 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e00e      	b.n	8003130 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <xTaskGenericNotifyWait+0x108>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	3214      	adds	r2, #20
 800311a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	43d2      	mvns	r2, r2
 8003122:	4011      	ands	r1, r2
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	3214      	adds	r2, #20
 8003128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800312c:	2301      	movs	r3, #1
 800312e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <xTaskGenericNotifyWait+0x108>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	3354      	adds	r3, #84	; 0x54
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800313e:	f000 fb2b 	bl	8003798 <vPortExitCritical>

        return xReturn;
 8003142:	697b      	ldr	r3, [r7, #20]
    }
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000034 	.word	0x20000034
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003154:	b580      	push	{r7, lr}
 8003156:	b090      	sub	sp, #64	; 0x40
 8003158:	af02      	add	r7, sp, #8
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003162:	2301      	movs	r3, #1
 8003164:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <xTaskGenericNotify+0x2e>
        __asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	623b      	str	r3, [r7, #32]
    }
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10a      	bne.n	800319e <xTaskGenericNotify+0x4a>
        __asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	61fb      	str	r3, [r7, #28]
    }
 800319a:	bf00      	nop
 800319c:	e7fe      	b.n	800319c <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 80031a2:	f000 fac9 	bl	8003738 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80031a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d006      	beq.n	80031ba <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	3214      	adds	r2, #20
 80031b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80031ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4413      	add	r3, r2
 80031c0:	3354      	adds	r3, #84	; 0x54
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80031c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4413      	add	r3, r2
 80031ce:	3354      	adds	r3, #84	; 0x54
 80031d0:	2202      	movs	r2, #2
 80031d2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d83b      	bhi.n	8003252 <xTaskGenericNotify+0xfe>
 80031da:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <xTaskGenericNotify+0x8c>)
 80031dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e0:	08003271 	.word	0x08003271
 80031e4:	080031f5 	.word	0x080031f5
 80031e8:	08003211 	.word	0x08003211
 80031ec:	08003229 	.word	0x08003229
 80031f0:	08003237 	.word	0x08003237
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	3214      	adds	r2, #20
 80031fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	ea42 0103 	orr.w	r1, r2, r3
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	3214      	adds	r2, #20
 800320a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800320e:	e032      	b.n	8003276 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	3214      	adds	r2, #20
 8003216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321a:	1c59      	adds	r1, r3, #1
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	3214      	adds	r2, #20
 8003222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003226:	e026      	b.n	8003276 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	3214      	adds	r2, #20
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003234:	e01f      	b.n	8003276 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003236:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800323a:	2b02      	cmp	r3, #2
 800323c:	d006      	beq.n	800324c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	3214      	adds	r2, #20
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800324a:	e014      	b.n	8003276 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800324c:	2300      	movs	r3, #0
 800324e:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003250:	e011      	b.n	8003276 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003252:	4b55      	ldr	r3, [pc, #340]	; (80033a8 <xTaskGenericNotify+0x254>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00c      	beq.n	8003274 <xTaskGenericNotify+0x120>
        __asm volatile
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	f383 8811 	msr	BASEPRI, r3
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	61bb      	str	r3, [r7, #24]
    }
 800326c:	bf00      	nop
 800326e:	e7fe      	b.n	800326e <xTaskGenericNotify+0x11a>
                    break;
 8003270:	bf00      	nop
 8003272:	e000      	b.n	8003276 <xTaskGenericNotify+0x122>

                    break;
 8003274:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	4618      	mov	r0, r3
 800327a:	f001 ff95 	bl	80051a8 <SEGGER_SYSVIEW_ShrinkId>
 800327e:	4601      	mov	r1, r0
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	4613      	mov	r3, r2
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	203e      	movs	r0, #62	; 0x3e
 800328c:	f001 fa98 	bl	80047c0 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003290:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003294:	2b01      	cmp	r3, #1
 8003296:	d17f      	bne.n	8003398 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a4:	68d2      	ldr	r2, [r2, #12]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ae:	6892      	ldr	r2, [r2, #8]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	3304      	adds	r3, #4
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d103      	bne.n	80032c6 <xTaskGenericNotify+0x172>
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	2200      	movs	r2, #0
 80032ca:	615a      	str	r2, [r3, #20]
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	1e5a      	subs	r2, r3, #1
 80032d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d4:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 80032d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 fec3 	bl	8005064 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	2201      	movs	r2, #1
 80032e4:	409a      	lsls	r2, r3
 80032e6:	4b31      	ldr	r3, [pc, #196]	; (80033ac <xTaskGenericNotify+0x258>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	4a2f      	ldr	r2, [pc, #188]	; (80033ac <xTaskGenericNotify+0x258>)
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f4:	492e      	ldr	r1, [pc, #184]	; (80033b0 <xTaskGenericNotify+0x25c>)
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	3304      	adds	r3, #4
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800331a:	3204      	adds	r2, #4
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	1d1a      	adds	r2, r3, #4
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	609a      	str	r2, [r3, #8]
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4a1f      	ldr	r2, [pc, #124]	; (80033b0 <xTaskGenericNotify+0x25c>)
 8003334:	441a      	add	r2, r3
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	615a      	str	r2, [r3, #20]
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333e:	491c      	ldr	r1, [pc, #112]	; (80033b0 <xTaskGenericNotify+0x25c>)
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	1c59      	adds	r1, r3, #1
 800334e:	4818      	ldr	r0, [pc, #96]	; (80033b0 <xTaskGenericNotify+0x25c>)
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4403      	add	r3, r0
 800335a:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00a      	beq.n	800337a <xTaskGenericNotify+0x226>
        __asm volatile
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	617b      	str	r3, [r7, #20]
    }
 8003376:	bf00      	nop
 8003378:	e7fe      	b.n	8003378 <xTaskGenericNotify+0x224>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <xTaskGenericNotify+0x260>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	429a      	cmp	r2, r3
 8003386:	d907      	bls.n	8003398 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <xTaskGenericNotify+0x264>)
 800338a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003398:	f000 f9fe 	bl	8003798 <vPortExitCritical>

        return xReturn;
 800339c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800339e:	4618      	mov	r0, r3
 80033a0:	3738      	adds	r7, #56	; 0x38
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000110 	.word	0x20000110
 80033ac:	20000114 	.word	0x20000114
 80033b0:	20000038 	.word	0x20000038
 80033b4:	20000034 	.word	0x20000034
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80033c6:	4b3c      	ldr	r3, [pc, #240]	; (80034b8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033cc:	4b3b      	ldr	r3, [pc, #236]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3304      	adds	r3, #4
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe ffec 	bl	80023b0 <uxListRemove>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033de:	4b37      	ldr	r3, [pc, #220]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	2201      	movs	r2, #1
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <prvAddCurrentTaskToDelayedList+0x104>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4013      	ands	r3, r2
 80033f2:	4a33      	ldr	r2, [pc, #204]	; (80034c0 <prvAddCurrentTaskToDelayedList+0x104>)
 80033f4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d124      	bne.n	8003448 <prvAddCurrentTaskToDelayedList+0x8c>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d021      	beq.n	8003448 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003404:	4b2f      	ldr	r3, [pc, #188]	; (80034c4 <prvAddCurrentTaskToDelayedList+0x108>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	6892      	ldr	r2, [r2, #8]
 800341a:	60da      	str	r2, [r3, #12]
 800341c:	4b27      	ldr	r3, [pc, #156]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	3204      	adds	r2, #4
 8003426:	605a      	str	r2, [r3, #4]
 8003428:	4b24      	ldr	r3, [pc, #144]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	1d1a      	adds	r2, r3, #4
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	4b22      	ldr	r3, [pc, #136]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <prvAddCurrentTaskToDelayedList+0x108>)
 8003438:	615a      	str	r2, [r3, #20]
 800343a:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <prvAddCurrentTaskToDelayedList+0x108>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3301      	adds	r3, #1
 8003440:	4a20      	ldr	r2, [pc, #128]	; (80034c4 <prvAddCurrentTaskToDelayedList+0x108>)
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003446:	e032      	b.n	80034ae <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	429a      	cmp	r2, r3
 800345e:	d20f      	bcs.n	8003480 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003460:	4b16      	ldr	r3, [pc, #88]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2104      	movs	r1, #4
 8003466:	4618      	mov	r0, r3
 8003468:	f001 fe3e 	bl	80050e8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800346c:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3304      	adds	r3, #4
 8003476:	4619      	mov	r1, r3
 8003478:	4610      	mov	r0, r2
 800347a:	f7fe ff60 	bl	800233e <vListInsert>
}
 800347e:	e016      	b.n	80034ae <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2104      	movs	r1, #4
 8003486:	4618      	mov	r0, r3
 8003488:	f001 fe2e 	bl	80050e8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800348c:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <prvAddCurrentTaskToDelayedList+0x110>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3304      	adds	r3, #4
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f7fe ff50 	bl	800233e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <prvAddCurrentTaskToDelayedList+0x114>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d202      	bcs.n	80034ae <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 80034a8:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <prvAddCurrentTaskToDelayedList+0x114>)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6013      	str	r3, [r2, #0]
}
 80034ae:	bf00      	nop
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000110 	.word	0x20000110
 80034bc:	20000034 	.word	0x20000034
 80034c0:	20000114 	.word	0x20000114
 80034c4:	200000f8 	.word	0x200000f8
 80034c8:	200000c8 	.word	0x200000c8
 80034cc:	200000c4 	.word	0x200000c4
 80034d0:	2000012c 	.word	0x2000012c

080034d4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3b04      	subs	r3, #4
 80034e4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3b04      	subs	r3, #4
 80034f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f023 0201 	bic.w	r2, r3, #1
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3b04      	subs	r3, #4
 8003502:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003504:	4a0c      	ldr	r2, [pc, #48]	; (8003538 <pxPortInitialiseStack+0x64>)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3b14      	subs	r3, #20
 800350e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	3b04      	subs	r3, #4
 800351a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f06f 0202 	mvn.w	r2, #2
 8003522:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3b20      	subs	r3, #32
 8003528:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800352a:	68fb      	ldr	r3, [r7, #12]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	0800353d 	.word	0x0800353d

0800353c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <prvTaskExitError+0x54>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354e:	d00a      	beq.n	8003566 <prvTaskExitError+0x2a>
        __asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	60fb      	str	r3, [r7, #12]
    }
 8003562:	bf00      	nop
 8003564:	e7fe      	b.n	8003564 <prvTaskExitError+0x28>
        __asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	60bb      	str	r3, [r7, #8]
    }
 8003578:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800357a:	bf00      	nop
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0fc      	beq.n	800357c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003582:	bf00      	nop
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	20000010 	.word	0x20000010
	...

080035a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80035a0:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <pxCurrentTCBConst2>)
 80035a2:	6819      	ldr	r1, [r3, #0]
 80035a4:	6808      	ldr	r0, [r1, #0]
 80035a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035aa:	f380 8809 	msr	PSP, r0
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f04f 0000 	mov.w	r0, #0
 80035b6:	f380 8811 	msr	BASEPRI, r0
 80035ba:	4770      	bx	lr
 80035bc:	f3af 8000 	nop.w

080035c0 <pxCurrentTCBConst2>:
 80035c0:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop

080035c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80035c8:	4808      	ldr	r0, [pc, #32]	; (80035ec <prvPortStartFirstTask+0x24>)
 80035ca:	6800      	ldr	r0, [r0, #0]
 80035cc:	6800      	ldr	r0, [r0, #0]
 80035ce:	f380 8808 	msr	MSP, r0
 80035d2:	f04f 0000 	mov.w	r0, #0
 80035d6:	f380 8814 	msr	CONTROL, r0
 80035da:	b662      	cpsie	i
 80035dc:	b661      	cpsie	f
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	df00      	svc	0
 80035e8:	bf00      	nop
 80035ea:	0000      	.short	0x0000
 80035ec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80035f0:	bf00      	nop
 80035f2:	bf00      	nop

080035f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80035fa:	4b46      	ldr	r3, [pc, #280]	; (8003714 <xPortStartScheduler+0x120>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a46      	ldr	r2, [pc, #280]	; (8003718 <xPortStartScheduler+0x124>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d10a      	bne.n	800361a <xPortStartScheduler+0x26>
        __asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	613b      	str	r3, [r7, #16]
    }
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800361a:	4b3e      	ldr	r3, [pc, #248]	; (8003714 <xPortStartScheduler+0x120>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a3f      	ldr	r2, [pc, #252]	; (800371c <xPortStartScheduler+0x128>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d10a      	bne.n	800363a <xPortStartScheduler+0x46>
        __asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	60fb      	str	r3, [r7, #12]
    }
 8003636:	bf00      	nop
 8003638:	e7fe      	b.n	8003638 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800363a:	4b39      	ldr	r3, [pc, #228]	; (8003720 <xPortStartScheduler+0x12c>)
 800363c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	b2db      	uxtb	r3, r3
 8003644:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	22ff      	movs	r2, #255	; 0xff
 800364a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4b31      	ldr	r3, [pc, #196]	; (8003724 <xPortStartScheduler+0x130>)
 8003660:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003662:	4b31      	ldr	r3, [pc, #196]	; (8003728 <xPortStartScheduler+0x134>)
 8003664:	2207      	movs	r2, #7
 8003666:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003668:	e009      	b.n	800367e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800366a:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <xPortStartScheduler+0x134>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3b01      	subs	r3, #1
 8003670:	4a2d      	ldr	r2, [pc, #180]	; (8003728 <xPortStartScheduler+0x134>)
 8003672:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	b2db      	uxtb	r3, r3
 800367c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b80      	cmp	r3, #128	; 0x80
 8003688:	d0ef      	beq.n	800366a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800368a:	4b27      	ldr	r3, [pc, #156]	; (8003728 <xPortStartScheduler+0x134>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f1c3 0307 	rsb	r3, r3, #7
 8003692:	2b04      	cmp	r3, #4
 8003694:	d00a      	beq.n	80036ac <xPortStartScheduler+0xb8>
        __asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	60bb      	str	r3, [r7, #8]
    }
 80036a8:	bf00      	nop
 80036aa:	e7fe      	b.n	80036aa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80036ac:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <xPortStartScheduler+0x134>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	4a1d      	ldr	r2, [pc, #116]	; (8003728 <xPortStartScheduler+0x134>)
 80036b4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80036b6:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <xPortStartScheduler+0x134>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036be:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <xPortStartScheduler+0x134>)
 80036c0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80036ca:	4b18      	ldr	r3, [pc, #96]	; (800372c <xPortStartScheduler+0x138>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a17      	ldr	r2, [pc, #92]	; (800372c <xPortStartScheduler+0x138>)
 80036d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036d4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80036d6:	4b15      	ldr	r3, [pc, #84]	; (800372c <xPortStartScheduler+0x138>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a14      	ldr	r2, [pc, #80]	; (800372c <xPortStartScheduler+0x138>)
 80036dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036e0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80036e2:	f000 f8e3 	bl	80038ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80036e6:	4b12      	ldr	r3, [pc, #72]	; (8003730 <xPortStartScheduler+0x13c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80036ec:	f000 f902 	bl	80038f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80036f0:	4b10      	ldr	r3, [pc, #64]	; (8003734 <xPortStartScheduler+0x140>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0f      	ldr	r2, [pc, #60]	; (8003734 <xPortStartScheduler+0x140>)
 80036f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036fa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80036fc:	f7ff ff64 	bl	80035c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003700:	f7ff fb84 	bl	8002e0c <vTaskSwitchContext>
    prvTaskExitError();
 8003704:	f7ff ff1a 	bl	800353c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	e000ed00 	.word	0xe000ed00
 8003718:	410fc271 	.word	0x410fc271
 800371c:	410fc270 	.word	0x410fc270
 8003720:	e000e400 	.word	0xe000e400
 8003724:	20000138 	.word	0x20000138
 8003728:	2000013c 	.word	0x2000013c
 800372c:	e000ed20 	.word	0xe000ed20
 8003730:	20000010 	.word	0x20000010
 8003734:	e000ef34 	.word	0xe000ef34

08003738 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
        __asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	607b      	str	r3, [r7, #4]
    }
 8003750:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <vPortEnterCritical+0x58>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3301      	adds	r3, #1
 8003758:	4a0d      	ldr	r2, [pc, #52]	; (8003790 <vPortEnterCritical+0x58>)
 800375a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <vPortEnterCritical+0x58>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d10f      	bne.n	8003784 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003764:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <vPortEnterCritical+0x5c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <vPortEnterCritical+0x4c>
        __asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	603b      	str	r3, [r7, #0]
    }
 8003780:	bf00      	nop
 8003782:	e7fe      	b.n	8003782 <vPortEnterCritical+0x4a>
    }
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	20000010 	.word	0x20000010
 8003794:	e000ed04 	.word	0xe000ed04

08003798 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800379e:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <vPortExitCritical+0x50>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <vPortExitCritical+0x24>
        __asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	607b      	str	r3, [r7, #4]
    }
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <vPortExitCritical+0x50>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	4a09      	ldr	r2, [pc, #36]	; (80037e8 <vPortExitCritical+0x50>)
 80037c4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80037c6:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <vPortExitCritical+0x50>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <vPortExitCritical+0x42>
 80037ce:	2300      	movs	r3, #0
 80037d0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80037d8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000010 	.word	0x20000010
 80037ec:	00000000 	.word	0x00000000

080037f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80037f0:	f3ef 8009 	mrs	r0, PSP
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	4b15      	ldr	r3, [pc, #84]	; (8003850 <pxCurrentTCBConst>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	f01e 0f10 	tst.w	lr, #16
 8003800:	bf08      	it	eq
 8003802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800380a:	6010      	str	r0, [r2, #0]
 800380c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003814:	f380 8811 	msr	BASEPRI, r0
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f7ff faf4 	bl	8002e0c <vTaskSwitchContext>
 8003824:	f04f 0000 	mov.w	r0, #0
 8003828:	f380 8811 	msr	BASEPRI, r0
 800382c:	bc09      	pop	{r0, r3}
 800382e:	6819      	ldr	r1, [r3, #0]
 8003830:	6808      	ldr	r0, [r1, #0]
 8003832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003836:	f01e 0f10 	tst.w	lr, #16
 800383a:	bf08      	it	eq
 800383c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003840:	f380 8809 	msr	PSP, r0
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	f3af 8000 	nop.w

08003850 <pxCurrentTCBConst>:
 8003850:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop

08003858 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
        __asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	607b      	str	r3, [r7, #4]
    }
 8003870:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003872:	f001 fadd 	bl	8004e30 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003876:	f7ff f9af 	bl	8002bd8 <xTaskIncrementTick>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d006      	beq.n	800388e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003880:	f001 fb34 	bl	8004eec <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <SysTick_Handler+0x50>)
 8003886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e001      	b.n	8003892 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800388e:	f001 fb11 	bl	8004eb4 <SEGGER_SYSVIEW_RecordExitISR>
 8003892:	2300      	movs	r3, #0
 8003894:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	f383 8811 	msr	BASEPRI, r3
    }
 800389c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	e000ed04 	.word	0xe000ed04

080038ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <vPortSetupTimerInterrupt+0x34>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <vPortSetupTimerInterrupt+0x38>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <vPortSetupTimerInterrupt+0x3c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <vPortSetupTimerInterrupt+0x40>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	099b      	lsrs	r3, r3, #6
 80038c8:	4a09      	ldr	r2, [pc, #36]	; (80038f0 <vPortSetupTimerInterrupt+0x44>)
 80038ca:	3b01      	subs	r3, #1
 80038cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80038ce:	4b04      	ldr	r3, [pc, #16]	; (80038e0 <vPortSetupTimerInterrupt+0x34>)
 80038d0:	2207      	movs	r2, #7
 80038d2:	601a      	str	r2, [r3, #0]
}
 80038d4:	bf00      	nop
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	e000e010 	.word	0xe000e010
 80038e4:	e000e018 	.word	0xe000e018
 80038e8:	20000000 	.word	0x20000000
 80038ec:	10624dd3 	.word	0x10624dd3
 80038f0:	e000e014 	.word	0xe000e014

080038f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80038f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003904 <vPortEnableVFP+0x10>
 80038f8:	6801      	ldr	r1, [r0, #0]
 80038fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80038fe:	6001      	str	r1, [r0, #0]
 8003900:	4770      	bx	lr
 8003902:	0000      	.short	0x0000
 8003904:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop

0800390c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	; 0x28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003914:	2300      	movs	r3, #0
 8003916:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003918:	f7ff f850 	bl	80029bc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800391c:	4b65      	ldr	r3, [pc, #404]	; (8003ab4 <pvPortMalloc+0x1a8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003924:	f000 f934 	bl	8003b90 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003928:	4b63      	ldr	r3, [pc, #396]	; (8003ab8 <pvPortMalloc+0x1ac>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4013      	ands	r3, r2
 8003930:	2b00      	cmp	r3, #0
 8003932:	f040 80a7 	bne.w	8003a84 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d02d      	beq.n	8003998 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800393c:	2208      	movs	r2, #8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	429a      	cmp	r2, r3
 8003946:	d227      	bcs.n	8003998 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003948:	2208      	movs	r2, #8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	2b00      	cmp	r3, #0
 8003958:	d021      	beq.n	800399e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f023 0307 	bic.w	r3, r3, #7
 8003960:	3308      	adds	r3, #8
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	429a      	cmp	r2, r3
 8003966:	d214      	bcs.n	8003992 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f023 0307 	bic.w	r3, r3, #7
 800396e:	3308      	adds	r3, #8
 8003970:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	2b00      	cmp	r3, #0
 800397a:	d010      	beq.n	800399e <pvPortMalloc+0x92>
        __asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	617b      	str	r3, [r7, #20]
    }
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003996:	e002      	b.n	800399e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	e000      	b.n	80039a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800399e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d06e      	beq.n	8003a84 <pvPortMalloc+0x178>
 80039a6:	4b45      	ldr	r3, [pc, #276]	; (8003abc <pvPortMalloc+0x1b0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d869      	bhi.n	8003a84 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80039b0:	4b43      	ldr	r3, [pc, #268]	; (8003ac0 <pvPortMalloc+0x1b4>)
 80039b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80039b4:	4b42      	ldr	r3, [pc, #264]	; (8003ac0 <pvPortMalloc+0x1b4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039ba:	e004      	b.n	80039c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d903      	bls.n	80039d8 <pvPortMalloc+0xcc>
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1f1      	bne.n	80039bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80039d8:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <pvPortMalloc+0x1a8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039de:	429a      	cmp	r2, r3
 80039e0:	d050      	beq.n	8003a84 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2208      	movs	r2, #8
 80039e8:	4413      	add	r3, r2
 80039ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	1ad2      	subs	r2, r2, r3
 80039fc:	2308      	movs	r3, #8
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d91f      	bls.n	8003a44 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <pvPortMalloc+0x120>
        __asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	613b      	str	r3, [r7, #16]
    }
 8003a28:	bf00      	nop
 8003a2a:	e7fe      	b.n	8003a2a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	1ad2      	subs	r2, r2, r3
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a3e:	69b8      	ldr	r0, [r7, #24]
 8003a40:	f000 f908 	bl	8003c54 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <pvPortMalloc+0x1b0>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <pvPortMalloc+0x1b0>)
 8003a50:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a52:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <pvPortMalloc+0x1b0>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <pvPortMalloc+0x1b8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d203      	bcs.n	8003a66 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a5e:	4b17      	ldr	r3, [pc, #92]	; (8003abc <pvPortMalloc+0x1b0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <pvPortMalloc+0x1b8>)
 8003a64:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <pvPortMalloc+0x1ac>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003a7a:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <pvPortMalloc+0x1bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <pvPortMalloc+0x1bc>)
 8003a82:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003a84:	f7fe ffa8 	bl	80029d8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <pvPortMalloc+0x19c>
        __asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	60fb      	str	r3, [r7, #12]
    }
 8003aa4:	bf00      	nop
 8003aa6:	e7fe      	b.n	8003aa6 <pvPortMalloc+0x19a>
    return pvReturn;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3728      	adds	r7, #40	; 0x28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20012d48 	.word	0x20012d48
 8003ab8:	20012d5c 	.word	0x20012d5c
 8003abc:	20012d4c 	.word	0x20012d4c
 8003ac0:	20012d40 	.word	0x20012d40
 8003ac4:	20012d50 	.word	0x20012d50
 8003ac8:	20012d54 	.word	0x20012d54

08003acc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d04d      	beq.n	8003b7a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003ade:	2308      	movs	r3, #8
 8003ae0:	425b      	negs	r3, r3
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	4b24      	ldr	r3, [pc, #144]	; (8003b84 <vPortFree+0xb8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <vPortFree+0x44>
        __asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	60fb      	str	r3, [r7, #12]
    }
 8003b0c:	bf00      	nop
 8003b0e:	e7fe      	b.n	8003b0e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <vPortFree+0x62>
        __asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	60bb      	str	r3, [r7, #8]
    }
 8003b2a:	bf00      	nop
 8003b2c:	e7fe      	b.n	8003b2c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <vPortFree+0xb8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01e      	beq.n	8003b7a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d11a      	bne.n	8003b7a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <vPortFree+0xb8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	401a      	ands	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003b54:	f7fe ff32 	bl	80029bc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	4b0a      	ldr	r3, [pc, #40]	; (8003b88 <vPortFree+0xbc>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4413      	add	r3, r2
 8003b62:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <vPortFree+0xbc>)
 8003b64:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b66:	6938      	ldr	r0, [r7, #16]
 8003b68:	f000 f874 	bl	8003c54 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003b6c:	4b07      	ldr	r3, [pc, #28]	; (8003b8c <vPortFree+0xc0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	4a06      	ldr	r2, [pc, #24]	; (8003b8c <vPortFree+0xc0>)
 8003b74:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003b76:	f7fe ff2f 	bl	80029d8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003b7a:	bf00      	nop
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20012d5c 	.word	0x20012d5c
 8003b88:	20012d4c 	.word	0x20012d4c
 8003b8c:	20012d58 	.word	0x20012d58

08003b90 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b96:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003b9a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003b9c:	4b27      	ldr	r3, [pc, #156]	; (8003c3c <prvHeapInit+0xac>)
 8003b9e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3307      	adds	r3, #7
 8003bae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0307 	bic.w	r3, r3, #7
 8003bb6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <prvHeapInit+0xac>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <prvHeapInit+0xb0>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003bce:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <prvHeapInit+0xb0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	4413      	add	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003bdc:	2208      	movs	r2, #8
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0307 	bic.w	r3, r3, #7
 8003bea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <prvHeapInit+0xb4>)
 8003bf0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003bf2:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <prvHeapInit+0xb4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003bfa:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <prvHeapInit+0xb4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	1ad2      	subs	r2, r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <prvHeapInit+0xb4>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <prvHeapInit+0xb8>)
 8003c1e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <prvHeapInit+0xbc>)
 8003c26:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <prvHeapInit+0xc0>)
 8003c2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c2e:	601a      	str	r2, [r3, #0]
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	20000140 	.word	0x20000140
 8003c40:	20012d40 	.word	0x20012d40
 8003c44:	20012d48 	.word	0x20012d48
 8003c48:	20012d50 	.word	0x20012d50
 8003c4c:	20012d4c 	.word	0x20012d4c
 8003c50:	20012d5c 	.word	0x20012d5c

08003c54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c5c:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <prvInsertBlockIntoFreeList+0xac>)
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e002      	b.n	8003c68 <prvInsertBlockIntoFreeList+0x14>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d8f7      	bhi.n	8003c62 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d108      	bne.n	8003c96 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	441a      	add	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	441a      	add	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d118      	bne.n	8003cdc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <prvInsertBlockIntoFreeList+0xb0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d00d      	beq.n	8003cd2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	441a      	add	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e008      	b.n	8003ce4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <prvInsertBlockIntoFreeList+0xb0>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e003      	b.n	8003ce4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d002      	beq.n	8003cf2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20012d40 	.word	0x20012d40
 8003d04:	20012d48 	.word	0x20012d48

08003d08 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003d16:	2205      	movs	r2, #5
 8003d18:	492b      	ldr	r1, [pc, #172]	; (8003dc8 <SYSVIEW_AddTask+0xc0>)
 8003d1a:	68b8      	ldr	r0, [r7, #8]
 8003d1c:	f001 fbb0 	bl	8005480 <memcmp>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d04b      	beq.n	8003dbe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003d26:	4b29      	ldr	r3, [pc, #164]	; (8003dcc <SYSVIEW_AddTask+0xc4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b07      	cmp	r3, #7
 8003d2c:	d903      	bls.n	8003d36 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003d2e:	4828      	ldr	r0, [pc, #160]	; (8003dd0 <SYSVIEW_AddTask+0xc8>)
 8003d30:	f001 fb26 	bl	8005380 <SEGGER_SYSVIEW_Warn>
    return;
 8003d34:	e044      	b.n	8003dc0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003d36:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <SYSVIEW_AddTask+0xc4>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4926      	ldr	r1, [pc, #152]	; (8003dd4 <SYSVIEW_AddTask+0xcc>)
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003d4a:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <SYSVIEW_AddTask+0xc4>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4921      	ldr	r1, [pc, #132]	; (8003dd4 <SYSVIEW_AddTask+0xcc>)
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003d60:	4b1a      	ldr	r3, [pc, #104]	; (8003dcc <SYSVIEW_AddTask+0xc4>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	491b      	ldr	r1, [pc, #108]	; (8003dd4 <SYSVIEW_AddTask+0xcc>)
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	3308      	adds	r3, #8
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003d76:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <SYSVIEW_AddTask+0xc4>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4916      	ldr	r1, [pc, #88]	; (8003dd4 <SYSVIEW_AddTask+0xcc>)
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	330c      	adds	r3, #12
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <SYSVIEW_AddTask+0xc4>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4910      	ldr	r1, [pc, #64]	; (8003dd4 <SYSVIEW_AddTask+0xcc>)
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3310      	adds	r3, #16
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <SYSVIEW_AddTask+0xc4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3301      	adds	r3, #1
 8003da8:	4a08      	ldr	r2, [pc, #32]	; (8003dcc <SYSVIEW_AddTask+0xc4>)
 8003daa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f8ca 	bl	8003f50 <SYSVIEW_SendTaskInfo>
 8003dbc:	e000      	b.n	8003dc0 <SYSVIEW_AddTask+0xb8>
    return;
 8003dbe:	bf00      	nop

}
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	08005518 	.word	0x08005518
 8003dcc:	20012e00 	.word	0x20012e00
 8003dd0:	08005520 	.word	0x08005520
 8003dd4:	20012d60 	.word	0x20012d60

08003dd8 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003de0:	4b59      	ldr	r3, [pc, #356]	; (8003f48 <SYSVIEW_DeleteTask+0x170>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 80ab 	beq.w	8003f40 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	e00d      	b.n	8003e0c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003df0:	4956      	ldr	r1, [pc, #344]	; (8003f4c <SYSVIEW_DeleteTask+0x174>)
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d008      	beq.n	8003e18 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	4b4e      	ldr	r3, [pc, #312]	; (8003f48 <SYSVIEW_DeleteTask+0x170>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d3ec      	bcc.n	8003df0 <SYSVIEW_DeleteTask+0x18>
 8003e16:	e000      	b.n	8003e1a <SYSVIEW_DeleteTask+0x42>
      break;
 8003e18:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003e1a:	4b4b      	ldr	r3, [pc, #300]	; (8003f48 <SYSVIEW_DeleteTask+0x170>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d111      	bne.n	8003e4a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4a46      	ldr	r2, [pc, #280]	; (8003f4c <SYSVIEW_DeleteTask+0x174>)
 8003e32:	4413      	add	r3, r2
 8003e34:	2214      	movs	r2, #20
 8003e36:	2100      	movs	r1, #0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f001 fb3d 	bl	80054b8 <memset>
    _NumTasks--;
 8003e3e:	4b42      	ldr	r3, [pc, #264]	; (8003f48 <SYSVIEW_DeleteTask+0x170>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	4a40      	ldr	r2, [pc, #256]	; (8003f48 <SYSVIEW_DeleteTask+0x170>)
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	e07b      	b.n	8003f42 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003e4a:	4b3f      	ldr	r3, [pc, #252]	; (8003f48 <SYSVIEW_DeleteTask+0x170>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d276      	bcs.n	8003f42 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003e54:	4b3c      	ldr	r3, [pc, #240]	; (8003f48 <SYSVIEW_DeleteTask+0x170>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	1e5a      	subs	r2, r3, #1
 8003e5a:	493c      	ldr	r1, [pc, #240]	; (8003f4c <SYSVIEW_DeleteTask+0x174>)
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	6819      	ldr	r1, [r3, #0]
 8003e68:	4838      	ldr	r0, [pc, #224]	; (8003f4c <SYSVIEW_DeleteTask+0x174>)
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4403      	add	r3, r0
 8003e76:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003e78:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <SYSVIEW_DeleteTask+0x170>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	1e5a      	subs	r2, r3, #1
 8003e7e:	4933      	ldr	r1, [pc, #204]	; (8003f4c <SYSVIEW_DeleteTask+0x174>)
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	6819      	ldr	r1, [r3, #0]
 8003e8e:	482f      	ldr	r0, [pc, #188]	; (8003f4c <SYSVIEW_DeleteTask+0x174>)
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4403      	add	r3, r0
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003ea0:	4b29      	ldr	r3, [pc, #164]	; (8003f48 <SYSVIEW_DeleteTask+0x170>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	1e5a      	subs	r2, r3, #1
 8003ea6:	4929      	ldr	r1, [pc, #164]	; (8003f4c <SYSVIEW_DeleteTask+0x174>)
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	6819      	ldr	r1, [r3, #0]
 8003eb6:	4825      	ldr	r0, [pc, #148]	; (8003f4c <SYSVIEW_DeleteTask+0x174>)
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4403      	add	r3, r0
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003ec8:	4b1f      	ldr	r3, [pc, #124]	; (8003f48 <SYSVIEW_DeleteTask+0x170>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	1e5a      	subs	r2, r3, #1
 8003ece:	491f      	ldr	r1, [pc, #124]	; (8003f4c <SYSVIEW_DeleteTask+0x174>)
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	330c      	adds	r3, #12
 8003edc:	6819      	ldr	r1, [r3, #0]
 8003ede:	481b      	ldr	r0, [pc, #108]	; (8003f4c <SYSVIEW_DeleteTask+0x174>)
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4403      	add	r3, r0
 8003eec:	330c      	adds	r3, #12
 8003eee:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003ef0:	4b15      	ldr	r3, [pc, #84]	; (8003f48 <SYSVIEW_DeleteTask+0x170>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	1e5a      	subs	r2, r3, #1
 8003ef6:	4915      	ldr	r1, [pc, #84]	; (8003f4c <SYSVIEW_DeleteTask+0x174>)
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	3310      	adds	r3, #16
 8003f04:	6819      	ldr	r1, [r3, #0]
 8003f06:	4811      	ldr	r0, [pc, #68]	; (8003f4c <SYSVIEW_DeleteTask+0x174>)
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4403      	add	r3, r0
 8003f14:	3310      	adds	r3, #16
 8003f16:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003f18:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <SYSVIEW_DeleteTask+0x170>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	1e5a      	subs	r2, r3, #1
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4a09      	ldr	r2, [pc, #36]	; (8003f4c <SYSVIEW_DeleteTask+0x174>)
 8003f28:	4413      	add	r3, r2
 8003f2a:	2214      	movs	r2, #20
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 fac2 	bl	80054b8 <memset>
    _NumTasks--;
 8003f34:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <SYSVIEW_DeleteTask+0x170>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	4a03      	ldr	r2, [pc, #12]	; (8003f48 <SYSVIEW_DeleteTask+0x170>)
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	e000      	b.n	8003f42 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003f40:	bf00      	nop
  }
}
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20012e00 	.word	0x20012e00
 8003f4c:	20012d60 	.word	0x20012d60

08003f50 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003f5e:	f107 0314 	add.w	r3, r7, #20
 8003f62:	2214      	movs	r2, #20
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 faa6 	bl	80054b8 <memset>
  TaskInfo.TaskID     = TaskID;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003f80:	f107 0314 	add.w	r3, r7, #20
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fe29 	bl	8004bdc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003f8a:	bf00      	nop
 8003f8c:	3728      	adds	r7, #40	; 0x28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <USART2_IRQHandler+0x80>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d011      	beq.n	8003fce <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003faa:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <USART2_IRQHandler+0x84>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f003 030b 	and.w	r3, r3, #11
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d108      	bne.n	8003fce <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003fbc:	4b17      	ldr	r3, [pc, #92]	; (800401c <USART2_IRQHandler+0x88>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d004      	beq.n	8003fce <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003fc4:	4b15      	ldr	r3, [pc, #84]	; (800401c <USART2_IRQHandler+0x88>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	79fa      	ldrb	r2, [r7, #7]
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01a      	beq.n	800400e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003fd8:	4b11      	ldr	r3, [pc, #68]	; (8004020 <USART2_IRQHandler+0x8c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d015      	beq.n	800400c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8003fe0:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <USART2_IRQHandler+0x8c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	1dfa      	adds	r2, r7, #7
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4798      	blx	r3
 8003fea:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <USART2_IRQHandler+0x90>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a0b      	ldr	r2, [pc, #44]	; (8004024 <USART2_IRQHandler+0x90>)
 8003ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e006      	b.n	800400e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004000:	4b04      	ldr	r3, [pc, #16]	; (8004014 <USART2_IRQHandler+0x80>)
 8004002:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004004:	79fa      	ldrb	r2, [r7, #7]
 8004006:	4b04      	ldr	r3, [pc, #16]	; (8004018 <USART2_IRQHandler+0x84>)
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	e000      	b.n	800400e <USART2_IRQHandler+0x7a>
      return;
 800400c:	bf00      	nop
    }
  }
}
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40004400 	.word	0x40004400
 8004018:	40004404 	.word	0x40004404
 800401c:	20012e04 	.word	0x20012e04
 8004020:	20012e08 	.word	0x20012e08
 8004024:	4000440c 	.word	0x4000440c

08004028 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800402c:	4b05      	ldr	r3, [pc, #20]	; (8004044 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a04      	ldr	r2, [pc, #16]	; (8004044 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004036:	6013      	str	r3, [r2, #0]
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	4000440c 	.word	0x4000440c

08004048 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800404e:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <_DoInit+0x98>)
 8004050:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2203      	movs	r2, #3
 8004056:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2203      	movs	r2, #3
 800405c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a20      	ldr	r2, [pc, #128]	; (80040e4 <_DoInit+0x9c>)
 8004062:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a20      	ldr	r2, [pc, #128]	; (80040e8 <_DoInit+0xa0>)
 8004068:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004070:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a17      	ldr	r2, [pc, #92]	; (80040e4 <_DoInit+0x9c>)
 8004088:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a17      	ldr	r2, [pc, #92]	; (80040ec <_DoInit+0xa4>)
 800408e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2210      	movs	r2, #16
 8004094:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3307      	adds	r3, #7
 80040ac:	4a10      	ldr	r2, [pc, #64]	; (80040f0 <_DoInit+0xa8>)
 80040ae:	6810      	ldr	r0, [r2, #0]
 80040b0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80040b2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <_DoInit+0xac>)
 80040ba:	6810      	ldr	r0, [r2, #0]
 80040bc:	6018      	str	r0, [r3, #0]
 80040be:	8891      	ldrh	r1, [r2, #4]
 80040c0:	7992      	ldrb	r2, [r2, #6]
 80040c2:	8099      	strh	r1, [r3, #4]
 80040c4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80040c6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80040d0:	f3bf 8f5f 	dmb	sy
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	2001338c 	.word	0x2001338c
 80040e4:	08005570 	.word	0x08005570
 80040e8:	20012e0c 	.word	0x20012e0c
 80040ec:	2001320c 	.word	0x2001320c
 80040f0:	0800557c 	.word	0x0800557c
 80040f4:	08005580 	.word	0x08005580

080040f8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08c      	sub	sp, #48	; 0x30
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004104:	4b3e      	ldr	r3, [pc, #248]	; (8004200 <SEGGER_RTT_ReadNoLock+0x108>)
 8004106:	623b      	str	r3, [r7, #32]
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <SEGGER_RTT_ReadNoLock+0x1e>
 8004112:	f7ff ff99 	bl	8004048 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4613      	mov	r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	4413      	add	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	3360      	adds	r3, #96	; 0x60
 8004122:	4a37      	ldr	r2, [pc, #220]	; (8004200 <SEGGER_RTT_ReadNoLock+0x108>)
 8004124:	4413      	add	r3, r2
 8004126:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004138:	2300      	movs	r3, #0
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800413c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	429a      	cmp	r2, r3
 8004142:	d92b      	bls.n	800419c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4293      	cmp	r3, r2
 8004154:	bf28      	it	cs
 8004156:	4613      	movcs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	4413      	add	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	6939      	ldr	r1, [r7, #16]
 8004168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800416a:	f001 f997 	bl	800549c <memcpy>
    NumBytesRead += NumBytesRem;
 800416e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	4413      	add	r3, r2
 8004174:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	4413      	add	r3, r2
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	4413      	add	r3, r2
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004194:	429a      	cmp	r2, r3
 8004196:	d101      	bne.n	800419c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004198:	2300      	movs	r3, #0
 800419a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4293      	cmp	r3, r2
 80041aa:	bf28      	it	cs
 80041ac:	4613      	movcs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d019      	beq.n	80041ea <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	4413      	add	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	6939      	ldr	r1, [r7, #16]
 80041c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041c6:	f001 f969 	bl	800549c <memcpy>
    NumBytesRead += NumBytesRem;
 80041ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4413      	add	r3, r2
 80041d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80041d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	4413      	add	r3, r2
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80041e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	4413      	add	r3, r2
 80041e8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041f4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3730      	adds	r7, #48	; 0x30
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	2001338c 	.word	0x2001338c

08004204 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00f      	beq.n	800423a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800421a:	e002      	b.n	8004222 <_EncodeStr+0x1e>
      Len++;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	3301      	adds	r3, #1
 8004220:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4413      	add	r3, r2
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f6      	bne.n	800421c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d901      	bls.n	800423a <_EncodeStr+0x36>
      Len = Limit;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	2bfe      	cmp	r3, #254	; 0xfe
 800423e:	d806      	bhi.n	800424e <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	60fa      	str	r2, [r7, #12]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	e011      	b.n	8004272 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	60fa      	str	r2, [r7, #12]
 8004254:	22ff      	movs	r2, #255	; 0xff
 8004256:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	60fa      	str	r2, [r7, #12]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	0a19      	lsrs	r1, r3, #8
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	60fa      	str	r2, [r7, #12]
 800426e:	b2ca      	uxtb	r2, r1
 8004270:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004276:	e00a      	b.n	800428e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	1c53      	adds	r3, r2, #1
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1c59      	adds	r1, r3, #1
 8004282:	60f9      	str	r1, [r7, #12]
 8004284:	7812      	ldrb	r2, [r2, #0]
 8004286:	701a      	strb	r2, [r3, #0]
    n++;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	3301      	adds	r3, #1
 800428c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	429a      	cmp	r2, r3
 8004294:	d3f0      	bcc.n	8004278 <_EncodeStr+0x74>
  }
  return pPayload;
 8004296:	68fb      	ldr	r3, [r7, #12]
}
 8004298:	4618      	mov	r0, r3
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3304      	adds	r3, #4
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80042c2:	4b36      	ldr	r3, [pc, #216]	; (800439c <_HandleIncomingPacket+0xe0>)
 80042c4:	7e1b      	ldrb	r3, [r3, #24]
 80042c6:	4618      	mov	r0, r3
 80042c8:	1cfb      	adds	r3, r7, #3
 80042ca:	2201      	movs	r2, #1
 80042cc:	4619      	mov	r1, r3
 80042ce:	f7ff ff13 	bl	80040f8 <SEGGER_RTT_ReadNoLock>
 80042d2:	4603      	mov	r3, r0
 80042d4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	dd54      	ble.n	8004386 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	2b80      	cmp	r3, #128	; 0x80
 80042e0:	d032      	beq.n	8004348 <_HandleIncomingPacket+0x8c>
 80042e2:	2b80      	cmp	r3, #128	; 0x80
 80042e4:	dc42      	bgt.n	800436c <_HandleIncomingPacket+0xb0>
 80042e6:	2b07      	cmp	r3, #7
 80042e8:	dc16      	bgt.n	8004318 <_HandleIncomingPacket+0x5c>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	dd3e      	ble.n	800436c <_HandleIncomingPacket+0xb0>
 80042ee:	3b01      	subs	r3, #1
 80042f0:	2b06      	cmp	r3, #6
 80042f2:	d83b      	bhi.n	800436c <_HandleIncomingPacket+0xb0>
 80042f4:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <_HandleIncomingPacket+0x40>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	0800431f 	.word	0x0800431f
 8004300:	08004325 	.word	0x08004325
 8004304:	0800432b 	.word	0x0800432b
 8004308:	08004331 	.word	0x08004331
 800430c:	08004337 	.word	0x08004337
 8004310:	0800433d 	.word	0x0800433d
 8004314:	08004343 	.word	0x08004343
 8004318:	2b7f      	cmp	r3, #127	; 0x7f
 800431a:	d036      	beq.n	800438a <_HandleIncomingPacket+0xce>
 800431c:	e026      	b.n	800436c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800431e:	f000 fae1 	bl	80048e4 <SEGGER_SYSVIEW_Start>
      break;
 8004322:	e037      	b.n	8004394 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004324:	f000 fb9a 	bl	8004a5c <SEGGER_SYSVIEW_Stop>
      break;
 8004328:	e034      	b.n	8004394 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800432a:	f000 fd4f 	bl	8004dcc <SEGGER_SYSVIEW_RecordSystime>
      break;
 800432e:	e031      	b.n	8004394 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004330:	f000 fd38 	bl	8004da4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004334:	e02e      	b.n	8004394 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004336:	f000 fbb7 	bl	8004aa8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800433a:	e02b      	b.n	8004394 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800433c:	f000 ffe2 	bl	8005304 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004340:	e028      	b.n	8004394 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004342:	f000 ffc1 	bl	80052c8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004346:	e025      	b.n	8004394 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004348:	4b14      	ldr	r3, [pc, #80]	; (800439c <_HandleIncomingPacket+0xe0>)
 800434a:	7e1b      	ldrb	r3, [r3, #24]
 800434c:	4618      	mov	r0, r3
 800434e:	1cfb      	adds	r3, r7, #3
 8004350:	2201      	movs	r2, #1
 8004352:	4619      	mov	r1, r3
 8004354:	f7ff fed0 	bl	80040f8 <SEGGER_RTT_ReadNoLock>
 8004358:	4603      	mov	r3, r0
 800435a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	dd15      	ble.n	800438e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	4618      	mov	r0, r3
 8004366:	f000 ff2f 	bl	80051c8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800436a:	e010      	b.n	800438e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	b25b      	sxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	da0e      	bge.n	8004392 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <_HandleIncomingPacket+0xe0>)
 8004376:	7e1b      	ldrb	r3, [r3, #24]
 8004378:	4618      	mov	r0, r3
 800437a:	1cfb      	adds	r3, r7, #3
 800437c:	2201      	movs	r2, #1
 800437e:	4619      	mov	r1, r3
 8004380:	f7ff feba 	bl	80040f8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004384:	e005      	b.n	8004392 <_HandleIncomingPacket+0xd6>
    }
  }
 8004386:	bf00      	nop
 8004388:	e004      	b.n	8004394 <_HandleIncomingPacket+0xd8>
      break;
 800438a:	bf00      	nop
 800438c:	e002      	b.n	8004394 <_HandleIncomingPacket+0xd8>
      break;
 800438e:	bf00      	nop
 8004390:	e000      	b.n	8004394 <_HandleIncomingPacket+0xd8>
      break;
 8004392:	bf00      	nop
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	2001321c 	.word	0x2001321c

080043a0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08c      	sub	sp, #48	; 0x30
 80043a4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80043a6:	2301      	movs	r3, #1
 80043a8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80043aa:	1d3b      	adds	r3, r7, #4
 80043ac:	3301      	adds	r3, #1
 80043ae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b4:	4b32      	ldr	r3, [pc, #200]	; (8004480 <_TrySendOverflowPacket+0xe0>)
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ba:	e00b      	b.n	80043d4 <_TrySendOverflowPacket+0x34>
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	1c59      	adds	r1, r3, #1
 80043c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80043c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d0:	09db      	lsrs	r3, r3, #7
 80043d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	2b7f      	cmp	r3, #127	; 0x7f
 80043d8:	d8f0      	bhi.n	80043bc <_TrySendOverflowPacket+0x1c>
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043ea:	4b26      	ldr	r3, [pc, #152]	; (8004484 <_TrySendOverflowPacket+0xe4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80043f0:	4b23      	ldr	r3, [pc, #140]	; (8004480 <_TrySendOverflowPacket+0xe0>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	623b      	str	r3, [r7, #32]
 8004402:	e00b      	b.n	800441c <_TrySendOverflowPacket+0x7c>
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	1c59      	adds	r1, r3, #1
 800440c:	6279      	str	r1, [r7, #36]	; 0x24
 800440e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	09db      	lsrs	r3, r3, #7
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	2b7f      	cmp	r3, #127	; 0x7f
 8004420:	d8f0      	bhi.n	8004404 <_TrySendOverflowPacket+0x64>
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	627a      	str	r2, [r7, #36]	; 0x24
 8004428:	6a3a      	ldr	r2, [r7, #32]
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004432:	4b13      	ldr	r3, [pc, #76]	; (8004480 <_TrySendOverflowPacket+0xe0>)
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	4618      	mov	r0, r3
 8004438:	1d3b      	adds	r3, r7, #4
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	461a      	mov	r2, r3
 8004440:	1d3b      	adds	r3, r7, #4
 8004442:	4619      	mov	r1, r3
 8004444:	f7fb fee4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004448:	4603      	mov	r3, r0
 800444a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800444c:	f7ff fdec 	bl	8004028 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004456:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <_TrySendOverflowPacket+0xe0>)
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800445c:	4b08      	ldr	r3, [pc, #32]	; (8004480 <_TrySendOverflowPacket+0xe0>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	3b01      	subs	r3, #1
 8004462:	b2da      	uxtb	r2, r3
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <_TrySendOverflowPacket+0xe0>)
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	e004      	b.n	8004474 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <_TrySendOverflowPacket+0xe0>)
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	3301      	adds	r3, #1
 8004470:	4a03      	ldr	r2, [pc, #12]	; (8004480 <_TrySendOverflowPacket+0xe0>)
 8004472:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004474:	693b      	ldr	r3, [r7, #16]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3730      	adds	r7, #48	; 0x30
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	2001321c 	.word	0x2001321c
 8004484:	e0001004 	.word	0xe0001004

08004488 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004494:	4b6d      	ldr	r3, [pc, #436]	; (800464c <_SendPacket+0x1c4>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d010      	beq.n	80044be <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800449c:	4b6b      	ldr	r3, [pc, #428]	; (800464c <_SendPacket+0x1c4>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80a5 	beq.w	80045f0 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80044a6:	4b69      	ldr	r3, [pc, #420]	; (800464c <_SendPacket+0x1c4>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d109      	bne.n	80044c2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80044ae:	f7ff ff77 	bl	80043a0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80044b2:	4b66      	ldr	r3, [pc, #408]	; (800464c <_SendPacket+0x1c4>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	f040 809c 	bne.w	80045f4 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80044bc:	e001      	b.n	80044c2 <_SendPacket+0x3a>
    goto Send;
 80044be:	bf00      	nop
 80044c0:	e000      	b.n	80044c4 <_SendPacket+0x3c>
Send:
 80044c2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b1f      	cmp	r3, #31
 80044c8:	d809      	bhi.n	80044de <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80044ca:	4b60      	ldr	r3, [pc, #384]	; (800464c <_SendPacket+0x1c4>)
 80044cc:	69da      	ldr	r2, [r3, #28]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f040 808d 	bne.w	80045f8 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b17      	cmp	r3, #23
 80044e2:	d807      	bhi.n	80044f4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	e03d      	b.n	8004570 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004500:	d912      	bls.n	8004528 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	09da      	lsrs	r2, r3, #7
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3b01      	subs	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	3a01      	subs	r2, #1
 800451a:	60fa      	str	r2, [r7, #12]
 800451c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004520:	b2da      	uxtb	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	e006      	b.n	8004536 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	3b01      	subs	r3, #1
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	b2da      	uxtb	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b7f      	cmp	r3, #127	; 0x7f
 800453a:	d912      	bls.n	8004562 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	09da      	lsrs	r2, r3, #7
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3b01      	subs	r3, #1
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	3a01      	subs	r2, #1
 8004554:	60fa      	str	r2, [r7, #12]
 8004556:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800455a:	b2da      	uxtb	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e006      	b.n	8004570 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3b01      	subs	r3, #1
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	b2da      	uxtb	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004570:	4b37      	ldr	r3, [pc, #220]	; (8004650 <_SendPacket+0x1c8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004576:	4b35      	ldr	r3, [pc, #212]	; (800464c <_SendPacket+0x1c4>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	623b      	str	r3, [r7, #32]
 8004588:	e00b      	b.n	80045a2 <_SendPacket+0x11a>
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	1c59      	adds	r1, r3, #1
 8004592:	6279      	str	r1, [r7, #36]	; 0x24
 8004594:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	09db      	lsrs	r3, r3, #7
 80045a0:	623b      	str	r3, [r7, #32]
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	2b7f      	cmp	r3, #127	; 0x7f
 80045a6:	d8f0      	bhi.n	800458a <_SendPacket+0x102>
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	627a      	str	r2, [r7, #36]	; 0x24
 80045ae:	6a3a      	ldr	r2, [r7, #32]
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80045b8:	4b24      	ldr	r3, [pc, #144]	; (800464c <_SendPacket+0x1c4>)
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	4618      	mov	r0, r3
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	461a      	mov	r2, r3
 80045c6:	68f9      	ldr	r1, [r7, #12]
 80045c8:	f7fb fe22 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80045cc:	4603      	mov	r3, r0
 80045ce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80045d0:	f7ff fd2a 	bl	8004028 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80045da:	4a1c      	ldr	r2, [pc, #112]	; (800464c <_SendPacket+0x1c4>)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	60d3      	str	r3, [r2, #12]
 80045e0:	e00b      	b.n	80045fa <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80045e2:	4b1a      	ldr	r3, [pc, #104]	; (800464c <_SendPacket+0x1c4>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	3301      	adds	r3, #1
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	4b18      	ldr	r3, [pc, #96]	; (800464c <_SendPacket+0x1c4>)
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e004      	b.n	80045fa <_SendPacket+0x172>
    goto SendDone;
 80045f0:	bf00      	nop
 80045f2:	e002      	b.n	80045fa <_SendPacket+0x172>
      goto SendDone;
 80045f4:	bf00      	nop
 80045f6:	e000      	b.n	80045fa <_SendPacket+0x172>
      goto SendDone;
 80045f8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80045fa:	4b14      	ldr	r3, [pc, #80]	; (800464c <_SendPacket+0x1c4>)
 80045fc:	7e1b      	ldrb	r3, [r3, #24]
 80045fe:	4619      	mov	r1, r3
 8004600:	4a14      	ldr	r2, [pc, #80]	; (8004654 <_SendPacket+0x1cc>)
 8004602:	460b      	mov	r3, r1
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	440b      	add	r3, r1
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	4413      	add	r3, r2
 800460c:	336c      	adds	r3, #108	; 0x6c
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b0e      	ldr	r3, [pc, #56]	; (800464c <_SendPacket+0x1c4>)
 8004612:	7e1b      	ldrb	r3, [r3, #24]
 8004614:	4618      	mov	r0, r3
 8004616:	490f      	ldr	r1, [pc, #60]	; (8004654 <_SendPacket+0x1cc>)
 8004618:	4603      	mov	r3, r0
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	4403      	add	r3, r0
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	440b      	add	r3, r1
 8004622:	3370      	adds	r3, #112	; 0x70
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d00b      	beq.n	8004642 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <_SendPacket+0x1c4>)
 800462c:	789b      	ldrb	r3, [r3, #2]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d107      	bne.n	8004642 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <_SendPacket+0x1c4>)
 8004634:	2201      	movs	r2, #1
 8004636:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004638:	f7ff fe40 	bl	80042bc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <_SendPacket+0x1c4>)
 800463e:	2200      	movs	r2, #0
 8004640:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004642:	bf00      	nop
 8004644:	3728      	adds	r7, #40	; 0x28
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	2001321c 	.word	0x2001321c
 8004650:	e0001004 	.word	0xe0001004
 8004654:	2001338c 	.word	0x2001338c

08004658 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004660:	f3ef 8311 	mrs	r3, BASEPRI
 8004664:	f04f 0120 	mov.w	r1, #32
 8004668:	f381 8811 	msr	BASEPRI, r1
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	4808      	ldr	r0, [pc, #32]	; (8004690 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004670:	f7ff fe18 	bl	80042a4 <_PreparePacket>
 8004674:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	68b8      	ldr	r0, [r7, #8]
 800467c:	f7ff ff04 	bl	8004488 <_SendPacket>
  RECORD_END();
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f383 8811 	msr	BASEPRI, r3
}
 8004686:	bf00      	nop
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	2001324c 	.word	0x2001324c

08004694 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800469e:	f3ef 8311 	mrs	r3, BASEPRI
 80046a2:	f04f 0120 	mov.w	r1, #32
 80046a6:	f381 8811 	msr	BASEPRI, r1
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	4816      	ldr	r0, [pc, #88]	; (8004708 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80046ae:	f7ff fdf9 	bl	80042a4 <_PreparePacket>
 80046b2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e00b      	b.n	80046da <SEGGER_SYSVIEW_RecordU32+0x46>
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	1c59      	adds	r1, r3, #1
 80046ca:	61f9      	str	r1, [r7, #28]
 80046cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	09db      	lsrs	r3, r3, #7
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b7f      	cmp	r3, #127	; 0x7f
 80046de:	d8f0      	bhi.n	80046c2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	61fa      	str	r2, [r7, #28]
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	701a      	strb	r2, [r3, #0]
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	68f9      	ldr	r1, [r7, #12]
 80046f4:	6938      	ldr	r0, [r7, #16]
 80046f6:	f7ff fec7 	bl	8004488 <_SendPacket>
  RECORD_END();
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f383 8811 	msr	BASEPRI, r3
}
 8004700:	bf00      	nop
 8004702:	3720      	adds	r7, #32
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	2001324c 	.word	0x2001324c

0800470c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b08c      	sub	sp, #48	; 0x30
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004718:	f3ef 8311 	mrs	r3, BASEPRI
 800471c:	f04f 0120 	mov.w	r1, #32
 8004720:	f381 8811 	msr	BASEPRI, r1
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	4825      	ldr	r0, [pc, #148]	; (80047bc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004728:	f7ff fdbc 	bl	80042a4 <_PreparePacket>
 800472c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
 800473a:	e00b      	b.n	8004754 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	b2da      	uxtb	r2, r3
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	1c59      	adds	r1, r3, #1
 8004744:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004746:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	701a      	strb	r2, [r3, #0]
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	09db      	lsrs	r3, r3, #7
 8004752:	62bb      	str	r3, [r7, #40]	; 0x28
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	2b7f      	cmp	r3, #127	; 0x7f
 8004758:	d8f0      	bhi.n	800473c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	623b      	str	r3, [r7, #32]
 8004772:	e00b      	b.n	800478c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	b2da      	uxtb	r2, r3
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	1c59      	adds	r1, r3, #1
 800477c:	6279      	str	r1, [r7, #36]	; 0x24
 800477e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	09db      	lsrs	r3, r3, #7
 800478a:	623b      	str	r3, [r7, #32]
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	2b7f      	cmp	r3, #127	; 0x7f
 8004790:	d8f0      	bhi.n	8004774 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	627a      	str	r2, [r7, #36]	; 0x24
 8004798:	6a3a      	ldr	r2, [r7, #32]
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	6979      	ldr	r1, [r7, #20]
 80047a6:	69b8      	ldr	r0, [r7, #24]
 80047a8:	f7ff fe6e 	bl	8004488 <_SendPacket>
  RECORD_END();
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f383 8811 	msr	BASEPRI, r3
}
 80047b2:	bf00      	nop
 80047b4:	3730      	adds	r7, #48	; 0x30
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	2001324c 	.word	0x2001324c

080047c0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b090      	sub	sp, #64	; 0x40
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80047ce:	f3ef 8311 	mrs	r3, BASEPRI
 80047d2:	f04f 0120 	mov.w	r1, #32
 80047d6:	f381 8811 	msr	BASEPRI, r1
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	4840      	ldr	r0, [pc, #256]	; (80048e0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80047de:	f7ff fd61 	bl	80042a4 <_PreparePacket>
 80047e2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80047f0:	e00b      	b.n	800480a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80047f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f8:	1c59      	adds	r1, r3, #1
 80047fa:	63f9      	str	r1, [r7, #60]	; 0x3c
 80047fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004806:	09db      	lsrs	r3, r3, #7
 8004808:	63bb      	str	r3, [r7, #56]	; 0x38
 800480a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480c:	2b7f      	cmp	r3, #127	; 0x7f
 800480e:	d8f0      	bhi.n	80047f2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]
 800481c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	637b      	str	r3, [r7, #52]	; 0x34
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	633b      	str	r3, [r7, #48]	; 0x30
 8004828:	e00b      	b.n	8004842 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	b2da      	uxtb	r2, r3
 800482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004830:	1c59      	adds	r1, r3, #1
 8004832:	6379      	str	r1, [r7, #52]	; 0x34
 8004834:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	09db      	lsrs	r3, r3, #7
 8004840:	633b      	str	r3, [r7, #48]	; 0x30
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	2b7f      	cmp	r3, #127	; 0x7f
 8004846:	d8f0      	bhi.n	800482a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	637a      	str	r2, [r7, #52]	; 0x34
 800484e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004856:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004860:	e00b      	b.n	800487a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	b2da      	uxtb	r2, r3
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	1c59      	adds	r1, r3, #1
 800486a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800486c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	09db      	lsrs	r3, r3, #7
 8004878:	62bb      	str	r3, [r7, #40]	; 0x28
 800487a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487c:	2b7f      	cmp	r3, #127	; 0x7f
 800487e:	d8f0      	bhi.n	8004862 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
 8004894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004896:	623b      	str	r3, [r7, #32]
 8004898:	e00b      	b.n	80048b2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	b2da      	uxtb	r2, r3
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	1c59      	adds	r1, r3, #1
 80048a2:	6279      	str	r1, [r7, #36]	; 0x24
 80048a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	09db      	lsrs	r3, r3, #7
 80048b0:	623b      	str	r3, [r7, #32]
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	2b7f      	cmp	r3, #127	; 0x7f
 80048b6:	d8f0      	bhi.n	800489a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	627a      	str	r2, [r7, #36]	; 0x24
 80048be:	6a3a      	ldr	r2, [r7, #32]
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	6979      	ldr	r1, [r7, #20]
 80048cc:	69b8      	ldr	r0, [r7, #24]
 80048ce:	f7ff fddb 	bl	8004488 <_SendPacket>
  RECORD_END();
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f383 8811 	msr	BASEPRI, r3
}
 80048d8:	bf00      	nop
 80048da:	3740      	adds	r7, #64	; 0x40
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	2001324c 	.word	0x2001324c

080048e4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	; 0x30
 80048e8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80048ea:	4b59      	ldr	r3, [pc, #356]	; (8004a50 <SEGGER_SYSVIEW_Start+0x16c>)
 80048ec:	2201      	movs	r2, #1
 80048ee:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80048f0:	f3ef 8311 	mrs	r3, BASEPRI
 80048f4:	f04f 0120 	mov.w	r1, #32
 80048f8:	f381 8811 	msr	BASEPRI, r1
 80048fc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80048fe:	4b54      	ldr	r3, [pc, #336]	; (8004a50 <SEGGER_SYSVIEW_Start+0x16c>)
 8004900:	785b      	ldrb	r3, [r3, #1]
 8004902:	220a      	movs	r2, #10
 8004904:	4953      	ldr	r1, [pc, #332]	; (8004a54 <SEGGER_SYSVIEW_Start+0x170>)
 8004906:	4618      	mov	r0, r3
 8004908:	f7fb fc82 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004912:	f7ff fb89 	bl	8004028 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004916:	200a      	movs	r0, #10
 8004918:	f7ff fe9e 	bl	8004658 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800491c:	f3ef 8311 	mrs	r3, BASEPRI
 8004920:	f04f 0120 	mov.w	r1, #32
 8004924:	f381 8811 	msr	BASEPRI, r1
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	484b      	ldr	r0, [pc, #300]	; (8004a58 <SEGGER_SYSVIEW_Start+0x174>)
 800492c:	f7ff fcba 	bl	80042a4 <_PreparePacket>
 8004930:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800493a:	4b45      	ldr	r3, [pc, #276]	; (8004a50 <SEGGER_SYSVIEW_Start+0x16c>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004940:	e00b      	b.n	800495a <SEGGER_SYSVIEW_Start+0x76>
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	b2da      	uxtb	r2, r3
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	1c59      	adds	r1, r3, #1
 800494a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800494c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	701a      	strb	r2, [r3, #0]
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	09db      	lsrs	r3, r3, #7
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	2b7f      	cmp	r3, #127	; 0x7f
 800495e:	d8f0      	bhi.n	8004942 <SEGGER_SYSVIEW_Start+0x5e>
 8004960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
 8004974:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <SEGGER_SYSVIEW_Start+0x16c>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	623b      	str	r3, [r7, #32]
 800497a:	e00b      	b.n	8004994 <SEGGER_SYSVIEW_Start+0xb0>
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	b2da      	uxtb	r2, r3
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	1c59      	adds	r1, r3, #1
 8004984:	6279      	str	r1, [r7, #36]	; 0x24
 8004986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	09db      	lsrs	r3, r3, #7
 8004992:	623b      	str	r3, [r7, #32]
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	2b7f      	cmp	r3, #127	; 0x7f
 8004998:	d8f0      	bhi.n	800497c <SEGGER_SYSVIEW_Start+0x98>
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	627a      	str	r2, [r7, #36]	; 0x24
 80049a0:	6a3a      	ldr	r2, [r7, #32]
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	4b28      	ldr	r3, [pc, #160]	; (8004a50 <SEGGER_SYSVIEW_Start+0x16c>)
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	e00b      	b.n	80049ce <SEGGER_SYSVIEW_Start+0xea>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	1c59      	adds	r1, r3, #1
 80049be:	61f9      	str	r1, [r7, #28]
 80049c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	09db      	lsrs	r3, r3, #7
 80049cc:	61bb      	str	r3, [r7, #24]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b7f      	cmp	r3, #127	; 0x7f
 80049d2:	d8f0      	bhi.n	80049b6 <SEGGER_SYSVIEW_Start+0xd2>
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	61fa      	str	r2, [r7, #28]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	2300      	movs	r3, #0
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	e00b      	b.n	8004a06 <SEGGER_SYSVIEW_Start+0x122>
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	1c59      	adds	r1, r3, #1
 80049f6:	6179      	str	r1, [r7, #20]
 80049f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	09db      	lsrs	r3, r3, #7
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b7f      	cmp	r3, #127	; 0x7f
 8004a0a:	d8f0      	bhi.n	80049ee <SEGGER_SYSVIEW_Start+0x10a>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	617a      	str	r2, [r7, #20]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004a1c:	2218      	movs	r2, #24
 8004a1e:	6839      	ldr	r1, [r7, #0]
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7ff fd31 	bl	8004488 <_SendPacket>
      RECORD_END();
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a2c:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004a3a:	f000 f9c7 	bl	8004dcc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004a3e:	f000 f9b1 	bl	8004da4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004a42:	f000 fc5f 	bl	8005304 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004a46:	bf00      	nop
 8004a48:	3730      	adds	r7, #48	; 0x30
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	2001321c 	.word	0x2001321c
 8004a54:	080055a0 	.word	0x080055a0
 8004a58:	2001324c 	.word	0x2001324c

08004a5c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a62:	f3ef 8311 	mrs	r3, BASEPRI
 8004a66:	f04f 0120 	mov.w	r1, #32
 8004a6a:	f381 8811 	msr	BASEPRI, r1
 8004a6e:	607b      	str	r3, [r7, #4]
 8004a70:	480b      	ldr	r0, [pc, #44]	; (8004aa0 <SEGGER_SYSVIEW_Stop+0x44>)
 8004a72:	f7ff fc17 	bl	80042a4 <_PreparePacket>
 8004a76:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <SEGGER_SYSVIEW_Stop+0x48>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004a80:	220b      	movs	r2, #11
 8004a82:	6839      	ldr	r1, [r7, #0]
 8004a84:	6838      	ldr	r0, [r7, #0]
 8004a86:	f7ff fcff 	bl	8004488 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004a8a:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <SEGGER_SYSVIEW_Stop+0x48>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f383 8811 	msr	BASEPRI, r3
}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	2001324c 	.word	0x2001324c
 8004aa4:	2001321c 	.word	0x2001321c

08004aa8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	; 0x30
 8004aac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004aae:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab2:	f04f 0120 	mov.w	r1, #32
 8004ab6:	f381 8811 	msr	BASEPRI, r1
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	4845      	ldr	r0, [pc, #276]	; (8004bd4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004abe:	f7ff fbf1 	bl	80042a4 <_PreparePacket>
 8004ac2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004acc:	4b42      	ldr	r3, [pc, #264]	; (8004bd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad2:	e00b      	b.n	8004aec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	1c59      	adds	r1, r3, #1
 8004adc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ade:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]
 8004ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae8:	09db      	lsrs	r3, r3, #7
 8004aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	2b7f      	cmp	r3, #127	; 0x7f
 8004af0:	d8f0      	bhi.n	8004ad4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004af8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	627b      	str	r3, [r7, #36]	; 0x24
 8004b06:	4b34      	ldr	r3, [pc, #208]	; (8004bd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	623b      	str	r3, [r7, #32]
 8004b0c:	e00b      	b.n	8004b26 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	1c59      	adds	r1, r3, #1
 8004b16:	6279      	str	r1, [r7, #36]	; 0x24
 8004b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	09db      	lsrs	r3, r3, #7
 8004b24:	623b      	str	r3, [r7, #32]
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	2b7f      	cmp	r3, #127	; 0x7f
 8004b2a:	d8f0      	bhi.n	8004b0e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	627a      	str	r2, [r7, #36]	; 0x24
 8004b32:	6a3a      	ldr	r2, [r7, #32]
 8004b34:	b2d2      	uxtb	r2, r2
 8004b36:	701a      	strb	r2, [r3, #0]
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	4b25      	ldr	r3, [pc, #148]	; (8004bd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	61bb      	str	r3, [r7, #24]
 8004b46:	e00b      	b.n	8004b60 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	1c59      	adds	r1, r3, #1
 8004b50:	61f9      	str	r1, [r7, #28]
 8004b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	09db      	lsrs	r3, r3, #7
 8004b5e:	61bb      	str	r3, [r7, #24]
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b7f      	cmp	r3, #127	; 0x7f
 8004b64:	d8f0      	bhi.n	8004b48 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	61fa      	str	r2, [r7, #28]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	e00b      	b.n	8004b98 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	1c59      	adds	r1, r3, #1
 8004b88:	6179      	str	r1, [r7, #20]
 8004b8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	09db      	lsrs	r3, r3, #7
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004b9c:	d8f0      	bhi.n	8004b80 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	617a      	str	r2, [r7, #20]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004bae:	2218      	movs	r2, #24
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	68b8      	ldr	r0, [r7, #8]
 8004bb4:	f7ff fc68 	bl	8004488 <_SendPacket>
  RECORD_END();
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004bbe:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004bc6:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	4798      	blx	r3
  }
}
 8004bcc:	bf00      	nop
 8004bce:	3730      	adds	r7, #48	; 0x30
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	2001324c 	.word	0x2001324c
 8004bd8:	2001321c 	.word	0x2001321c

08004bdc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b092      	sub	sp, #72	; 0x48
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004be4:	f3ef 8311 	mrs	r3, BASEPRI
 8004be8:	f04f 0120 	mov.w	r1, #32
 8004bec:	f381 8811 	msr	BASEPRI, r1
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	486a      	ldr	r0, [pc, #424]	; (8004d9c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004bf4:	f7ff fb56 	bl	80042a4 <_PreparePacket>
 8004bf8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	647b      	str	r3, [r7, #68]	; 0x44
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4b66      	ldr	r3, [pc, #408]	; (8004da0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c0e:	e00b      	b.n	8004c28 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c16:	1c59      	adds	r1, r3, #1
 8004c18:	6479      	str	r1, [r7, #68]	; 0x44
 8004c1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c24:	09db      	lsrs	r3, r3, #7
 8004c26:	643b      	str	r3, [r7, #64]	; 0x40
 8004c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c2c:	d8f0      	bhi.n	8004c10 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	647a      	str	r2, [r7, #68]	; 0x44
 8004c34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]
 8004c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c48:	e00b      	b.n	8004c62 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c50:	1c59      	adds	r1, r3, #1
 8004c52:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004c54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	701a      	strb	r2, [r3, #0]
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	09db      	lsrs	r3, r3, #7
 8004c60:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c64:	2b7f      	cmp	r3, #127	; 0x7f
 8004c66:	d8f0      	bhi.n	8004c4a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c76:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	4619      	mov	r1, r3
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff fabf 	bl	8004204 <_EncodeStr>
 8004c86:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004c88:	2209      	movs	r2, #9
 8004c8a:	68f9      	ldr	r1, [r7, #12]
 8004c8c:	6938      	ldr	r0, [r7, #16]
 8004c8e:	f7ff fbfb 	bl	8004488 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4b40      	ldr	r3, [pc, #256]	; (8004da0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ca6:	e00b      	b.n	8004cc0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cae:	1c59      	adds	r1, r3, #1
 8004cb0:	6379      	str	r1, [r7, #52]	; 0x34
 8004cb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	09db      	lsrs	r3, r3, #7
 8004cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	2b7f      	cmp	r3, #127	; 0x7f
 8004cc4:	d8f0      	bhi.n	8004ca8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc8:	1c5a      	adds	r2, r3, #1
 8004cca:	637a      	str	r2, [r7, #52]	; 0x34
 8004ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ce0:	e00b      	b.n	8004cfa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce8:	1c59      	adds	r1, r3, #1
 8004cea:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004cec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	701a      	strb	r2, [r3, #0]
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	09db      	lsrs	r3, r3, #7
 8004cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfc:	2b7f      	cmp	r3, #127	; 0x7f
 8004cfe:	d8f0      	bhi.n	8004ce2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	623b      	str	r3, [r7, #32]
 8004d1a:	e00b      	b.n	8004d34 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	1c59      	adds	r1, r3, #1
 8004d24:	6279      	str	r1, [r7, #36]	; 0x24
 8004d26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	09db      	lsrs	r3, r3, #7
 8004d32:	623b      	str	r3, [r7, #32]
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	2b7f      	cmp	r3, #127	; 0x7f
 8004d38:	d8f0      	bhi.n	8004d1c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	627a      	str	r2, [r7, #36]	; 0x24
 8004d40:	6a3a      	ldr	r2, [r7, #32]
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	e00b      	b.n	8004d6c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	1c59      	adds	r1, r3, #1
 8004d5c:	61f9      	str	r1, [r7, #28]
 8004d5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d62:	b2d2      	uxtb	r2, r2
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	09db      	lsrs	r3, r3, #7
 8004d6a:	61bb      	str	r3, [r7, #24]
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d70:	d8f0      	bhi.n	8004d54 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	61fa      	str	r2, [r7, #28]
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004d82:	2215      	movs	r2, #21
 8004d84:	68f9      	ldr	r1, [r7, #12]
 8004d86:	6938      	ldr	r0, [r7, #16]
 8004d88:	f7ff fb7e 	bl	8004488 <_SendPacket>
  RECORD_END();
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f383 8811 	msr	BASEPRI, r3
}
 8004d92:	bf00      	nop
 8004d94:	3748      	adds	r7, #72	; 0x48
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	2001324c 	.word	0x2001324c
 8004da0:	2001321c 	.word	0x2001321c

08004da4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004da8:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004db0:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004dba:	4b03      	ldr	r3, [pc, #12]	; (8004dc8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	4798      	blx	r3
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	2001321c 	.word	0x2001321c

08004dcc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004dd2:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01a      	beq.n	8004e10 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004dda:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d015      	beq.n	8004e10 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004de4:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4798      	blx	r3
 8004dec:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004df0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004df2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	f04f 0300 	mov.w	r3, #0
 8004dfe:	000a      	movs	r2, r1
 8004e00:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004e02:	4613      	mov	r3, r2
 8004e04:	461a      	mov	r2, r3
 8004e06:	4621      	mov	r1, r4
 8004e08:	200d      	movs	r0, #13
 8004e0a:	f7ff fc7f 	bl	800470c <SEGGER_SYSVIEW_RecordU32x2>
 8004e0e:	e006      	b.n	8004e1e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004e10:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4619      	mov	r1, r3
 8004e16:	200c      	movs	r0, #12
 8004e18:	f7ff fc3c 	bl	8004694 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd90      	pop	{r4, r7, pc}
 8004e26:	bf00      	nop
 8004e28:	2001321c 	.word	0x2001321c
 8004e2c:	e0001004 	.word	0xe0001004

08004e30 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e36:	f3ef 8311 	mrs	r3, BASEPRI
 8004e3a:	f04f 0120 	mov.w	r1, #32
 8004e3e:	f381 8811 	msr	BASEPRI, r1
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	4819      	ldr	r0, [pc, #100]	; (8004eac <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004e46:	f7ff fa2d 	bl	80042a4 <_PreparePacket>
 8004e4a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004e50:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e58:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	613b      	str	r3, [r7, #16]
 8004e62:	e00b      	b.n	8004e7c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	1c59      	adds	r1, r3, #1
 8004e6c:	6179      	str	r1, [r7, #20]
 8004e6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	09db      	lsrs	r3, r3, #7
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e80:	d8f0      	bhi.n	8004e64 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	617a      	str	r2, [r7, #20]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004e92:	2202      	movs	r2, #2
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	68b8      	ldr	r0, [r7, #8]
 8004e98:	f7ff faf6 	bl	8004488 <_SendPacket>
  RECORD_END();
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f383 8811 	msr	BASEPRI, r3
}
 8004ea2:	bf00      	nop
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	2001324c 	.word	0x2001324c
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004eba:	f3ef 8311 	mrs	r3, BASEPRI
 8004ebe:	f04f 0120 	mov.w	r1, #32
 8004ec2:	f381 8811 	msr	BASEPRI, r1
 8004ec6:	607b      	str	r3, [r7, #4]
 8004ec8:	4807      	ldr	r0, [pc, #28]	; (8004ee8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004eca:	f7ff f9eb 	bl	80042a4 <_PreparePacket>
 8004ece:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	6839      	ldr	r1, [r7, #0]
 8004ed4:	6838      	ldr	r0, [r7, #0]
 8004ed6:	f7ff fad7 	bl	8004488 <_SendPacket>
  RECORD_END();
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f383 8811 	msr	BASEPRI, r3
}
 8004ee0:	bf00      	nop
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	2001324c 	.word	0x2001324c

08004eec <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ef2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ef6:	f04f 0120 	mov.w	r1, #32
 8004efa:	f381 8811 	msr	BASEPRI, r1
 8004efe:	607b      	str	r3, [r7, #4]
 8004f00:	4807      	ldr	r0, [pc, #28]	; (8004f20 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004f02:	f7ff f9cf 	bl	80042a4 <_PreparePacket>
 8004f06:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004f08:	2212      	movs	r2, #18
 8004f0a:	6839      	ldr	r1, [r7, #0]
 8004f0c:	6838      	ldr	r0, [r7, #0]
 8004f0e:	f7ff fabb 	bl	8004488 <_SendPacket>
  RECORD_END();
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f383 8811 	msr	BASEPRI, r3
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	2001324c 	.word	0x2001324c

08004f24 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f2a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f2e:	f04f 0120 	mov.w	r1, #32
 8004f32:	f381 8811 	msr	BASEPRI, r1
 8004f36:	607b      	str	r3, [r7, #4]
 8004f38:	4807      	ldr	r0, [pc, #28]	; (8004f58 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004f3a:	f7ff f9b3 	bl	80042a4 <_PreparePacket>
 8004f3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004f40:	2211      	movs	r2, #17
 8004f42:	6839      	ldr	r1, [r7, #0]
 8004f44:	6838      	ldr	r0, [r7, #0]
 8004f46:	f7ff fa9f 	bl	8004488 <_SendPacket>
  RECORD_END();
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f383 8811 	msr	BASEPRI, r3
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	2001324c 	.word	0x2001324c

08004f5c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f64:	f3ef 8311 	mrs	r3, BASEPRI
 8004f68:	f04f 0120 	mov.w	r1, #32
 8004f6c:	f381 8811 	msr	BASEPRI, r1
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	4819      	ldr	r0, [pc, #100]	; (8004fd8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004f74:	f7ff f996 	bl	80042a4 <_PreparePacket>
 8004f78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f7e:	4b17      	ldr	r3, [pc, #92]	; (8004fdc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	61bb      	str	r3, [r7, #24]
 8004f90:	e00b      	b.n	8004faa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	1c59      	adds	r1, r3, #1
 8004f9a:	61f9      	str	r1, [r7, #28]
 8004f9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	09db      	lsrs	r3, r3, #7
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	2b7f      	cmp	r3, #127	; 0x7f
 8004fae:	d8f0      	bhi.n	8004f92 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	61fa      	str	r2, [r7, #28]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	68f9      	ldr	r1, [r7, #12]
 8004fc4:	6938      	ldr	r0, [r7, #16]
 8004fc6:	f7ff fa5f 	bl	8004488 <_SendPacket>
  RECORD_END();
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f383 8811 	msr	BASEPRI, r3
}
 8004fd0:	bf00      	nop
 8004fd2:	3720      	adds	r7, #32
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	2001324c 	.word	0x2001324c
 8004fdc:	2001321c 	.word	0x2001321c

08004fe0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fe8:	f3ef 8311 	mrs	r3, BASEPRI
 8004fec:	f04f 0120 	mov.w	r1, #32
 8004ff0:	f381 8811 	msr	BASEPRI, r1
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	4819      	ldr	r0, [pc, #100]	; (800505c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004ff8:	f7ff f954 	bl	80042a4 <_PreparePacket>
 8004ffc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005002:	4b17      	ldr	r3, [pc, #92]	; (8005060 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	61fb      	str	r3, [r7, #28]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	61bb      	str	r3, [r7, #24]
 8005014:	e00b      	b.n	800502e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	b2da      	uxtb	r2, r3
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	1c59      	adds	r1, r3, #1
 800501e:	61f9      	str	r1, [r7, #28]
 8005020:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005024:	b2d2      	uxtb	r2, r2
 8005026:	701a      	strb	r2, [r3, #0]
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	09db      	lsrs	r3, r3, #7
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b7f      	cmp	r3, #127	; 0x7f
 8005032:	d8f0      	bhi.n	8005016 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	61fa      	str	r2, [r7, #28]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	b2d2      	uxtb	r2, r2
 800503e:	701a      	strb	r2, [r3, #0]
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005044:	2204      	movs	r2, #4
 8005046:	68f9      	ldr	r1, [r7, #12]
 8005048:	6938      	ldr	r0, [r7, #16]
 800504a:	f7ff fa1d 	bl	8004488 <_SendPacket>
  RECORD_END();
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f383 8811 	msr	BASEPRI, r3
}
 8005054:	bf00      	nop
 8005056:	3720      	adds	r7, #32
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	2001324c 	.word	0x2001324c
 8005060:	2001321c 	.word	0x2001321c

08005064 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005064:	b580      	push	{r7, lr}
 8005066:	b088      	sub	sp, #32
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800506c:	f3ef 8311 	mrs	r3, BASEPRI
 8005070:	f04f 0120 	mov.w	r1, #32
 8005074:	f381 8811 	msr	BASEPRI, r1
 8005078:	617b      	str	r3, [r7, #20]
 800507a:	4819      	ldr	r0, [pc, #100]	; (80050e0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800507c:	f7ff f912 	bl	80042a4 <_PreparePacket>
 8005080:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005086:	4b17      	ldr	r3, [pc, #92]	; (80050e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	e00b      	b.n	80050b2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	b2da      	uxtb	r2, r3
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	1c59      	adds	r1, r3, #1
 80050a2:	61f9      	str	r1, [r7, #28]
 80050a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	09db      	lsrs	r3, r3, #7
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	2b7f      	cmp	r3, #127	; 0x7f
 80050b6:	d8f0      	bhi.n	800509a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	61fa      	str	r2, [r7, #28]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80050c8:	2206      	movs	r2, #6
 80050ca:	68f9      	ldr	r1, [r7, #12]
 80050cc:	6938      	ldr	r0, [r7, #16]
 80050ce:	f7ff f9db 	bl	8004488 <_SendPacket>
  RECORD_END();
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f383 8811 	msr	BASEPRI, r3
}
 80050d8:	bf00      	nop
 80050da:	3720      	adds	r7, #32
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	2001324c 	.word	0x2001324c
 80050e4:	2001321c 	.word	0x2001321c

080050e8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	; 0x28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80050f2:	f3ef 8311 	mrs	r3, BASEPRI
 80050f6:	f04f 0120 	mov.w	r1, #32
 80050fa:	f381 8811 	msr	BASEPRI, r1
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	4827      	ldr	r0, [pc, #156]	; (80051a0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005102:	f7ff f8cf 	bl	80042a4 <_PreparePacket>
 8005106:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800510c:	4b25      	ldr	r3, [pc, #148]	; (80051a4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	623b      	str	r3, [r7, #32]
 800511e:	e00b      	b.n	8005138 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005120:	6a3b      	ldr	r3, [r7, #32]
 8005122:	b2da      	uxtb	r2, r3
 8005124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005126:	1c59      	adds	r1, r3, #1
 8005128:	6279      	str	r1, [r7, #36]	; 0x24
 800512a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	09db      	lsrs	r3, r3, #7
 8005136:	623b      	str	r3, [r7, #32]
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	2b7f      	cmp	r3, #127	; 0x7f
 800513c:	d8f0      	bhi.n	8005120 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	1c5a      	adds	r2, r3, #1
 8005142:	627a      	str	r2, [r7, #36]	; 0x24
 8005144:	6a3a      	ldr	r2, [r7, #32]
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	e00b      	b.n	8005170 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	b2da      	uxtb	r2, r3
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	1c59      	adds	r1, r3, #1
 8005160:	61f9      	str	r1, [r7, #28]
 8005162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	09db      	lsrs	r3, r3, #7
 800516e:	61bb      	str	r3, [r7, #24]
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b7f      	cmp	r3, #127	; 0x7f
 8005174:	d8f0      	bhi.n	8005158 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	61fa      	str	r2, [r7, #28]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005186:	2207      	movs	r2, #7
 8005188:	68f9      	ldr	r1, [r7, #12]
 800518a:	6938      	ldr	r0, [r7, #16]
 800518c:	f7ff f97c 	bl	8004488 <_SendPacket>
  RECORD_END();
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f383 8811 	msr	BASEPRI, r3
}
 8005196:	bf00      	nop
 8005198:	3728      	adds	r7, #40	; 0x28
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	2001324c 	.word	0x2001324c
 80051a4:	2001321c 	.word	0x2001321c

080051a8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80051b0:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	1ad3      	subs	r3, r2, r3
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	2001321c 	.word	0x2001321c

080051c8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08c      	sub	sp, #48	; 0x30
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80051d2:	4b3b      	ldr	r3, [pc, #236]	; (80052c0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d06d      	beq.n	80052b6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80051da:	4b39      	ldr	r3, [pc, #228]	; (80052c0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80051e0:	2300      	movs	r3, #0
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e4:	e008      	b.n	80051f8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d007      	beq.n	8005202 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	3301      	adds	r3, #1
 80051f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d3f2      	bcc.n	80051e6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005200:	e000      	b.n	8005204 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005202:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005206:	2b00      	cmp	r3, #0
 8005208:	d055      	beq.n	80052b6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800520a:	f3ef 8311 	mrs	r3, BASEPRI
 800520e:	f04f 0120 	mov.w	r1, #32
 8005212:	f381 8811 	msr	BASEPRI, r1
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	482a      	ldr	r0, [pc, #168]	; (80052c4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800521a:	f7ff f843 	bl	80042a4 <_PreparePacket>
 800521e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	627b      	str	r3, [r7, #36]	; 0x24
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	e00b      	b.n	8005246 <SEGGER_SYSVIEW_SendModule+0x7e>
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	b2da      	uxtb	r2, r3
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	1c59      	adds	r1, r3, #1
 8005236:	6279      	str	r1, [r7, #36]	; 0x24
 8005238:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	09db      	lsrs	r3, r3, #7
 8005244:	623b      	str	r3, [r7, #32]
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	2b7f      	cmp	r3, #127	; 0x7f
 800524a:	d8f0      	bhi.n	800522e <SEGGER_SYSVIEW_SendModule+0x66>
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	627a      	str	r2, [r7, #36]	; 0x24
 8005252:	6a3a      	ldr	r2, [r7, #32]
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	e00b      	b.n	8005280 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	b2da      	uxtb	r2, r3
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	1c59      	adds	r1, r3, #1
 8005270:	61f9      	str	r1, [r7, #28]
 8005272:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	09db      	lsrs	r3, r3, #7
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b7f      	cmp	r3, #127	; 0x7f
 8005284:	d8f0      	bhi.n	8005268 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	61fa      	str	r2, [r7, #28]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2280      	movs	r2, #128	; 0x80
 800529c:	4619      	mov	r1, r3
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7fe ffb0 	bl	8004204 <_EncodeStr>
 80052a4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80052a6:	2216      	movs	r2, #22
 80052a8:	68f9      	ldr	r1, [r7, #12]
 80052aa:	6938      	ldr	r0, [r7, #16]
 80052ac:	f7ff f8ec 	bl	8004488 <_SendPacket>
      RECORD_END();
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80052b6:	bf00      	nop
 80052b8:	3730      	adds	r7, #48	; 0x30
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20013244 	.word	0x20013244
 80052c4:	2001324c 	.word	0x2001324c

080052c8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80052ce:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00f      	beq.n	80052f6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80052d6:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f2      	bne.n	80052dc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20013244 	.word	0x20013244

08005304 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800530a:	f3ef 8311 	mrs	r3, BASEPRI
 800530e:	f04f 0120 	mov.w	r1, #32
 8005312:	f381 8811 	msr	BASEPRI, r1
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	4817      	ldr	r0, [pc, #92]	; (8005378 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800531a:	f7fe ffc3 	bl	80042a4 <_PreparePacket>
 800531e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	4b14      	ldr	r3, [pc, #80]	; (800537c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	e00b      	b.n	8005348 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	b2da      	uxtb	r2, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	1c59      	adds	r1, r3, #1
 8005338:	6179      	str	r1, [r7, #20]
 800533a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	09db      	lsrs	r3, r3, #7
 8005346:	613b      	str	r3, [r7, #16]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	2b7f      	cmp	r3, #127	; 0x7f
 800534c:	d8f0      	bhi.n	8005330 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	617a      	str	r2, [r7, #20]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	b2d2      	uxtb	r2, r2
 8005358:	701a      	strb	r2, [r3, #0]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800535e:	221b      	movs	r2, #27
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	68b8      	ldr	r0, [r7, #8]
 8005364:	f7ff f890 	bl	8004488 <_SendPacket>
  RECORD_END();
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f383 8811 	msr	BASEPRI, r3
}
 800536e:	bf00      	nop
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	2001324c 	.word	0x2001324c
 800537c:	20013248 	.word	0x20013248

08005380 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	; 0x28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005388:	f3ef 8311 	mrs	r3, BASEPRI
 800538c:	f04f 0120 	mov.w	r1, #32
 8005390:	f381 8811 	msr	BASEPRI, r1
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	4827      	ldr	r0, [pc, #156]	; (8005434 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005398:	f7fe ff84 	bl	80042a4 <_PreparePacket>
 800539c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800539e:	2280      	movs	r2, #128	; 0x80
 80053a0:	6879      	ldr	r1, [r7, #4]
 80053a2:	6938      	ldr	r0, [r7, #16]
 80053a4:	f7fe ff2e 	bl	8004204 <_EncodeStr>
 80053a8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	627b      	str	r3, [r7, #36]	; 0x24
 80053ae:	2301      	movs	r3, #1
 80053b0:	623b      	str	r3, [r7, #32]
 80053b2:	e00b      	b.n	80053cc <SEGGER_SYSVIEW_Warn+0x4c>
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	1c59      	adds	r1, r3, #1
 80053bc:	6279      	str	r1, [r7, #36]	; 0x24
 80053be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	09db      	lsrs	r3, r3, #7
 80053ca:	623b      	str	r3, [r7, #32]
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	2b7f      	cmp	r3, #127	; 0x7f
 80053d0:	d8f0      	bhi.n	80053b4 <SEGGER_SYSVIEW_Warn+0x34>
 80053d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	627a      	str	r2, [r7, #36]	; 0x24
 80053d8:	6a3a      	ldr	r2, [r7, #32]
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	61fb      	str	r3, [r7, #28]
 80053e6:	2300      	movs	r3, #0
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	e00b      	b.n	8005404 <SEGGER_SYSVIEW_Warn+0x84>
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	1c59      	adds	r1, r3, #1
 80053f4:	61f9      	str	r1, [r7, #28]
 80053f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	09db      	lsrs	r3, r3, #7
 8005402:	61bb      	str	r3, [r7, #24]
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	2b7f      	cmp	r3, #127	; 0x7f
 8005408:	d8f0      	bhi.n	80053ec <SEGGER_SYSVIEW_Warn+0x6c>
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	61fa      	str	r2, [r7, #28]
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800541a:	221a      	movs	r2, #26
 800541c:	68f9      	ldr	r1, [r7, #12]
 800541e:	6938      	ldr	r0, [r7, #16]
 8005420:	f7ff f832 	bl	8004488 <_SendPacket>
  RECORD_END();
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f383 8811 	msr	BASEPRI, r3
}
 800542a:	bf00      	nop
 800542c:	3728      	adds	r7, #40	; 0x28
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	2001324c 	.word	0x2001324c

08005438 <__libc_init_array>:
 8005438:	b570      	push	{r4, r5, r6, lr}
 800543a:	4d0d      	ldr	r5, [pc, #52]	; (8005470 <__libc_init_array+0x38>)
 800543c:	4c0d      	ldr	r4, [pc, #52]	; (8005474 <__libc_init_array+0x3c>)
 800543e:	1b64      	subs	r4, r4, r5
 8005440:	10a4      	asrs	r4, r4, #2
 8005442:	2600      	movs	r6, #0
 8005444:	42a6      	cmp	r6, r4
 8005446:	d109      	bne.n	800545c <__libc_init_array+0x24>
 8005448:	4d0b      	ldr	r5, [pc, #44]	; (8005478 <__libc_init_array+0x40>)
 800544a:	4c0c      	ldr	r4, [pc, #48]	; (800547c <__libc_init_array+0x44>)
 800544c:	f000 f83c 	bl	80054c8 <_init>
 8005450:	1b64      	subs	r4, r4, r5
 8005452:	10a4      	asrs	r4, r4, #2
 8005454:	2600      	movs	r6, #0
 8005456:	42a6      	cmp	r6, r4
 8005458:	d105      	bne.n	8005466 <__libc_init_array+0x2e>
 800545a:	bd70      	pop	{r4, r5, r6, pc}
 800545c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005460:	4798      	blx	r3
 8005462:	3601      	adds	r6, #1
 8005464:	e7ee      	b.n	8005444 <__libc_init_array+0xc>
 8005466:	f855 3b04 	ldr.w	r3, [r5], #4
 800546a:	4798      	blx	r3
 800546c:	3601      	adds	r6, #1
 800546e:	e7f2      	b.n	8005456 <__libc_init_array+0x1e>
 8005470:	080055b4 	.word	0x080055b4
 8005474:	080055b4 	.word	0x080055b4
 8005478:	080055b4 	.word	0x080055b4
 800547c:	080055b8 	.word	0x080055b8

08005480 <memcmp>:
 8005480:	b530      	push	{r4, r5, lr}
 8005482:	3901      	subs	r1, #1
 8005484:	2400      	movs	r4, #0
 8005486:	42a2      	cmp	r2, r4
 8005488:	d101      	bne.n	800548e <memcmp+0xe>
 800548a:	2000      	movs	r0, #0
 800548c:	e005      	b.n	800549a <memcmp+0x1a>
 800548e:	5d03      	ldrb	r3, [r0, r4]
 8005490:	3401      	adds	r4, #1
 8005492:	5d0d      	ldrb	r5, [r1, r4]
 8005494:	42ab      	cmp	r3, r5
 8005496:	d0f6      	beq.n	8005486 <memcmp+0x6>
 8005498:	1b58      	subs	r0, r3, r5
 800549a:	bd30      	pop	{r4, r5, pc}

0800549c <memcpy>:
 800549c:	440a      	add	r2, r1
 800549e:	4291      	cmp	r1, r2
 80054a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80054a4:	d100      	bne.n	80054a8 <memcpy+0xc>
 80054a6:	4770      	bx	lr
 80054a8:	b510      	push	{r4, lr}
 80054aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054b2:	4291      	cmp	r1, r2
 80054b4:	d1f9      	bne.n	80054aa <memcpy+0xe>
 80054b6:	bd10      	pop	{r4, pc}

080054b8 <memset>:
 80054b8:	4402      	add	r2, r0
 80054ba:	4603      	mov	r3, r0
 80054bc:	4293      	cmp	r3, r2
 80054be:	d100      	bne.n	80054c2 <memset+0xa>
 80054c0:	4770      	bx	lr
 80054c2:	f803 1b01 	strb.w	r1, [r3], #1
 80054c6:	e7f9      	b.n	80054bc <memset+0x4>

080054c8 <_init>:
 80054c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ca:	bf00      	nop
 80054cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ce:	bc08      	pop	{r3}
 80054d0:	469e      	mov	lr, r3
 80054d2:	4770      	bx	lr

080054d4 <_fini>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	bf00      	nop
 80054d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054da:	bc08      	pop	{r3}
 80054dc:	469e      	mov	lr, r3
 80054de:	4770      	bx	lr
