
006LED_Button_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800574c  0800574c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800574c  0800574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005754  08005754  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005758  08005758  00015758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800575c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001341c  20000014  08005770  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20013430  08005770  00023430  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171ec  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ebc  00000000  00000000  00037230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  0003b280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000237aa  00000000  00000000  0003c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001441d  00000000  00000000  0005fa52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dba1e  00000000  00000000  00073e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f88d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004938  00000000  00000000  0014f8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005674 	.word	0x08005674

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08005674 	.word	0x08005674

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20013388 	.word	0x20013388

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96e 	b.w	8000598 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	4604      	mov	r4, r0
 80002dc:	468c      	mov	ip, r1
 80002de:	2b00      	cmp	r3, #0
 80002e0:	f040 8083 	bne.w	80003ea <__udivmoddi4+0x116>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d947      	bls.n	800037a <__udivmoddi4+0xa6>
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	b142      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002f0:	f1c2 0020 	rsb	r0, r2, #32
 80002f4:	fa24 f000 	lsr.w	r0, r4, r0
 80002f8:	4091      	lsls	r1, r2
 80002fa:	4097      	lsls	r7, r2
 80002fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000300:	4094      	lsls	r4, r2
 8000302:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fbbc f6f8 	udiv	r6, ip, r8
 800030c:	fa1f fe87 	uxth.w	lr, r7
 8000310:	fb08 c116 	mls	r1, r8, r6, ip
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb06 f10e 	mul.w	r1, r6, lr
 800031c:	4299      	cmp	r1, r3
 800031e:	d909      	bls.n	8000334 <__udivmoddi4+0x60>
 8000320:	18fb      	adds	r3, r7, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 8119 	bcs.w	800055c <__udivmoddi4+0x288>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 8116 	bls.w	800055c <__udivmoddi4+0x288>
 8000330:	3e02      	subs	r6, #2
 8000332:	443b      	add	r3, r7
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 fe0e 	mul.w	lr, r0, lr
 8000348:	45a6      	cmp	lr, r4
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0x8c>
 800034c:	193c      	adds	r4, r7, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	f080 8105 	bcs.w	8000560 <__udivmoddi4+0x28c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f240 8102 	bls.w	8000560 <__udivmoddi4+0x28c>
 800035c:	3802      	subs	r0, #2
 800035e:	443c      	add	r4, r7
 8000360:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa0>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	b902      	cbnz	r2, 800037e <__udivmoddi4+0xaa>
 800037c:	deff      	udf	#255	; 0xff
 800037e:	fab2 f282 	clz	r2, r2
 8000382:	2a00      	cmp	r2, #0
 8000384:	d150      	bne.n	8000428 <__udivmoddi4+0x154>
 8000386:	1bcb      	subs	r3, r1, r7
 8000388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	2601      	movs	r6, #1
 8000392:	fbb3 fcfe 	udiv	ip, r3, lr
 8000396:	0c21      	lsrs	r1, r4, #16
 8000398:	fb0e 331c 	mls	r3, lr, ip, r3
 800039c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a0:	fb08 f30c 	mul.w	r3, r8, ip
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0xe4>
 80003a8:	1879      	adds	r1, r7, r1
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0xe2>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	f200 80e9 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x10c>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x10a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80d9 	bhi.w	8000590 <__udivmoddi4+0x2bc>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e7bf      	b.n	800036a <__udivmoddi4+0x96>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0x12e>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80b1 	beq.w	8000556 <__udivmoddi4+0x282>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x1cc>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0x140>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80b8 	bhi.w	8000584 <__udivmoddi4+0x2b0>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0103 	sbc.w	r1, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	468c      	mov	ip, r1
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0a8      	beq.n	8000374 <__udivmoddi4+0xa0>
 8000422:	e9c5 4c00 	strd	r4, ip, [r5]
 8000426:	e7a5      	b.n	8000374 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f603 	lsr.w	r6, r0, r3
 8000430:	4097      	lsls	r7, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800043a:	40d9      	lsrs	r1, r3
 800043c:	4330      	orrs	r0, r6
 800043e:	0c03      	lsrs	r3, r0, #16
 8000440:	fbb1 f6fe 	udiv	r6, r1, lr
 8000444:	fa1f f887 	uxth.w	r8, r7
 8000448:	fb0e 1116 	mls	r1, lr, r6, r1
 800044c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000450:	fb06 f108 	mul.w	r1, r6, r8
 8000454:	4299      	cmp	r1, r3
 8000456:	fa04 f402 	lsl.w	r4, r4, r2
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x19c>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000462:	f080 808d 	bcs.w	8000580 <__udivmoddi4+0x2ac>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 808a 	bls.w	8000580 <__udivmoddi4+0x2ac>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b281      	uxth	r1, r0
 8000474:	fbb3 f0fe 	udiv	r0, r3, lr
 8000478:	fb0e 3310 	mls	r3, lr, r0, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb00 f308 	mul.w	r3, r0, r8
 8000484:	428b      	cmp	r3, r1
 8000486:	d907      	bls.n	8000498 <__udivmoddi4+0x1c4>
 8000488:	1879      	adds	r1, r7, r1
 800048a:	f100 3cff 	add.w	ip, r0, #4294967295
 800048e:	d273      	bcs.n	8000578 <__udivmoddi4+0x2a4>
 8000490:	428b      	cmp	r3, r1
 8000492:	d971      	bls.n	8000578 <__udivmoddi4+0x2a4>
 8000494:	3802      	subs	r0, #2
 8000496:	4439      	add	r1, r7
 8000498:	1acb      	subs	r3, r1, r3
 800049a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049e:	e778      	b.n	8000392 <__udivmoddi4+0xbe>
 80004a0:	f1c6 0c20 	rsb	ip, r6, #32
 80004a4:	fa03 f406 	lsl.w	r4, r3, r6
 80004a8:	fa22 f30c 	lsr.w	r3, r2, ip
 80004ac:	431c      	orrs	r4, r3
 80004ae:	fa20 f70c 	lsr.w	r7, r0, ip
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ba:	fa21 f10c 	lsr.w	r1, r1, ip
 80004be:	431f      	orrs	r7, r3
 80004c0:	0c3b      	lsrs	r3, r7, #16
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fa1f f884 	uxth.w	r8, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004d2:	fb09 fa08 	mul.w	sl, r9, r8
 80004d6:	458a      	cmp	sl, r1
 80004d8:	fa02 f206 	lsl.w	r2, r2, r6
 80004dc:	fa00 f306 	lsl.w	r3, r0, r6
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x220>
 80004e2:	1861      	adds	r1, r4, r1
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d248      	bcs.n	800057c <__udivmoddi4+0x2a8>
 80004ea:	458a      	cmp	sl, r1
 80004ec:	d946      	bls.n	800057c <__udivmoddi4+0x2a8>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	4421      	add	r1, r4
 80004f4:	eba1 010a 	sub.w	r1, r1, sl
 80004f8:	b2bf      	uxth	r7, r7
 80004fa:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000502:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45b8      	cmp	r8, r7
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x24a>
 800050e:	19e7      	adds	r7, r4, r7
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d22e      	bcs.n	8000574 <__udivmoddi4+0x2a0>
 8000516:	45b8      	cmp	r8, r7
 8000518:	d92c      	bls.n	8000574 <__udivmoddi4+0x2a0>
 800051a:	3802      	subs	r0, #2
 800051c:	4427      	add	r7, r4
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba7 0708 	sub.w	r7, r7, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454f      	cmp	r7, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	4649      	mov	r1, r9
 8000530:	d31a      	bcc.n	8000568 <__udivmoddi4+0x294>
 8000532:	d017      	beq.n	8000564 <__udivmoddi4+0x290>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x27a>
 8000536:	ebb3 020e 	subs.w	r2, r3, lr
 800053a:	eb67 0701 	sbc.w	r7, r7, r1
 800053e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000542:	40f2      	lsrs	r2, r6
 8000544:	ea4c 0202 	orr.w	r2, ip, r2
 8000548:	40f7      	lsrs	r7, r6
 800054a:	e9c5 2700 	strd	r2, r7, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	462e      	mov	r6, r5
 8000558:	4628      	mov	r0, r5
 800055a:	e70b      	b.n	8000374 <__udivmoddi4+0xa0>
 800055c:	4606      	mov	r6, r0
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fd      	b.n	8000360 <__udivmoddi4+0x8c>
 8000564:	4543      	cmp	r3, r8
 8000566:	d2e5      	bcs.n	8000534 <__udivmoddi4+0x260>
 8000568:	ebb8 0e02 	subs.w	lr, r8, r2
 800056c:	eb69 0104 	sbc.w	r1, r9, r4
 8000570:	3801      	subs	r0, #1
 8000572:	e7df      	b.n	8000534 <__udivmoddi4+0x260>
 8000574:	4608      	mov	r0, r1
 8000576:	e7d2      	b.n	800051e <__udivmoddi4+0x24a>
 8000578:	4660      	mov	r0, ip
 800057a:	e78d      	b.n	8000498 <__udivmoddi4+0x1c4>
 800057c:	4681      	mov	r9, r0
 800057e:	e7b9      	b.n	80004f4 <__udivmoddi4+0x220>
 8000580:	4666      	mov	r6, ip
 8000582:	e775      	b.n	8000470 <__udivmoddi4+0x19c>
 8000584:	4630      	mov	r0, r6
 8000586:	e74a      	b.n	800041e <__udivmoddi4+0x14a>
 8000588:	f1ac 0c02 	sub.w	ip, ip, #2
 800058c:	4439      	add	r1, r7
 800058e:	e713      	b.n	80003b8 <__udivmoddi4+0xe4>
 8000590:	3802      	subs	r0, #2
 8000592:	443c      	add	r4, r7
 8000594:	e724      	b.n	80003e0 <__udivmoddi4+0x10c>
 8000596:	bf00      	nop

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
TaskHandle_t led3_handle;

TaskHandle_t volatile next_task_handle = NULL;

int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af02      	add	r7, sp, #8
	BaseType_t status;

	HAL_Init();
 80005a2:	f000 fb1b 	bl	8000bdc <HAL_Init>

	SystemClock_Config();
 80005a6:	f000 f871 	bl	800068c <SystemClock_Config>

	MX_GPIO_Init();
 80005aa:	f000 f8dd 	bl	8000768 <MX_GPIO_Init>

	/* Enable the CYCCNT counter */
	DWT_CTRL |= ( 1 << 0);
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <main+0xc4>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a2b      	ldr	r2, [pc, #172]	; (8000660 <main+0xc4>)
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6013      	str	r3, [r2, #0]

	/* Task 1 creation (LED 1) */
	status = xTaskCreate(led1_handler, "LED1_task", 200, NULL, 3, &led1_handle);
 80005ba:	4b2a      	ldr	r3, [pc, #168]	; (8000664 <main+0xc8>)
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2303      	movs	r3, #3
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	22c8      	movs	r2, #200	; 0xc8
 80005c6:	4928      	ldr	r1, [pc, #160]	; (8000668 <main+0xcc>)
 80005c8:	4828      	ldr	r0, [pc, #160]	; (800066c <main+0xd0>)
 80005ca:	f001 ff01 	bl	80023d0 <xTaskCreate>
 80005ce:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00a      	beq.n	80005ec <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005e8:	bf00      	nop
 80005ea:	e7fe      	b.n	80005ea <main+0x4e>

	next_task_handle = led1_handle;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <main+0xc8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a1f      	ldr	r2, [pc, #124]	; (8000670 <main+0xd4>)
 80005f2:	6013      	str	r3, [r2, #0]

	/* Task 2 creation (LED 2) */
	status = xTaskCreate(led2_handler, "LED2_task", 200, NULL, 2, &led2_handle);
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <main+0xd8>)
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2302      	movs	r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	22c8      	movs	r2, #200	; 0xc8
 8000600:	491d      	ldr	r1, [pc, #116]	; (8000678 <main+0xdc>)
 8000602:	481e      	ldr	r0, [pc, #120]	; (800067c <main+0xe0>)
 8000604:	f001 fee4 	bl	80023d0 <xTaskCreate>
 8000608:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d00a      	beq.n	8000626 <main+0x8a>
        __asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000614:	f383 8811 	msr	BASEPRI, r3
 8000618:	f3bf 8f6f 	isb	sy
 800061c:	f3bf 8f4f 	dsb	sy
 8000620:	607b      	str	r3, [r7, #4]
    }
 8000622:	bf00      	nop
 8000624:	e7fe      	b.n	8000624 <main+0x88>

	/* Task 3 creation (LED 3) */
	status = xTaskCreate(led3_handler, "LED3_task", 200, NULL, 1, &led3_handle);
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <main+0xe4>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2301      	movs	r3, #1
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	22c8      	movs	r2, #200	; 0xc8
 8000632:	4914      	ldr	r1, [pc, #80]	; (8000684 <main+0xe8>)
 8000634:	4814      	ldr	r0, [pc, #80]	; (8000688 <main+0xec>)
 8000636:	f001 fecb 	bl	80023d0 <xTaskCreate>
 800063a:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d00a      	beq.n	8000658 <main+0xbc>
        __asm volatile
 8000642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000646:	f383 8811 	msr	BASEPRI, r3
 800064a:	f3bf 8f6f 	isb	sy
 800064e:	f3bf 8f4f 	dsb	sy
 8000652:	603b      	str	r3, [r7, #0]
    }
 8000654:	bf00      	nop
 8000656:	e7fe      	b.n	8000656 <main+0xba>

	/* Start the scheduler */
	vTaskStartScheduler();
 8000658:	f002 f902 	bl	8002860 <vTaskStartScheduler>

	while (1)
 800065c:	e7fe      	b.n	800065c <main+0xc0>
 800065e:	bf00      	nop
 8000660:	e0001000 	.word	0xe0001000
 8000664:	20013330 	.word	0x20013330
 8000668:	0800568c 	.word	0x0800568c
 800066c:	080008d9 	.word	0x080008d9
 8000670:	20000030 	.word	0x20000030
 8000674:	20013338 	.word	0x20013338
 8000678:	08005698 	.word	0x08005698
 800067c:	08000931 	.word	0x08000931
 8000680:	20013334 	.word	0x20013334
 8000684:	080056a4 	.word	0x080056a4
 8000688:	08000989 	.word	0x08000989

0800068c <SystemClock_Config>:
	}

}

void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	2234      	movs	r2, #52	; 0x34
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f004 ffe2 	bl	8005664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <SystemClock_Config+0xd4>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a29      	ldr	r2, [pc, #164]	; (8000760 <SystemClock_Config+0xd4>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <SystemClock_Config+0xd4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006cc:	2300      	movs	r3, #0
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	4b24      	ldr	r3, [pc, #144]	; (8000764 <SystemClock_Config+0xd8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d8:	4a22      	ldr	r2, [pc, #136]	; (8000764 <SystemClock_Config+0xd8>)
 80006da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b20      	ldr	r3, [pc, #128]	; (8000764 <SystemClock_Config+0xd8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000700:	2310      	movs	r3, #16
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000704:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000708:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800070a:	2304      	movs	r3, #4
 800070c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4618      	mov	r0, r3
 800071c:	f001 f858 	bl	80017d0 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000726:	f000 f96b 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000736:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	2102      	movs	r1, #2
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fd58 	bl	80011fc <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000752:	f000 f955 	bl	8000a00 <Error_Handler>
  }
}
 8000756:	bf00      	nop
 8000758:	3750      	adds	r7, #80	; 0x50
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b48      	ldr	r3, [pc, #288]	; (80008a4 <MX_GPIO_Init+0x13c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a47      	ldr	r2, [pc, #284]	; (80008a4 <MX_GPIO_Init+0x13c>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b45      	ldr	r3, [pc, #276]	; (80008a4 <MX_GPIO_Init+0x13c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b41      	ldr	r3, [pc, #260]	; (80008a4 <MX_GPIO_Init+0x13c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a40      	ldr	r2, [pc, #256]	; (80008a4 <MX_GPIO_Init+0x13c>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b3e      	ldr	r3, [pc, #248]	; (80008a4 <MX_GPIO_Init+0x13c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b3a      	ldr	r3, [pc, #232]	; (80008a4 <MX_GPIO_Init+0x13c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a39      	ldr	r2, [pc, #228]	; (80008a4 <MX_GPIO_Init+0x13c>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b37      	ldr	r3, [pc, #220]	; (80008a4 <MX_GPIO_Init+0x13c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <MX_GPIO_Init+0x13c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a32      	ldr	r2, [pc, #200]	; (80008a4 <MX_GPIO_Init+0x13c>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <MX_GPIO_Init+0x13c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	482d      	ldr	r0, [pc, #180]	; (80008a8 <MX_GPIO_Init+0x140>)
 80007f4:	f000 fcaa 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4827      	ldr	r0, [pc, #156]	; (80008ac <MX_GPIO_Init+0x144>)
 8000810:	f000 fb08 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000814:	230c      	movs	r3, #12
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000824:	2307      	movs	r3, #7
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	481e      	ldr	r0, [pc, #120]	; (80008a8 <MX_GPIO_Init+0x140>)
 8000830:	f000 faf8 	bl	8000e24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000834:	2320      	movs	r3, #32
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	4817      	ldr	r0, [pc, #92]	; (80008a8 <MX_GPIO_Init+0x140>)
 800084c:	f000 faea 	bl	8000e24 <HAL_GPIO_Init>

  /* Configure LED tasks GPIO pins */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000850:	2301      	movs	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4810      	ldr	r0, [pc, #64]	; (80008a8 <MX_GPIO_Init+0x140>)
 8000868:	f000 fadc 	bl	8000e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800086c:	2302      	movs	r3, #2
 800086e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_GPIO_Init+0x140>)
 8000878:	f000 fad4 	bl	8000e24 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800087c:	2310      	movs	r3, #16
 800087e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	4808      	ldr	r0, [pc, #32]	; (80008a8 <MX_GPIO_Init+0x140>)
 8000888:	f000 facc 	bl	8000e24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2106      	movs	r1, #6
 8000890:	2028      	movs	r0, #40	; 0x28
 8000892:	f000 fa9d 	bl	8000dd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000896:	2028      	movs	r0, #40	; 0x28
 8000898:	f000 fab6 	bl	8000e08 <HAL_NVIC_EnableIRQ>

}
 800089c:	bf00      	nop
 800089e:	3728      	adds	r7, #40	; 0x28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40020800 	.word	0x40020800

080008b0 <button_interrupt_handler>:

void button_interrupt_handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af02      	add	r7, sp, #8
	xTaskNotifyFromISR(next_task_handle, 0, eNoAction, NULL);
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <button_interrupt_handler+0x24>)
 80008b8:	6818      	ldr	r0, [r3, #0]
 80008ba:	2300      	movs	r3, #0
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	2300      	movs	r3, #0
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2300      	movs	r3, #0
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	f002 fbf2 	bl	80030b0 <xTaskGenericNotifyFromISR>
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000030 	.word	0x20000030

080008d8 <led1_handler>:

static void led1_handler(void *parameters)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af02      	add	r7, sp, #8
 80008de:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80008e0:	2101      	movs	r1, #1
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <led1_handler+0x4c>)
 80008e4:	f000 fc4b 	bl	800117e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 80008e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ec:	9300      	str	r3, [sp, #0]
 80008ee:	2300      	movs	r3, #0
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	2000      	movs	r0, #0
 80008f6:	f002 fb53 	bl	8002fa0 <xTaskGenericNotifyWait>
 80008fa:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d1ee      	bne.n	80008e0 <led1_handler+0x8>
		{
			portENTER_CRITICAL();
 8000902:	f002 ff01 	bl	8003708 <vPortEnterCritical>
			next_task_handle = led2_handle;
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <led1_handler+0x50>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <led1_handler+0x54>)
 800090c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	2101      	movs	r1, #1
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <led1_handler+0x4c>)
 8000914:	f000 fc1a 	bl	800114c <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000918:	f002 ff26 	bl	8003768 <vPortExitCritical>
			vTaskDelete(NULL);
 800091c:	2000      	movs	r0, #0
 800091e:	f001 fef1 	bl	8002704 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000922:	e7dd      	b.n	80008e0 <led1_handler+0x8>
 8000924:	40020000 	.word	0x40020000
 8000928:	20013338 	.word	0x20013338
 800092c:	20000030 	.word	0x20000030

08000930 <led2_handler>:
		}
	}
}

static void led2_handler(void *parameters)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af02      	add	r7, sp, #8
 8000936:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000938:	2102      	movs	r1, #2
 800093a:	4810      	ldr	r0, [pc, #64]	; (800097c <led2_handler+0x4c>)
 800093c:	f000 fc1f 	bl	800117e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000940:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2300      	movs	r3, #0
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	2000      	movs	r0, #0
 800094e:	f002 fb27 	bl	8002fa0 <xTaskGenericNotifyWait>
 8000952:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d1ee      	bne.n	8000938 <led2_handler+0x8>
		{
			portENTER_CRITICAL();
 800095a:	f002 fed5 	bl	8003708 <vPortEnterCritical>
			next_task_handle = led3_handle;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <led2_handler+0x50>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <led2_handler+0x54>)
 8000964:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2102      	movs	r1, #2
 800096a:	4804      	ldr	r0, [pc, #16]	; (800097c <led2_handler+0x4c>)
 800096c:	f000 fbee 	bl	800114c <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000970:	f002 fefa 	bl	8003768 <vPortExitCritical>
			vTaskDelete(NULL);
 8000974:	2000      	movs	r0, #0
 8000976:	f001 fec5 	bl	8002704 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800097a:	e7dd      	b.n	8000938 <led2_handler+0x8>
 800097c:	40020000 	.word	0x40020000
 8000980:	20013334 	.word	0x20013334
 8000984:	20000030 	.word	0x20000030

08000988 <led3_handler>:
		}
	}
}

static void led3_handler(void *parameters)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af02      	add	r7, sp, #8
 800098e:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000990:	2110      	movs	r1, #16
 8000992:	4810      	ldr	r0, [pc, #64]	; (80009d4 <led3_handler+0x4c>)
 8000994:	f000 fbf3 	bl	800117e <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000998:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	2300      	movs	r3, #0
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2000      	movs	r0, #0
 80009a6:	f002 fafb 	bl	8002fa0 <xTaskGenericNotifyWait>
 80009aa:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d1ee      	bne.n	8000990 <led3_handler+0x8>
		{
			portENTER_CRITICAL();
 80009b2:	f002 fea9 	bl	8003708 <vPortEnterCritical>
			next_task_handle = NULL;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <led3_handler+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2110      	movs	r1, #16
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <led3_handler+0x4c>)
 80009c2:	f000 fbc3 	bl	800114c <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 80009c6:	f002 fecf 	bl	8003768 <vPortExitCritical>
			vTaskDelete(NULL);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f001 fe9a 	bl	8002704 <vTaskDelete>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80009d0:	e7de      	b.n	8000990 <led3_handler+0x8>
 80009d2:	bf00      	nop
 80009d4:	40020000 	.word	0x40020000
 80009d8:	20000030 	.word	0x20000030

080009dc <HAL_TIM_PeriodElapsedCallback>:
	}
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d101      	bne.n	80009f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009ee:	f000 f917 	bl	8000c20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40001000 	.word	0x40001000

08000a00 <Error_Handler>:

void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	6879      	ldr	r1, [r7, #4]
 8000a70:	2036      	movs	r0, #54	; 0x36
 8000a72:	f000 f9ad 	bl	8000dd0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a76:	2036      	movs	r0, #54	; 0x36
 8000a78:	f000 f9c6 	bl	8000e08 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <HAL_InitTick+0xa4>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	4a1e      	ldr	r2, [pc, #120]	; (8000b00 <HAL_InitTick+0xa4>)
 8000a86:	f043 0310 	orr.w	r3, r3, #16
 8000a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <HAL_InitTick+0xa4>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	f003 0310 	and.w	r3, r3, #16
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a98:	f107 0210 	add.w	r2, r7, #16
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fcb0 	bl	8001408 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000aa8:	f000 fc9a 	bl	80013e0 <HAL_RCC_GetPCLK1Freq>
 8000aac:	4603      	mov	r3, r0
 8000aae:	005b      	lsls	r3, r3, #1
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab4:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <HAL_InitTick+0xa8>)
 8000ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aba:	0c9b      	lsrs	r3, r3, #18
 8000abc:	3b01      	subs	r3, #1
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <HAL_InitTick+0xac>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <HAL_InitTick+0xb0>)
 8000ac4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_InitTick+0xac>)
 8000ac8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000acc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_InitTick+0xac>)
 8000ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_InitTick+0xac>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_InitTick+0xac>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <HAL_InitTick+0xac>)
 8000ae2:	f001 f913 	bl	8001d0c <HAL_TIM_Base_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d104      	bne.n	8000af6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000aec:	4806      	ldr	r0, [pc, #24]	; (8000b08 <HAL_InitTick+0xac>)
 8000aee:	f001 f967 	bl	8001dc0 <HAL_TIM_Base_Start_IT>
 8000af2:	4603      	mov	r3, r0
 8000af4:	e000      	b.n	8000af8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3730      	adds	r7, #48	; 0x30
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	431bde83 	.word	0x431bde83
 8000b08:	2001333c 	.word	0x2001333c
 8000b0c:	40001000 	.word	0x40001000

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	button_interrupt_handler();
 8000b40:	f7ff feb6 	bl	80008b0 <button_interrupt_handler>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b48:	f000 fb34 	bl	80011b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <TIM6_DAC_IRQHandler+0x10>)
 8000b56:	f001 f9a3 	bl	8001ea0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2001333c 	.word	0x2001333c

08000b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <SystemInit+0x20>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <SystemInit+0x20>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b8c:	480d      	ldr	r0, [pc, #52]	; (8000bc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b8e:	490e      	ldr	r1, [pc, #56]	; (8000bc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b90:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba4:	4c0b      	ldr	r4, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bb2:	f7ff ffd7 	bl	8000b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f004 fd15 	bl	80055e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bba:	f7ff fcef 	bl	800059c <main>
  bx  lr    
 8000bbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000bcc:	0800575c 	.word	0x0800575c
  ldr r2, =_sbss
 8000bd0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000bd4:	20013430 	.word	0x20013430

08000bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_Init+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0d      	ldr	r2, [pc, #52]	; (8000c1c <HAL_Init+0x40>)
 8000be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_Init+0x40>)
 8000bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_Init+0x40>)
 8000bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f8d8 	bl	8000dba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f7ff ff26 	bl	8000a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff fefc 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023c00 	.word	0x40023c00

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20013384 	.word	0x20013384

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20013384 	.word	0x20013384

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ff4c 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000de2:	f7ff ff61 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000de6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	68b9      	ldr	r1, [r7, #8]
 8000dec:	6978      	ldr	r0, [r7, #20]
 8000dee:	f7ff ffb1 	bl	8000d54 <NVIC_EncodePriority>
 8000df2:	4602      	mov	r2, r0
 8000df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff80 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff54 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	e165      	b.n	800110c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	f040 8154 	bne.w	8001106 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d005      	beq.n	8000e76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d130      	bne.n	8000ed8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eac:	2201      	movs	r2, #1
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	f003 0201 	and.w	r2, r3, #1
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d017      	beq.n	8000f14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d123      	bne.n	8000f68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	220f      	movs	r2, #15
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	691a      	ldr	r2, [r3, #16]
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	08da      	lsrs	r2, r3, #3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3208      	adds	r2, #8
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0203 	and.w	r2, r3, #3
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80ae 	beq.w	8001106 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	4b5d      	ldr	r3, [pc, #372]	; (8001124 <HAL_GPIO_Init+0x300>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a5c      	ldr	r2, [pc, #368]	; (8001124 <HAL_GPIO_Init+0x300>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b5a      	ldr	r3, [pc, #360]	; (8001124 <HAL_GPIO_Init+0x300>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fc6:	4a58      	ldr	r2, [pc, #352]	; (8001128 <HAL_GPIO_Init+0x304>)
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4f      	ldr	r2, [pc, #316]	; (800112c <HAL_GPIO_Init+0x308>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d025      	beq.n	800103e <HAL_GPIO_Init+0x21a>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4e      	ldr	r2, [pc, #312]	; (8001130 <HAL_GPIO_Init+0x30c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d01f      	beq.n	800103a <HAL_GPIO_Init+0x216>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4d      	ldr	r2, [pc, #308]	; (8001134 <HAL_GPIO_Init+0x310>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d019      	beq.n	8001036 <HAL_GPIO_Init+0x212>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4c      	ldr	r2, [pc, #304]	; (8001138 <HAL_GPIO_Init+0x314>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0x20e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4b      	ldr	r2, [pc, #300]	; (800113c <HAL_GPIO_Init+0x318>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00d      	beq.n	800102e <HAL_GPIO_Init+0x20a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4a      	ldr	r2, [pc, #296]	; (8001140 <HAL_GPIO_Init+0x31c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x206>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a49      	ldr	r2, [pc, #292]	; (8001144 <HAL_GPIO_Init+0x320>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_GPIO_Init+0x202>
 8001022:	2306      	movs	r3, #6
 8001024:	e00c      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 8001026:	2307      	movs	r3, #7
 8001028:	e00a      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 800102a:	2305      	movs	r3, #5
 800102c:	e008      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 800102e:	2304      	movs	r3, #4
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 8001032:	2303      	movs	r3, #3
 8001034:	e004      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 8001036:	2302      	movs	r3, #2
 8001038:	e002      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 800103a:	2301      	movs	r3, #1
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x21c>
 800103e:	2300      	movs	r3, #0
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	f002 0203 	and.w	r2, r2, #3
 8001046:	0092      	lsls	r2, r2, #2
 8001048:	4093      	lsls	r3, r2
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001050:	4935      	ldr	r1, [pc, #212]	; (8001128 <HAL_GPIO_Init+0x304>)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	089b      	lsrs	r3, r3, #2
 8001056:	3302      	adds	r3, #2
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105e:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <HAL_GPIO_Init+0x324>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001082:	4a31      	ldr	r2, [pc, #196]	; (8001148 <HAL_GPIO_Init+0x324>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <HAL_GPIO_Init+0x324>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ac:	4a26      	ldr	r2, [pc, #152]	; (8001148 <HAL_GPIO_Init+0x324>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <HAL_GPIO_Init+0x324>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <HAL_GPIO_Init+0x324>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <HAL_GPIO_Init+0x324>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a11      	ldr	r2, [pc, #68]	; (8001148 <HAL_GPIO_Init+0x324>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3301      	adds	r3, #1
 800110a:	61fb      	str	r3, [r7, #28]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	2b0f      	cmp	r3, #15
 8001110:	f67f ae96 	bls.w	8000e40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40013800 	.word	0x40013800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400
 8001134:	40020800 	.word	0x40020800
 8001138:	40020c00 	.word	0x40020c00
 800113c:	40021000 	.word	0x40021000
 8001140:	40021400 	.word	0x40021400
 8001144:	40021800 	.word	0x40021800
 8001148:	40013c00 	.word	0x40013c00

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001168:	e003      	b.n	8001172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	619a      	str	r2, [r3, #24]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800117e:	b480      	push	{r7}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	460b      	mov	r3, r1
 8001188:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001190:	887a      	ldrh	r2, [r7, #2]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4013      	ands	r3, r2
 8001196:	041a      	lsls	r2, r3, #16
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43d9      	mvns	r1, r3
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	400b      	ands	r3, r1
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f806 	bl	80011e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40013c00 	.word	0x40013c00

080011e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0cc      	b.n	80013aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001210:	4b68      	ldr	r3, [pc, #416]	; (80013b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d90c      	bls.n	8001238 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121e:	4b65      	ldr	r3, [pc, #404]	; (80013b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001226:	4b63      	ldr	r3, [pc, #396]	; (80013b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0b8      	b.n	80013aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d020      	beq.n	8001286 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001250:	4b59      	ldr	r3, [pc, #356]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4a58      	ldr	r2, [pc, #352]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800125a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001268:	4b53      	ldr	r3, [pc, #332]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	4a52      	ldr	r2, [pc, #328]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001272:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001274:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	494d      	ldr	r1, [pc, #308]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	4313      	orrs	r3, r2
 8001284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d044      	beq.n	800131c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d107      	bne.n	80012aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	4b47      	ldr	r3, [pc, #284]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d119      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e07f      	b.n	80013aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d003      	beq.n	80012ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	d107      	bne.n	80012ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ba:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e06f      	b.n	80013aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ca:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e067      	b.n	80013aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f023 0203 	bic.w	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4934      	ldr	r1, [pc, #208]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012ec:	f7ff fcac 	bl	8000c48 <HAL_GetTick>
 80012f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f2:	e00a      	b.n	800130a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f4:	f7ff fca8 	bl	8000c48 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001302:	4293      	cmp	r3, r2
 8001304:	d901      	bls.n	800130a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e04f      	b.n	80013aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130a:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 020c 	and.w	r2, r3, #12
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	429a      	cmp	r2, r3
 800131a:	d1eb      	bne.n	80012f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <HAL_RCC_ClockConfig+0x1b8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 030f 	and.w	r3, r3, #15
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d20c      	bcs.n	8001344 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <HAL_RCC_ClockConfig+0x1b8>)
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	d001      	beq.n	8001344 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e032      	b.n	80013aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b00      	cmp	r3, #0
 800134e:	d008      	beq.n	8001362 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	4916      	ldr	r1, [pc, #88]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 800135e:	4313      	orrs	r3, r2
 8001360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d009      	beq.n	8001382 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	490e      	ldr	r1, [pc, #56]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 800137e:	4313      	orrs	r3, r2
 8001380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001382:	f000 f873 	bl	800146c <HAL_RCC_GetSysClockFreq>
 8001386:	4602      	mov	r2, r0
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	490a      	ldr	r1, [pc, #40]	; (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	5ccb      	ldrb	r3, [r1, r3]
 8001396:	fa22 f303 	lsr.w	r3, r2, r3
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_RCC_ClockConfig+0x1c8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fb5a 	bl	8000a5c <HAL_InitTick>

  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023c00 	.word	0x40023c00
 80013b8:	40023800 	.word	0x40023800
 80013bc:	08005728 	.word	0x08005728
 80013c0:	20000000 	.word	0x20000000
 80013c4:	20000004 	.word	0x20000004

080013c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <HAL_RCC_GetHCLKFreq+0x14>)
 80013ce:	681b      	ldr	r3, [r3, #0]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000000 	.word	0x20000000

080013e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013e4:	f7ff fff0 	bl	80013c8 <HAL_RCC_GetHCLKFreq>
 80013e8:	4602      	mov	r2, r0
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	0a9b      	lsrs	r3, r3, #10
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	4903      	ldr	r1, [pc, #12]	; (8001404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013f6:	5ccb      	ldrb	r3, [r1, r3]
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800
 8001404:	08005738 	.word	0x08005738

08001408 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	220f      	movs	r2, #15
 8001416:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_RCC_GetClockConfig+0x5c>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	08db      	lsrs	r3, r3, #3
 8001442:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <HAL_RCC_GetClockConfig+0x60>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 020f 	and.w	r2, r3, #15
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	601a      	str	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40023c00 	.word	0x40023c00

0800146c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800146c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001470:	b088      	sub	sp, #32
 8001472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001488:	4bce      	ldr	r3, [pc, #824]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 030c 	and.w	r3, r3, #12
 8001490:	2b0c      	cmp	r3, #12
 8001492:	f200 818d 	bhi.w	80017b0 <HAL_RCC_GetSysClockFreq+0x344>
 8001496:	a201      	add	r2, pc, #4	; (adr r2, 800149c <HAL_RCC_GetSysClockFreq+0x30>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	080014d1 	.word	0x080014d1
 80014a0:	080017b1 	.word	0x080017b1
 80014a4:	080017b1 	.word	0x080017b1
 80014a8:	080017b1 	.word	0x080017b1
 80014ac:	080014d7 	.word	0x080014d7
 80014b0:	080017b1 	.word	0x080017b1
 80014b4:	080017b1 	.word	0x080017b1
 80014b8:	080017b1 	.word	0x080017b1
 80014bc:	080014dd 	.word	0x080014dd
 80014c0:	080017b1 	.word	0x080017b1
 80014c4:	080017b1 	.word	0x080017b1
 80014c8:	080017b1 	.word	0x080017b1
 80014cc:	08001651 	.word	0x08001651
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014d0:	4bbd      	ldr	r3, [pc, #756]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014d2:	61bb      	str	r3, [r7, #24]
       break;
 80014d4:	e16f      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014d6:	4bbd      	ldr	r3, [pc, #756]	; (80017cc <HAL_RCC_GetSysClockFreq+0x360>)
 80014d8:	61bb      	str	r3, [r7, #24]
      break;
 80014da:	e16c      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014dc:	4bb9      	ldr	r3, [pc, #740]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014e4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e6:	4bb7      	ldr	r3, [pc, #732]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d053      	beq.n	800159a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f2:	4bb4      	ldr	r3, [pc, #720]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	099b      	lsrs	r3, r3, #6
 80014f8:	461a      	mov	r2, r3
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001502:	f04f 0100 	mov.w	r1, #0
 8001506:	ea02 0400 	and.w	r4, r2, r0
 800150a:	603c      	str	r4, [r7, #0]
 800150c:	400b      	ands	r3, r1
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001514:	4620      	mov	r0, r4
 8001516:	4629      	mov	r1, r5
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	014b      	lsls	r3, r1, #5
 8001522:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001526:	0142      	lsls	r2, r0, #5
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	4623      	mov	r3, r4
 800152e:	1ac0      	subs	r0, r0, r3
 8001530:	462b      	mov	r3, r5
 8001532:	eb61 0103 	sbc.w	r1, r1, r3
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	f04f 0300 	mov.w	r3, #0
 800153e:	018b      	lsls	r3, r1, #6
 8001540:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001544:	0182      	lsls	r2, r0, #6
 8001546:	1a12      	subs	r2, r2, r0
 8001548:	eb63 0301 	sbc.w	r3, r3, r1
 800154c:	f04f 0000 	mov.w	r0, #0
 8001550:	f04f 0100 	mov.w	r1, #0
 8001554:	00d9      	lsls	r1, r3, #3
 8001556:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800155a:	00d0      	lsls	r0, r2, #3
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4621      	mov	r1, r4
 8001562:	1852      	adds	r2, r2, r1
 8001564:	4629      	mov	r1, r5
 8001566:	eb43 0101 	adc.w	r1, r3, r1
 800156a:	460b      	mov	r3, r1
 800156c:	f04f 0000 	mov.w	r0, #0
 8001570:	f04f 0100 	mov.w	r1, #0
 8001574:	0259      	lsls	r1, r3, #9
 8001576:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800157a:	0250      	lsls	r0, r2, #9
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	461a      	mov	r2, r3
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	f7fe fe8a 	bl	80002a4 <__aeabi_uldivmod>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4613      	mov	r3, r2
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	e04c      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800159a:	4b8a      	ldr	r3, [pc, #552]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	099b      	lsrs	r3, r3, #6
 80015a0:	461a      	mov	r2, r3
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80015aa:	f04f 0100 	mov.w	r1, #0
 80015ae:	ea02 0a00 	and.w	sl, r2, r0
 80015b2:	ea03 0b01 	and.w	fp, r3, r1
 80015b6:	4650      	mov	r0, sl
 80015b8:	4659      	mov	r1, fp
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	f04f 0300 	mov.w	r3, #0
 80015c2:	014b      	lsls	r3, r1, #5
 80015c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015c8:	0142      	lsls	r2, r0, #5
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	ebb0 000a 	subs.w	r0, r0, sl
 80015d2:	eb61 010b 	sbc.w	r1, r1, fp
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	018b      	lsls	r3, r1, #6
 80015e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80015e4:	0182      	lsls	r2, r0, #6
 80015e6:	1a12      	subs	r2, r2, r0
 80015e8:	eb63 0301 	sbc.w	r3, r3, r1
 80015ec:	f04f 0000 	mov.w	r0, #0
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	00d9      	lsls	r1, r3, #3
 80015f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80015fa:	00d0      	lsls	r0, r2, #3
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	eb12 020a 	adds.w	r2, r2, sl
 8001604:	eb43 030b 	adc.w	r3, r3, fp
 8001608:	f04f 0000 	mov.w	r0, #0
 800160c:	f04f 0100 	mov.w	r1, #0
 8001610:	0299      	lsls	r1, r3, #10
 8001612:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001616:	0290      	lsls	r0, r2, #10
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	461a      	mov	r2, r3
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	f7fe fe3c 	bl	80002a4 <__aeabi_uldivmod>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4613      	mov	r3, r2
 8001632:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001634:	4b63      	ldr	r3, [pc, #396]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	0c1b      	lsrs	r3, r3, #16
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	3301      	adds	r3, #1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	fbb2 f3f3 	udiv	r3, r2, r3
 800164c:	61bb      	str	r3, [r7, #24]
      break;
 800164e:	e0b2      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001650:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001658:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800165a:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d04d      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001666:	4b57      	ldr	r3, [pc, #348]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	099b      	lsrs	r3, r3, #6
 800166c:	461a      	mov	r2, r3
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001676:	f04f 0100 	mov.w	r1, #0
 800167a:	ea02 0800 	and.w	r8, r2, r0
 800167e:	ea03 0901 	and.w	r9, r3, r1
 8001682:	4640      	mov	r0, r8
 8001684:	4649      	mov	r1, r9
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	014b      	lsls	r3, r1, #5
 8001690:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001694:	0142      	lsls	r2, r0, #5
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	ebb0 0008 	subs.w	r0, r0, r8
 800169e:	eb61 0109 	sbc.w	r1, r1, r9
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	018b      	lsls	r3, r1, #6
 80016ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016b0:	0182      	lsls	r2, r0, #6
 80016b2:	1a12      	subs	r2, r2, r0
 80016b4:	eb63 0301 	sbc.w	r3, r3, r1
 80016b8:	f04f 0000 	mov.w	r0, #0
 80016bc:	f04f 0100 	mov.w	r1, #0
 80016c0:	00d9      	lsls	r1, r3, #3
 80016c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80016c6:	00d0      	lsls	r0, r2, #3
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	eb12 0208 	adds.w	r2, r2, r8
 80016d0:	eb43 0309 	adc.w	r3, r3, r9
 80016d4:	f04f 0000 	mov.w	r0, #0
 80016d8:	f04f 0100 	mov.w	r1, #0
 80016dc:	0259      	lsls	r1, r3, #9
 80016de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80016e2:	0250      	lsls	r0, r2, #9
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	461a      	mov	r2, r3
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	f7fe fdd6 	bl	80002a4 <__aeabi_uldivmod>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4613      	mov	r3, r2
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	e04a      	b.n	8001798 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001702:	4b30      	ldr	r3, [pc, #192]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	099b      	lsrs	r3, r3, #6
 8001708:	461a      	mov	r2, r3
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001712:	f04f 0100 	mov.w	r1, #0
 8001716:	ea02 0400 	and.w	r4, r2, r0
 800171a:	ea03 0501 	and.w	r5, r3, r1
 800171e:	4620      	mov	r0, r4
 8001720:	4629      	mov	r1, r5
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	014b      	lsls	r3, r1, #5
 800172c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001730:	0142      	lsls	r2, r0, #5
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	1b00      	subs	r0, r0, r4
 8001738:	eb61 0105 	sbc.w	r1, r1, r5
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	018b      	lsls	r3, r1, #6
 8001746:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800174a:	0182      	lsls	r2, r0, #6
 800174c:	1a12      	subs	r2, r2, r0
 800174e:	eb63 0301 	sbc.w	r3, r3, r1
 8001752:	f04f 0000 	mov.w	r0, #0
 8001756:	f04f 0100 	mov.w	r1, #0
 800175a:	00d9      	lsls	r1, r3, #3
 800175c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001760:	00d0      	lsls	r0, r2, #3
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	1912      	adds	r2, r2, r4
 8001768:	eb45 0303 	adc.w	r3, r5, r3
 800176c:	f04f 0000 	mov.w	r0, #0
 8001770:	f04f 0100 	mov.w	r1, #0
 8001774:	0299      	lsls	r1, r3, #10
 8001776:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800177a:	0290      	lsls	r0, r2, #10
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	461a      	mov	r2, r3
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	f7fe fd8a 	bl	80002a4 <__aeabi_uldivmod>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4613      	mov	r3, r2
 8001796:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x358>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	0f1b      	lsrs	r3, r3, #28
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	61bb      	str	r3, [r7, #24]
      break;
 80017ae:	e002      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80017b2:	61bb      	str	r3, [r7, #24]
      break;
 80017b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017b6:	69bb      	ldr	r3, [r7, #24]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	00f42400 	.word	0x00f42400
 80017cc:	007a1200 	.word	0x007a1200

080017d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e28d      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 8083 	beq.w	80018f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017f0:	4b94      	ldr	r3, [pc, #592]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 030c 	and.w	r3, r3, #12
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d019      	beq.n	8001830 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017fc:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001804:	2b08      	cmp	r3, #8
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001808:	4b8e      	ldr	r3, [pc, #568]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001814:	d00c      	beq.n	8001830 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001816:	4b8b      	ldr	r3, [pc, #556]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800181e:	2b0c      	cmp	r3, #12
 8001820:	d112      	bne.n	8001848 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001822:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800182e:	d10b      	bne.n	8001848 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	4b84      	ldr	r3, [pc, #528]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d05b      	beq.n	80018f4 <HAL_RCC_OscConfig+0x124>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d157      	bne.n	80018f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e25a      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001850:	d106      	bne.n	8001860 <HAL_RCC_OscConfig+0x90>
 8001852:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a7b      	ldr	r2, [pc, #492]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e01d      	b.n	800189c <HAL_RCC_OscConfig+0xcc>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0xb4>
 800186a:	4b76      	ldr	r3, [pc, #472]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a75      	ldr	r2, [pc, #468]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b73      	ldr	r3, [pc, #460]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a72      	ldr	r2, [pc, #456]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e00b      	b.n	800189c <HAL_RCC_OscConfig+0xcc>
 8001884:	4b6f      	ldr	r3, [pc, #444]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a6e      	ldr	r2, [pc, #440]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 800188a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b6c      	ldr	r3, [pc, #432]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a6b      	ldr	r2, [pc, #428]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d013      	beq.n	80018cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff f9d0 	bl	8000c48 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff f9cc 	bl	8000c48 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e21f      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018be:	4b61      	ldr	r3, [pc, #388]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0xdc>
 80018ca:	e014      	b.n	80018f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff f9bc 	bl	8000c48 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff f9b8 	bl	8000c48 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e20b      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x104>
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d06f      	beq.n	80019e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001902:	4b50      	ldr	r3, [pc, #320]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	2b00      	cmp	r3, #0
 800190c:	d017      	beq.n	800193e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800190e:	4b4d      	ldr	r3, [pc, #308]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001916:	2b08      	cmp	r3, #8
 8001918:	d105      	bne.n	8001926 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800191a:	4b4a      	ldr	r3, [pc, #296]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00b      	beq.n	800193e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800192e:	2b0c      	cmp	r3, #12
 8001930:	d11c      	bne.n	800196c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d116      	bne.n	800196c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193e:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d005      	beq.n	8001956 <HAL_RCC_OscConfig+0x186>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d001      	beq.n	8001956 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e1d3      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001956:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4937      	ldr	r1, [pc, #220]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196a:	e03a      	b.n	80019e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d020      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001974:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197a:	f7ff f965 	bl	8000c48 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001982:	f7ff f961 	bl	8000c48 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e1b4      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001994:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	4b28      	ldr	r3, [pc, #160]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4925      	ldr	r1, [pc, #148]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]
 80019b4:	e015      	b.n	80019e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b6:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff f944 	bl	8000c48 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c4:	f7ff f940 	bl	8000c48 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e193      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d6:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d036      	beq.n	8001a5c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d016      	beq.n	8001a24 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_RCC_OscConfig+0x27c>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fc:	f7ff f924 	bl	8000c48 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a04:	f7ff f920 	bl	8000c48 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e173      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_OscConfig+0x274>)
 8001a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x234>
 8001a22:	e01b      	b.n	8001a5c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_RCC_OscConfig+0x27c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2a:	f7ff f90d 	bl	8000c48 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a30:	e00e      	b.n	8001a50 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a32:	f7ff f909 	bl	8000c48 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d907      	bls.n	8001a50 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e15c      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
 8001a44:	40023800 	.word	0x40023800
 8001a48:	42470000 	.word	0x42470000
 8001a4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a50:	4b8a      	ldr	r3, [pc, #552]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1ea      	bne.n	8001a32 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 8097 	beq.w	8001b98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6e:	4b83      	ldr	r3, [pc, #524]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10f      	bne.n	8001a9a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	4b7f      	ldr	r3, [pc, #508]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a7e      	ldr	r2, [pc, #504]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8a:	4b7c      	ldr	r3, [pc, #496]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a96:	2301      	movs	r3, #1
 8001a98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9a:	4b79      	ldr	r3, [pc, #484]	; (8001c80 <HAL_RCC_OscConfig+0x4b0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d118      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aa6:	4b76      	ldr	r3, [pc, #472]	; (8001c80 <HAL_RCC_OscConfig+0x4b0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a75      	ldr	r2, [pc, #468]	; (8001c80 <HAL_RCC_OscConfig+0x4b0>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff f8c9 	bl	8000c48 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aba:	f7ff f8c5 	bl	8000c48 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e118      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	4b6c      	ldr	r3, [pc, #432]	; (8001c80 <HAL_RCC_OscConfig+0x4b0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0f0      	beq.n	8001aba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x31e>
 8001ae0:	4b66      	ldr	r3, [pc, #408]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae4:	4a65      	ldr	r2, [pc, #404]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6713      	str	r3, [r2, #112]	; 0x70
 8001aec:	e01c      	b.n	8001b28 <HAL_RCC_OscConfig+0x358>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x340>
 8001af6:	4b61      	ldr	r3, [pc, #388]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	4a60      	ldr	r2, [pc, #384]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	6713      	str	r3, [r2, #112]	; 0x70
 8001b02:	4b5e      	ldr	r3, [pc, #376]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b06:	4a5d      	ldr	r2, [pc, #372]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0e:	e00b      	b.n	8001b28 <HAL_RCC_OscConfig+0x358>
 8001b10:	4b5a      	ldr	r3, [pc, #360]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a59      	ldr	r2, [pc, #356]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1c:	4b57      	ldr	r3, [pc, #348]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	4a56      	ldr	r2, [pc, #344]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b22:	f023 0304 	bic.w	r3, r3, #4
 8001b26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d015      	beq.n	8001b5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7ff f88a 	bl	8000c48 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7ff f886 	bl	8000c48 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e0d7      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4e:	4b4b      	ldr	r3, [pc, #300]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0ee      	beq.n	8001b38 <HAL_RCC_OscConfig+0x368>
 8001b5a:	e014      	b.n	8001b86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff f874 	bl	8000c48 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b64:	f7ff f870 	bl	8000c48 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0c1      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7a:	4b40      	ldr	r3, [pc, #256]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1ee      	bne.n	8001b64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8c:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	4a3a      	ldr	r2, [pc, #232]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001b92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80ad 	beq.w	8001cfc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ba2:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d060      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d145      	bne.n	8001c42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_RCC_OscConfig+0x4b4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f844 	bl	8000c48 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc4:	f7ff f840 	bl	8000c48 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e093      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69da      	ldr	r2, [r3, #28]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	019b      	lsls	r3, r3, #6
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	085b      	lsrs	r3, r3, #1
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	041b      	lsls	r3, r3, #16
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	061b      	lsls	r3, r3, #24
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	071b      	lsls	r3, r3, #28
 8001c0e:	491b      	ldr	r1, [pc, #108]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <HAL_RCC_OscConfig+0x4b4>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff f815 	bl	8000c48 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c22:	f7ff f811 	bl	8000c48 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e064      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x452>
 8001c40:	e05c      	b.n	8001cfc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <HAL_RCC_OscConfig+0x4b4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7fe fffe 	bl	8000c48 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c50:	f7fe fffa 	bl	8000c48 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e04d      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_RCC_OscConfig+0x4ac>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x480>
 8001c6e:	e045      	b.n	8001cfc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e040      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000
 8001c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c88:	4b1f      	ldr	r3, [pc, #124]	; (8001d08 <HAL_RCC_OscConfig+0x538>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d030      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d129      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d122      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cb8:	4013      	ands	r3, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d119      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	085b      	lsrs	r3, r3, #1
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d10f      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e041      	b.n	8001da2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f839 	bl	8001daa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3304      	adds	r3, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f000 f9d8 	bl	8002100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d001      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e04e      	b.n	8001e76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a23      	ldr	r2, [pc, #140]	; (8001e84 <HAL_TIM_Base_Start_IT+0xc4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d022      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x80>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e02:	d01d      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x80>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1f      	ldr	r2, [pc, #124]	; (8001e88 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d018      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x80>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <HAL_TIM_Base_Start_IT+0xcc>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d013      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x80>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d00e      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x80>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a1b      	ldr	r2, [pc, #108]	; (8001e94 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d009      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x80>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d004      	beq.n	8001e40 <HAL_TIM_Base_Start_IT+0x80>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <HAL_TIM_Base_Start_IT+0xdc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d111      	bne.n	8001e64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d010      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0201 	orr.w	r2, r2, #1
 8001e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e62:	e007      	b.n	8001e74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40010000 	.word	0x40010000
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40000800 	.word	0x40000800
 8001e90:	40000c00 	.word	0x40000c00
 8001e94:	40010400 	.word	0x40010400
 8001e98:	40014000 	.word	0x40014000
 8001e9c:	40001800 	.word	0x40001800

08001ea0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d122      	bne.n	8001efc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d11b      	bne.n	8001efc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0202 	mvn.w	r2, #2
 8001ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8ee 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8e0 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f8f1 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d122      	bne.n	8001f50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d11b      	bne.n	8001f50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0204 	mvn.w	r2, #4
 8001f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2202      	movs	r2, #2
 8001f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8c4 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001f3c:	e005      	b.n	8001f4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8b6 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f8c7 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d122      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d11b      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0208 	mvn.w	r2, #8
 8001f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2204      	movs	r2, #4
 8001f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f89a 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001f90:	e005      	b.n	8001f9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f88c 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f89d 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	d122      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b10      	cmp	r3, #16
 8001fbe:	d11b      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0210 	mvn.w	r2, #16
 8001fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2208      	movs	r2, #8
 8001fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f870 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001fe4:	e005      	b.n	8001ff2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f862 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f873 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	d10e      	bne.n	8002024 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d107      	bne.n	8002024 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0201 	mvn.w	r2, #1
 800201c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fcdc 	bl	80009dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800202e:	2b80      	cmp	r3, #128	; 0x80
 8002030:	d10e      	bne.n	8002050 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203c:	2b80      	cmp	r3, #128	; 0x80
 800203e:	d107      	bne.n	8002050 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f902 	bl	8002254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205a:	2b40      	cmp	r3, #64	; 0x40
 800205c:	d10e      	bne.n	800207c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	2b40      	cmp	r3, #64	; 0x40
 800206a:	d107      	bne.n	800207c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f838 	bl	80020ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b20      	cmp	r3, #32
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b20      	cmp	r3, #32
 8002096:	d107      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0220 	mvn.w	r2, #32
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8cc 	bl	8002240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a40      	ldr	r2, [pc, #256]	; (8002214 <TIM_Base_SetConfig+0x114>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211e:	d00f      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a3d      	ldr	r2, [pc, #244]	; (8002218 <TIM_Base_SetConfig+0x118>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00b      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3c      	ldr	r2, [pc, #240]	; (800221c <TIM_Base_SetConfig+0x11c>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d007      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3b      	ldr	r2, [pc, #236]	; (8002220 <TIM_Base_SetConfig+0x120>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3a      	ldr	r2, [pc, #232]	; (8002224 <TIM_Base_SetConfig+0x124>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d108      	bne.n	8002152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2f      	ldr	r2, [pc, #188]	; (8002214 <TIM_Base_SetConfig+0x114>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002160:	d027      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2c      	ldr	r2, [pc, #176]	; (8002218 <TIM_Base_SetConfig+0x118>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d023      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2b      	ldr	r2, [pc, #172]	; (800221c <TIM_Base_SetConfig+0x11c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01f      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a2a      	ldr	r2, [pc, #168]	; (8002220 <TIM_Base_SetConfig+0x120>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a29      	ldr	r2, [pc, #164]	; (8002224 <TIM_Base_SetConfig+0x124>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d017      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a28      	ldr	r2, [pc, #160]	; (8002228 <TIM_Base_SetConfig+0x128>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a27      	ldr	r2, [pc, #156]	; (800222c <TIM_Base_SetConfig+0x12c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00f      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a26      	ldr	r2, [pc, #152]	; (8002230 <TIM_Base_SetConfig+0x130>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a25      	ldr	r2, [pc, #148]	; (8002234 <TIM_Base_SetConfig+0x134>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a24      	ldr	r2, [pc, #144]	; (8002238 <TIM_Base_SetConfig+0x138>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d003      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a23      	ldr	r2, [pc, #140]	; (800223c <TIM_Base_SetConfig+0x13c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d108      	bne.n	80021c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <TIM_Base_SetConfig+0x114>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d003      	beq.n	80021f8 <TIM_Base_SetConfig+0xf8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a0c      	ldr	r2, [pc, #48]	; (8002224 <TIM_Base_SetConfig+0x124>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d103      	bne.n	8002200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	615a      	str	r2, [r3, #20]
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40010000 	.word	0x40010000
 8002218:	40000400 	.word	0x40000400
 800221c:	40000800 	.word	0x40000800
 8002220:	40000c00 	.word	0x40000c00
 8002224:	40010400 	.word	0x40010400
 8002228:	40014000 	.word	0x40014000
 800222c:	40014400 	.word	0x40014400
 8002230:	40014800 	.word	0x40014800
 8002234:	40001800 	.word	0x40001800
 8002238:	40001c00 	.word	0x40001c00
 800223c:	40002000 	.word	0x40002000

08002240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f103 0208 	add.w	r2, r3, #8
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f04f 32ff 	mov.w	r2, #4294967295
 8002280:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f103 0208 	add.w	r2, r3, #8
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f103 0208 	add.w	r2, r3, #8
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022c2:	b480      	push	{r7}
 80022c4:	b085      	sub	sp, #20
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d103      	bne.n	800232a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	e00c      	b.n	8002344 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3308      	adds	r3, #8
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	e002      	b.n	8002338 <vListInsert+0x2e>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	429a      	cmp	r2, r3
 8002342:	d2f6      	bcs.n	8002332 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	601a      	str	r2, [r3, #0]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6892      	ldr	r2, [r2, #8]
 8002392:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6852      	ldr	r2, [r2, #4]
 800239c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d103      	bne.n	80023b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	1e5a      	subs	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08c      	sub	sp, #48	; 0x30
 80023d4:	af04      	add	r7, sp, #16
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f001 fab9 	bl	800395c <pvPortMalloc>
 80023ea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00e      	beq.n	8002410 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023f2:	2058      	movs	r0, #88	; 0x58
 80023f4:	f001 fab2 	bl	800395c <pvPortMalloc>
 80023f8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
 8002406:	e005      	b.n	8002414 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002408:	6978      	ldr	r0, [r7, #20]
 800240a:	f001 fb87 	bl	8003b1c <vPortFree>
 800240e:	e001      	b.n	8002414 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d013      	beq.n	8002442 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800241a:	88fa      	ldrh	r2, [r7, #6]
 800241c:	2300      	movs	r3, #0
 800241e:	9303      	str	r3, [sp, #12]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	9302      	str	r3, [sp, #8]
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f80e 	bl	8002452 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002436:	69f8      	ldr	r0, [r7, #28]
 8002438:	f000 f8b0 	bl	800259c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800243c:	2301      	movs	r3, #1
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	e002      	b.n	8002448 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
 8002446:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002448:	69bb      	ldr	r3, [r7, #24]
    }
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b088      	sub	sp, #32
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	461a      	mov	r2, r3
 800246a:	21a5      	movs	r1, #165	; 0xa5
 800246c:	f003 f8fa 	bl	8005664 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800247a:	3b01      	subs	r3, #1
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	f023 0307 	bic.w	r3, r3, #7
 8002488:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00a      	beq.n	80024aa <prvInitialiseNewTask+0x58>
        __asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	617b      	str	r3, [r7, #20]
    }
 80024a6:	bf00      	nop
 80024a8:	e7fe      	b.n	80024a8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01f      	beq.n	80024f0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	e012      	b.n	80024dc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	4413      	add	r3, r2
 80024bc:	7819      	ldrb	r1, [r3, #0]
 80024be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	4413      	add	r3, r2
 80024c4:	3334      	adds	r3, #52	; 0x34
 80024c6:	460a      	mov	r2, r1
 80024c8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	4413      	add	r3, r2
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3301      	adds	r3, #1
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	2b09      	cmp	r3, #9
 80024e0:	d9e9      	bls.n	80024b6 <prvInitialiseNewTask+0x64>
 80024e2:	e000      	b.n	80024e6 <prvInitialiseNewTask+0x94>
            {
                break;
 80024e4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024ee:	e003      	b.n	80024f8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d90a      	bls.n	8002514 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80024fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	613b      	str	r3, [r7, #16]
    }
 8002510:	bf00      	nop
 8002512:	e7fe      	b.n	8002512 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002516:	2b04      	cmp	r3, #4
 8002518:	d901      	bls.n	800251e <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800251a:	2304      	movs	r3, #4
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002528:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800252a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252c:	2200      	movs	r2, #0
 800252e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	3304      	adds	r3, #4
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff feb7 	bl	80022a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	3318      	adds	r3, #24
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff feb2 	bl	80022a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002548:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	f1c3 0205 	rsb	r2, r3, #5
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	3350      	adds	r3, #80	; 0x50
 800255e:	2204      	movs	r2, #4
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f003 f87e 	bl	8005664 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	3354      	adds	r3, #84	; 0x54
 800256c:	2201      	movs	r2, #1
 800256e:	2100      	movs	r1, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f003 f877 	bl	8005664 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	68f9      	ldr	r1, [r7, #12]
 800257a:	69b8      	ldr	r0, [r7, #24]
 800257c:	f000 ff92 	bl	80034a4 <pxPortInitialiseStack>
 8002580:	4602      	mov	r2, r0
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d002      	beq.n	8002592 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800258c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002590:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002592:	bf00      	nop
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800259c:	b5b0      	push	{r4, r5, r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80025a4:	f001 f8b0 	bl	8003708 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80025a8:	4b4f      	ldr	r3, [pc, #316]	; (80026e8 <prvAddNewTaskToReadyList+0x14c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	3301      	adds	r3, #1
 80025ae:	4a4e      	ldr	r2, [pc, #312]	; (80026e8 <prvAddNewTaskToReadyList+0x14c>)
 80025b0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80025b2:	4b4e      	ldr	r3, [pc, #312]	; (80026ec <prvAddNewTaskToReadyList+0x150>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80025ba:	4a4c      	ldr	r2, [pc, #304]	; (80026ec <prvAddNewTaskToReadyList+0x150>)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025c0:	4b49      	ldr	r3, [pc, #292]	; (80026e8 <prvAddNewTaskToReadyList+0x14c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d110      	bne.n	80025ea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80025c8:	f000 fc50 	bl	8002e6c <prvInitialiseTaskLists>
 80025cc:	e00d      	b.n	80025ea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80025ce:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <prvAddNewTaskToReadyList+0x154>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025d6:	4b45      	ldr	r3, [pc, #276]	; (80026ec <prvAddNewTaskToReadyList+0x150>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d802      	bhi.n	80025ea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80025e4:	4a41      	ldr	r2, [pc, #260]	; (80026ec <prvAddNewTaskToReadyList+0x150>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80025ea:	4b42      	ldr	r3, [pc, #264]	; (80026f4 <prvAddNewTaskToReadyList+0x158>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3301      	adds	r3, #1
 80025f0:	4a40      	ldr	r2, [pc, #256]	; (80026f4 <prvAddNewTaskToReadyList+0x158>)
 80025f2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025f4:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <prvAddNewTaskToReadyList+0x158>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d016      	beq.n	8002630 <prvAddNewTaskToReadyList+0x94>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4618      	mov	r0, r3
 8002606:	f002 fd7f 	bl	8005108 <SEGGER_SYSVIEW_OnTaskCreate>
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	461d      	mov	r5, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	461c      	mov	r4, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	1ae3      	subs	r3, r4, r3
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	462b      	mov	r3, r5
 800262c:	f001 fb94 	bl	8003d58 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4618      	mov	r0, r3
 8002634:	f002 fdec 	bl	8005210 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263c:	2201      	movs	r2, #1
 800263e:	409a      	lsls	r2, r3
 8002640:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <prvAddNewTaskToReadyList+0x15c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4313      	orrs	r3, r2
 8002646:	4a2c      	ldr	r2, [pc, #176]	; (80026f8 <prvAddNewTaskToReadyList+0x15c>)
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264e:	492b      	ldr	r1, [pc, #172]	; (80026fc <prvAddNewTaskToReadyList+0x160>)
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	3304      	adds	r3, #4
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	609a      	str	r2, [r3, #8]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	3204      	adds	r2, #4
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	1d1a      	adds	r2, r3, #4
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4a1b      	ldr	r2, [pc, #108]	; (80026fc <prvAddNewTaskToReadyList+0x160>)
 800268e:	441a      	add	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	615a      	str	r2, [r3, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002698:	4918      	ldr	r1, [pc, #96]	; (80026fc <prvAddNewTaskToReadyList+0x160>)
 800269a:	4613      	mov	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	1c59      	adds	r1, r3, #1
 80026a8:	4814      	ldr	r0, [pc, #80]	; (80026fc <prvAddNewTaskToReadyList+0x160>)
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4403      	add	r3, r0
 80026b4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80026b6:	f001 f857 	bl	8003768 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <prvAddNewTaskToReadyList+0x154>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00e      	beq.n	80026e0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <prvAddNewTaskToReadyList+0x150>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d207      	bcs.n	80026e0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <prvAddNewTaskToReadyList+0x164>)
 80026d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bdb0      	pop	{r4, r5, r7, pc}
 80026e8:	2000010c 	.word	0x2000010c
 80026ec:	20000034 	.word	0x20000034
 80026f0:	20000118 	.word	0x20000118
 80026f4:	20000128 	.word	0x20000128
 80026f8:	20000114 	.word	0x20000114
 80026fc:	20000038 	.word	0x20000038
 8002700:	e000ed04 	.word	0xe000ed04

08002704 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800270c:	f000 fffc 	bl	8003708 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <vTaskDelete+0x18>
 8002716:	4b48      	ldr	r3, [pc, #288]	; (8002838 <vTaskDelete+0x134>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	e000      	b.n	800271e <vTaskDelete+0x1a>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	3304      	adds	r3, #4
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff fe29 	bl	800237c <uxListRemove>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d115      	bne.n	800275c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002734:	4941      	ldr	r1, [pc, #260]	; (800283c <vTaskDelete+0x138>)
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <vTaskDelete+0x58>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	2201      	movs	r2, #1
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43da      	mvns	r2, r3
 8002752:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <vTaskDelete+0x13c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4013      	ands	r3, r2
 8002758:	4a39      	ldr	r2, [pc, #228]	; (8002840 <vTaskDelete+0x13c>)
 800275a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	2b00      	cmp	r3, #0
 8002762:	d004      	beq.n	800276e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3318      	adds	r3, #24
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fe07 	bl	800237c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800276e:	4b35      	ldr	r3, [pc, #212]	; (8002844 <vTaskDelete+0x140>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3301      	adds	r3, #1
 8002774:	4a33      	ldr	r2, [pc, #204]	; (8002844 <vTaskDelete+0x140>)
 8002776:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002778:	4b2f      	ldr	r3, [pc, #188]	; (8002838 <vTaskDelete+0x134>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	429a      	cmp	r2, r3
 8002780:	d118      	bne.n	80027b4 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3304      	adds	r3, #4
 8002786:	4619      	mov	r1, r3
 8002788:	482f      	ldr	r0, [pc, #188]	; (8002848 <vTaskDelete+0x144>)
 800278a:	f7ff fd9a 	bl	80022c2 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800278e:	4b2f      	ldr	r3, [pc, #188]	; (800284c <vTaskDelete+0x148>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	4a2d      	ldr	r2, [pc, #180]	; (800284c <vTaskDelete+0x148>)
 8002796:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4618      	mov	r0, r3
 800279c:	f002 fdda 	bl	8005354 <SEGGER_SYSVIEW_ShrinkId>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4619      	mov	r1, r3
 80027a4:	2022      	movs	r0, #34	; 0x22
 80027a6:	f001 ff9d 	bl	80046e4 <SEGGER_SYSVIEW_RecordU32>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f001 fb3b 	bl	8003e28 <SYSVIEW_DeleteTask>
 80027b2:	e013      	b.n	80027dc <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 80027b4:	4b26      	ldr	r3, [pc, #152]	; (8002850 <vTaskDelete+0x14c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	4a25      	ldr	r2, [pc, #148]	; (8002850 <vTaskDelete+0x14c>)
 80027bc:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f002 fdc7 	bl	8005354 <SEGGER_SYSVIEW_ShrinkId>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4619      	mov	r1, r3
 80027ca:	2022      	movs	r0, #34	; 0x22
 80027cc:	f001 ff8a 	bl	80046e4 <SEGGER_SYSVIEW_RecordU32>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f001 fb28 	bl	8003e28 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 80027d8:	f000 fbc6 	bl	8002f68 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 80027dc:	f000 ffc4 	bl	8003768 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 80027e0:	4b15      	ldr	r3, [pc, #84]	; (8002838 <vTaskDelete+0x134>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d002      	beq.n	80027f0 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fbac 	bl	8002f48 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <vTaskDelete+0x150>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01b      	beq.n	8002830 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <vTaskDelete+0x134>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d116      	bne.n	8002830 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <vTaskDelete+0x154>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <vTaskDelete+0x11c>
        __asm volatile
 800280a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280e:	f383 8811 	msr	BASEPRI, r3
 8002812:	f3bf 8f6f 	isb	sy
 8002816:	f3bf 8f4f 	dsb	sy
 800281a:	60bb      	str	r3, [r7, #8]
    }
 800281c:	bf00      	nop
 800281e:	e7fe      	b.n	800281e <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002820:	4b0e      	ldr	r3, [pc, #56]	; (800285c <vTaskDelete+0x158>)
 8002822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002830:	bf00      	nop
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000034 	.word	0x20000034
 800283c:	20000038 	.word	0x20000038
 8002840:	20000114 	.word	0x20000114
 8002844:	20000128 	.word	0x20000128
 8002848:	200000e0 	.word	0x200000e0
 800284c:	200000f4 	.word	0x200000f4
 8002850:	2000010c 	.word	0x2000010c
 8002854:	20000118 	.word	0x20000118
 8002858:	20000134 	.word	0x20000134
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <vTaskStartScheduler+0x98>)
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	2300      	movs	r3, #0
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	2300      	movs	r3, #0
 8002870:	2282      	movs	r2, #130	; 0x82
 8002872:	4922      	ldr	r1, [pc, #136]	; (80028fc <vTaskStartScheduler+0x9c>)
 8002874:	4822      	ldr	r0, [pc, #136]	; (8002900 <vTaskStartScheduler+0xa0>)
 8002876:	f7ff fdab 	bl	80023d0 <xTaskCreate>
 800287a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d124      	bne.n	80028cc <vTaskStartScheduler+0x6c>
        __asm volatile
 8002882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002886:	f383 8811 	msr	BASEPRI, r3
 800288a:	f3bf 8f6f 	isb	sy
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	60bb      	str	r3, [r7, #8]
    }
 8002894:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <vTaskStartScheduler+0xa4>)
 8002898:	f04f 32ff 	mov.w	r2, #4294967295
 800289c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <vTaskStartScheduler+0xa8>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <vTaskStartScheduler+0xac>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80028aa:	4b19      	ldr	r3, [pc, #100]	; (8002910 <vTaskStartScheduler+0xb0>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <vTaskStartScheduler+0x98>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d102      	bne.n	80028bc <vTaskStartScheduler+0x5c>
 80028b6:	f002 fc0b 	bl	80050d0 <SEGGER_SYSVIEW_OnIdle>
 80028ba:	e004      	b.n	80028c6 <vTaskStartScheduler+0x66>
 80028bc:	4b14      	ldr	r3, [pc, #80]	; (8002910 <vTaskStartScheduler+0xb0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f002 fc63 	bl	800518c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80028c6:	f000 fe7d 	bl	80035c4 <xPortStartScheduler>
 80028ca:	e00e      	b.n	80028ea <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d10a      	bne.n	80028ea <vTaskStartScheduler+0x8a>
        __asm volatile
 80028d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d8:	f383 8811 	msr	BASEPRI, r3
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	f3bf 8f4f 	dsb	sy
 80028e4:	607b      	str	r3, [r7, #4]
    }
 80028e6:	bf00      	nop
 80028e8:	e7fe      	b.n	80028e8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <vTaskStartScheduler+0xb4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000130 	.word	0x20000130
 80028fc:	080056b0 	.word	0x080056b0
 8002900:	08002e3d 	.word	0x08002e3d
 8002904:	2000012c 	.word	0x2000012c
 8002908:	20000118 	.word	0x20000118
 800290c:	20000110 	.word	0x20000110
 8002910:	20000034 	.word	0x20000034
 8002914:	2000000c 	.word	0x2000000c

08002918 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <vTaskSuspendAll+0x18>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	4a03      	ldr	r2, [pc, #12]	; (8002930 <vTaskSuspendAll+0x18>)
 8002924:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	20000134 	.word	0x20000134

08002934 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002942:	4b73      	ldr	r3, [pc, #460]	; (8002b10 <xTaskResumeAll+0x1dc>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10a      	bne.n	8002960 <xTaskResumeAll+0x2c>
        __asm volatile
 800294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	607b      	str	r3, [r7, #4]
    }
 800295c:	bf00      	nop
 800295e:	e7fe      	b.n	800295e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002960:	f000 fed2 	bl	8003708 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002964:	4b6a      	ldr	r3, [pc, #424]	; (8002b10 <xTaskResumeAll+0x1dc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3b01      	subs	r3, #1
 800296a:	4a69      	ldr	r2, [pc, #420]	; (8002b10 <xTaskResumeAll+0x1dc>)
 800296c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800296e:	4b68      	ldr	r3, [pc, #416]	; (8002b10 <xTaskResumeAll+0x1dc>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 80c4 	bne.w	8002b00 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002978:	4b66      	ldr	r3, [pc, #408]	; (8002b14 <xTaskResumeAll+0x1e0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80bf 	beq.w	8002b00 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002982:	e08e      	b.n	8002aa2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002984:	4b64      	ldr	r3, [pc, #400]	; (8002b18 <xTaskResumeAll+0x1e4>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	6a12      	ldr	r2, [r2, #32]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	69d2      	ldr	r2, [r2, #28]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3318      	adds	r3, #24
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d103      	bne.n	80029ba <xTaskResumeAll+0x86>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	6a1a      	ldr	r2, [r3, #32]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	2200      	movs	r2, #0
 80029be:	629a      	str	r2, [r3, #40]	; 0x28
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1e5a      	subs	r2, r3, #1
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	68d2      	ldr	r2, [r2, #12]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	69fa      	ldr	r2, [r7, #28]
 80029e0:	6892      	ldr	r2, [r2, #8]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	3304      	adds	r3, #4
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d103      	bne.n	80029f8 <xTaskResumeAll+0xc4>
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2200      	movs	r2, #0
 80029fc:	615a      	str	r2, [r3, #20]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	1e5a      	subs	r2, r3, #1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f002 fc00 	bl	8005210 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	2201      	movs	r2, #1
 8002a16:	409a      	lsls	r2, r3
 8002a18:	4b40      	ldr	r3, [pc, #256]	; (8002b1c <xTaskResumeAll+0x1e8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	4a3f      	ldr	r2, [pc, #252]	; (8002b1c <xTaskResumeAll+0x1e8>)
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a26:	493e      	ldr	r1, [pc, #248]	; (8002b20 <xTaskResumeAll+0x1ec>)
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	3304      	adds	r3, #4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	609a      	str	r2, [r3, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	3204      	adds	r2, #4
 8002a4e:	605a      	str	r2, [r3, #4]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	1d1a      	adds	r2, r3, #4
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4a2e      	ldr	r2, [pc, #184]	; (8002b20 <xTaskResumeAll+0x1ec>)
 8002a66:	441a      	add	r2, r3
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	615a      	str	r2, [r3, #20]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a70:	492b      	ldr	r1, [pc, #172]	; (8002b20 <xTaskResumeAll+0x1ec>)
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	1c59      	adds	r1, r3, #1
 8002a80:	4827      	ldr	r0, [pc, #156]	; (8002b20 <xTaskResumeAll+0x1ec>)
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4403      	add	r3, r0
 8002a8c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <xTaskResumeAll+0x1f0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d302      	bcc.n	8002aa2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002a9c:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <xTaskResumeAll+0x1f4>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <xTaskResumeAll+0x1e4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f47f af6c 	bne.w	8002984 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ab2:	f000 fa59 	bl	8002f68 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <xTaskResumeAll+0x1f8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d010      	beq.n	8002ae4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ac2:	f000 f837 	bl	8002b34 <xTaskIncrementTick>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <xTaskResumeAll+0x1f4>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f1      	bne.n	8002ac2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002ade:	4b13      	ldr	r3, [pc, #76]	; (8002b2c <xTaskResumeAll+0x1f8>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <xTaskResumeAll+0x1f4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002aec:	2301      	movs	r3, #1
 8002aee:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <xTaskResumeAll+0x1fc>)
 8002af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b00:	f000 fe32 	bl	8003768 <vPortExitCritical>

    return xAlreadyYielded;
 8002b04:	69bb      	ldr	r3, [r7, #24]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000134 	.word	0x20000134
 8002b14:	2000010c 	.word	0x2000010c
 8002b18:	200000cc 	.word	0x200000cc
 8002b1c:	20000114 	.word	0x20000114
 8002b20:	20000038 	.word	0x20000038
 8002b24:	20000034 	.word	0x20000034
 8002b28:	20000120 	.word	0x20000120
 8002b2c:	2000011c 	.word	0x2000011c
 8002b30:	e000ed04 	.word	0xe000ed04

08002b34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	; 0x28
 8002b38:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b3e:	4b7f      	ldr	r3, [pc, #508]	; (8002d3c <xTaskIncrementTick+0x208>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 80f0 	bne.w	8002d28 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b48:	4b7d      	ldr	r3, [pc, #500]	; (8002d40 <xTaskIncrementTick+0x20c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002b50:	4a7b      	ldr	r2, [pc, #492]	; (8002d40 <xTaskIncrementTick+0x20c>)
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d120      	bne.n	8002b9e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002b5c:	4b79      	ldr	r3, [pc, #484]	; (8002d44 <xTaskIncrementTick+0x210>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <xTaskIncrementTick+0x48>
        __asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	607b      	str	r3, [r7, #4]
    }
 8002b78:	bf00      	nop
 8002b7a:	e7fe      	b.n	8002b7a <xTaskIncrementTick+0x46>
 8002b7c:	4b71      	ldr	r3, [pc, #452]	; (8002d44 <xTaskIncrementTick+0x210>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	4b71      	ldr	r3, [pc, #452]	; (8002d48 <xTaskIncrementTick+0x214>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6f      	ldr	r2, [pc, #444]	; (8002d44 <xTaskIncrementTick+0x210>)
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4a6f      	ldr	r2, [pc, #444]	; (8002d48 <xTaskIncrementTick+0x214>)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	4b6e      	ldr	r3, [pc, #440]	; (8002d4c <xTaskIncrementTick+0x218>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	4a6d      	ldr	r2, [pc, #436]	; (8002d4c <xTaskIncrementTick+0x218>)
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	f000 f9e5 	bl	8002f68 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b9e:	4b6c      	ldr	r3, [pc, #432]	; (8002d50 <xTaskIncrementTick+0x21c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a3a      	ldr	r2, [r7, #32]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	f0c0 80aa 	bcc.w	8002cfe <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002baa:	4b66      	ldr	r3, [pc, #408]	; (8002d44 <xTaskIncrementTick+0x210>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bb4:	4b66      	ldr	r3, [pc, #408]	; (8002d50 <xTaskIncrementTick+0x21c>)
 8002bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bba:	601a      	str	r2, [r3, #0]
                    break;
 8002bbc:	e09f      	b.n	8002cfe <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bbe:	4b61      	ldr	r3, [pc, #388]	; (8002d44 <xTaskIncrementTick+0x210>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002bce:	6a3a      	ldr	r2, [r7, #32]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d203      	bcs.n	8002bde <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002bd6:	4a5e      	ldr	r2, [pc, #376]	; (8002d50 <xTaskIncrementTick+0x21c>)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002bdc:	e08f      	b.n	8002cfe <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	68d2      	ldr	r2, [r2, #12]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	6892      	ldr	r2, [r2, #8]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d103      	bne.n	8002c0c <xTaskIncrementTick+0xd8>
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	605a      	str	r2, [r3, #4]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	615a      	str	r2, [r3, #20]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	1e5a      	subs	r2, r3, #1
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01e      	beq.n	8002c62 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	6a12      	ldr	r2, [r2, #32]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	69d2      	ldr	r2, [r2, #28]
 8002c3c:	605a      	str	r2, [r3, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	3318      	adds	r3, #24
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d103      	bne.n	8002c52 <xTaskIncrementTick+0x11e>
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	6a1a      	ldr	r2, [r3, #32]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2200      	movs	r2, #0
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	1e5a      	subs	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f002 fad3 	bl	8005210 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	2201      	movs	r2, #1
 8002c70:	409a      	lsls	r2, r3
 8002c72:	4b38      	ldr	r3, [pc, #224]	; (8002d54 <xTaskIncrementTick+0x220>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	4a36      	ldr	r2, [pc, #216]	; (8002d54 <xTaskIncrementTick+0x220>)
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c80:	4935      	ldr	r1, [pc, #212]	; (8002d58 <xTaskIncrementTick+0x224>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	60da      	str	r2, [r3, #12]
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	3204      	adds	r2, #4
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	1d1a      	adds	r2, r3, #4
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <xTaskIncrementTick+0x224>)
 8002cc0:	441a      	add	r2, r3
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	615a      	str	r2, [r3, #20]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cca:	4923      	ldr	r1, [pc, #140]	; (8002d58 <xTaskIncrementTick+0x224>)
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	1c59      	adds	r1, r3, #1
 8002cda:	481f      	ldr	r0, [pc, #124]	; (8002d58 <xTaskIncrementTick+0x224>)
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4403      	add	r3, r0
 8002ce6:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <xTaskIncrementTick+0x228>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	f4ff af59 	bcc.w	8002baa <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cfc:	e755      	b.n	8002baa <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cfe:	4b17      	ldr	r3, [pc, #92]	; (8002d5c <xTaskIncrementTick+0x228>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d04:	4914      	ldr	r1, [pc, #80]	; (8002d58 <xTaskIncrementTick+0x224>)
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d901      	bls.n	8002d1a <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002d16:	2301      	movs	r3, #1
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <xTaskIncrementTick+0x22c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002d22:	2301      	movs	r3, #1
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
 8002d26:	e004      	b.n	8002d32 <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d28:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <xTaskIncrementTick+0x230>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <xTaskIncrementTick+0x230>)
 8002d30:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3728      	adds	r7, #40	; 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000134 	.word	0x20000134
 8002d40:	20000110 	.word	0x20000110
 8002d44:	200000c4 	.word	0x200000c4
 8002d48:	200000c8 	.word	0x200000c8
 8002d4c:	20000124 	.word	0x20000124
 8002d50:	2000012c 	.word	0x2000012c
 8002d54:	20000114 	.word	0x20000114
 8002d58:	20000038 	.word	0x20000038
 8002d5c:	20000034 	.word	0x20000034
 8002d60:	20000120 	.word	0x20000120
 8002d64:	2000011c 	.word	0x2000011c

08002d68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d6e:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <vTaskSwitchContext+0xbc>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002d76:	4b2c      	ldr	r3, [pc, #176]	; (8002e28 <vTaskSwitchContext+0xc0>)
 8002d78:	2201      	movs	r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002d7c:	e04d      	b.n	8002e1a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002d7e:	4b2a      	ldr	r3, [pc, #168]	; (8002e28 <vTaskSwitchContext+0xc0>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d84:	4b29      	ldr	r3, [pc, #164]	; (8002e2c <vTaskSwitchContext+0xc4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	fab3 f383 	clz	r3, r3
 8002d90:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002d92:	7afb      	ldrb	r3, [r7, #11]
 8002d94:	f1c3 031f 	rsb	r3, r3, #31
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	4925      	ldr	r1, [pc, #148]	; (8002e30 <vTaskSwitchContext+0xc8>)
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	607b      	str	r3, [r7, #4]
    }
 8002dc0:	bf00      	nop
 8002dc2:	e7fe      	b.n	8002dc2 <vTaskSwitchContext+0x5a>
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4a18      	ldr	r2, [pc, #96]	; (8002e30 <vTaskSwitchContext+0xc8>)
 8002dd0:	4413      	add	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	3308      	adds	r3, #8
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d104      	bne.n	8002df4 <vTaskSwitchContext+0x8c>
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	4a0e      	ldr	r2, [pc, #56]	; (8002e34 <vTaskSwitchContext+0xcc>)
 8002dfc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <vTaskSwitchContext+0xcc>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	4b0d      	ldr	r3, [pc, #52]	; (8002e38 <vTaskSwitchContext+0xd0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d102      	bne.n	8002e10 <vTaskSwitchContext+0xa8>
 8002e0a:	f002 f961 	bl	80050d0 <SEGGER_SYSVIEW_OnIdle>
}
 8002e0e:	e004      	b.n	8002e1a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <vTaskSwitchContext+0xcc>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f002 f9b9 	bl	800518c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002e1a:	bf00      	nop
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000134 	.word	0x20000134
 8002e28:	20000120 	.word	0x20000120
 8002e2c:	20000114 	.word	0x20000114
 8002e30:	20000038 	.word	0x20000038
 8002e34:	20000034 	.word	0x20000034
 8002e38:	20000130 	.word	0x20000130

08002e3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e44:	f000 f852 	bl	8002eec <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <prvIdleTask+0x28>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d9f9      	bls.n	8002e44 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <prvIdleTask+0x2c>)
 8002e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	f3bf 8f4f 	dsb	sy
 8002e5c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e60:	e7f0      	b.n	8002e44 <prvIdleTask+0x8>
 8002e62:	bf00      	nop
 8002e64:	20000038 	.word	0x20000038
 8002e68:	e000ed04 	.word	0xe000ed04

08002e6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e72:	2300      	movs	r3, #0
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	e00c      	b.n	8002e92 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4a12      	ldr	r2, [pc, #72]	; (8002ecc <prvInitialiseTaskLists+0x60>)
 8002e84:	4413      	add	r3, r2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f9ee 	bl	8002268 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d9ef      	bls.n	8002e78 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e98:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <prvInitialiseTaskLists+0x64>)
 8002e9a:	f7ff f9e5 	bl	8002268 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e9e:	480d      	ldr	r0, [pc, #52]	; (8002ed4 <prvInitialiseTaskLists+0x68>)
 8002ea0:	f7ff f9e2 	bl	8002268 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002ea4:	480c      	ldr	r0, [pc, #48]	; (8002ed8 <prvInitialiseTaskLists+0x6c>)
 8002ea6:	f7ff f9df 	bl	8002268 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002eaa:	480c      	ldr	r0, [pc, #48]	; (8002edc <prvInitialiseTaskLists+0x70>)
 8002eac:	f7ff f9dc 	bl	8002268 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002eb0:	480b      	ldr	r0, [pc, #44]	; (8002ee0 <prvInitialiseTaskLists+0x74>)
 8002eb2:	f7ff f9d9 	bl	8002268 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <prvInitialiseTaskLists+0x78>)
 8002eb8:	4a05      	ldr	r2, [pc, #20]	; (8002ed0 <prvInitialiseTaskLists+0x64>)
 8002eba:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <prvInitialiseTaskLists+0x7c>)
 8002ebe:	4a05      	ldr	r2, [pc, #20]	; (8002ed4 <prvInitialiseTaskLists+0x68>)
 8002ec0:	601a      	str	r2, [r3, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000038 	.word	0x20000038
 8002ed0:	2000009c 	.word	0x2000009c
 8002ed4:	200000b0 	.word	0x200000b0
 8002ed8:	200000cc 	.word	0x200000cc
 8002edc:	200000e0 	.word	0x200000e0
 8002ee0:	200000f8 	.word	0x200000f8
 8002ee4:	200000c4 	.word	0x200000c4
 8002ee8:	200000c8 	.word	0x200000c8

08002eec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ef2:	e019      	b.n	8002f28 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002ef4:	f000 fc08 	bl	8003708 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ef8:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <prvCheckTasksWaitingTermination+0x50>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fa39 	bl	800237c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002f0a:	4b0d      	ldr	r3, [pc, #52]	; (8002f40 <prvCheckTasksWaitingTermination+0x54>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <prvCheckTasksWaitingTermination+0x54>)
 8002f12:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <prvCheckTasksWaitingTermination+0x58>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <prvCheckTasksWaitingTermination+0x58>)
 8002f1c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002f1e:	f000 fc23 	bl	8003768 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f810 	bl	8002f48 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <prvCheckTasksWaitingTermination+0x58>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e1      	bne.n	8002ef4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200000e0 	.word	0x200000e0
 8002f40:	2000010c 	.word	0x2000010c
 8002f44:	200000f4 	.word	0x200000f4

08002f48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fde1 	bl	8003b1c <vPortFree>
                vPortFree( pxTCB );
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 fdde 	bl	8003b1c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <prvResetNextTaskUnblockTime+0x30>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d104      	bne.n	8002f80 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f76:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <prvResetNextTaskUnblockTime+0x34>)
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f7e:	e005      	b.n	8002f8c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <prvResetNextTaskUnblockTime+0x30>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a04      	ldr	r2, [pc, #16]	; (8002f9c <prvResetNextTaskUnblockTime+0x34>)
 8002f8a:	6013      	str	r3, [r2, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	200000c4 	.word	0x200000c4
 8002f9c:	2000012c 	.word	0x2000012c

08002fa0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af02      	add	r7, sp, #8
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	613b      	str	r3, [r7, #16]
    }
 8002fc6:	bf00      	nop
 8002fc8:	e7fe      	b.n	8002fc8 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002fca:	f000 fb9d 	bl	8003708 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002fce:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <xTaskGenericNotifyWait+0x108>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3354      	adds	r3, #84	; 0x54
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d022      	beq.n	8003026 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002fe0:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <xTaskGenericNotifyWait+0x108>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	3214      	adds	r2, #20
 8002fe8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	43d2      	mvns	r2, r2
 8002ff0:	4011      	ands	r1, r2
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	3214      	adds	r2, #20
 8002ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002ffa:	4b2b      	ldr	r3, [pc, #172]	; (80030a8 <xTaskGenericNotifyWait+0x108>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4413      	add	r3, r2
 8003002:	3354      	adds	r3, #84	; 0x54
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800300e:	2101      	movs	r1, #1
 8003010:	6a38      	ldr	r0, [r7, #32]
 8003012:	f000 f9bb 	bl	800338c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003016:	4b25      	ldr	r3, [pc, #148]	; (80030ac <xTaskGenericNotifyWait+0x10c>)
 8003018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003026:	f000 fb9f 	bl	8003768 <vPortExitCritical>

        taskENTER_CRITICAL();
 800302a:	f000 fb6d 	bl	8003708 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	2040      	movs	r0, #64	; 0x40
 800303c:	f001 fbe8 	bl	8004810 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <xTaskGenericNotifyWait+0x108>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	3214      	adds	r2, #20
 800304e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003056:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <xTaskGenericNotifyWait+0x108>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	3354      	adds	r3, #84	; 0x54
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d002      	beq.n	800306e <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	e00e      	b.n	800308c <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800306e:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <xTaskGenericNotifyWait+0x108>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	3214      	adds	r2, #20
 8003076:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	43d2      	mvns	r2, r2
 800307e:	4011      	ands	r1, r2
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	3214      	adds	r2, #20
 8003084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003088:	2301      	movs	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <xTaskGenericNotifyWait+0x108>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4413      	add	r3, r2
 8003094:	3354      	adds	r3, #84	; 0x54
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800309a:	f000 fb65 	bl	8003768 <vPortExitCritical>

        return xReturn;
 800309e:	697b      	ldr	r3, [r7, #20]
    }
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000034 	.word	0x20000034
 80030ac:	e000ed04 	.word	0xe000ed04

080030b0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b094      	sub	sp, #80	; 0x50
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80030be:	2301      	movs	r3, #1
 80030c0:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80030f6:	bf00      	nop
 80030f8:	e7fe      	b.n	80030f8 <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030fa:	f000 fbef 	bl	80038dc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003102:	f3ef 8211 	mrs	r2, BASEPRI
 8003106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	623a      	str	r2, [r7, #32]
 8003118:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800311a:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800311c:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800311e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	3214      	adds	r2, #20
 800312a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800312e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003130:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4413      	add	r3, r2
 8003138:	3354      	adds	r3, #84	; 0x54
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4413      	add	r3, r2
 8003146:	3354      	adds	r3, #84	; 0x54
 8003148:	2202      	movs	r2, #2
 800314a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d83b      	bhi.n	80031ca <xTaskGenericNotifyFromISR+0x11a>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <xTaskGenericNotifyFromISR+0xa8>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	080031e9 	.word	0x080031e9
 800315c:	0800316d 	.word	0x0800316d
 8003160:	08003189 	.word	0x08003189
 8003164:	080031a1 	.word	0x080031a1
 8003168:	080031af 	.word	0x080031af
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800316c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	3214      	adds	r2, #20
 8003172:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	ea42 0103 	orr.w	r1, r2, r3
 800317c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	3214      	adds	r2, #20
 8003182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003186:	e032      	b.n	80031ee <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	3214      	adds	r2, #20
 800318e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003192:	1c59      	adds	r1, r3, #1
 8003194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	3214      	adds	r2, #20
 800319a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800319e:	e026      	b.n	80031ee <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80031a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	3214      	adds	r2, #20
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80031ac:	e01f      	b.n	80031ee <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80031ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d006      	beq.n	80031c4 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80031b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	3214      	adds	r2, #20
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80031c2:	e014      	b.n	80031ee <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 80031c8:	e011      	b.n	80031ee <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80031ca:	4b69      	ldr	r3, [pc, #420]	; (8003370 <xTaskGenericNotifyFromISR+0x2c0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	61bb      	str	r3, [r7, #24]
    }
 80031e4:	bf00      	nop
 80031e6:	e7fe      	b.n	80031e6 <xTaskGenericNotifyFromISR+0x136>
                    break;
 80031e8:	bf00      	nop
 80031ea:	e000      	b.n	80031ee <xTaskGenericNotifyFromISR+0x13e>
                    break;
 80031ec:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 80031ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f0:	4618      	mov	r0, r3
 80031f2:	f002 f8af 	bl	8005354 <SEGGER_SYSVIEW_ShrinkId>
 80031f6:	78f9      	ldrb	r1, [r7, #3]
 80031f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031fc:	9201      	str	r2, [sp, #4]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	460b      	mov	r3, r1
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4601      	mov	r1, r0
 8003206:	203f      	movs	r0, #63	; 0x3f
 8003208:	f001 fb94 	bl	8004934 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800320c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003210:	2b01      	cmp	r3, #1
 8003212:	f040 80a2 	bne.w	800335a <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	617b      	str	r3, [r7, #20]
    }
 8003230:	bf00      	nop
 8003232:	e7fe      	b.n	8003232 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003234:	4b4f      	ldr	r3, [pc, #316]	; (8003374 <xTaskGenericNotifyFromISR+0x2c4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d162      	bne.n	8003302 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800323c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	633b      	str	r3, [r7, #48]	; 0x30
 8003242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003248:	68d2      	ldr	r2, [r2, #12]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003252:	6892      	ldr	r2, [r2, #8]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800325c:	3304      	adds	r3, #4
 800325e:	429a      	cmp	r2, r3
 8003260:	d103      	bne.n	800326a <xTaskGenericNotifyFromISR+0x1ba>
 8003262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800326c:	2200      	movs	r2, #0
 800326e:	615a      	str	r2, [r3, #20]
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	1e5a      	subs	r2, r3, #1
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800327a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327c:	4618      	mov	r0, r3
 800327e:	f001 ffc7 	bl	8005210 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	2201      	movs	r2, #1
 8003288:	409a      	lsls	r2, r3
 800328a:	4b3b      	ldr	r3, [pc, #236]	; (8003378 <xTaskGenericNotifyFromISR+0x2c8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	4a39      	ldr	r2, [pc, #228]	; (8003378 <xTaskGenericNotifyFromISR+0x2c8>)
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003298:	4938      	ldr	r1, [pc, #224]	; (800337c <xTaskGenericNotifyFromISR+0x2cc>)
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	3304      	adds	r3, #4
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b6:	60da      	str	r2, [r3, #12]
 80032b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032be:	3204      	adds	r2, #4
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032c4:	1d1a      	adds	r2, r3, #4
 80032c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4a29      	ldr	r2, [pc, #164]	; (800337c <xTaskGenericNotifyFromISR+0x2cc>)
 80032d8:	441a      	add	r2, r3
 80032da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032dc:	615a      	str	r2, [r3, #20]
 80032de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e2:	4926      	ldr	r1, [pc, #152]	; (800337c <xTaskGenericNotifyFromISR+0x2cc>)
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	1c59      	adds	r1, r3, #1
 80032f2:	4822      	ldr	r0, [pc, #136]	; (800337c <xTaskGenericNotifyFromISR+0x2cc>)
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4403      	add	r3, r0
 80032fe:	6019      	str	r1, [r3, #0]
 8003300:	e01b      	b.n	800333a <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003302:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <xTaskGenericNotifyFromISR+0x2d0>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	637b      	str	r3, [r7, #52]	; 0x34
 8003308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800330a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800330c:	61da      	str	r2, [r3, #28]
 800330e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003314:	621a      	str	r2, [r3, #32]
 8003316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800331c:	3218      	adds	r2, #24
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003322:	f103 0218 	add.w	r2, r3, #24
 8003326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003328:	609a      	str	r2, [r3, #8]
 800332a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332c:	4a14      	ldr	r2, [pc, #80]	; (8003380 <xTaskGenericNotifyFromISR+0x2d0>)
 800332e:	629a      	str	r2, [r3, #40]	; 0x28
 8003330:	4b13      	ldr	r3, [pc, #76]	; (8003380 <xTaskGenericNotifyFromISR+0x2d0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3301      	adds	r3, #1
 8003336:	4a12      	ldr	r2, [pc, #72]	; (8003380 <xTaskGenericNotifyFromISR+0x2d0>)
 8003338:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800333a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800333c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333e:	4b11      	ldr	r3, [pc, #68]	; (8003384 <xTaskGenericNotifyFromISR+0x2d4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	429a      	cmp	r2, r3
 8003346:	d908      	bls.n	800335a <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800334e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003350:	2201      	movs	r2, #1
 8003352:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <xTaskGenericNotifyFromISR+0x2d8>)
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003364:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003368:	4618      	mov	r0, r3
 800336a:	3748      	adds	r7, #72	; 0x48
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20000110 	.word	0x20000110
 8003374:	20000134 	.word	0x20000134
 8003378:	20000114 	.word	0x20000114
 800337c:	20000038 	.word	0x20000038
 8003380:	200000cc 	.word	0x200000cc
 8003384:	20000034 	.word	0x20000034
 8003388:	20000120 	.word	0x20000120

0800338c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003396:	4b3c      	ldr	r3, [pc, #240]	; (8003488 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800339c:	4b3b      	ldr	r3, [pc, #236]	; (800348c <prvAddCurrentTaskToDelayedList+0x100>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3304      	adds	r3, #4
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe ffea 	bl	800237c <uxListRemove>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10b      	bne.n	80033c6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <prvAddCurrentTaskToDelayedList+0x100>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	2201      	movs	r2, #1
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43da      	mvns	r2, r3
 80033bc:	4b34      	ldr	r3, [pc, #208]	; (8003490 <prvAddCurrentTaskToDelayedList+0x104>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4013      	ands	r3, r2
 80033c2:	4a33      	ldr	r2, [pc, #204]	; (8003490 <prvAddCurrentTaskToDelayedList+0x104>)
 80033c4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d124      	bne.n	8003418 <prvAddCurrentTaskToDelayedList+0x8c>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d021      	beq.n	8003418 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d4:	4b2f      	ldr	r3, [pc, #188]	; (8003494 <prvAddCurrentTaskToDelayedList+0x108>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	4b2c      	ldr	r3, [pc, #176]	; (800348c <prvAddCurrentTaskToDelayedList+0x100>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	4b2a      	ldr	r3, [pc, #168]	; (800348c <prvAddCurrentTaskToDelayedList+0x100>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	6892      	ldr	r2, [r2, #8]
 80033ea:	60da      	str	r2, [r3, #12]
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <prvAddCurrentTaskToDelayedList+0x100>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	3204      	adds	r2, #4
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	4b24      	ldr	r3, [pc, #144]	; (800348c <prvAddCurrentTaskToDelayedList+0x100>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	1d1a      	adds	r2, r3, #4
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	4b22      	ldr	r3, [pc, #136]	; (800348c <prvAddCurrentTaskToDelayedList+0x100>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a23      	ldr	r2, [pc, #140]	; (8003494 <prvAddCurrentTaskToDelayedList+0x108>)
 8003408:	615a      	str	r2, [r3, #20]
 800340a:	4b22      	ldr	r3, [pc, #136]	; (8003494 <prvAddCurrentTaskToDelayedList+0x108>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	3301      	adds	r3, #1
 8003410:	4a20      	ldr	r2, [pc, #128]	; (8003494 <prvAddCurrentTaskToDelayedList+0x108>)
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003416:	e032      	b.n	800347e <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4413      	add	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003420:	4b1a      	ldr	r3, [pc, #104]	; (800348c <prvAddCurrentTaskToDelayedList+0x100>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	429a      	cmp	r2, r3
 800342e:	d20f      	bcs.n	8003450 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003430:	4b16      	ldr	r3, [pc, #88]	; (800348c <prvAddCurrentTaskToDelayedList+0x100>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2104      	movs	r1, #4
 8003436:	4618      	mov	r0, r3
 8003438:	f001 ff2c 	bl	8005294 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800343c:	4b16      	ldr	r3, [pc, #88]	; (8003498 <prvAddCurrentTaskToDelayedList+0x10c>)
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b12      	ldr	r3, [pc, #72]	; (800348c <prvAddCurrentTaskToDelayedList+0x100>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3304      	adds	r3, #4
 8003446:	4619      	mov	r1, r3
 8003448:	4610      	mov	r0, r2
 800344a:	f7fe ff5e 	bl	800230a <vListInsert>
}
 800344e:	e016      	b.n	800347e <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003450:	4b0e      	ldr	r3, [pc, #56]	; (800348c <prvAddCurrentTaskToDelayedList+0x100>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2104      	movs	r1, #4
 8003456:	4618      	mov	r0, r3
 8003458:	f001 ff1c 	bl	8005294 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800345c:	4b0f      	ldr	r3, [pc, #60]	; (800349c <prvAddCurrentTaskToDelayedList+0x110>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b0a      	ldr	r3, [pc, #40]	; (800348c <prvAddCurrentTaskToDelayedList+0x100>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	3304      	adds	r3, #4
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f7fe ff4e 	bl	800230a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <prvAddCurrentTaskToDelayedList+0x114>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	429a      	cmp	r2, r3
 8003476:	d202      	bcs.n	800347e <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8003478:	4a09      	ldr	r2, [pc, #36]	; (80034a0 <prvAddCurrentTaskToDelayedList+0x114>)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6013      	str	r3, [r2, #0]
}
 800347e:	bf00      	nop
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000110 	.word	0x20000110
 800348c:	20000034 	.word	0x20000034
 8003490:	20000114 	.word	0x20000114
 8003494:	200000f8 	.word	0x200000f8
 8003498:	200000c8 	.word	0x200000c8
 800349c:	200000c4 	.word	0x200000c4
 80034a0:	2000012c 	.word	0x2000012c

080034a4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3b04      	subs	r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3b04      	subs	r3, #4
 80034c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f023 0201 	bic.w	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3b04      	subs	r3, #4
 80034d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80034d4:	4a0c      	ldr	r2, [pc, #48]	; (8003508 <pxPortInitialiseStack+0x64>)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3b14      	subs	r3, #20
 80034de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3b04      	subs	r3, #4
 80034ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f06f 0202 	mvn.w	r2, #2
 80034f2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	3b20      	subs	r3, #32
 80034f8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80034fa:	68fb      	ldr	r3, [r7, #12]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3714      	adds	r7, #20
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	0800350d 	.word	0x0800350d

0800350c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <prvTaskExitError+0x54>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d00a      	beq.n	8003536 <prvTaskExitError+0x2a>
        __asm volatile
 8003520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	60fb      	str	r3, [r7, #12]
    }
 8003532:	bf00      	nop
 8003534:	e7fe      	b.n	8003534 <prvTaskExitError+0x28>
        __asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	60bb      	str	r3, [r7, #8]
    }
 8003548:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800354a:	bf00      	nop
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0fc      	beq.n	800354c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003552:	bf00      	nop
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	20000010 	.word	0x20000010
	...

08003570 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003570:	4b07      	ldr	r3, [pc, #28]	; (8003590 <pxCurrentTCBConst2>)
 8003572:	6819      	ldr	r1, [r3, #0]
 8003574:	6808      	ldr	r0, [r1, #0]
 8003576:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800357a:	f380 8809 	msr	PSP, r0
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f04f 0000 	mov.w	r0, #0
 8003586:	f380 8811 	msr	BASEPRI, r0
 800358a:	4770      	bx	lr
 800358c:	f3af 8000 	nop.w

08003590 <pxCurrentTCBConst2>:
 8003590:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003594:	bf00      	nop
 8003596:	bf00      	nop

08003598 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003598:	4808      	ldr	r0, [pc, #32]	; (80035bc <prvPortStartFirstTask+0x24>)
 800359a:	6800      	ldr	r0, [r0, #0]
 800359c:	6800      	ldr	r0, [r0, #0]
 800359e:	f380 8808 	msr	MSP, r0
 80035a2:	f04f 0000 	mov.w	r0, #0
 80035a6:	f380 8814 	msr	CONTROL, r0
 80035aa:	b662      	cpsie	i
 80035ac:	b661      	cpsie	f
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	df00      	svc	0
 80035b8:	bf00      	nop
 80035ba:	0000      	.short	0x0000
 80035bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop

080035c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80035ca:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <xPortStartScheduler+0x120>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a46      	ldr	r2, [pc, #280]	; (80036e8 <xPortStartScheduler+0x124>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d10a      	bne.n	80035ea <xPortStartScheduler+0x26>
        __asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	613b      	str	r3, [r7, #16]
    }
 80035e6:	bf00      	nop
 80035e8:	e7fe      	b.n	80035e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80035ea:	4b3e      	ldr	r3, [pc, #248]	; (80036e4 <xPortStartScheduler+0x120>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a3f      	ldr	r2, [pc, #252]	; (80036ec <xPortStartScheduler+0x128>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d10a      	bne.n	800360a <xPortStartScheduler+0x46>
        __asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	60fb      	str	r3, [r7, #12]
    }
 8003606:	bf00      	nop
 8003608:	e7fe      	b.n	8003608 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800360a:	4b39      	ldr	r3, [pc, #228]	; (80036f0 <xPortStartScheduler+0x12c>)
 800360c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	22ff      	movs	r2, #255	; 0xff
 800361a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <xPortStartScheduler+0x130>)
 8003630:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003632:	4b31      	ldr	r3, [pc, #196]	; (80036f8 <xPortStartScheduler+0x134>)
 8003634:	2207      	movs	r2, #7
 8003636:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003638:	e009      	b.n	800364e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800363a:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <xPortStartScheduler+0x134>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3b01      	subs	r3, #1
 8003640:	4a2d      	ldr	r2, [pc, #180]	; (80036f8 <xPortStartScheduler+0x134>)
 8003642:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	b2db      	uxtb	r3, r3
 800364c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003656:	2b80      	cmp	r3, #128	; 0x80
 8003658:	d0ef      	beq.n	800363a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800365a:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <xPortStartScheduler+0x134>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f1c3 0307 	rsb	r3, r3, #7
 8003662:	2b04      	cmp	r3, #4
 8003664:	d00a      	beq.n	800367c <xPortStartScheduler+0xb8>
        __asm volatile
 8003666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	60bb      	str	r3, [r7, #8]
    }
 8003678:	bf00      	nop
 800367a:	e7fe      	b.n	800367a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800367c:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <xPortStartScheduler+0x134>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	4a1d      	ldr	r2, [pc, #116]	; (80036f8 <xPortStartScheduler+0x134>)
 8003684:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003686:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <xPortStartScheduler+0x134>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800368e:	4a1a      	ldr	r2, [pc, #104]	; (80036f8 <xPortStartScheduler+0x134>)
 8003690:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800369a:	4b18      	ldr	r3, [pc, #96]	; (80036fc <xPortStartScheduler+0x138>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a17      	ldr	r2, [pc, #92]	; (80036fc <xPortStartScheduler+0x138>)
 80036a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80036a6:	4b15      	ldr	r3, [pc, #84]	; (80036fc <xPortStartScheduler+0x138>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a14      	ldr	r2, [pc, #80]	; (80036fc <xPortStartScheduler+0x138>)
 80036ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80036b2:	f000 f8e3 	bl	800387c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80036b6:	4b12      	ldr	r3, [pc, #72]	; (8003700 <xPortStartScheduler+0x13c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80036bc:	f000 f902 	bl	80038c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80036c0:	4b10      	ldr	r3, [pc, #64]	; (8003704 <xPortStartScheduler+0x140>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0f      	ldr	r2, [pc, #60]	; (8003704 <xPortStartScheduler+0x140>)
 80036c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80036cc:	f7ff ff64 	bl	8003598 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80036d0:	f7ff fb4a 	bl	8002d68 <vTaskSwitchContext>
    prvTaskExitError();
 80036d4:	f7ff ff1a 	bl	800350c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	e000ed00 	.word	0xe000ed00
 80036e8:	410fc271 	.word	0x410fc271
 80036ec:	410fc270 	.word	0x410fc270
 80036f0:	e000e400 	.word	0xe000e400
 80036f4:	20000138 	.word	0x20000138
 80036f8:	2000013c 	.word	0x2000013c
 80036fc:	e000ed20 	.word	0xe000ed20
 8003700:	20000010 	.word	0x20000010
 8003704:	e000ef34 	.word	0xe000ef34

08003708 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
        __asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	607b      	str	r3, [r7, #4]
    }
 8003720:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003722:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <vPortEnterCritical+0x58>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3301      	adds	r3, #1
 8003728:	4a0d      	ldr	r2, [pc, #52]	; (8003760 <vPortEnterCritical+0x58>)
 800372a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800372c:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <vPortEnterCritical+0x58>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d10f      	bne.n	8003754 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <vPortEnterCritical+0x5c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <vPortEnterCritical+0x4c>
        __asm volatile
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	603b      	str	r3, [r7, #0]
    }
 8003750:	bf00      	nop
 8003752:	e7fe      	b.n	8003752 <vPortEnterCritical+0x4a>
    }
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	20000010 	.word	0x20000010
 8003764:	e000ed04 	.word	0xe000ed04

08003768 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <vPortExitCritical+0x50>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10a      	bne.n	800378c <vPortExitCritical+0x24>
        __asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	607b      	str	r3, [r7, #4]
    }
 8003788:	bf00      	nop
 800378a:	e7fe      	b.n	800378a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800378c:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <vPortExitCritical+0x50>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3b01      	subs	r3, #1
 8003792:	4a09      	ldr	r2, [pc, #36]	; (80037b8 <vPortExitCritical+0x50>)
 8003794:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <vPortExitCritical+0x50>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d105      	bne.n	80037aa <vPortExitCritical+0x42>
 800379e:	2300      	movs	r3, #0
 80037a0:	603b      	str	r3, [r7, #0]
        __asm volatile
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f383 8811 	msr	BASEPRI, r3
    }
 80037a8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80037aa:	bf00      	nop
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000010 	.word	0x20000010
 80037bc:	00000000 	.word	0x00000000

080037c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80037c0:	f3ef 8009 	mrs	r0, PSP
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	4b15      	ldr	r3, [pc, #84]	; (8003820 <pxCurrentTCBConst>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	f01e 0f10 	tst.w	lr, #16
 80037d0:	bf08      	it	eq
 80037d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80037d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037da:	6010      	str	r0, [r2, #0]
 80037dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80037e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037e4:	f380 8811 	msr	BASEPRI, r0
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f7ff faba 	bl	8002d68 <vTaskSwitchContext>
 80037f4:	f04f 0000 	mov.w	r0, #0
 80037f8:	f380 8811 	msr	BASEPRI, r0
 80037fc:	bc09      	pop	{r0, r3}
 80037fe:	6819      	ldr	r1, [r3, #0]
 8003800:	6808      	ldr	r0, [r1, #0]
 8003802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003806:	f01e 0f10 	tst.w	lr, #16
 800380a:	bf08      	it	eq
 800380c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003810:	f380 8809 	msr	PSP, r0
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	f3af 8000 	nop.w

08003820 <pxCurrentTCBConst>:
 8003820:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop

08003828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
        __asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	607b      	str	r3, [r7, #4]
    }
 8003840:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003842:	f001 fbcb 	bl	8004fdc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003846:	f7ff f975 	bl	8002b34 <xTaskIncrementTick>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d006      	beq.n	800385e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003850:	f001 fc22 	bl	8005098 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003854:	4b08      	ldr	r3, [pc, #32]	; (8003878 <SysTick_Handler+0x50>)
 8003856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e001      	b.n	8003862 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800385e:	f001 fbff 	bl	8005060 <SEGGER_SYSVIEW_RecordExitISR>
 8003862:	2300      	movs	r3, #0
 8003864:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f383 8811 	msr	BASEPRI, r3
    }
 800386c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003880:	4b0b      	ldr	r3, [pc, #44]	; (80038b0 <vPortSetupTimerInterrupt+0x34>)
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <vPortSetupTimerInterrupt+0x38>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <vPortSetupTimerInterrupt+0x3c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <vPortSetupTimerInterrupt+0x40>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	099b      	lsrs	r3, r3, #6
 8003898:	4a09      	ldr	r2, [pc, #36]	; (80038c0 <vPortSetupTimerInterrupt+0x44>)
 800389a:	3b01      	subs	r3, #1
 800389c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800389e:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <vPortSetupTimerInterrupt+0x34>)
 80038a0:	2207      	movs	r2, #7
 80038a2:	601a      	str	r2, [r3, #0]
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	e000e010 	.word	0xe000e010
 80038b4:	e000e018 	.word	0xe000e018
 80038b8:	20000000 	.word	0x20000000
 80038bc:	10624dd3 	.word	0x10624dd3
 80038c0:	e000e014 	.word	0xe000e014

080038c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80038c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80038d4 <vPortEnableVFP+0x10>
 80038c8:	6801      	ldr	r1, [r0, #0]
 80038ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80038ce:	6001      	str	r1, [r0, #0]
 80038d0:	4770      	bx	lr
 80038d2:	0000      	.short	0x0000
 80038d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80038d8:	bf00      	nop
 80038da:	bf00      	nop

080038dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80038e2:	f3ef 8305 	mrs	r3, IPSR
 80038e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b0f      	cmp	r3, #15
 80038ec:	d914      	bls.n	8003918 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80038ee:	4a17      	ldr	r2, [pc, #92]	; (800394c <vPortValidateInterruptPriority+0x70>)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4413      	add	r3, r2
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80038f8:	4b15      	ldr	r3, [pc, #84]	; (8003950 <vPortValidateInterruptPriority+0x74>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	7afa      	ldrb	r2, [r7, #11]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d20a      	bcs.n	8003918 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	607b      	str	r3, [r7, #4]
    }
 8003914:	bf00      	nop
 8003916:	e7fe      	b.n	8003916 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003918:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <vPortValidateInterruptPriority+0x78>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003920:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <vPortValidateInterruptPriority+0x7c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d90a      	bls.n	800393e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	603b      	str	r3, [r7, #0]
    }
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <vPortValidateInterruptPriority+0x60>
    }
 800393e:	bf00      	nop
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	e000e3f0 	.word	0xe000e3f0
 8003950:	20000138 	.word	0x20000138
 8003954:	e000ed0c 	.word	0xe000ed0c
 8003958:	2000013c 	.word	0x2000013c

0800395c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08a      	sub	sp, #40	; 0x28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003964:	2300      	movs	r3, #0
 8003966:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003968:	f7fe ffd6 	bl	8002918 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800396c:	4b65      	ldr	r3, [pc, #404]	; (8003b04 <pvPortMalloc+0x1a8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003974:	f000 f934 	bl	8003be0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003978:	4b63      	ldr	r3, [pc, #396]	; (8003b08 <pvPortMalloc+0x1ac>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	f040 80a7 	bne.w	8003ad4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d02d      	beq.n	80039e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800398c:	2208      	movs	r2, #8
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	429a      	cmp	r2, r3
 8003996:	d227      	bcs.n	80039e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003998:	2208      	movs	r2, #8
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4413      	add	r3, r2
 800399e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d021      	beq.n	80039ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f023 0307 	bic.w	r3, r3, #7
 80039b0:	3308      	adds	r3, #8
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d214      	bcs.n	80039e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f023 0307 	bic.w	r3, r3, #7
 80039be:	3308      	adds	r3, #8
 80039c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d010      	beq.n	80039ee <pvPortMalloc+0x92>
        __asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	617b      	str	r3, [r7, #20]
    }
 80039de:	bf00      	nop
 80039e0:	e7fe      	b.n	80039e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80039e6:	e002      	b.n	80039ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	607b      	str	r3, [r7, #4]
 80039ec:	e000      	b.n	80039f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80039ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d06e      	beq.n	8003ad4 <pvPortMalloc+0x178>
 80039f6:	4b45      	ldr	r3, [pc, #276]	; (8003b0c <pvPortMalloc+0x1b0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d869      	bhi.n	8003ad4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003a00:	4b43      	ldr	r3, [pc, #268]	; (8003b10 <pvPortMalloc+0x1b4>)
 8003a02:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003a04:	4b42      	ldr	r3, [pc, #264]	; (8003b10 <pvPortMalloc+0x1b4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a0a:	e004      	b.n	8003a16 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d903      	bls.n	8003a28 <pvPortMalloc+0xcc>
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1f1      	bne.n	8003a0c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003a28:	4b36      	ldr	r3, [pc, #216]	; (8003b04 <pvPortMalloc+0x1a8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d050      	beq.n	8003ad4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2208      	movs	r2, #8
 8003a38:	4413      	add	r3, r2
 8003a3a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	1ad2      	subs	r2, r2, r3
 8003a4c:	2308      	movs	r3, #8
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d91f      	bls.n	8003a94 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <pvPortMalloc+0x120>
        __asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	613b      	str	r3, [r7, #16]
    }
 8003a78:	bf00      	nop
 8003a7a:	e7fe      	b.n	8003a7a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	1ad2      	subs	r2, r2, r3
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a8e:	69b8      	ldr	r0, [r7, #24]
 8003a90:	f000 f908 	bl	8003ca4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a94:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <pvPortMalloc+0x1b0>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	4a1b      	ldr	r2, [pc, #108]	; (8003b0c <pvPortMalloc+0x1b0>)
 8003aa0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <pvPortMalloc+0x1b0>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <pvPortMalloc+0x1b8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d203      	bcs.n	8003ab6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003aae:	4b17      	ldr	r3, [pc, #92]	; (8003b0c <pvPortMalloc+0x1b0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a18      	ldr	r2, [pc, #96]	; (8003b14 <pvPortMalloc+0x1b8>)
 8003ab4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <pvPortMalloc+0x1ac>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003aca:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <pvPortMalloc+0x1bc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	4a11      	ldr	r2, [pc, #68]	; (8003b18 <pvPortMalloc+0x1bc>)
 8003ad2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003ad4:	f7fe ff2e 	bl	8002934 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <pvPortMalloc+0x19c>
        __asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	60fb      	str	r3, [r7, #12]
    }
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <pvPortMalloc+0x19a>
    return pvReturn;
 8003af8:	69fb      	ldr	r3, [r7, #28]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3728      	adds	r7, #40	; 0x28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20012d48 	.word	0x20012d48
 8003b08:	20012d5c 	.word	0x20012d5c
 8003b0c:	20012d4c 	.word	0x20012d4c
 8003b10:	20012d40 	.word	0x20012d40
 8003b14:	20012d50 	.word	0x20012d50
 8003b18:	20012d54 	.word	0x20012d54

08003b1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d04d      	beq.n	8003bca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003b2e:	2308      	movs	r3, #8
 8003b30:	425b      	negs	r3, r3
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4413      	add	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <vPortFree+0xb8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10a      	bne.n	8003b60 <vPortFree+0x44>
        __asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	60fb      	str	r3, [r7, #12]
    }
 8003b5c:	bf00      	nop
 8003b5e:	e7fe      	b.n	8003b5e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <vPortFree+0x62>
        __asm volatile
 8003b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6c:	f383 8811 	msr	BASEPRI, r3
 8003b70:	f3bf 8f6f 	isb	sy
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	60bb      	str	r3, [r7, #8]
    }
 8003b7a:	bf00      	nop
 8003b7c:	e7fe      	b.n	8003b7c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <vPortFree+0xb8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01e      	beq.n	8003bca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d11a      	bne.n	8003bca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <vPortFree+0xb8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003ba4:	f7fe feb8 	bl	8002918 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <vPortFree+0xbc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	4a09      	ldr	r2, [pc, #36]	; (8003bd8 <vPortFree+0xbc>)
 8003bb4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003bb6:	6938      	ldr	r0, [r7, #16]
 8003bb8:	f000 f874 	bl	8003ca4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003bbc:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <vPortFree+0xc0>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	4a06      	ldr	r2, [pc, #24]	; (8003bdc <vPortFree+0xc0>)
 8003bc4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003bc6:	f7fe feb5 	bl	8002934 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003bca:	bf00      	nop
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20012d5c 	.word	0x20012d5c
 8003bd8:	20012d4c 	.word	0x20012d4c
 8003bdc:	20012d58 	.word	0x20012d58

08003be0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003be6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003bea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003bec:	4b27      	ldr	r3, [pc, #156]	; (8003c8c <prvHeapInit+0xac>)
 8003bee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00c      	beq.n	8003c14 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3307      	adds	r3, #7
 8003bfe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0307 	bic.w	r3, r3, #7
 8003c06:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	4a1f      	ldr	r2, [pc, #124]	; (8003c8c <prvHeapInit+0xac>)
 8003c10:	4413      	add	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c18:	4a1d      	ldr	r2, [pc, #116]	; (8003c90 <prvHeapInit+0xb0>)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <prvHeapInit+0xb0>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	4413      	add	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0307 	bic.w	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <prvHeapInit+0xb4>)
 8003c40:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003c42:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <prvHeapInit+0xb4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2200      	movs	r2, #0
 8003c48:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003c4a:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <prvHeapInit+0xb4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	1ad2      	subs	r2, r2, r3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <prvHeapInit+0xb4>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <prvHeapInit+0xb8>)
 8003c6e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4a09      	ldr	r2, [pc, #36]	; (8003c9c <prvHeapInit+0xbc>)
 8003c76:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c78:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <prvHeapInit+0xc0>)
 8003c7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c7e:	601a      	str	r2, [r3, #0]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	20000140 	.word	0x20000140
 8003c90:	20012d40 	.word	0x20012d40
 8003c94:	20012d48 	.word	0x20012d48
 8003c98:	20012d50 	.word	0x20012d50
 8003c9c:	20012d4c 	.word	0x20012d4c
 8003ca0:	20012d5c 	.word	0x20012d5c

08003ca4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003cac:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <prvInsertBlockIntoFreeList+0xac>)
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	e002      	b.n	8003cb8 <prvInsertBlockIntoFreeList+0x14>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d8f7      	bhi.n	8003cb2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	4413      	add	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d108      	bne.n	8003ce6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	441a      	add	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	441a      	add	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d118      	bne.n	8003d2c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	4b15      	ldr	r3, [pc, #84]	; (8003d54 <prvInsertBlockIntoFreeList+0xb0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d00d      	beq.n	8003d22 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	441a      	add	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	e008      	b.n	8003d34 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d22:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <prvInsertBlockIntoFreeList+0xb0>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	e003      	b.n	8003d34 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d002      	beq.n	8003d42 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20012d40 	.word	0x20012d40
 8003d54:	20012d48 	.word	0x20012d48

08003d58 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003d66:	2205      	movs	r2, #5
 8003d68:	492b      	ldr	r1, [pc, #172]	; (8003e18 <SYSVIEW_AddTask+0xc0>)
 8003d6a:	68b8      	ldr	r0, [r7, #8]
 8003d6c:	f001 fc5e 	bl	800562c <memcmp>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d04b      	beq.n	8003e0e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003d76:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <SYSVIEW_AddTask+0xc4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b07      	cmp	r3, #7
 8003d7c:	d903      	bls.n	8003d86 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003d7e:	4828      	ldr	r0, [pc, #160]	; (8003e20 <SYSVIEW_AddTask+0xc8>)
 8003d80:	f001 fbd4 	bl	800552c <SEGGER_SYSVIEW_Warn>
    return;
 8003d84:	e044      	b.n	8003e10 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003d86:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <SYSVIEW_AddTask+0xc4>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4926      	ldr	r1, [pc, #152]	; (8003e24 <SYSVIEW_AddTask+0xcc>)
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003d9a:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <SYSVIEW_AddTask+0xc4>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4921      	ldr	r1, [pc, #132]	; (8003e24 <SYSVIEW_AddTask+0xcc>)
 8003da0:	4613      	mov	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4413      	add	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	3304      	adds	r3, #4
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003db0:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <SYSVIEW_AddTask+0xc4>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	491b      	ldr	r1, [pc, #108]	; (8003e24 <SYSVIEW_AddTask+0xcc>)
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003dc6:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <SYSVIEW_AddTask+0xc4>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4916      	ldr	r1, [pc, #88]	; (8003e24 <SYSVIEW_AddTask+0xcc>)
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	330c      	adds	r3, #12
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003ddc:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <SYSVIEW_AddTask+0xc4>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4910      	ldr	r1, [pc, #64]	; (8003e24 <SYSVIEW_AddTask+0xcc>)
 8003de2:	4613      	mov	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	3310      	adds	r3, #16
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <SYSVIEW_AddTask+0xc4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3301      	adds	r3, #1
 8003df8:	4a08      	ldr	r2, [pc, #32]	; (8003e1c <SYSVIEW_AddTask+0xc4>)
 8003dfa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f8ca 	bl	8003fa0 <SYSVIEW_SendTaskInfo>
 8003e0c:	e000      	b.n	8003e10 <SYSVIEW_AddTask+0xb8>
    return;
 8003e0e:	bf00      	nop

}
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	080056b8 	.word	0x080056b8
 8003e1c:	20012e00 	.word	0x20012e00
 8003e20:	080056c0 	.word	0x080056c0
 8003e24:	20012d60 	.word	0x20012d60

08003e28 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003e30:	4b59      	ldr	r3, [pc, #356]	; (8003f98 <SYSVIEW_DeleteTask+0x170>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80ab 	beq.w	8003f90 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	e00d      	b.n	8003e5c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003e40:	4956      	ldr	r1, [pc, #344]	; (8003f9c <SYSVIEW_DeleteTask+0x174>)
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d008      	beq.n	8003e68 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	4b4e      	ldr	r3, [pc, #312]	; (8003f98 <SYSVIEW_DeleteTask+0x170>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d3ec      	bcc.n	8003e40 <SYSVIEW_DeleteTask+0x18>
 8003e66:	e000      	b.n	8003e6a <SYSVIEW_DeleteTask+0x42>
      break;
 8003e68:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003e6a:	4b4b      	ldr	r3, [pc, #300]	; (8003f98 <SYSVIEW_DeleteTask+0x170>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d111      	bne.n	8003e9a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4a46      	ldr	r2, [pc, #280]	; (8003f9c <SYSVIEW_DeleteTask+0x174>)
 8003e82:	4413      	add	r3, r2
 8003e84:	2214      	movs	r2, #20
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f001 fbeb 	bl	8005664 <memset>
    _NumTasks--;
 8003e8e:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <SYSVIEW_DeleteTask+0x170>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	4a40      	ldr	r2, [pc, #256]	; (8003f98 <SYSVIEW_DeleteTask+0x170>)
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	e07b      	b.n	8003f92 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003e9a:	4b3f      	ldr	r3, [pc, #252]	; (8003f98 <SYSVIEW_DeleteTask+0x170>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d276      	bcs.n	8003f92 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003ea4:	4b3c      	ldr	r3, [pc, #240]	; (8003f98 <SYSVIEW_DeleteTask+0x170>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	1e5a      	subs	r2, r3, #1
 8003eaa:	493c      	ldr	r1, [pc, #240]	; (8003f9c <SYSVIEW_DeleteTask+0x174>)
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	6819      	ldr	r1, [r3, #0]
 8003eb8:	4838      	ldr	r0, [pc, #224]	; (8003f9c <SYSVIEW_DeleteTask+0x174>)
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4403      	add	r3, r0
 8003ec6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003ec8:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <SYSVIEW_DeleteTask+0x170>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	1e5a      	subs	r2, r3, #1
 8003ece:	4933      	ldr	r1, [pc, #204]	; (8003f9c <SYSVIEW_DeleteTask+0x174>)
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	3304      	adds	r3, #4
 8003edc:	6819      	ldr	r1, [r3, #0]
 8003ede:	482f      	ldr	r0, [pc, #188]	; (8003f9c <SYSVIEW_DeleteTask+0x174>)
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4403      	add	r3, r0
 8003eec:	3304      	adds	r3, #4
 8003eee:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003ef0:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <SYSVIEW_DeleteTask+0x170>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	1e5a      	subs	r2, r3, #1
 8003ef6:	4929      	ldr	r1, [pc, #164]	; (8003f9c <SYSVIEW_DeleteTask+0x174>)
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	3308      	adds	r3, #8
 8003f04:	6819      	ldr	r1, [r3, #0]
 8003f06:	4825      	ldr	r0, [pc, #148]	; (8003f9c <SYSVIEW_DeleteTask+0x174>)
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4403      	add	r3, r0
 8003f14:	3308      	adds	r3, #8
 8003f16:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003f18:	4b1f      	ldr	r3, [pc, #124]	; (8003f98 <SYSVIEW_DeleteTask+0x170>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	1e5a      	subs	r2, r3, #1
 8003f1e:	491f      	ldr	r1, [pc, #124]	; (8003f9c <SYSVIEW_DeleteTask+0x174>)
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	330c      	adds	r3, #12
 8003f2c:	6819      	ldr	r1, [r3, #0]
 8003f2e:	481b      	ldr	r0, [pc, #108]	; (8003f9c <SYSVIEW_DeleteTask+0x174>)
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4403      	add	r3, r0
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003f40:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <SYSVIEW_DeleteTask+0x170>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	1e5a      	subs	r2, r3, #1
 8003f46:	4915      	ldr	r1, [pc, #84]	; (8003f9c <SYSVIEW_DeleteTask+0x174>)
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	3310      	adds	r3, #16
 8003f54:	6819      	ldr	r1, [r3, #0]
 8003f56:	4811      	ldr	r0, [pc, #68]	; (8003f9c <SYSVIEW_DeleteTask+0x174>)
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4403      	add	r3, r0
 8003f64:	3310      	adds	r3, #16
 8003f66:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <SYSVIEW_DeleteTask+0x170>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	1e5a      	subs	r2, r3, #1
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4a09      	ldr	r2, [pc, #36]	; (8003f9c <SYSVIEW_DeleteTask+0x174>)
 8003f78:	4413      	add	r3, r2
 8003f7a:	2214      	movs	r2, #20
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 fb70 	bl	8005664 <memset>
    _NumTasks--;
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <SYSVIEW_DeleteTask+0x170>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	4a03      	ldr	r2, [pc, #12]	; (8003f98 <SYSVIEW_DeleteTask+0x170>)
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e000      	b.n	8003f92 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003f90:	bf00      	nop
  }
}
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20012e00 	.word	0x20012e00
 8003f9c:	20012d60 	.word	0x20012d60

08003fa0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08a      	sub	sp, #40	; 0x28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003fae:	f107 0314 	add.w	r3, r7, #20
 8003fb2:	2214      	movs	r2, #20
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 fb54 	bl	8005664 <memset>
  TaskInfo.TaskID     = TaskID;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003fd0:	f107 0314 	add.w	r3, r7, #20
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fed7 	bl	8004d88 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003fda:	bf00      	nop
 8003fdc:	3728      	adds	r7, #40	; 0x28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003fea:	4b1e      	ldr	r3, [pc, #120]	; (8004064 <USART2_IRQHandler+0x80>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d011      	beq.n	800401e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003ffa:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <USART2_IRQHandler+0x84>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 030b 	and.w	r3, r3, #11
 8004008:	2b00      	cmp	r3, #0
 800400a:	d108      	bne.n	800401e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800400c:	4b17      	ldr	r3, [pc, #92]	; (800406c <USART2_IRQHandler+0x88>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d004      	beq.n	800401e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004014:	4b15      	ldr	r3, [pc, #84]	; (800406c <USART2_IRQHandler+0x88>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	79fa      	ldrb	r2, [r7, #7]
 800401a:	4610      	mov	r0, r2
 800401c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01a      	beq.n	800405e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004028:	4b11      	ldr	r3, [pc, #68]	; (8004070 <USART2_IRQHandler+0x8c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <USART2_IRQHandler+0x8c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	1dfa      	adds	r2, r7, #7
 8004036:	4610      	mov	r0, r2
 8004038:	4798      	blx	r3
 800403a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004042:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <USART2_IRQHandler+0x90>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a0b      	ldr	r2, [pc, #44]	; (8004074 <USART2_IRQHandler+0x90>)
 8004048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	e006      	b.n	800405e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004050:	4b04      	ldr	r3, [pc, #16]	; (8004064 <USART2_IRQHandler+0x80>)
 8004052:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004054:	79fa      	ldrb	r2, [r7, #7]
 8004056:	4b04      	ldr	r3, [pc, #16]	; (8004068 <USART2_IRQHandler+0x84>)
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	e000      	b.n	800405e <USART2_IRQHandler+0x7a>
      return;
 800405c:	bf00      	nop
    }
  }
}
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40004400 	.word	0x40004400
 8004068:	40004404 	.word	0x40004404
 800406c:	20012e04 	.word	0x20012e04
 8004070:	20012e08 	.word	0x20012e08
 8004074:	4000440c 	.word	0x4000440c

08004078 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a04      	ldr	r2, [pc, #16]	; (8004094 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004086:	6013      	str	r3, [r2, #0]
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	4000440c 	.word	0x4000440c

08004098 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <_DoInit+0x98>)
 80040a0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2203      	movs	r2, #3
 80040a6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2203      	movs	r2, #3
 80040ac:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a20      	ldr	r2, [pc, #128]	; (8004134 <_DoInit+0x9c>)
 80040b2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a20      	ldr	r2, [pc, #128]	; (8004138 <_DoInit+0xa0>)
 80040b8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040c0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a17      	ldr	r2, [pc, #92]	; (8004134 <_DoInit+0x9c>)
 80040d8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a17      	ldr	r2, [pc, #92]	; (800413c <_DoInit+0xa4>)
 80040de:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2210      	movs	r2, #16
 80040e4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3307      	adds	r3, #7
 80040fc:	4a10      	ldr	r2, [pc, #64]	; (8004140 <_DoInit+0xa8>)
 80040fe:	6810      	ldr	r0, [r2, #0]
 8004100:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004102:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <_DoInit+0xac>)
 800410a:	6810      	ldr	r0, [r2, #0]
 800410c:	6018      	str	r0, [r3, #0]
 800410e:	8891      	ldrh	r1, [r2, #4]
 8004110:	7992      	ldrb	r2, [r2, #6]
 8004112:	8099      	strh	r1, [r3, #4]
 8004114:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004116:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004120:	f3bf 8f5f 	dmb	sy
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	20013388 	.word	0x20013388
 8004134:	08005710 	.word	0x08005710
 8004138:	20012e0c 	.word	0x20012e0c
 800413c:	2001320c 	.word	0x2001320c
 8004140:	0800571c 	.word	0x0800571c
 8004144:	08005720 	.word	0x08005720

08004148 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004148:	b580      	push	{r7, lr}
 800414a:	b08c      	sub	sp, #48	; 0x30
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004154:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <SEGGER_RTT_ReadNoLock+0x108>)
 8004156:	623b      	str	r3, [r7, #32]
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <SEGGER_RTT_ReadNoLock+0x1e>
 8004162:	f7ff ff99 	bl	8004098 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4613      	mov	r3, r2
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	4413      	add	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	3360      	adds	r3, #96	; 0x60
 8004172:	4a37      	ldr	r2, [pc, #220]	; (8004250 <SEGGER_RTT_ReadNoLock+0x108>)
 8004174:	4413      	add	r3, r2
 8004176:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004188:	2300      	movs	r3, #0
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800418c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	429a      	cmp	r2, r3
 8004192:	d92b      	bls.n	80041ec <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4293      	cmp	r3, r2
 80041a4:	bf28      	it	cs
 80041a6:	4613      	movcs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b0:	4413      	add	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	6939      	ldr	r1, [r7, #16]
 80041b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ba:	f001 fa45 	bl	8005648 <memcpy>
    NumBytesRead += NumBytesRem;
 80041be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	4413      	add	r3, r2
 80041c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80041c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	4413      	add	r3, r2
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80041d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	4413      	add	r3, r2
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d101      	bne.n	80041ec <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80041e8:	2300      	movs	r3, #0
 80041ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4293      	cmp	r3, r2
 80041fa:	bf28      	it	cs
 80041fc:	4613      	movcs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d019      	beq.n	800423a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420c:	4413      	add	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	6939      	ldr	r1, [r7, #16]
 8004214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004216:	f001 fa17 	bl	8005648 <memcpy>
    NumBytesRead += NumBytesRem;
 800421a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	4413      	add	r3, r2
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	4413      	add	r3, r2
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	4413      	add	r3, r2
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004244:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004248:	4618      	mov	r0, r3
 800424a:	3730      	adds	r7, #48	; 0x30
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20013388 	.word	0x20013388

08004254 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00f      	beq.n	800428a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800426a:	e002      	b.n	8004272 <_EncodeStr+0x1e>
      Len++;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	3301      	adds	r3, #1
 8004270:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	4413      	add	r3, r2
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f6      	bne.n	800426c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	429a      	cmp	r2, r3
 8004284:	d901      	bls.n	800428a <_EncodeStr+0x36>
      Len = Limit;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2bfe      	cmp	r3, #254	; 0xfe
 800428e:	d806      	bhi.n	800429e <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	60fa      	str	r2, [r7, #12]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	e011      	b.n	80042c2 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	60fa      	str	r2, [r7, #12]
 80042a4:	22ff      	movs	r2, #255	; 0xff
 80042a6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	60fa      	str	r2, [r7, #12]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	0a19      	lsrs	r1, r3, #8
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	60fa      	str	r2, [r7, #12]
 80042be:	b2ca      	uxtb	r2, r1
 80042c0:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80042c6:	e00a      	b.n	80042de <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	1c53      	adds	r3, r2, #1
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1c59      	adds	r1, r3, #1
 80042d2:	60f9      	str	r1, [r7, #12]
 80042d4:	7812      	ldrb	r2, [r2, #0]
 80042d6:	701a      	strb	r2, [r3, #0]
    n++;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3301      	adds	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d3f0      	bcc.n	80042c8 <_EncodeStr+0x74>
  }
  return pPayload;
 80042e6:	68fb      	ldr	r3, [r7, #12]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004312:	4b36      	ldr	r3, [pc, #216]	; (80043ec <_HandleIncomingPacket+0xe0>)
 8004314:	7e1b      	ldrb	r3, [r3, #24]
 8004316:	4618      	mov	r0, r3
 8004318:	1cfb      	adds	r3, r7, #3
 800431a:	2201      	movs	r2, #1
 800431c:	4619      	mov	r1, r3
 800431e:	f7ff ff13 	bl	8004148 <SEGGER_RTT_ReadNoLock>
 8004322:	4603      	mov	r3, r0
 8004324:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	dd54      	ble.n	80043d6 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	2b80      	cmp	r3, #128	; 0x80
 8004330:	d032      	beq.n	8004398 <_HandleIncomingPacket+0x8c>
 8004332:	2b80      	cmp	r3, #128	; 0x80
 8004334:	dc42      	bgt.n	80043bc <_HandleIncomingPacket+0xb0>
 8004336:	2b07      	cmp	r3, #7
 8004338:	dc16      	bgt.n	8004368 <_HandleIncomingPacket+0x5c>
 800433a:	2b00      	cmp	r3, #0
 800433c:	dd3e      	ble.n	80043bc <_HandleIncomingPacket+0xb0>
 800433e:	3b01      	subs	r3, #1
 8004340:	2b06      	cmp	r3, #6
 8004342:	d83b      	bhi.n	80043bc <_HandleIncomingPacket+0xb0>
 8004344:	a201      	add	r2, pc, #4	; (adr r2, 800434c <_HandleIncomingPacket+0x40>)
 8004346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434a:	bf00      	nop
 800434c:	0800436f 	.word	0x0800436f
 8004350:	08004375 	.word	0x08004375
 8004354:	0800437b 	.word	0x0800437b
 8004358:	08004381 	.word	0x08004381
 800435c:	08004387 	.word	0x08004387
 8004360:	0800438d 	.word	0x0800438d
 8004364:	08004393 	.word	0x08004393
 8004368:	2b7f      	cmp	r3, #127	; 0x7f
 800436a:	d036      	beq.n	80043da <_HandleIncomingPacket+0xce>
 800436c:	e026      	b.n	80043bc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800436e:	f000 fb8f 	bl	8004a90 <SEGGER_SYSVIEW_Start>
      break;
 8004372:	e037      	b.n	80043e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004374:	f000 fc48 	bl	8004c08 <SEGGER_SYSVIEW_Stop>
      break;
 8004378:	e034      	b.n	80043e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800437a:	f000 fdfd 	bl	8004f78 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800437e:	e031      	b.n	80043e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004380:	f000 fde6 	bl	8004f50 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004384:	e02e      	b.n	80043e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004386:	f000 fc65 	bl	8004c54 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800438a:	e02b      	b.n	80043e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800438c:	f001 f890 	bl	80054b0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004390:	e028      	b.n	80043e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004392:	f001 f86f 	bl	8005474 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004396:	e025      	b.n	80043e4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004398:	4b14      	ldr	r3, [pc, #80]	; (80043ec <_HandleIncomingPacket+0xe0>)
 800439a:	7e1b      	ldrb	r3, [r3, #24]
 800439c:	4618      	mov	r0, r3
 800439e:	1cfb      	adds	r3, r7, #3
 80043a0:	2201      	movs	r2, #1
 80043a2:	4619      	mov	r1, r3
 80043a4:	f7ff fed0 	bl	8004148 <SEGGER_RTT_ReadNoLock>
 80043a8:	4603      	mov	r3, r0
 80043aa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	dd15      	ble.n	80043de <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 ffdd 	bl	8005374 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80043ba:	e010      	b.n	80043de <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80043bc:	78fb      	ldrb	r3, [r7, #3]
 80043be:	b25b      	sxtb	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	da0e      	bge.n	80043e2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80043c4:	4b09      	ldr	r3, [pc, #36]	; (80043ec <_HandleIncomingPacket+0xe0>)
 80043c6:	7e1b      	ldrb	r3, [r3, #24]
 80043c8:	4618      	mov	r0, r3
 80043ca:	1cfb      	adds	r3, r7, #3
 80043cc:	2201      	movs	r2, #1
 80043ce:	4619      	mov	r1, r3
 80043d0:	f7ff feba 	bl	8004148 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80043d4:	e005      	b.n	80043e2 <_HandleIncomingPacket+0xd6>
    }
  }
 80043d6:	bf00      	nop
 80043d8:	e004      	b.n	80043e4 <_HandleIncomingPacket+0xd8>
      break;
 80043da:	bf00      	nop
 80043dc:	e002      	b.n	80043e4 <_HandleIncomingPacket+0xd8>
      break;
 80043de:	bf00      	nop
 80043e0:	e000      	b.n	80043e4 <_HandleIncomingPacket+0xd8>
      break;
 80043e2:	bf00      	nop
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	2001321c 	.word	0x2001321c

080043f0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08c      	sub	sp, #48	; 0x30
 80043f4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80043f6:	2301      	movs	r3, #1
 80043f8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80043fa:	1d3b      	adds	r3, r7, #4
 80043fc:	3301      	adds	r3, #1
 80043fe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004404:	4b32      	ldr	r3, [pc, #200]	; (80044d0 <_TrySendOverflowPacket+0xe0>)
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	62bb      	str	r3, [r7, #40]	; 0x28
 800440a:	e00b      	b.n	8004424 <_TrySendOverflowPacket+0x34>
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	b2da      	uxtb	r2, r3
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	1c59      	adds	r1, r3, #1
 8004414:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004416:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800441a:	b2d2      	uxtb	r2, r2
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	09db      	lsrs	r3, r3, #7
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	2b7f      	cmp	r3, #127	; 0x7f
 8004428:	d8f0      	bhi.n	800440c <_TrySendOverflowPacket+0x1c>
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800443a:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <_TrySendOverflowPacket+0xe4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004440:	4b23      	ldr	r3, [pc, #140]	; (80044d0 <_TrySendOverflowPacket+0xe0>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	623b      	str	r3, [r7, #32]
 8004452:	e00b      	b.n	800446c <_TrySendOverflowPacket+0x7c>
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	b2da      	uxtb	r2, r3
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	1c59      	adds	r1, r3, #1
 800445c:	6279      	str	r1, [r7, #36]	; 0x24
 800445e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004462:	b2d2      	uxtb	r2, r2
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	09db      	lsrs	r3, r3, #7
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	2b7f      	cmp	r3, #127	; 0x7f
 8004470:	d8f0      	bhi.n	8004454 <_TrySendOverflowPacket+0x64>
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	627a      	str	r2, [r7, #36]	; 0x24
 8004478:	6a3a      	ldr	r2, [r7, #32]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	701a      	strb	r2, [r3, #0]
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004482:	4b13      	ldr	r3, [pc, #76]	; (80044d0 <_TrySendOverflowPacket+0xe0>)
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	4618      	mov	r0, r3
 8004488:	1d3b      	adds	r3, r7, #4
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	461a      	mov	r2, r3
 8004490:	1d3b      	adds	r3, r7, #4
 8004492:	4619      	mov	r1, r3
 8004494:	f7fb febc 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004498:	4603      	mov	r3, r0
 800449a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800449c:	f7ff fdec 	bl	8004078 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d009      	beq.n	80044ba <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80044a6:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <_TrySendOverflowPacket+0xe0>)
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80044ac:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <_TrySendOverflowPacket+0xe0>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <_TrySendOverflowPacket+0xe0>)
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e004      	b.n	80044c4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80044ba:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <_TrySendOverflowPacket+0xe0>)
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	3301      	adds	r3, #1
 80044c0:	4a03      	ldr	r2, [pc, #12]	; (80044d0 <_TrySendOverflowPacket+0xe0>)
 80044c2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80044c4:	693b      	ldr	r3, [r7, #16]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3730      	adds	r7, #48	; 0x30
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	2001321c 	.word	0x2001321c
 80044d4:	e0001004 	.word	0xe0001004

080044d8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	; 0x28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80044e4:	4b6d      	ldr	r3, [pc, #436]	; (800469c <_SendPacket+0x1c4>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d010      	beq.n	800450e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80044ec:	4b6b      	ldr	r3, [pc, #428]	; (800469c <_SendPacket+0x1c4>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80a5 	beq.w	8004640 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80044f6:	4b69      	ldr	r3, [pc, #420]	; (800469c <_SendPacket+0x1c4>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d109      	bne.n	8004512 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80044fe:	f7ff ff77 	bl	80043f0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004502:	4b66      	ldr	r3, [pc, #408]	; (800469c <_SendPacket+0x1c4>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	f040 809c 	bne.w	8004644 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800450c:	e001      	b.n	8004512 <_SendPacket+0x3a>
    goto Send;
 800450e:	bf00      	nop
 8004510:	e000      	b.n	8004514 <_SendPacket+0x3c>
Send:
 8004512:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b1f      	cmp	r3, #31
 8004518:	d809      	bhi.n	800452e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800451a:	4b60      	ldr	r3, [pc, #384]	; (800469c <_SendPacket+0x1c4>)
 800451c:	69da      	ldr	r2, [r3, #28]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	fa22 f303 	lsr.w	r3, r2, r3
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	2b00      	cmp	r3, #0
 800452a:	f040 808d 	bne.w	8004648 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b17      	cmp	r3, #23
 8004532:	d807      	bhi.n	8004544 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3b01      	subs	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e03d      	b.n	80045c0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	2b7f      	cmp	r3, #127	; 0x7f
 8004550:	d912      	bls.n	8004578 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	09da      	lsrs	r2, r3, #7
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3b01      	subs	r3, #1
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	3a01      	subs	r2, #1
 800456a:	60fa      	str	r2, [r7, #12]
 800456c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004570:	b2da      	uxtb	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	e006      	b.n	8004586 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3b01      	subs	r3, #1
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	b2da      	uxtb	r2, r3
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b7f      	cmp	r3, #127	; 0x7f
 800458a:	d912      	bls.n	80045b2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	09da      	lsrs	r2, r3, #7
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	3b01      	subs	r3, #1
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	3a01      	subs	r2, #1
 80045a4:	60fa      	str	r2, [r7, #12]
 80045a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	701a      	strb	r2, [r3, #0]
 80045b0:	e006      	b.n	80045c0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045c0:	4b37      	ldr	r3, [pc, #220]	; (80046a0 <_SendPacket+0x1c8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80045c6:	4b35      	ldr	r3, [pc, #212]	; (800469c <_SendPacket+0x1c4>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	627b      	str	r3, [r7, #36]	; 0x24
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	623b      	str	r3, [r7, #32]
 80045d8:	e00b      	b.n	80045f2 <_SendPacket+0x11a>
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	1c59      	adds	r1, r3, #1
 80045e2:	6279      	str	r1, [r7, #36]	; 0x24
 80045e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	09db      	lsrs	r3, r3, #7
 80045f0:	623b      	str	r3, [r7, #32]
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	2b7f      	cmp	r3, #127	; 0x7f
 80045f6:	d8f0      	bhi.n	80045da <_SendPacket+0x102>
 80045f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	627a      	str	r2, [r7, #36]	; 0x24
 80045fe:	6a3a      	ldr	r2, [r7, #32]
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004608:	4b24      	ldr	r3, [pc, #144]	; (800469c <_SendPacket+0x1c4>)
 800460a:	785b      	ldrb	r3, [r3, #1]
 800460c:	4618      	mov	r0, r3
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	461a      	mov	r2, r3
 8004616:	68f9      	ldr	r1, [r7, #12]
 8004618:	f7fb fdfa 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800461c:	4603      	mov	r3, r0
 800461e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004620:	f7ff fd2a 	bl	8004078 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800462a:	4a1c      	ldr	r2, [pc, #112]	; (800469c <_SendPacket+0x1c4>)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	60d3      	str	r3, [r2, #12]
 8004630:	e00b      	b.n	800464a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004632:	4b1a      	ldr	r3, [pc, #104]	; (800469c <_SendPacket+0x1c4>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	3301      	adds	r3, #1
 8004638:	b2da      	uxtb	r2, r3
 800463a:	4b18      	ldr	r3, [pc, #96]	; (800469c <_SendPacket+0x1c4>)
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	e004      	b.n	800464a <_SendPacket+0x172>
    goto SendDone;
 8004640:	bf00      	nop
 8004642:	e002      	b.n	800464a <_SendPacket+0x172>
      goto SendDone;
 8004644:	bf00      	nop
 8004646:	e000      	b.n	800464a <_SendPacket+0x172>
      goto SendDone;
 8004648:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800464a:	4b14      	ldr	r3, [pc, #80]	; (800469c <_SendPacket+0x1c4>)
 800464c:	7e1b      	ldrb	r3, [r3, #24]
 800464e:	4619      	mov	r1, r3
 8004650:	4a14      	ldr	r2, [pc, #80]	; (80046a4 <_SendPacket+0x1cc>)
 8004652:	460b      	mov	r3, r1
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	440b      	add	r3, r1
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	4413      	add	r3, r2
 800465c:	336c      	adds	r3, #108	; 0x6c
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b0e      	ldr	r3, [pc, #56]	; (800469c <_SendPacket+0x1c4>)
 8004662:	7e1b      	ldrb	r3, [r3, #24]
 8004664:	4618      	mov	r0, r3
 8004666:	490f      	ldr	r1, [pc, #60]	; (80046a4 <_SendPacket+0x1cc>)
 8004668:	4603      	mov	r3, r0
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	4403      	add	r3, r0
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	440b      	add	r3, r1
 8004672:	3370      	adds	r3, #112	; 0x70
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d00b      	beq.n	8004692 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800467a:	4b08      	ldr	r3, [pc, #32]	; (800469c <_SendPacket+0x1c4>)
 800467c:	789b      	ldrb	r3, [r3, #2]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d107      	bne.n	8004692 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004682:	4b06      	ldr	r3, [pc, #24]	; (800469c <_SendPacket+0x1c4>)
 8004684:	2201      	movs	r2, #1
 8004686:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004688:	f7ff fe40 	bl	800430c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800468c:	4b03      	ldr	r3, [pc, #12]	; (800469c <_SendPacket+0x1c4>)
 800468e:	2200      	movs	r2, #0
 8004690:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004692:	bf00      	nop
 8004694:	3728      	adds	r7, #40	; 0x28
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	2001321c 	.word	0x2001321c
 80046a0:	e0001004 	.word	0xe0001004
 80046a4:	20013388 	.word	0x20013388

080046a8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80046b0:	f3ef 8311 	mrs	r3, BASEPRI
 80046b4:	f04f 0120 	mov.w	r1, #32
 80046b8:	f381 8811 	msr	BASEPRI, r1
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	4808      	ldr	r0, [pc, #32]	; (80046e0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80046c0:	f7ff fe18 	bl	80042f4 <_PreparePacket>
 80046c4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68b9      	ldr	r1, [r7, #8]
 80046ca:	68b8      	ldr	r0, [r7, #8]
 80046cc:	f7ff ff04 	bl	80044d8 <_SendPacket>
  RECORD_END();
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f383 8811 	msr	BASEPRI, r3
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	2001324c 	.word	0x2001324c

080046e4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80046ee:	f3ef 8311 	mrs	r3, BASEPRI
 80046f2:	f04f 0120 	mov.w	r1, #32
 80046f6:	f381 8811 	msr	BASEPRI, r1
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	4816      	ldr	r0, [pc, #88]	; (8004758 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80046fe:	f7ff fdf9 	bl	80042f4 <_PreparePacket>
 8004702:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	61fb      	str	r3, [r7, #28]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	61bb      	str	r3, [r7, #24]
 8004710:	e00b      	b.n	800472a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	1c59      	adds	r1, r3, #1
 800471a:	61f9      	str	r1, [r7, #28]
 800471c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	09db      	lsrs	r3, r3, #7
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	2b7f      	cmp	r3, #127	; 0x7f
 800472e:	d8f0      	bhi.n	8004712 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	61fa      	str	r2, [r7, #28]
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	68f9      	ldr	r1, [r7, #12]
 8004744:	6938      	ldr	r0, [r7, #16]
 8004746:	f7ff fec7 	bl	80044d8 <_SendPacket>
  RECORD_END();
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f383 8811 	msr	BASEPRI, r3
}
 8004750:	bf00      	nop
 8004752:	3720      	adds	r7, #32
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	2001324c 	.word	0x2001324c

0800475c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	; 0x30
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004768:	f3ef 8311 	mrs	r3, BASEPRI
 800476c:	f04f 0120 	mov.w	r1, #32
 8004770:	f381 8811 	msr	BASEPRI, r1
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	4825      	ldr	r0, [pc, #148]	; (800480c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004778:	f7ff fdbc 	bl	80042f4 <_PreparePacket>
 800477c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
 800478a:	e00b      	b.n	80047a4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	b2da      	uxtb	r2, r3
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004792:	1c59      	adds	r1, r3, #1
 8004794:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004796:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a0:	09db      	lsrs	r3, r3, #7
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80047a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a6:	2b7f      	cmp	r3, #127	; 0x7f
 80047a8:	d8f0      	bhi.n	800478c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	623b      	str	r3, [r7, #32]
 80047c2:	e00b      	b.n	80047dc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	1c59      	adds	r1, r3, #1
 80047cc:	6279      	str	r1, [r7, #36]	; 0x24
 80047ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047d2:	b2d2      	uxtb	r2, r2
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	09db      	lsrs	r3, r3, #7
 80047da:	623b      	str	r3, [r7, #32]
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	2b7f      	cmp	r3, #127	; 0x7f
 80047e0:	d8f0      	bhi.n	80047c4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	627a      	str	r2, [r7, #36]	; 0x24
 80047e8:	6a3a      	ldr	r2, [r7, #32]
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	6979      	ldr	r1, [r7, #20]
 80047f6:	69b8      	ldr	r0, [r7, #24]
 80047f8:	f7ff fe6e 	bl	80044d8 <_SendPacket>
  RECORD_END();
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f383 8811 	msr	BASEPRI, r3
}
 8004802:	bf00      	nop
 8004804:	3730      	adds	r7, #48	; 0x30
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	2001324c 	.word	0x2001324c

08004810 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004810:	b580      	push	{r7, lr}
 8004812:	b090      	sub	sp, #64	; 0x40
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800481e:	f3ef 8311 	mrs	r3, BASEPRI
 8004822:	f04f 0120 	mov.w	r1, #32
 8004826:	f381 8811 	msr	BASEPRI, r1
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	4840      	ldr	r0, [pc, #256]	; (8004930 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800482e:	f7ff fd61 	bl	80042f4 <_PreparePacket>
 8004832:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004840:	e00b      	b.n	800485a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	b2da      	uxtb	r2, r3
 8004846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004848:	1c59      	adds	r1, r3, #1
 800484a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800484c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004856:	09db      	lsrs	r3, r3, #7
 8004858:	63bb      	str	r3, [r7, #56]	; 0x38
 800485a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485c:	2b7f      	cmp	r3, #127	; 0x7f
 800485e:	d8f0      	bhi.n	8004842 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004866:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	637b      	str	r3, [r7, #52]	; 0x34
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	633b      	str	r3, [r7, #48]	; 0x30
 8004878:	e00b      	b.n	8004892 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	b2da      	uxtb	r2, r3
 800487e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004880:	1c59      	adds	r1, r3, #1
 8004882:	6379      	str	r1, [r7, #52]	; 0x34
 8004884:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	09db      	lsrs	r3, r3, #7
 8004890:	633b      	str	r3, [r7, #48]	; 0x30
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	2b7f      	cmp	r3, #127	; 0x7f
 8004896:	d8f0      	bhi.n	800487a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	637a      	str	r2, [r7, #52]	; 0x34
 800489e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b0:	e00b      	b.n	80048ca <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	1c59      	adds	r1, r3, #1
 80048ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	09db      	lsrs	r3, r3, #7
 80048c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	2b7f      	cmp	r3, #127	; 0x7f
 80048ce:	d8f0      	bhi.n	80048b2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80048d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
 80048e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e6:	623b      	str	r3, [r7, #32]
 80048e8:	e00b      	b.n	8004902 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	1c59      	adds	r1, r3, #1
 80048f2:	6279      	str	r1, [r7, #36]	; 0x24
 80048f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	701a      	strb	r2, [r3, #0]
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	09db      	lsrs	r3, r3, #7
 8004900:	623b      	str	r3, [r7, #32]
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	2b7f      	cmp	r3, #127	; 0x7f
 8004906:	d8f0      	bhi.n	80048ea <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	627a      	str	r2, [r7, #36]	; 0x24
 800490e:	6a3a      	ldr	r2, [r7, #32]
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	6979      	ldr	r1, [r7, #20]
 800491c:	69b8      	ldr	r0, [r7, #24]
 800491e:	f7ff fddb 	bl	80044d8 <_SendPacket>
  RECORD_END();
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f383 8811 	msr	BASEPRI, r3
}
 8004928:	bf00      	nop
 800492a:	3740      	adds	r7, #64	; 0x40
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	2001324c 	.word	0x2001324c

08004934 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8004934:	b580      	push	{r7, lr}
 8004936:	b092      	sub	sp, #72	; 0x48
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8004942:	f3ef 8311 	mrs	r3, BASEPRI
 8004946:	f04f 0120 	mov.w	r1, #32
 800494a:	f381 8811 	msr	BASEPRI, r1
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	484e      	ldr	r0, [pc, #312]	; (8004a8c <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8004952:	f7ff fccf 	bl	80042f4 <_PreparePacket>
 8004956:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	647b      	str	r3, [r7, #68]	; 0x44
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	643b      	str	r3, [r7, #64]	; 0x40
 8004964:	e00b      	b.n	800497e <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8004966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004968:	b2da      	uxtb	r2, r3
 800496a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496c:	1c59      	adds	r1, r3, #1
 800496e:	6479      	str	r1, [r7, #68]	; 0x44
 8004970:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800497a:	09db      	lsrs	r3, r3, #7
 800497c:	643b      	str	r3, [r7, #64]	; 0x40
 800497e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004980:	2b7f      	cmp	r3, #127	; 0x7f
 8004982:	d8f0      	bhi.n	8004966 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8004984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	647a      	str	r2, [r7, #68]	; 0x44
 800498a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004992:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	63bb      	str	r3, [r7, #56]	; 0x38
 800499c:	e00b      	b.n	80049b6 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a4:	1c59      	adds	r1, r3, #1
 80049a6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80049a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	701a      	strb	r2, [r3, #0]
 80049b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b2:	09db      	lsrs	r3, r3, #7
 80049b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80049b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b8:	2b7f      	cmp	r3, #127	; 0x7f
 80049ba:	d8f0      	bhi.n	800499e <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80049bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	637b      	str	r3, [r7, #52]	; 0x34
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	633b      	str	r3, [r7, #48]	; 0x30
 80049d4:	e00b      	b.n	80049ee <SEGGER_SYSVIEW_RecordU32x5+0xba>
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049dc:	1c59      	adds	r1, r3, #1
 80049de:	6379      	str	r1, [r7, #52]	; 0x34
 80049e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	09db      	lsrs	r3, r3, #7
 80049ec:	633b      	str	r3, [r7, #48]	; 0x30
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	2b7f      	cmp	r3, #127	; 0x7f
 80049f2:	d8f0      	bhi.n	80049d6 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80049f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	637a      	str	r2, [r7, #52]	; 0x34
 80049fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a0c:	e00b      	b.n	8004a26 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a14:	1c59      	adds	r1, r3, #1
 8004a16:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	09db      	lsrs	r3, r3, #7
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a28:	2b7f      	cmp	r3, #127	; 0x7f
 8004a2a:	d8f0      	bhi.n	8004a0e <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a42:	623b      	str	r3, [r7, #32]
 8004a44:	e00b      	b.n	8004a5e <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	1c59      	adds	r1, r3, #1
 8004a4e:	6279      	str	r1, [r7, #36]	; 0x24
 8004a50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	09db      	lsrs	r3, r3, #7
 8004a5c:	623b      	str	r3, [r7, #32]
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	2b7f      	cmp	r3, #127	; 0x7f
 8004a62:	d8f0      	bhi.n	8004a46 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	627a      	str	r2, [r7, #36]	; 0x24
 8004a6a:	6a3a      	ldr	r2, [r7, #32]
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	6979      	ldr	r1, [r7, #20]
 8004a78:	69b8      	ldr	r0, [r7, #24]
 8004a7a:	f7ff fd2d 	bl	80044d8 <_SendPacket>
  RECORD_END();
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f383 8811 	msr	BASEPRI, r3
}
 8004a84:	bf00      	nop
 8004a86:	3748      	adds	r7, #72	; 0x48
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	2001324c 	.word	0x2001324c

08004a90 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08c      	sub	sp, #48	; 0x30
 8004a94:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004a96:	4b59      	ldr	r3, [pc, #356]	; (8004bfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004aa0:	f04f 0120 	mov.w	r1, #32
 8004aa4:	f381 8811 	msr	BASEPRI, r1
 8004aa8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004aaa:	4b54      	ldr	r3, [pc, #336]	; (8004bfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004aac:	785b      	ldrb	r3, [r3, #1]
 8004aae:	220a      	movs	r2, #10
 8004ab0:	4953      	ldr	r1, [pc, #332]	; (8004c00 <SEGGER_SYSVIEW_Start+0x170>)
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fb fbac 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004abe:	f7ff fadb 	bl	8004078 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004ac2:	200a      	movs	r0, #10
 8004ac4:	f7ff fdf0 	bl	80046a8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ac8:	f3ef 8311 	mrs	r3, BASEPRI
 8004acc:	f04f 0120 	mov.w	r1, #32
 8004ad0:	f381 8811 	msr	BASEPRI, r1
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	484b      	ldr	r0, [pc, #300]	; (8004c04 <SEGGER_SYSVIEW_Start+0x174>)
 8004ad8:	f7ff fc0c 	bl	80042f4 <_PreparePacket>
 8004adc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae6:	4b45      	ldr	r3, [pc, #276]	; (8004bfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aec:	e00b      	b.n	8004b06 <SEGGER_SYSVIEW_Start+0x76>
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	1c59      	adds	r1, r3, #1
 8004af6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004af8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004afc:	b2d2      	uxtb	r2, r2
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	09db      	lsrs	r3, r3, #7
 8004b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	2b7f      	cmp	r3, #127	; 0x7f
 8004b0a:	d8f0      	bhi.n	8004aee <SEGGER_SYSVIEW_Start+0x5e>
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b20:	4b36      	ldr	r3, [pc, #216]	; (8004bfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	623b      	str	r3, [r7, #32]
 8004b26:	e00b      	b.n	8004b40 <SEGGER_SYSVIEW_Start+0xb0>
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	1c59      	adds	r1, r3, #1
 8004b30:	6279      	str	r1, [r7, #36]	; 0x24
 8004b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	09db      	lsrs	r3, r3, #7
 8004b3e:	623b      	str	r3, [r7, #32]
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	2b7f      	cmp	r3, #127	; 0x7f
 8004b44:	d8f0      	bhi.n	8004b28 <SEGGER_SYSVIEW_Start+0x98>
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004b4c:	6a3a      	ldr	r2, [r7, #32]
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	4b28      	ldr	r3, [pc, #160]	; (8004bfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	61bb      	str	r3, [r7, #24]
 8004b60:	e00b      	b.n	8004b7a <SEGGER_SYSVIEW_Start+0xea>
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	1c59      	adds	r1, r3, #1
 8004b6a:	61f9      	str	r1, [r7, #28]
 8004b6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	701a      	strb	r2, [r3, #0]
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	09db      	lsrs	r3, r3, #7
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b7e:	d8f0      	bhi.n	8004b62 <SEGGER_SYSVIEW_Start+0xd2>
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	61fa      	str	r2, [r7, #28]
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	701a      	strb	r2, [r3, #0]
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	2300      	movs	r3, #0
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	e00b      	b.n	8004bb2 <SEGGER_SYSVIEW_Start+0x122>
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	1c59      	adds	r1, r3, #1
 8004ba2:	6179      	str	r1, [r7, #20]
 8004ba4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ba8:	b2d2      	uxtb	r2, r2
 8004baa:	701a      	strb	r2, [r3, #0]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	09db      	lsrs	r3, r3, #7
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8004bb6:	d8f0      	bhi.n	8004b9a <SEGGER_SYSVIEW_Start+0x10a>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	617a      	str	r2, [r7, #20]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	701a      	strb	r2, [r3, #0]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004bc8:	2218      	movs	r2, #24
 8004bca:	6839      	ldr	r1, [r7, #0]
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff fc83 	bl	80044d8 <_SendPacket>
      RECORD_END();
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004bd8:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004be0:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <SEGGER_SYSVIEW_Start+0x16c>)
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004be6:	f000 f9c7 	bl	8004f78 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004bea:	f000 f9b1 	bl	8004f50 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004bee:	f000 fc5f 	bl	80054b0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004bf2:	bf00      	nop
 8004bf4:	3730      	adds	r7, #48	; 0x30
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	2001321c 	.word	0x2001321c
 8004c00:	08005740 	.word	0x08005740
 8004c04:	2001324c 	.word	0x2001324c

08004c08 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c12:	f04f 0120 	mov.w	r1, #32
 8004c16:	f381 8811 	msr	BASEPRI, r1
 8004c1a:	607b      	str	r3, [r7, #4]
 8004c1c:	480b      	ldr	r0, [pc, #44]	; (8004c4c <SEGGER_SYSVIEW_Stop+0x44>)
 8004c1e:	f7ff fb69 	bl	80042f4 <_PreparePacket>
 8004c22:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004c24:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <SEGGER_SYSVIEW_Stop+0x48>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d007      	beq.n	8004c3c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004c2c:	220b      	movs	r2, #11
 8004c2e:	6839      	ldr	r1, [r7, #0]
 8004c30:	6838      	ldr	r0, [r7, #0]
 8004c32:	f7ff fc51 	bl	80044d8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004c36:	4b06      	ldr	r3, [pc, #24]	; (8004c50 <SEGGER_SYSVIEW_Stop+0x48>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f383 8811 	msr	BASEPRI, r3
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	2001324c 	.word	0x2001324c
 8004c50:	2001321c 	.word	0x2001321c

08004c54 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08c      	sub	sp, #48	; 0x30
 8004c58:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c5e:	f04f 0120 	mov.w	r1, #32
 8004c62:	f381 8811 	msr	BASEPRI, r1
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	4845      	ldr	r0, [pc, #276]	; (8004d80 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004c6a:	f7ff fb43 	bl	80042f4 <_PreparePacket>
 8004c6e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c78:	4b42      	ldr	r3, [pc, #264]	; (8004d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c7e:	e00b      	b.n	8004c98 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c86:	1c59      	adds	r1, r3, #1
 8004c88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	09db      	lsrs	r3, r3, #7
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c9c:	d8f0      	bhi.n	8004c80 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb2:	4b34      	ldr	r3, [pc, #208]	; (8004d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	623b      	str	r3, [r7, #32]
 8004cb8:	e00b      	b.n	8004cd2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	1c59      	adds	r1, r3, #1
 8004cc2:	6279      	str	r1, [r7, #36]	; 0x24
 8004cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	09db      	lsrs	r3, r3, #7
 8004cd0:	623b      	str	r3, [r7, #32]
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd6:	d8f0      	bhi.n	8004cba <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	627a      	str	r2, [r7, #36]	; 0x24
 8004cde:	6a3a      	ldr	r2, [r7, #32]
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	61fb      	str	r3, [r7, #28]
 8004cec:	4b25      	ldr	r3, [pc, #148]	; (8004d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	e00b      	b.n	8004d0c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	1c59      	adds	r1, r3, #1
 8004cfc:	61f9      	str	r1, [r7, #28]
 8004cfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	09db      	lsrs	r3, r3, #7
 8004d0a:	61bb      	str	r3, [r7, #24]
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d10:	d8f0      	bhi.n	8004cf4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	61fa      	str	r2, [r7, #28]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	2300      	movs	r3, #0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	e00b      	b.n	8004d44 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	1c59      	adds	r1, r3, #1
 8004d34:	6179      	str	r1, [r7, #20]
 8004d36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	09db      	lsrs	r3, r3, #7
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	2b7f      	cmp	r3, #127	; 0x7f
 8004d48:	d8f0      	bhi.n	8004d2c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	617a      	str	r2, [r7, #20]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004d5a:	2218      	movs	r2, #24
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	68b8      	ldr	r0, [r7, #8]
 8004d60:	f7ff fbba 	bl	80044d8 <_SendPacket>
  RECORD_END();
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004d6a:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004d72:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	4798      	blx	r3
  }
}
 8004d78:	bf00      	nop
 8004d7a:	3730      	adds	r7, #48	; 0x30
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	2001324c 	.word	0x2001324c
 8004d84:	2001321c 	.word	0x2001321c

08004d88 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b092      	sub	sp, #72	; 0x48
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004d90:	f3ef 8311 	mrs	r3, BASEPRI
 8004d94:	f04f 0120 	mov.w	r1, #32
 8004d98:	f381 8811 	msr	BASEPRI, r1
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	486a      	ldr	r0, [pc, #424]	; (8004f48 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004da0:	f7ff faa8 	bl	80042f4 <_PreparePacket>
 8004da4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	647b      	str	r3, [r7, #68]	; 0x44
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b66      	ldr	r3, [pc, #408]	; (8004f4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	643b      	str	r3, [r7, #64]	; 0x40
 8004dba:	e00b      	b.n	8004dd4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc2:	1c59      	adds	r1, r3, #1
 8004dc4:	6479      	str	r1, [r7, #68]	; 0x44
 8004dc6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd0:	09db      	lsrs	r3, r3, #7
 8004dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd8:	d8f0      	bhi.n	8004dbc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	647a      	str	r2, [r7, #68]	; 0x44
 8004de0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004df4:	e00b      	b.n	8004e0e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfc:	1c59      	adds	r1, r3, #1
 8004dfe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004e00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	09db      	lsrs	r3, r3, #7
 8004e0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	2b7f      	cmp	r3, #127	; 0x7f
 8004e12:	d8f0      	bhi.n	8004df6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	701a      	strb	r2, [r3, #0]
 8004e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e22:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f7ff fa11 	bl	8004254 <_EncodeStr>
 8004e32:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004e34:	2209      	movs	r2, #9
 8004e36:	68f9      	ldr	r1, [r7, #12]
 8004e38:	6938      	ldr	r0, [r7, #16]
 8004e3a:	f7ff fb4d 	bl	80044d8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4b40      	ldr	r3, [pc, #256]	; (8004f4c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	633b      	str	r3, [r7, #48]	; 0x30
 8004e52:	e00b      	b.n	8004e6c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e5a:	1c59      	adds	r1, r3, #1
 8004e5c:	6379      	str	r1, [r7, #52]	; 0x34
 8004e5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	09db      	lsrs	r3, r3, #7
 8004e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e70:	d8f0      	bhi.n	8004e54 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	637a      	str	r2, [r7, #52]	; 0x34
 8004e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e8c:	e00b      	b.n	8004ea6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e94:	1c59      	adds	r1, r3, #1
 8004e96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	09db      	lsrs	r3, r3, #7
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	2b7f      	cmp	r3, #127	; 0x7f
 8004eaa:	d8f0      	bhi.n	8004e8e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	623b      	str	r3, [r7, #32]
 8004ec6:	e00b      	b.n	8004ee0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	1c59      	adds	r1, r3, #1
 8004ed0:	6279      	str	r1, [r7, #36]	; 0x24
 8004ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	6a3b      	ldr	r3, [r7, #32]
 8004edc:	09db      	lsrs	r3, r3, #7
 8004ede:	623b      	str	r3, [r7, #32]
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ee4:	d8f0      	bhi.n	8004ec8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	627a      	str	r2, [r7, #36]	; 0x24
 8004eec:	6a3a      	ldr	r2, [r7, #32]
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	2300      	movs	r3, #0
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	e00b      	b.n	8004f18 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	1c59      	adds	r1, r3, #1
 8004f08:	61f9      	str	r1, [r7, #28]
 8004f0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	09db      	lsrs	r3, r3, #7
 8004f16:	61bb      	str	r3, [r7, #24]
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f1c:	d8f0      	bhi.n	8004f00 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	61fa      	str	r2, [r7, #28]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004f2e:	2215      	movs	r2, #21
 8004f30:	68f9      	ldr	r1, [r7, #12]
 8004f32:	6938      	ldr	r0, [r7, #16]
 8004f34:	f7ff fad0 	bl	80044d8 <_SendPacket>
  RECORD_END();
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f383 8811 	msr	BASEPRI, r3
}
 8004f3e:	bf00      	nop
 8004f40:	3748      	adds	r7, #72	; 0x48
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	2001324c 	.word	0x2001324c
 8004f4c:	2001321c 	.word	0x2001321c

08004f50 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004f54:	4b07      	ldr	r3, [pc, #28]	; (8004f74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004f5c:	4b05      	ldr	r3, [pc, #20]	; (8004f74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004f66:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4798      	blx	r3
  }
}
 8004f6e:	bf00      	nop
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	2001321c 	.word	0x2001321c

08004f78 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004f78:	b590      	push	{r4, r7, lr}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004f7e:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d01a      	beq.n	8004fbc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004f86:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d015      	beq.n	8004fbc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004f90:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4798      	blx	r3
 8004f98:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004f9c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004f9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	000a      	movs	r2, r1
 8004fac:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004fae:	4613      	mov	r3, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	200d      	movs	r0, #13
 8004fb6:	f7ff fbd1 	bl	800475c <SEGGER_SYSVIEW_RecordU32x2>
 8004fba:	e006      	b.n	8004fca <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004fbc:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	200c      	movs	r0, #12
 8004fc4:	f7ff fb8e 	bl	80046e4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd90      	pop	{r4, r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	2001321c 	.word	0x2001321c
 8004fd8:	e0001004 	.word	0xe0001004

08004fdc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fe6:	f04f 0120 	mov.w	r1, #32
 8004fea:	f381 8811 	msr	BASEPRI, r1
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	4819      	ldr	r0, [pc, #100]	; (8005058 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004ff2:	f7ff f97f 	bl	80042f4 <_PreparePacket>
 8004ff6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004ffc:	4b17      	ldr	r3, [pc, #92]	; (800505c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005004:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	e00b      	b.n	8005028 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	b2da      	uxtb	r2, r3
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	1c59      	adds	r1, r3, #1
 8005018:	6179      	str	r1, [r7, #20]
 800501a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	09db      	lsrs	r3, r3, #7
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2b7f      	cmp	r3, #127	; 0x7f
 800502c:	d8f0      	bhi.n	8005010 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	617a      	str	r2, [r7, #20]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800503e:	2202      	movs	r2, #2
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	68b8      	ldr	r0, [r7, #8]
 8005044:	f7ff fa48 	bl	80044d8 <_SendPacket>
  RECORD_END();
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f383 8811 	msr	BASEPRI, r3
}
 800504e:	bf00      	nop
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	2001324c 	.word	0x2001324c
 800505c:	e000ed04 	.word	0xe000ed04

08005060 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005066:	f3ef 8311 	mrs	r3, BASEPRI
 800506a:	f04f 0120 	mov.w	r1, #32
 800506e:	f381 8811 	msr	BASEPRI, r1
 8005072:	607b      	str	r3, [r7, #4]
 8005074:	4807      	ldr	r0, [pc, #28]	; (8005094 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005076:	f7ff f93d 	bl	80042f4 <_PreparePacket>
 800507a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800507c:	2203      	movs	r2, #3
 800507e:	6839      	ldr	r1, [r7, #0]
 8005080:	6838      	ldr	r0, [r7, #0]
 8005082:	f7ff fa29 	bl	80044d8 <_SendPacket>
  RECORD_END();
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f383 8811 	msr	BASEPRI, r3
}
 800508c:	bf00      	nop
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	2001324c 	.word	0x2001324c

08005098 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800509e:	f3ef 8311 	mrs	r3, BASEPRI
 80050a2:	f04f 0120 	mov.w	r1, #32
 80050a6:	f381 8811 	msr	BASEPRI, r1
 80050aa:	607b      	str	r3, [r7, #4]
 80050ac:	4807      	ldr	r0, [pc, #28]	; (80050cc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80050ae:	f7ff f921 	bl	80042f4 <_PreparePacket>
 80050b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80050b4:	2212      	movs	r2, #18
 80050b6:	6839      	ldr	r1, [r7, #0]
 80050b8:	6838      	ldr	r0, [r7, #0]
 80050ba:	f7ff fa0d 	bl	80044d8 <_SendPacket>
  RECORD_END();
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f383 8811 	msr	BASEPRI, r3
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	2001324c 	.word	0x2001324c

080050d0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050d6:	f3ef 8311 	mrs	r3, BASEPRI
 80050da:	f04f 0120 	mov.w	r1, #32
 80050de:	f381 8811 	msr	BASEPRI, r1
 80050e2:	607b      	str	r3, [r7, #4]
 80050e4:	4807      	ldr	r0, [pc, #28]	; (8005104 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80050e6:	f7ff f905 	bl	80042f4 <_PreparePacket>
 80050ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80050ec:	2211      	movs	r2, #17
 80050ee:	6839      	ldr	r1, [r7, #0]
 80050f0:	6838      	ldr	r0, [r7, #0]
 80050f2:	f7ff f9f1 	bl	80044d8 <_SendPacket>
  RECORD_END();
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f383 8811 	msr	BASEPRI, r3
}
 80050fc:	bf00      	nop
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	2001324c 	.word	0x2001324c

08005108 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005110:	f3ef 8311 	mrs	r3, BASEPRI
 8005114:	f04f 0120 	mov.w	r1, #32
 8005118:	f381 8811 	msr	BASEPRI, r1
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	4819      	ldr	r0, [pc, #100]	; (8005184 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005120:	f7ff f8e8 	bl	80042f4 <_PreparePacket>
 8005124:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800512a:	4b17      	ldr	r3, [pc, #92]	; (8005188 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	e00b      	b.n	8005156 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	b2da      	uxtb	r2, r3
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	1c59      	adds	r1, r3, #1
 8005146:	61f9      	str	r1, [r7, #28]
 8005148:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	09db      	lsrs	r3, r3, #7
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b7f      	cmp	r3, #127	; 0x7f
 800515a:	d8f0      	bhi.n	800513e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	61fa      	str	r2, [r7, #28]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800516c:	2208      	movs	r2, #8
 800516e:	68f9      	ldr	r1, [r7, #12]
 8005170:	6938      	ldr	r0, [r7, #16]
 8005172:	f7ff f9b1 	bl	80044d8 <_SendPacket>
  RECORD_END();
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f383 8811 	msr	BASEPRI, r3
}
 800517c:	bf00      	nop
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	2001324c 	.word	0x2001324c
 8005188:	2001321c 	.word	0x2001321c

0800518c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005194:	f3ef 8311 	mrs	r3, BASEPRI
 8005198:	f04f 0120 	mov.w	r1, #32
 800519c:	f381 8811 	msr	BASEPRI, r1
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	4819      	ldr	r0, [pc, #100]	; (8005208 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80051a4:	f7ff f8a6 	bl	80042f4 <_PreparePacket>
 80051a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80051ae:	4b17      	ldr	r3, [pc, #92]	; (800520c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	61fb      	str	r3, [r7, #28]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	e00b      	b.n	80051da <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	1c59      	adds	r1, r3, #1
 80051ca:	61f9      	str	r1, [r7, #28]
 80051cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	701a      	strb	r2, [r3, #0]
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	09db      	lsrs	r3, r3, #7
 80051d8:	61bb      	str	r3, [r7, #24]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b7f      	cmp	r3, #127	; 0x7f
 80051de:	d8f0      	bhi.n	80051c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	61fa      	str	r2, [r7, #28]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80051f0:	2204      	movs	r2, #4
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	6938      	ldr	r0, [r7, #16]
 80051f6:	f7ff f96f 	bl	80044d8 <_SendPacket>
  RECORD_END();
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f383 8811 	msr	BASEPRI, r3
}
 8005200:	bf00      	nop
 8005202:	3720      	adds	r7, #32
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	2001324c 	.word	0x2001324c
 800520c:	2001321c 	.word	0x2001321c

08005210 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005218:	f3ef 8311 	mrs	r3, BASEPRI
 800521c:	f04f 0120 	mov.w	r1, #32
 8005220:	f381 8811 	msr	BASEPRI, r1
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	4819      	ldr	r0, [pc, #100]	; (800528c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005228:	f7ff f864 	bl	80042f4 <_PreparePacket>
 800522c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005232:	4b17      	ldr	r3, [pc, #92]	; (8005290 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	e00b      	b.n	800525e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	1c59      	adds	r1, r3, #1
 800524e:	61f9      	str	r1, [r7, #28]
 8005250:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	09db      	lsrs	r3, r3, #7
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	2b7f      	cmp	r3, #127	; 0x7f
 8005262:	d8f0      	bhi.n	8005246 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	61fa      	str	r2, [r7, #28]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005274:	2206      	movs	r2, #6
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	6938      	ldr	r0, [r7, #16]
 800527a:	f7ff f92d 	bl	80044d8 <_SendPacket>
  RECORD_END();
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f383 8811 	msr	BASEPRI, r3
}
 8005284:	bf00      	nop
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	2001324c 	.word	0x2001324c
 8005290:	2001321c 	.word	0x2001321c

08005294 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	; 0x28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800529e:	f3ef 8311 	mrs	r3, BASEPRI
 80052a2:	f04f 0120 	mov.w	r1, #32
 80052a6:	f381 8811 	msr	BASEPRI, r1
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	4827      	ldr	r0, [pc, #156]	; (800534c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80052ae:	f7ff f821 	bl	80042f4 <_PreparePacket>
 80052b2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80052b8:	4b25      	ldr	r3, [pc, #148]	; (8005350 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	623b      	str	r3, [r7, #32]
 80052ca:	e00b      	b.n	80052e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d2:	1c59      	adds	r1, r3, #1
 80052d4:	6279      	str	r1, [r7, #36]	; 0x24
 80052d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	09db      	lsrs	r3, r3, #7
 80052e2:	623b      	str	r3, [r7, #32]
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	2b7f      	cmp	r3, #127	; 0x7f
 80052e8:	d8f0      	bhi.n	80052cc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	627a      	str	r2, [r7, #36]	; 0x24
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	61fb      	str	r3, [r7, #28]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	61bb      	str	r3, [r7, #24]
 8005302:	e00b      	b.n	800531c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	b2da      	uxtb	r2, r3
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	1c59      	adds	r1, r3, #1
 800530c:	61f9      	str	r1, [r7, #28]
 800530e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	09db      	lsrs	r3, r3, #7
 800531a:	61bb      	str	r3, [r7, #24]
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	2b7f      	cmp	r3, #127	; 0x7f
 8005320:	d8f0      	bhi.n	8005304 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	61fa      	str	r2, [r7, #28]
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005332:	2207      	movs	r2, #7
 8005334:	68f9      	ldr	r1, [r7, #12]
 8005336:	6938      	ldr	r0, [r7, #16]
 8005338:	f7ff f8ce 	bl	80044d8 <_SendPacket>
  RECORD_END();
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f383 8811 	msr	BASEPRI, r3
}
 8005342:	bf00      	nop
 8005344:	3728      	adds	r7, #40	; 0x28
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	2001324c 	.word	0x2001324c
 8005350:	2001321c 	.word	0x2001321c

08005354 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800535c:	4b04      	ldr	r3, [pc, #16]	; (8005370 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	1ad3      	subs	r3, r2, r3
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	2001321c 	.word	0x2001321c

08005374 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005374:	b580      	push	{r7, lr}
 8005376:	b08c      	sub	sp, #48	; 0x30
 8005378:	af00      	add	r7, sp, #0
 800537a:	4603      	mov	r3, r0
 800537c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800537e:	4b3b      	ldr	r3, [pc, #236]	; (800546c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d06d      	beq.n	8005462 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005386:	4b39      	ldr	r3, [pc, #228]	; (800546c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800538c:	2300      	movs	r3, #0
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005390:	e008      	b.n	80053a4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d007      	beq.n	80053ae <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	3301      	adds	r3, #1
 80053a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d3f2      	bcc.n	8005392 <SEGGER_SYSVIEW_SendModule+0x1e>
 80053ac:	e000      	b.n	80053b0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80053ae:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80053b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d055      	beq.n	8005462 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053b6:	f3ef 8311 	mrs	r3, BASEPRI
 80053ba:	f04f 0120 	mov.w	r1, #32
 80053be:	f381 8811 	msr	BASEPRI, r1
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	482a      	ldr	r0, [pc, #168]	; (8005470 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80053c6:	f7fe ff95 	bl	80042f4 <_PreparePacket>
 80053ca:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	623b      	str	r3, [r7, #32]
 80053d8:	e00b      	b.n	80053f2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	1c59      	adds	r1, r3, #1
 80053e2:	6279      	str	r1, [r7, #36]	; 0x24
 80053e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	09db      	lsrs	r3, r3, #7
 80053f0:	623b      	str	r3, [r7, #32]
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	2b7f      	cmp	r3, #127	; 0x7f
 80053f6:	d8f0      	bhi.n	80053da <SEGGER_SYSVIEW_SendModule+0x66>
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	627a      	str	r2, [r7, #36]	; 0x24
 80053fe:	6a3a      	ldr	r2, [r7, #32]
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	701a      	strb	r2, [r3, #0]
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	e00b      	b.n	800542c <SEGGER_SYSVIEW_SendModule+0xb8>
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	b2da      	uxtb	r2, r3
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	1c59      	adds	r1, r3, #1
 800541c:	61f9      	str	r1, [r7, #28]
 800541e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	09db      	lsrs	r3, r3, #7
 800542a:	61bb      	str	r3, [r7, #24]
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	2b7f      	cmp	r3, #127	; 0x7f
 8005430:	d8f0      	bhi.n	8005414 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	61fa      	str	r2, [r7, #28]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2280      	movs	r2, #128	; 0x80
 8005448:	4619      	mov	r1, r3
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f7fe ff02 	bl	8004254 <_EncodeStr>
 8005450:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005452:	2216      	movs	r2, #22
 8005454:	68f9      	ldr	r1, [r7, #12]
 8005456:	6938      	ldr	r0, [r7, #16]
 8005458:	f7ff f83e 	bl	80044d8 <_SendPacket>
      RECORD_END();
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005462:	bf00      	nop
 8005464:	3730      	adds	r7, #48	; 0x30
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20013244 	.word	0x20013244
 8005470:	2001324c 	.word	0x2001324c

08005474 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800547a:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00f      	beq.n	80054a2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005482:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d002      	beq.n	8005496 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f2      	bne.n	8005488 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80054a2:	bf00      	nop
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20013244 	.word	0x20013244

080054b0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80054b6:	f3ef 8311 	mrs	r3, BASEPRI
 80054ba:	f04f 0120 	mov.w	r1, #32
 80054be:	f381 8811 	msr	BASEPRI, r1
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	4817      	ldr	r0, [pc, #92]	; (8005524 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80054c6:	f7fe ff15 	bl	80042f4 <_PreparePacket>
 80054ca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	4b14      	ldr	r3, [pc, #80]	; (8005528 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	e00b      	b.n	80054f4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	1c59      	adds	r1, r3, #1
 80054e4:	6179      	str	r1, [r7, #20]
 80054e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	09db      	lsrs	r3, r3, #7
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b7f      	cmp	r3, #127	; 0x7f
 80054f8:	d8f0      	bhi.n	80054dc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	617a      	str	r2, [r7, #20]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800550a:	221b      	movs	r2, #27
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	68b8      	ldr	r0, [r7, #8]
 8005510:	f7fe ffe2 	bl	80044d8 <_SendPacket>
  RECORD_END();
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f383 8811 	msr	BASEPRI, r3
}
 800551a:	bf00      	nop
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	2001324c 	.word	0x2001324c
 8005528:	20013248 	.word	0x20013248

0800552c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	; 0x28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005534:	f3ef 8311 	mrs	r3, BASEPRI
 8005538:	f04f 0120 	mov.w	r1, #32
 800553c:	f381 8811 	msr	BASEPRI, r1
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	4827      	ldr	r0, [pc, #156]	; (80055e0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005544:	f7fe fed6 	bl	80042f4 <_PreparePacket>
 8005548:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800554a:	2280      	movs	r2, #128	; 0x80
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	6938      	ldr	r0, [r7, #16]
 8005550:	f7fe fe80 	bl	8004254 <_EncodeStr>
 8005554:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
 800555a:	2301      	movs	r3, #1
 800555c:	623b      	str	r3, [r7, #32]
 800555e:	e00b      	b.n	8005578 <SEGGER_SYSVIEW_Warn+0x4c>
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	b2da      	uxtb	r2, r3
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	1c59      	adds	r1, r3, #1
 8005568:	6279      	str	r1, [r7, #36]	; 0x24
 800556a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	09db      	lsrs	r3, r3, #7
 8005576:	623b      	str	r3, [r7, #32]
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	2b7f      	cmp	r3, #127	; 0x7f
 800557c:	d8f0      	bhi.n	8005560 <SEGGER_SYSVIEW_Warn+0x34>
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	627a      	str	r2, [r7, #36]	; 0x24
 8005584:	6a3a      	ldr	r2, [r7, #32]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	61fb      	str	r3, [r7, #28]
 8005592:	2300      	movs	r3, #0
 8005594:	61bb      	str	r3, [r7, #24]
 8005596:	e00b      	b.n	80055b0 <SEGGER_SYSVIEW_Warn+0x84>
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	b2da      	uxtb	r2, r3
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	1c59      	adds	r1, r3, #1
 80055a0:	61f9      	str	r1, [r7, #28]
 80055a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	09db      	lsrs	r3, r3, #7
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2b7f      	cmp	r3, #127	; 0x7f
 80055b4:	d8f0      	bhi.n	8005598 <SEGGER_SYSVIEW_Warn+0x6c>
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	61fa      	str	r2, [r7, #28]
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80055c6:	221a      	movs	r2, #26
 80055c8:	68f9      	ldr	r1, [r7, #12]
 80055ca:	6938      	ldr	r0, [r7, #16]
 80055cc:	f7fe ff84 	bl	80044d8 <_SendPacket>
  RECORD_END();
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f383 8811 	msr	BASEPRI, r3
}
 80055d6:	bf00      	nop
 80055d8:	3728      	adds	r7, #40	; 0x28
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	2001324c 	.word	0x2001324c

080055e4 <__libc_init_array>:
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	4d0d      	ldr	r5, [pc, #52]	; (800561c <__libc_init_array+0x38>)
 80055e8:	4c0d      	ldr	r4, [pc, #52]	; (8005620 <__libc_init_array+0x3c>)
 80055ea:	1b64      	subs	r4, r4, r5
 80055ec:	10a4      	asrs	r4, r4, #2
 80055ee:	2600      	movs	r6, #0
 80055f0:	42a6      	cmp	r6, r4
 80055f2:	d109      	bne.n	8005608 <__libc_init_array+0x24>
 80055f4:	4d0b      	ldr	r5, [pc, #44]	; (8005624 <__libc_init_array+0x40>)
 80055f6:	4c0c      	ldr	r4, [pc, #48]	; (8005628 <__libc_init_array+0x44>)
 80055f8:	f000 f83c 	bl	8005674 <_init>
 80055fc:	1b64      	subs	r4, r4, r5
 80055fe:	10a4      	asrs	r4, r4, #2
 8005600:	2600      	movs	r6, #0
 8005602:	42a6      	cmp	r6, r4
 8005604:	d105      	bne.n	8005612 <__libc_init_array+0x2e>
 8005606:	bd70      	pop	{r4, r5, r6, pc}
 8005608:	f855 3b04 	ldr.w	r3, [r5], #4
 800560c:	4798      	blx	r3
 800560e:	3601      	adds	r6, #1
 8005610:	e7ee      	b.n	80055f0 <__libc_init_array+0xc>
 8005612:	f855 3b04 	ldr.w	r3, [r5], #4
 8005616:	4798      	blx	r3
 8005618:	3601      	adds	r6, #1
 800561a:	e7f2      	b.n	8005602 <__libc_init_array+0x1e>
 800561c:	08005754 	.word	0x08005754
 8005620:	08005754 	.word	0x08005754
 8005624:	08005754 	.word	0x08005754
 8005628:	08005758 	.word	0x08005758

0800562c <memcmp>:
 800562c:	b530      	push	{r4, r5, lr}
 800562e:	3901      	subs	r1, #1
 8005630:	2400      	movs	r4, #0
 8005632:	42a2      	cmp	r2, r4
 8005634:	d101      	bne.n	800563a <memcmp+0xe>
 8005636:	2000      	movs	r0, #0
 8005638:	e005      	b.n	8005646 <memcmp+0x1a>
 800563a:	5d03      	ldrb	r3, [r0, r4]
 800563c:	3401      	adds	r4, #1
 800563e:	5d0d      	ldrb	r5, [r1, r4]
 8005640:	42ab      	cmp	r3, r5
 8005642:	d0f6      	beq.n	8005632 <memcmp+0x6>
 8005644:	1b58      	subs	r0, r3, r5
 8005646:	bd30      	pop	{r4, r5, pc}

08005648 <memcpy>:
 8005648:	440a      	add	r2, r1
 800564a:	4291      	cmp	r1, r2
 800564c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005650:	d100      	bne.n	8005654 <memcpy+0xc>
 8005652:	4770      	bx	lr
 8005654:	b510      	push	{r4, lr}
 8005656:	f811 4b01 	ldrb.w	r4, [r1], #1
 800565a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800565e:	4291      	cmp	r1, r2
 8005660:	d1f9      	bne.n	8005656 <memcpy+0xe>
 8005662:	bd10      	pop	{r4, pc}

08005664 <memset>:
 8005664:	4402      	add	r2, r0
 8005666:	4603      	mov	r3, r0
 8005668:	4293      	cmp	r3, r2
 800566a:	d100      	bne.n	800566e <memset+0xa>
 800566c:	4770      	bx	lr
 800566e:	f803 1b01 	strb.w	r1, [r3], #1
 8005672:	e7f9      	b.n	8005668 <memset+0x4>

08005674 <_init>:
 8005674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005676:	bf00      	nop
 8005678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800567a:	bc08      	pop	{r3}
 800567c:	469e      	mov	lr, r3
 800567e:	4770      	bx	lr

08005680 <_fini>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	bf00      	nop
 8005684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005686:	bc08      	pop	{r3}
 8005688:	469e      	mov	lr, r3
 800568a:	4770      	bx	lr
